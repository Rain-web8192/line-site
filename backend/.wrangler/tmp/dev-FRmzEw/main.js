var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// .wrangler/tmp/bundle-Pb8ldM/strip-cf-connecting-ip-header.js
function stripCfConnectingIPHeader(input, init) {
  const request = new Request(input, init);
  request.headers.delete("CF-Connecting-IP");
  return request;
}
var init_strip_cf_connecting_ip_header = __esm({
  ".wrangler/tmp/bundle-Pb8ldM/strip-cf-connecting-ip-header.js"() {
    __name(stripCfConnectingIPHeader, "stripCfConnectingIPHeader");
    globalThis.fetch = new Proxy(globalThis.fetch, {
      apply(target, thisArg, argArray) {
        return Reflect.apply(target, thisArg, [
          stripCfConnectingIPHeader.apply(null, argArray)
        ]);
      }
    });
  }
});

// node_modules/unenv/dist/runtime/_internal/utils.mjs
function createNotImplementedError(name) {
  return new Error(`[unenv] ${name} is not implemented yet!`);
}
function notImplemented(name) {
  const fn = /* @__PURE__ */ __name(() => {
    throw createNotImplementedError(name);
  }, "fn");
  return Object.assign(fn, { __unenv__: true });
}
function notImplementedClass(name) {
  return class {
    __unenv__ = true;
    constructor() {
      throw new Error(`[unenv] ${name} is not implemented yet!`);
    }
  };
}
var init_utils = __esm({
  "node_modules/unenv/dist/runtime/_internal/utils.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    __name(createNotImplementedError, "createNotImplementedError");
    __name(notImplemented, "notImplemented");
    __name(notImplementedClass, "notImplementedClass");
  }
});

// node_modules/unenv/dist/runtime/node/internal/perf_hooks/performance.mjs
var _timeOrigin, _performanceNow, nodeTiming, PerformanceEntry, PerformanceMark, PerformanceMeasure, PerformanceResourceTiming, PerformanceObserverEntryList, Performance, PerformanceObserver, performance;
var init_performance = __esm({
  "node_modules/unenv/dist/runtime/node/internal/perf_hooks/performance.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    init_utils();
    _timeOrigin = globalThis.performance?.timeOrigin ?? Date.now();
    _performanceNow = globalThis.performance?.now ? globalThis.performance.now.bind(globalThis.performance) : () => Date.now() - _timeOrigin;
    nodeTiming = {
      name: "node",
      entryType: "node",
      startTime: 0,
      duration: 0,
      nodeStart: 0,
      v8Start: 0,
      bootstrapComplete: 0,
      environment: 0,
      loopStart: 0,
      loopExit: 0,
      idleTime: 0,
      uvMetricsInfo: {
        loopCount: 0,
        events: 0,
        eventsWaiting: 0
      },
      detail: void 0,
      toJSON() {
        return this;
      }
    };
    PerformanceEntry = class {
      __unenv__ = true;
      detail;
      entryType = "event";
      name;
      startTime;
      constructor(name, options) {
        this.name = name;
        this.startTime = options?.startTime || _performanceNow();
        this.detail = options?.detail;
      }
      get duration() {
        return _performanceNow() - this.startTime;
      }
      toJSON() {
        return {
          name: this.name,
          entryType: this.entryType,
          startTime: this.startTime,
          duration: this.duration,
          detail: this.detail
        };
      }
    };
    __name(PerformanceEntry, "PerformanceEntry");
    PerformanceMark = /* @__PURE__ */ __name(class PerformanceMark2 extends PerformanceEntry {
      entryType = "mark";
      constructor() {
        super(...arguments);
      }
      get duration() {
        return 0;
      }
    }, "PerformanceMark");
    PerformanceMeasure = class extends PerformanceEntry {
      entryType = "measure";
    };
    __name(PerformanceMeasure, "PerformanceMeasure");
    PerformanceResourceTiming = class extends PerformanceEntry {
      entryType = "resource";
      serverTiming = [];
      connectEnd = 0;
      connectStart = 0;
      decodedBodySize = 0;
      domainLookupEnd = 0;
      domainLookupStart = 0;
      encodedBodySize = 0;
      fetchStart = 0;
      initiatorType = "";
      name = "";
      nextHopProtocol = "";
      redirectEnd = 0;
      redirectStart = 0;
      requestStart = 0;
      responseEnd = 0;
      responseStart = 0;
      secureConnectionStart = 0;
      startTime = 0;
      transferSize = 0;
      workerStart = 0;
      responseStatus = 0;
    };
    __name(PerformanceResourceTiming, "PerformanceResourceTiming");
    PerformanceObserverEntryList = class {
      __unenv__ = true;
      getEntries() {
        return [];
      }
      getEntriesByName(_name, _type) {
        return [];
      }
      getEntriesByType(type) {
        return [];
      }
    };
    __name(PerformanceObserverEntryList, "PerformanceObserverEntryList");
    Performance = class {
      __unenv__ = true;
      timeOrigin = _timeOrigin;
      eventCounts = /* @__PURE__ */ new Map();
      _entries = [];
      _resourceTimingBufferSize = 0;
      navigation = void 0;
      timing = void 0;
      timerify(_fn, _options) {
        throw createNotImplementedError("Performance.timerify");
      }
      get nodeTiming() {
        return nodeTiming;
      }
      eventLoopUtilization() {
        return {};
      }
      markResourceTiming() {
        return new PerformanceResourceTiming("");
      }
      onresourcetimingbufferfull = null;
      now() {
        if (this.timeOrigin === _timeOrigin) {
          return _performanceNow();
        }
        return Date.now() - this.timeOrigin;
      }
      clearMarks(markName) {
        this._entries = markName ? this._entries.filter((e) => e.name !== markName) : this._entries.filter((e) => e.entryType !== "mark");
      }
      clearMeasures(measureName) {
        this._entries = measureName ? this._entries.filter((e) => e.name !== measureName) : this._entries.filter((e) => e.entryType !== "measure");
      }
      clearResourceTimings() {
        this._entries = this._entries.filter((e) => e.entryType !== "resource" || e.entryType !== "navigation");
      }
      getEntries() {
        return this._entries;
      }
      getEntriesByName(name, type) {
        return this._entries.filter((e) => e.name === name && (!type || e.entryType === type));
      }
      getEntriesByType(type) {
        return this._entries.filter((e) => e.entryType === type);
      }
      mark(name, options) {
        const entry = new PerformanceMark(name, options);
        this._entries.push(entry);
        return entry;
      }
      measure(measureName, startOrMeasureOptions, endMark) {
        let start;
        let end;
        if (typeof startOrMeasureOptions === "string") {
          start = this.getEntriesByName(startOrMeasureOptions, "mark")[0]?.startTime;
          end = this.getEntriesByName(endMark, "mark")[0]?.startTime;
        } else {
          start = Number.parseFloat(startOrMeasureOptions?.start) || this.now();
          end = Number.parseFloat(startOrMeasureOptions?.end) || this.now();
        }
        const entry = new PerformanceMeasure(measureName, {
          startTime: start,
          detail: {
            start,
            end
          }
        });
        this._entries.push(entry);
        return entry;
      }
      setResourceTimingBufferSize(maxSize) {
        this._resourceTimingBufferSize = maxSize;
      }
      addEventListener(type, listener, options) {
        throw createNotImplementedError("Performance.addEventListener");
      }
      removeEventListener(type, listener, options) {
        throw createNotImplementedError("Performance.removeEventListener");
      }
      dispatchEvent(event) {
        throw createNotImplementedError("Performance.dispatchEvent");
      }
      toJSON() {
        return this;
      }
    };
    __name(Performance, "Performance");
    PerformanceObserver = class {
      __unenv__ = true;
      _callback = null;
      constructor(callback) {
        this._callback = callback;
      }
      takeRecords() {
        return [];
      }
      disconnect() {
        throw createNotImplementedError("PerformanceObserver.disconnect");
      }
      observe(options) {
        throw createNotImplementedError("PerformanceObserver.observe");
      }
      bind(fn) {
        return fn;
      }
      runInAsyncScope(fn, thisArg, ...args) {
        return fn.call(thisArg, ...args);
      }
      asyncId() {
        return 0;
      }
      triggerAsyncId() {
        return 0;
      }
      emitDestroy() {
        return this;
      }
    };
    __name(PerformanceObserver, "PerformanceObserver");
    __publicField(PerformanceObserver, "supportedEntryTypes", []);
    performance = globalThis.performance && "addEventListener" in globalThis.performance ? globalThis.performance : new Performance();
  }
});

// node_modules/unenv/dist/runtime/node/perf_hooks.mjs
var init_perf_hooks = __esm({
  "node_modules/unenv/dist/runtime/node/perf_hooks.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    init_performance();
  }
});

// node_modules/@cloudflare/unenv-preset/dist/runtime/polyfill/performance.mjs
var init_performance2 = __esm({
  "node_modules/@cloudflare/unenv-preset/dist/runtime/polyfill/performance.mjs"() {
    init_perf_hooks();
    globalThis.performance = performance;
    globalThis.Performance = Performance;
    globalThis.PerformanceEntry = PerformanceEntry;
    globalThis.PerformanceMark = PerformanceMark;
    globalThis.PerformanceMeasure = PerformanceMeasure;
    globalThis.PerformanceObserver = PerformanceObserver;
    globalThis.PerformanceObserverEntryList = PerformanceObserverEntryList;
    globalThis.PerformanceResourceTiming = PerformanceResourceTiming;
  }
});

// node_modules/unenv/dist/runtime/mock/noop.mjs
var noop_default;
var init_noop = __esm({
  "node_modules/unenv/dist/runtime/mock/noop.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    noop_default = Object.assign(() => {
    }, { __unenv__: true });
  }
});

// node_modules/unenv/dist/runtime/node/console.mjs
import { Writable } from "node:stream";
var _console, _ignoreErrors, _stderr, _stdout, log, info, trace, debug, table, error, warn, createTask, clear, count, countReset, dir, dirxml, group, groupEnd, groupCollapsed, profile, profileEnd, time, timeEnd, timeLog, timeStamp, Console, _times, _stdoutErrorHandler, _stderrErrorHandler;
var init_console = __esm({
  "node_modules/unenv/dist/runtime/node/console.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    init_noop();
    init_utils();
    _console = globalThis.console;
    _ignoreErrors = true;
    _stderr = new Writable();
    _stdout = new Writable();
    log = _console?.log ?? noop_default;
    info = _console?.info ?? log;
    trace = _console?.trace ?? info;
    debug = _console?.debug ?? log;
    table = _console?.table ?? log;
    error = _console?.error ?? log;
    warn = _console?.warn ?? error;
    createTask = _console?.createTask ?? /* @__PURE__ */ notImplemented("console.createTask");
    clear = _console?.clear ?? noop_default;
    count = _console?.count ?? noop_default;
    countReset = _console?.countReset ?? noop_default;
    dir = _console?.dir ?? noop_default;
    dirxml = _console?.dirxml ?? noop_default;
    group = _console?.group ?? noop_default;
    groupEnd = _console?.groupEnd ?? noop_default;
    groupCollapsed = _console?.groupCollapsed ?? noop_default;
    profile = _console?.profile ?? noop_default;
    profileEnd = _console?.profileEnd ?? noop_default;
    time = _console?.time ?? noop_default;
    timeEnd = _console?.timeEnd ?? noop_default;
    timeLog = _console?.timeLog ?? noop_default;
    timeStamp = _console?.timeStamp ?? noop_default;
    Console = _console?.Console ?? /* @__PURE__ */ notImplementedClass("console.Console");
    _times = /* @__PURE__ */ new Map();
    _stdoutErrorHandler = noop_default;
    _stderrErrorHandler = noop_default;
  }
});

// node_modules/@cloudflare/unenv-preset/dist/runtime/node/console.mjs
var workerdConsole, assert, clear2, context, count2, countReset2, createTask2, debug2, dir2, dirxml2, error2, group2, groupCollapsed2, groupEnd2, info2, log2, profile2, profileEnd2, table2, time2, timeEnd2, timeLog2, timeStamp2, trace2, warn2, console_default;
var init_console2 = __esm({
  "node_modules/@cloudflare/unenv-preset/dist/runtime/node/console.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    init_console();
    workerdConsole = globalThis["console"];
    ({
      assert,
      clear: clear2,
      context: (
        // @ts-expect-error undocumented public API
        context
      ),
      count: count2,
      countReset: countReset2,
      createTask: (
        // @ts-expect-error undocumented public API
        createTask2
      ),
      debug: debug2,
      dir: dir2,
      dirxml: dirxml2,
      error: error2,
      group: group2,
      groupCollapsed: groupCollapsed2,
      groupEnd: groupEnd2,
      info: info2,
      log: log2,
      profile: profile2,
      profileEnd: profileEnd2,
      table: table2,
      time: time2,
      timeEnd: timeEnd2,
      timeLog: timeLog2,
      timeStamp: timeStamp2,
      trace: trace2,
      warn: warn2
    } = workerdConsole);
    Object.assign(workerdConsole, {
      Console,
      _ignoreErrors,
      _stderr,
      _stderrErrorHandler,
      _stdout,
      _stdoutErrorHandler,
      _times
    });
    console_default = workerdConsole;
  }
});

// node_modules/wrangler/_virtual_unenv_global_polyfill-@cloudflare-unenv-preset-node-console
var init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console = __esm({
  "node_modules/wrangler/_virtual_unenv_global_polyfill-@cloudflare-unenv-preset-node-console"() {
    init_console2();
    globalThis.console = console_default;
  }
});

// node_modules/unenv/dist/runtime/node/internal/process/hrtime.mjs
var hrtime;
var init_hrtime = __esm({
  "node_modules/unenv/dist/runtime/node/internal/process/hrtime.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    hrtime = /* @__PURE__ */ Object.assign(/* @__PURE__ */ __name(function hrtime2(startTime) {
      const now = Date.now();
      const seconds = Math.trunc(now / 1e3);
      const nanos = now % 1e3 * 1e6;
      if (startTime) {
        let diffSeconds = seconds - startTime[0];
        let diffNanos = nanos - startTime[0];
        if (diffNanos < 0) {
          diffSeconds = diffSeconds - 1;
          diffNanos = 1e9 + diffNanos;
        }
        return [diffSeconds, diffNanos];
      }
      return [seconds, nanos];
    }, "hrtime"), { bigint: /* @__PURE__ */ __name(function bigint() {
      return BigInt(Date.now() * 1e6);
    }, "bigint") });
  }
});

// node_modules/unenv/dist/runtime/node/internal/tty/read-stream.mjs
import { Socket } from "node:net";
var ReadStream;
var init_read_stream = __esm({
  "node_modules/unenv/dist/runtime/node/internal/tty/read-stream.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    ReadStream = class extends Socket {
      fd;
      constructor(fd) {
        super();
        this.fd = fd;
      }
      isRaw = false;
      setRawMode(mode) {
        this.isRaw = mode;
        return this;
      }
      isTTY = false;
    };
    __name(ReadStream, "ReadStream");
  }
});

// node_modules/unenv/dist/runtime/node/internal/tty/write-stream.mjs
import { Socket as Socket2 } from "node:net";
var WriteStream;
var init_write_stream = __esm({
  "node_modules/unenv/dist/runtime/node/internal/tty/write-stream.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    WriteStream = class extends Socket2 {
      fd;
      constructor(fd) {
        super();
        this.fd = fd;
      }
      clearLine(dir3, callback) {
        callback && callback();
        return false;
      }
      clearScreenDown(callback) {
        callback && callback();
        return false;
      }
      cursorTo(x, y, callback) {
        callback && typeof callback === "function" && callback();
        return false;
      }
      moveCursor(dx, dy, callback) {
        callback && callback();
        return false;
      }
      getColorDepth(env2) {
        return 1;
      }
      hasColors(count3, env2) {
        return false;
      }
      getWindowSize() {
        return [this.columns, this.rows];
      }
      columns = 80;
      rows = 24;
      isTTY = false;
    };
    __name(WriteStream, "WriteStream");
  }
});

// node_modules/unenv/dist/runtime/node/tty.mjs
var init_tty = __esm({
  "node_modules/unenv/dist/runtime/node/tty.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    init_read_stream();
    init_write_stream();
  }
});

// node_modules/unenv/dist/runtime/node/internal/process/process.mjs
import { EventEmitter } from "node:events";
var Process;
var init_process = __esm({
  "node_modules/unenv/dist/runtime/node/internal/process/process.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    init_tty();
    init_utils();
    Process = class extends EventEmitter {
      env;
      hrtime;
      nextTick;
      constructor(impl) {
        super();
        this.env = impl.env;
        this.hrtime = impl.hrtime;
        this.nextTick = impl.nextTick;
        for (const prop of [...Object.getOwnPropertyNames(Process.prototype), ...Object.getOwnPropertyNames(EventEmitter.prototype)]) {
          const value = this[prop];
          if (typeof value === "function") {
            this[prop] = value.bind(this);
          }
        }
      }
      emitWarning(warning, type, code) {
        console.warn(`${code ? `[${code}] ` : ""}${type ? `${type}: ` : ""}${warning}`);
      }
      emit(...args) {
        return super.emit(...args);
      }
      listeners(eventName) {
        return super.listeners(eventName);
      }
      #stdin;
      #stdout;
      #stderr;
      get stdin() {
        return this.#stdin ??= new ReadStream(0);
      }
      get stdout() {
        return this.#stdout ??= new WriteStream(1);
      }
      get stderr() {
        return this.#stderr ??= new WriteStream(2);
      }
      #cwd = "/";
      chdir(cwd2) {
        this.#cwd = cwd2;
      }
      cwd() {
        return this.#cwd;
      }
      arch = "";
      platform = "";
      argv = [];
      argv0 = "";
      execArgv = [];
      execPath = "";
      title = "";
      pid = 200;
      ppid = 100;
      get version() {
        return "";
      }
      get versions() {
        return {};
      }
      get allowedNodeEnvironmentFlags() {
        return /* @__PURE__ */ new Set();
      }
      get sourceMapsEnabled() {
        return false;
      }
      get debugPort() {
        return 0;
      }
      get throwDeprecation() {
        return false;
      }
      get traceDeprecation() {
        return false;
      }
      get features() {
        return {};
      }
      get release() {
        return {};
      }
      get connected() {
        return false;
      }
      get config() {
        return {};
      }
      get moduleLoadList() {
        return [];
      }
      constrainedMemory() {
        return 0;
      }
      availableMemory() {
        return 0;
      }
      uptime() {
        return 0;
      }
      resourceUsage() {
        return {};
      }
      ref() {
      }
      unref() {
      }
      umask() {
        throw createNotImplementedError("process.umask");
      }
      getBuiltinModule() {
        return void 0;
      }
      getActiveResourcesInfo() {
        throw createNotImplementedError("process.getActiveResourcesInfo");
      }
      exit() {
        throw createNotImplementedError("process.exit");
      }
      reallyExit() {
        throw createNotImplementedError("process.reallyExit");
      }
      kill() {
        throw createNotImplementedError("process.kill");
      }
      abort() {
        throw createNotImplementedError("process.abort");
      }
      dlopen() {
        throw createNotImplementedError("process.dlopen");
      }
      setSourceMapsEnabled() {
        throw createNotImplementedError("process.setSourceMapsEnabled");
      }
      loadEnvFile() {
        throw createNotImplementedError("process.loadEnvFile");
      }
      disconnect() {
        throw createNotImplementedError("process.disconnect");
      }
      cpuUsage() {
        throw createNotImplementedError("process.cpuUsage");
      }
      setUncaughtExceptionCaptureCallback() {
        throw createNotImplementedError("process.setUncaughtExceptionCaptureCallback");
      }
      hasUncaughtExceptionCaptureCallback() {
        throw createNotImplementedError("process.hasUncaughtExceptionCaptureCallback");
      }
      initgroups() {
        throw createNotImplementedError("process.initgroups");
      }
      openStdin() {
        throw createNotImplementedError("process.openStdin");
      }
      assert() {
        throw createNotImplementedError("process.assert");
      }
      binding() {
        throw createNotImplementedError("process.binding");
      }
      permission = { has: /* @__PURE__ */ notImplemented("process.permission.has") };
      report = {
        directory: "",
        filename: "",
        signal: "SIGUSR2",
        compact: false,
        reportOnFatalError: false,
        reportOnSignal: false,
        reportOnUncaughtException: false,
        getReport: /* @__PURE__ */ notImplemented("process.report.getReport"),
        writeReport: /* @__PURE__ */ notImplemented("process.report.writeReport")
      };
      finalization = {
        register: /* @__PURE__ */ notImplemented("process.finalization.register"),
        unregister: /* @__PURE__ */ notImplemented("process.finalization.unregister"),
        registerBeforeExit: /* @__PURE__ */ notImplemented("process.finalization.registerBeforeExit")
      };
      memoryUsage = Object.assign(() => ({
        arrayBuffers: 0,
        rss: 0,
        external: 0,
        heapTotal: 0,
        heapUsed: 0
      }), { rss: () => 0 });
      mainModule = void 0;
      domain = void 0;
      send = void 0;
      exitCode = void 0;
      channel = void 0;
      getegid = void 0;
      geteuid = void 0;
      getgid = void 0;
      getgroups = void 0;
      getuid = void 0;
      setegid = void 0;
      seteuid = void 0;
      setgid = void 0;
      setgroups = void 0;
      setuid = void 0;
      _events = void 0;
      _eventsCount = void 0;
      _exiting = void 0;
      _maxListeners = void 0;
      _debugEnd = void 0;
      _debugProcess = void 0;
      _fatalException = void 0;
      _getActiveHandles = void 0;
      _getActiveRequests = void 0;
      _kill = void 0;
      _preload_modules = void 0;
      _rawDebug = void 0;
      _startProfilerIdleNotifier = void 0;
      _stopProfilerIdleNotifier = void 0;
      _tickCallback = void 0;
      _disconnect = void 0;
      _handleQueue = void 0;
      _pendingMessage = void 0;
      _channel = void 0;
      _send = void 0;
      _linkedBinding = void 0;
    };
    __name(Process, "Process");
  }
});

// node_modules/@cloudflare/unenv-preset/dist/runtime/node/process.mjs
var globalProcess, getBuiltinModule, exit, platform, nextTick, unenvProcess, abort, addListener, allowedNodeEnvironmentFlags, hasUncaughtExceptionCaptureCallback, setUncaughtExceptionCaptureCallback, loadEnvFile, sourceMapsEnabled, arch, argv, argv0, chdir, config, connected, constrainedMemory, availableMemory, cpuUsage, cwd, debugPort, dlopen, disconnect, emit, emitWarning, env, eventNames, execArgv, execPath, finalization, features, getActiveResourcesInfo, getMaxListeners, hrtime3, kill, listeners, listenerCount, memoryUsage, on, off, once, pid, ppid, prependListener, prependOnceListener, rawListeners, release, removeAllListeners, removeListener, report, resourceUsage, setMaxListeners, setSourceMapsEnabled, stderr, stdin, stdout, title, throwDeprecation, traceDeprecation, umask, uptime, version, versions, domain, initgroups, moduleLoadList, reallyExit, openStdin, assert2, binding, send, exitCode, channel, getegid, geteuid, getgid, getgroups, getuid, setegid, seteuid, setgid, setgroups, setuid, permission, mainModule, _events, _eventsCount, _exiting, _maxListeners, _debugEnd, _debugProcess, _fatalException, _getActiveHandles, _getActiveRequests, _kill, _preload_modules, _rawDebug, _startProfilerIdleNotifier, _stopProfilerIdleNotifier, _tickCallback, _disconnect, _handleQueue, _pendingMessage, _channel, _send, _linkedBinding, _process, process_default;
var init_process2 = __esm({
  "node_modules/@cloudflare/unenv-preset/dist/runtime/node/process.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    init_hrtime();
    init_process();
    globalProcess = globalThis["process"];
    getBuiltinModule = globalProcess.getBuiltinModule;
    ({ exit, platform, nextTick } = getBuiltinModule(
      "node:process"
    ));
    unenvProcess = new Process({
      env: globalProcess.env,
      hrtime,
      nextTick
    });
    ({
      abort,
      addListener,
      allowedNodeEnvironmentFlags,
      hasUncaughtExceptionCaptureCallback,
      setUncaughtExceptionCaptureCallback,
      loadEnvFile,
      sourceMapsEnabled,
      arch,
      argv,
      argv0,
      chdir,
      config,
      connected,
      constrainedMemory,
      availableMemory,
      cpuUsage,
      cwd,
      debugPort,
      dlopen,
      disconnect,
      emit,
      emitWarning,
      env,
      eventNames,
      execArgv,
      execPath,
      finalization,
      features,
      getActiveResourcesInfo,
      getMaxListeners,
      hrtime: hrtime3,
      kill,
      listeners,
      listenerCount,
      memoryUsage,
      on,
      off,
      once,
      pid,
      ppid,
      prependListener,
      prependOnceListener,
      rawListeners,
      release,
      removeAllListeners,
      removeListener,
      report,
      resourceUsage,
      setMaxListeners,
      setSourceMapsEnabled,
      stderr,
      stdin,
      stdout,
      title,
      throwDeprecation,
      traceDeprecation,
      umask,
      uptime,
      version,
      versions,
      domain,
      initgroups,
      moduleLoadList,
      reallyExit,
      openStdin,
      assert: assert2,
      binding,
      send,
      exitCode,
      channel,
      getegid,
      geteuid,
      getgid,
      getgroups,
      getuid,
      setegid,
      seteuid,
      setgid,
      setgroups,
      setuid,
      permission,
      mainModule,
      _events,
      _eventsCount,
      _exiting,
      _maxListeners,
      _debugEnd,
      _debugProcess,
      _fatalException,
      _getActiveHandles,
      _getActiveRequests,
      _kill,
      _preload_modules,
      _rawDebug,
      _startProfilerIdleNotifier,
      _stopProfilerIdleNotifier,
      _tickCallback,
      _disconnect,
      _handleQueue,
      _pendingMessage,
      _channel,
      _send,
      _linkedBinding
    } = unenvProcess);
    _process = {
      abort,
      addListener,
      allowedNodeEnvironmentFlags,
      hasUncaughtExceptionCaptureCallback,
      setUncaughtExceptionCaptureCallback,
      loadEnvFile,
      sourceMapsEnabled,
      arch,
      argv,
      argv0,
      chdir,
      config,
      connected,
      constrainedMemory,
      availableMemory,
      cpuUsage,
      cwd,
      debugPort,
      dlopen,
      disconnect,
      emit,
      emitWarning,
      env,
      eventNames,
      execArgv,
      execPath,
      exit,
      finalization,
      features,
      getBuiltinModule,
      getActiveResourcesInfo,
      getMaxListeners,
      hrtime: hrtime3,
      kill,
      listeners,
      listenerCount,
      memoryUsage,
      nextTick,
      on,
      off,
      once,
      pid,
      platform,
      ppid,
      prependListener,
      prependOnceListener,
      rawListeners,
      release,
      removeAllListeners,
      removeListener,
      report,
      resourceUsage,
      setMaxListeners,
      setSourceMapsEnabled,
      stderr,
      stdin,
      stdout,
      title,
      throwDeprecation,
      traceDeprecation,
      umask,
      uptime,
      version,
      versions,
      // @ts-expect-error old API
      domain,
      initgroups,
      moduleLoadList,
      reallyExit,
      openStdin,
      assert: assert2,
      binding,
      send,
      exitCode,
      channel,
      getegid,
      geteuid,
      getgid,
      getgroups,
      getuid,
      setegid,
      seteuid,
      setgid,
      setgroups,
      setuid,
      permission,
      mainModule,
      _events,
      _eventsCount,
      _exiting,
      _maxListeners,
      _debugEnd,
      _debugProcess,
      _fatalException,
      _getActiveHandles,
      _getActiveRequests,
      _kill,
      _preload_modules,
      _rawDebug,
      _startProfilerIdleNotifier,
      _stopProfilerIdleNotifier,
      _tickCallback,
      _disconnect,
      _handleQueue,
      _pendingMessage,
      _channel,
      _send,
      _linkedBinding
    };
    process_default = _process;
  }
});

// node_modules/wrangler/_virtual_unenv_global_polyfill-@cloudflare-unenv-preset-node-process
var init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process = __esm({
  "node_modules/wrangler/_virtual_unenv_global_polyfill-@cloudflare-unenv-preset-node-process"() {
    init_process2();
    globalThis.process = process_default;
  }
});

// wrangler-modules-watch:wrangler:modules-watch
var init_wrangler_modules_watch = __esm({
  "wrangler-modules-watch:wrangler:modules-watch"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
  }
});

// node_modules/wrangler/templates/modules-watch-stub.js
var init_modules_watch_stub = __esm({
  "node_modules/wrangler/templates/modules-watch-stub.js"() {
    init_wrangler_modules_watch();
  }
});

// node_modules/unenv/dist/runtime/node/internal/util/legacy-types.mjs
var isRegExp, isDate, isBoolean, isNull, isNullOrUndefined, isNumber, isString, isSymbol, isUndefined, isFunction, isBuffer, isObject, isError, isPrimitive;
var init_legacy_types = __esm({
  "node_modules/unenv/dist/runtime/node/internal/util/legacy-types.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    isRegExp = /* @__PURE__ */ __name((val) => val instanceof RegExp, "isRegExp");
    isDate = /* @__PURE__ */ __name((val) => val instanceof Date, "isDate");
    isBoolean = /* @__PURE__ */ __name((val) => typeof val === "boolean", "isBoolean");
    isNull = /* @__PURE__ */ __name((val) => val === null, "isNull");
    isNullOrUndefined = /* @__PURE__ */ __name((val) => val === null || val === void 0, "isNullOrUndefined");
    isNumber = /* @__PURE__ */ __name((val) => typeof val === "number", "isNumber");
    isString = /* @__PURE__ */ __name((val) => typeof val === "string", "isString");
    isSymbol = /* @__PURE__ */ __name((val) => typeof val === "symbol", "isSymbol");
    isUndefined = /* @__PURE__ */ __name((val) => val === void 0, "isUndefined");
    isFunction = /* @__PURE__ */ __name((val) => typeof val === "function", "isFunction");
    isBuffer = /* @__PURE__ */ __name((val) => {
      return val && typeof val === "object" && typeof val.copy === "function" && typeof val.fill === "function" && typeof val.readUInt8 === "function";
    }, "isBuffer");
    isObject = /* @__PURE__ */ __name((val) => val !== null && typeof val === "object" && Object.getPrototypeOf(val).isPrototypeOf(Object), "isObject");
    isError = /* @__PURE__ */ __name((val) => val instanceof Error, "isError");
    isPrimitive = /* @__PURE__ */ __name((val) => {
      if (typeof val === "object") {
        return val === null;
      }
      return typeof val !== "function";
    }, "isPrimitive");
  }
});

// node_modules/unenv/dist/runtime/node/internal/util/log.mjs
var init_log = __esm({
  "node_modules/unenv/dist/runtime/node/internal/util/log.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
  }
});

// node_modules/unenv/dist/runtime/node/util.mjs
import types from "node:util/types";
import { default as default2 } from "node:util/types";
var TextDecoder, TextEncoder, _errnoException, _exceptionWithHostPort, getSystemErrorMap, getSystemErrorName, parseEnv, styleText;
var init_util = __esm({
  "node_modules/unenv/dist/runtime/node/util.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    init_utils();
    init_legacy_types();
    init_log();
    TextDecoder = globalThis.TextDecoder;
    TextEncoder = globalThis.TextEncoder;
    _errnoException = /* @__PURE__ */ notImplemented("util._errnoException");
    _exceptionWithHostPort = /* @__PURE__ */ notImplemented("util._exceptionWithHostPort");
    getSystemErrorMap = /* @__PURE__ */ notImplemented("util.getSystemErrorMap");
    getSystemErrorName = /* @__PURE__ */ notImplemented("util.getSystemErrorName");
    parseEnv = /* @__PURE__ */ notImplemented("util.parseEnv");
    styleText = /* @__PURE__ */ notImplemented("util.styleText");
  }
});

// node_modules/@cloudflare/unenv-preset/dist/runtime/node/util.mjs
var workerdUtil, MIMEParams, MIMEType, TextDecoder2, TextEncoder2, _extend, aborted, callbackify, debug3, debuglog, deprecate, format, formatWithOptions, getCallSite, inherits, inspect, isArray, isDeepStrictEqual, log3, parseArgs, promisify, stripVTControlCharacters, toUSVString, transferableAbortController, transferableAbortSignal, types2, util_default;
var init_util2 = __esm({
  "node_modules/@cloudflare/unenv-preset/dist/runtime/node/util.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    init_util();
    workerdUtil = process.getBuiltinModule("node:util");
    ({
      MIMEParams,
      MIMEType,
      TextDecoder: TextDecoder2,
      TextEncoder: TextEncoder2,
      _extend: (
        // @ts-expect-error missing types?
        _extend
      ),
      aborted,
      callbackify,
      debug: debug3,
      debuglog,
      deprecate,
      format,
      formatWithOptions,
      getCallSite: (
        // @ts-expect-error unknown type
        getCallSite
      ),
      inherits,
      inspect,
      isArray,
      isDeepStrictEqual,
      log: log3,
      parseArgs,
      promisify,
      stripVTControlCharacters,
      toUSVString,
      transferableAbortController,
      transferableAbortSignal
    } = workerdUtil);
    types2 = workerdUtil.types;
    util_default = {
      /**
       * manually unroll unenv-polyfilled-symbols to make it tree-shakeable
       */
      _errnoException,
      _exceptionWithHostPort,
      // @ts-expect-error unenv has unknown type
      getSystemErrorMap,
      // @ts-expect-error unenv has unknown type
      getSystemErrorName,
      isBoolean,
      isBuffer,
      isDate,
      isError,
      isFunction,
      isNull,
      isNullOrUndefined,
      isNumber,
      isObject,
      isPrimitive,
      isRegExp,
      isString,
      isSymbol,
      isUndefined,
      // @ts-expect-error unenv has unknown type
      parseEnv,
      // @ts-expect-error unenv has unknown type
      styleText,
      /**
       * manually unroll workerd-polyfilled-symbols to make it tree-shakeable
       */
      _extend,
      aborted,
      callbackify,
      debug: debug3,
      debuglog,
      deprecate,
      format,
      formatWithOptions,
      getCallSite,
      inherits,
      inspect,
      isArray,
      isDeepStrictEqual,
      log: log3,
      MIMEParams,
      MIMEType,
      parseArgs,
      promisify,
      stripVTControlCharacters,
      TextDecoder: TextDecoder2,
      TextEncoder: TextEncoder2,
      toUSVString,
      transferableAbortController,
      transferableAbortSignal,
      // special-cased deep merged symbols
      types: types2
    };
  }
});

// node-built-in-modules:util
var require_util = __commonJS({
  "node-built-in-modules:util"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    init_util2();
    module.exports = util_default;
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/thrift.js
var require_thrift = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/thrift.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var util = require_util();
    var Type = exports.Type = {
      STOP: 0,
      VOID: 1,
      BOOL: 2,
      BYTE: 3,
      I08: 3,
      DOUBLE: 4,
      I16: 6,
      I32: 8,
      I64: 10,
      STRING: 11,
      UTF7: 11,
      STRUCT: 12,
      MAP: 13,
      SET: 14,
      LIST: 15,
      UTF8: 16,
      UTF16: 17
    };
    exports.MessageType = {
      CALL: 1,
      REPLY: 2,
      EXCEPTION: 3,
      ONEWAY: 4
    };
    exports.TException = TException;
    function TException(message) {
      Error.call(this);
      if (Error.captureStackTrace !== void 0) {
        Error.captureStackTrace(this, this.constructor);
      }
      this.name = this.constructor.name;
      this.message = message;
    }
    __name(TException, "TException");
    util.inherits(TException, Error);
    var TApplicationExceptionType = exports.TApplicationExceptionType = {
      UNKNOWN: 0,
      UNKNOWN_METHOD: 1,
      INVALID_MESSAGE_TYPE: 2,
      WRONG_METHOD_NAME: 3,
      BAD_SEQUENCE_ID: 4,
      MISSING_RESULT: 5,
      INTERNAL_ERROR: 6,
      PROTOCOL_ERROR: 7,
      INVALID_TRANSFORM: 8,
      INVALID_PROTOCOL: 9,
      UNSUPPORTED_CLIENT_TYPE: 10
    };
    exports.TApplicationException = TApplicationException;
    function TApplicationException(type, message) {
      TException.call(this);
      if (Error.captureStackTrace !== void 0) {
        Error.captureStackTrace(this, this.constructor);
      }
      this.type = type || TApplicationExceptionType.UNKNOWN;
      this.name = this.constructor.name;
      this.message = message;
    }
    __name(TApplicationException, "TApplicationException");
    util.inherits(TApplicationException, TException);
    TApplicationException.prototype.read = function(input) {
      var ftype;
      var ret = input.readStructBegin("TApplicationException");
      while (1) {
        ret = input.readFieldBegin();
        if (ret.ftype == Type.STOP)
          break;
        switch (ret.fid) {
          case 1:
            if (ret.ftype == Type.STRING) {
              ret = input.readString();
              this.message = ret;
            } else {
              ret = input.skip(ret.ftype);
            }
            break;
          case 2:
            if (ret.ftype == Type.I32) {
              ret = input.readI32();
              this.type = ret;
            } else {
              ret = input.skip(ret.ftype);
            }
            break;
          default:
            ret = input.skip(ret.ftype);
            break;
        }
        input.readFieldEnd();
      }
      input.readStructEnd();
    };
    TApplicationException.prototype.write = function(output) {
      output.writeStructBegin("TApplicationException");
      if (this.message) {
        output.writeFieldBegin("message", Type.STRING, 1);
        output.writeString(this.message);
        output.writeFieldEnd();
      }
      if (this.code) {
        output.writeFieldBegin("type", Type.I32, 2);
        output.writeI32(this.code);
        output.writeFieldEnd();
      }
      output.writeFieldStop();
      output.writeStructEnd();
    };
    var TProtocolExceptionType = exports.TProtocolExceptionType = {
      UNKNOWN: 0,
      INVALID_DATA: 1,
      NEGATIVE_SIZE: 2,
      SIZE_LIMIT: 3,
      BAD_VERSION: 4,
      NOT_IMPLEMENTED: 5,
      DEPTH_LIMIT: 6
    };
    exports.TProtocolException = TProtocolException;
    function TProtocolException(type, message) {
      Error.call(this);
      if (Error.captureStackTrace !== void 0) {
        Error.captureStackTrace(this, this.constructor);
      }
      this.name = this.constructor.name;
      this.type = type;
      this.message = message;
    }
    __name(TProtocolException, "TProtocolException");
    util.inherits(TProtocolException, Error);
    exports.objectLength = function(obj) {
      return Object.keys(obj).length;
    };
    exports.inherits = function(constructor, superConstructor) {
      util.inherits(constructor, superConstructor);
    };
    var copyList;
    var copyMap;
    copyList = /* @__PURE__ */ __name(function(lst, types3) {
      if (!lst) {
        return lst;
      }
      var type;
      if (types3.shift === void 0) {
        type = types3;
      } else {
        type = types3[0];
      }
      var Type2 = type;
      var len = lst.length, result = [], i, val;
      for (i = 0; i < len; i++) {
        val = lst[i];
        if (type === null) {
          result.push(val);
        } else if (type === copyMap || type === copyList) {
          result.push(type(val, types3.slice(1)));
        } else {
          result.push(new Type2(val));
        }
      }
      return result;
    }, "copyList");
    copyMap = /* @__PURE__ */ __name(function(obj, types3) {
      if (!obj) {
        return obj;
      }
      var type;
      if (types3.shift === void 0) {
        type = types3;
      } else {
        type = types3[0];
      }
      var Type2 = type;
      var result = {}, val;
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) {
          val = obj[prop];
          if (type === null) {
            result[prop] = val;
          } else if (type === copyMap || type === copyList) {
            result[prop] = type(val, types3.slice(1));
          } else {
            result[prop] = new Type2(val);
          }
        }
      }
      return result;
    }, "copyMap");
    module.exports.copyMap = copyMap;
    module.exports.copyList = copyList;
  }
});

// node_modules/isomorphic-ws/browser.js
var require_browser = __commonJS({
  "node_modules/isomorphic-ws/browser.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var ws = null;
    if (typeof WebSocket !== "undefined") {
      ws = WebSocket;
    } else if (typeof MozWebSocket !== "undefined") {
      ws = MozWebSocket;
    } else if (typeof global !== "undefined") {
      ws = global.WebSocket || global.MozWebSocket;
    } else if (typeof window !== "undefined") {
      ws = window.WebSocket || window.MozWebSocket;
    } else if (typeof self !== "undefined") {
      ws = self.WebSocket || self.MozWebSocket;
    }
    module.exports = ws;
  }
});

// node-built-in-modules:events
import libDefault from "events";
var require_events = __commonJS({
  "node-built-in-modules:events"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    module.exports = libDefault;
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/binary.js
var require_binary = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/binary.js"(exports) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var POW_8 = Math.pow(2, 8);
    var POW_16 = Math.pow(2, 16);
    var POW_24 = Math.pow(2, 24);
    var POW_32 = Math.pow(2, 32);
    var POW_40 = Math.pow(2, 40);
    var POW_48 = Math.pow(2, 48);
    var POW_52 = Math.pow(2, 52);
    var POW_1022 = Math.pow(2, 1022);
    exports.readByte = function(b) {
      return b > 127 ? b - 256 : b;
    };
    exports.readI16 = function(buff, off2) {
      off2 = off2 || 0;
      var v2 = buff[off2 + 1];
      v2 += buff[off2] << 8;
      if (buff[off2] & 128) {
        v2 -= POW_16;
      }
      return v2;
    };
    exports.readI32 = function(buff, off2) {
      off2 = off2 || 0;
      var v2 = buff[off2 + 3];
      v2 += buff[off2 + 2] << 8;
      v2 += buff[off2 + 1] << 16;
      v2 += buff[off2] * POW_24;
      if (buff[off2] & 128) {
        v2 -= POW_32;
      }
      return v2;
    };
    exports.writeI16 = function(buff, v2) {
      buff[1] = v2 & 255;
      v2 >>= 8;
      buff[0] = v2 & 255;
      return buff;
    };
    exports.writeI32 = function(buff, v2) {
      buff[3] = v2 & 255;
      v2 >>= 8;
      buff[2] = v2 & 255;
      v2 >>= 8;
      buff[1] = v2 & 255;
      v2 >>= 8;
      buff[0] = v2 & 255;
      return buff;
    };
    exports.readDouble = function(buff, off2) {
      off2 = off2 || 0;
      var signed = buff[off2] & 128;
      var e = (buff[off2 + 1] & 240) >> 4;
      e += (buff[off2] & 127) << 4;
      var m = buff[off2 + 7];
      m += buff[off2 + 6] << 8;
      m += buff[off2 + 5] << 16;
      m += buff[off2 + 4] * POW_24;
      m += buff[off2 + 3] * POW_32;
      m += buff[off2 + 2] * POW_40;
      m += (buff[off2 + 1] & 15) * POW_48;
      switch (e) {
        case 0:
          e = -1022;
          break;
        case 2047:
          return m ? NaN : signed ? -Infinity : Infinity;
        default:
          m += POW_52;
          e -= 1023;
      }
      if (signed) {
        m *= -1;
      }
      return m * Math.pow(2, e - 52);
    };
    exports.writeDouble = function(buff, v2) {
      var m, e, c;
      buff[0] = v2 < 0 ? 128 : 0;
      v2 = Math.abs(v2);
      if (v2 !== v2) {
        m = 2251799813685248;
        e = 2047;
      } else if (v2 === Infinity) {
        m = 0;
        e = 2047;
      } else {
        e = Math.floor(Math.log(v2) / Math.LN2);
        c = Math.pow(2, -e);
        if (v2 * c < 1) {
          e--;
          c *= 2;
        }
        if (e + 1023 >= 2047) {
          m = 0;
          e = 2047;
        } else if (e + 1023 >= 1) {
          m = (v2 * c - 1) * POW_52;
          e += 1023;
        } else {
          m = v2 * POW_1022 * POW_52;
          e = 0;
        }
      }
      buff[1] = e << 4 & 240;
      buff[0] |= e >> 4 & 127;
      buff[7] = m & 255;
      m = Math.floor(m / POW_8);
      buff[6] = m & 255;
      m = Math.floor(m / POW_8);
      buff[5] = m & 255;
      m = Math.floor(m / POW_8);
      buff[4] = m & 255;
      m >>= 8;
      buff[3] = m & 255;
      m >>= 8;
      buff[2] = m & 255;
      m >>= 8;
      buff[1] |= m & 15;
      return buff;
    };
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/input_buffer_underrun_error.js
var require_input_buffer_underrun_error = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/input_buffer_underrun_error.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var util = require_util();
    module.exports = InputBufferUnderrunError;
    function InputBufferUnderrunError(message) {
      Error.call(this);
      if (Error.captureStackTrace !== void 0) {
        Error.captureStackTrace(this, this.constructor);
      }
      this.name = this.constructor.name;
      this.message = message;
    }
    __name(InputBufferUnderrunError, "InputBufferUnderrunError");
    util.inherits(InputBufferUnderrunError, Error);
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/log.js
var require_log = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/log.js"(exports) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var util = require_util();
    var disabled = /* @__PURE__ */ __name(function() {
    }, "disabled");
    var logFunc = console.log;
    var logLevel = "error";
    function factory(level) {
      return function() {
        var args = ["thrift: [" + level + "] "].concat(Array.from(arguments));
        return logFunc(util.format.apply(null, args));
      };
    }
    __name(factory, "factory");
    var trace3 = disabled;
    var debug4 = disabled;
    var error3 = disabled;
    var warning = disabled;
    var info3 = disabled;
    exports.setLogFunc = function(func) {
      logFunc = func;
    };
    var setLogLevel = exports.setLogLevel = function(level) {
      trace3 = debug4 = error3 = warning = info3 = disabled;
      logLevel = level;
      switch (logLevel) {
        case "trace":
          trace3 = factory("TRACE");
        case "debug":
          debug4 = factory("DEBUG");
        case "error":
          error3 = factory("ERROR");
        case "warning":
          warning = factory("WARN");
        case "info":
          info3 = factory("INFO");
      }
    };
    setLogLevel(logLevel);
    exports.getLogLevel = function() {
      return logLevel;
    };
    exports.trace = function() {
      return trace3.apply(null, arguments);
    };
    exports.debug = function() {
      return debug4.apply(null, arguments);
    };
    exports.error = function() {
      return error3.apply(null, arguments);
    };
    exports.warning = function() {
      return warning.apply(null, arguments);
    };
    exports.info = function() {
      return info3.apply(null, arguments);
    };
  }
});

// node_modules/node-int64/Int64.js
var require_Int64 = __commonJS({
  "node_modules/node-int64/Int64.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var VAL32 = 4294967296;
    var _HEX = [];
    for (i = 0; i < 256; i++) {
      _HEX[i] = (i > 15 ? "" : "0") + i.toString(16);
    }
    var i;
    var Int642 = module.exports = function(a1, a2) {
      if (a1 instanceof Buffer) {
        this.buffer = a1;
        this.offset = a2 || 0;
      } else if (Object.prototype.toString.call(a1) == "[object Uint8Array]") {
        this.buffer = new Buffer(a1);
        this.offset = a2 || 0;
      } else {
        this.buffer = this.buffer || new Buffer(8);
        this.offset = 0;
        this.setValue.apply(this, arguments);
      }
    };
    Int642.MAX_INT = Math.pow(2, 53);
    Int642.MIN_INT = -Math.pow(2, 53);
    Int642.prototype = {
      constructor: Int642,
      /**
       * Do in-place 2's compliment.  See
       * http://en.wikipedia.org/wiki/Two's_complement
       */
      _2scomp: function() {
        var b = this.buffer, o = this.offset, carry = 1;
        for (var i2 = o + 7; i2 >= o; i2--) {
          var v2 = (b[i2] ^ 255) + carry;
          b[i2] = v2 & 255;
          carry = v2 >> 8;
        }
      },
      /**
       * Set the value. Takes any of the following arguments:
       *
       * setValue(string) - A hexidecimal string
       * setValue(number) - Number (throws if n is outside int64 range)
       * setValue(hi, lo) - Raw bits as two 32-bit values
       */
      setValue: function(hi, lo) {
        var negate = false;
        if (arguments.length == 1) {
          if (typeof hi == "number") {
            negate = hi < 0;
            hi = Math.abs(hi);
            lo = hi % VAL32;
            hi = hi / VAL32;
            if (hi > VAL32)
              throw new RangeError(hi + " is outside Int64 range");
            hi = hi | 0;
          } else if (typeof hi == "string") {
            hi = (hi + "").replace(/^0x/, "");
            lo = hi.substr(-8);
            hi = hi.length > 8 ? hi.substr(0, hi.length - 8) : "";
            hi = parseInt(hi, 16);
            lo = parseInt(lo, 16);
          } else {
            throw new Error(hi + " must be a Number or String");
          }
        }
        var b = this.buffer, o = this.offset;
        for (var i2 = 7; i2 >= 0; i2--) {
          b[o + i2] = lo & 255;
          lo = i2 == 4 ? hi : lo >>> 8;
        }
        if (negate)
          this._2scomp();
      },
      /**
       * Convert to a native JS number.
       *
       * WARNING: Do not expect this value to be accurate to integer precision for
       * large (positive or negative) numbers!
       *
       * @param allowImprecise If true, no check is performed to verify the
       * returned value is accurate to integer precision.  If false, imprecise
       * numbers (very large positive or negative numbers) will be forced to +/-
       * Infinity.
       */
      toNumber: function(allowImprecise) {
        var b = this.buffer, o = this.offset;
        var negate = b[o] & 128, x = 0, carry = 1;
        for (var i2 = 7, m = 1; i2 >= 0; i2--, m *= 256) {
          var v2 = b[o + i2];
          if (negate) {
            v2 = (v2 ^ 255) + carry;
            carry = v2 >> 8;
            v2 = v2 & 255;
          }
          x += v2 * m;
        }
        if (!allowImprecise && x >= Int642.MAX_INT) {
          return negate ? -Infinity : Infinity;
        }
        return negate ? -x : x;
      },
      /**
       * Convert to a JS Number. Returns +/-Infinity for values that can't be
       * represented to integer precision.
       */
      valueOf: function() {
        return this.toNumber(false);
      },
      /**
       * Return string value
       *
       * @param radix Just like Number#toString()'s radix
       */
      toString: function(radix) {
        return this.valueOf().toString(radix || 10);
      },
      /**
       * Return a string showing the buffer octets, with MSB on the left.
       *
       * @param sep separator string. default is '' (empty string)
       */
      toOctetString: function(sep) {
        var out = new Array(8);
        var b = this.buffer, o = this.offset;
        for (var i2 = 0; i2 < 8; i2++) {
          out[i2] = _HEX[b[o + i2]];
        }
        return out.join(sep || "");
      },
      /**
       * Returns the int64's 8 bytes in a buffer.
       *
       * @param {bool} [rawBuffer=false]  If no offset and this is true, return the internal buffer.  Should only be used if
       *                                  you're discarding the Int64 afterwards, as it breaks encapsulation.
       */
      toBuffer: function(rawBuffer) {
        if (rawBuffer && this.offset === 0)
          return this.buffer;
        var out = new Buffer(8);
        this.buffer.copy(out, 0, this.offset, this.offset + 8);
        return out;
      },
      /**
       * Copy 8 bytes of int64 into target buffer at target offset.
       *
       * @param {Buffer} targetBuffer       Buffer to copy into.
       * @param {number} [targetOffset=0]   Offset into target buffer.
       */
      copy: function(targetBuffer, targetOffset) {
        this.buffer.copy(targetBuffer, targetOffset || 0, this.offset, this.offset + 8);
      },
      /**
       * Returns a number indicating whether this comes before or after or is the
       * same as the other in sort order.
       *
       * @param {Int64} other  Other Int64 to compare.
       */
      compare: function(other) {
        if ((this.buffer[this.offset] & 128) != (other.buffer[other.offset] & 128)) {
          return other.buffer[other.offset] - this.buffer[this.offset];
        }
        for (var i2 = 0; i2 < 8; i2++) {
          if (this.buffer[this.offset + i2] !== other.buffer[other.offset + i2]) {
            return this.buffer[this.offset + i2] - other.buffer[other.offset + i2];
          }
        }
        return 0;
      },
      /**
       * Returns a boolean indicating if this integer is equal to other.
       *
       * @param {Int64} other  Other Int64 to compare.
       */
      equals: function(other) {
        return this.compare(other) === 0;
      },
      /**
       * Pretty output in console.log
       */
      inspect: function() {
        return "[Int64 value:" + this + " octets:" + this.toOctetString(" ") + "]";
      }
    };
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/compact_protocol.js
var require_compact_protocol = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/compact_protocol.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var log4 = require_log();
    var Int642 = require_Int64();
    var Thrift6 = require_thrift();
    var Type = Thrift6.Type;
    module.exports = TCompactProtocol3;
    var POW_8 = Math.pow(2, 8);
    var POW_24 = Math.pow(2, 24);
    var POW_32 = Math.pow(2, 32);
    var POW_40 = Math.pow(2, 40);
    var POW_48 = Math.pow(2, 48);
    var POW_52 = Math.pow(2, 52);
    var POW_1022 = Math.pow(2, 1022);
    function TCompactProtocol3(trans) {
      this.trans = trans;
      this.lastField_ = [];
      this.lastFieldId_ = 0;
      this.string_limit_ = 0;
      this.string_buf_ = null;
      this.string_buf_size_ = 0;
      this.container_limit_ = 0;
      this.booleanField_ = {
        name: null,
        hasBoolValue: false
      };
      this.boolValue_ = {
        hasBoolValue: false,
        boolValue: false
      };
    }
    __name(TCompactProtocol3, "TCompactProtocol");
    TCompactProtocol3.PROTOCOL_ID = -126;
    TCompactProtocol3.VERSION_N = 1;
    TCompactProtocol3.VERSION_MASK = 31;
    TCompactProtocol3.TYPE_MASK = -32;
    TCompactProtocol3.TYPE_BITS = 7;
    TCompactProtocol3.TYPE_SHIFT_AMOUNT = 5;
    TCompactProtocol3.Types = {
      CT_STOP: 0,
      CT_BOOLEAN_TRUE: 1,
      CT_BOOLEAN_FALSE: 2,
      CT_BYTE: 3,
      CT_I16: 4,
      CT_I32: 5,
      CT_I64: 6,
      CT_DOUBLE: 7,
      CT_BINARY: 8,
      CT_LIST: 9,
      CT_SET: 10,
      CT_MAP: 11,
      CT_STRUCT: 12
    };
    TCompactProtocol3.TTypeToCType = [
      TCompactProtocol3.Types.CT_STOP,
      // T_STOP
      0,
      // unused
      TCompactProtocol3.Types.CT_BOOLEAN_TRUE,
      // T_BOOL
      TCompactProtocol3.Types.CT_BYTE,
      // T_BYTE
      TCompactProtocol3.Types.CT_DOUBLE,
      // T_DOUBLE
      0,
      // unused
      TCompactProtocol3.Types.CT_I16,
      // T_I16
      0,
      // unused
      TCompactProtocol3.Types.CT_I32,
      // T_I32
      0,
      // unused
      TCompactProtocol3.Types.CT_I64,
      // T_I64
      TCompactProtocol3.Types.CT_BINARY,
      // T_STRING
      TCompactProtocol3.Types.CT_STRUCT,
      // T_STRUCT
      TCompactProtocol3.Types.CT_MAP,
      // T_MAP
      TCompactProtocol3.Types.CT_SET,
      // T_SET
      TCompactProtocol3.Types.CT_LIST
      // T_LIST
    ];
    TCompactProtocol3.prototype.getTransport = function() {
      return this.trans;
    };
    TCompactProtocol3.prototype.getCompactType = function(ttype) {
      return TCompactProtocol3.TTypeToCType[ttype];
    };
    TCompactProtocol3.prototype.getTType = function(type) {
      switch (type) {
        case Type.STOP:
          return Type.STOP;
        case TCompactProtocol3.Types.CT_BOOLEAN_FALSE:
        case TCompactProtocol3.Types.CT_BOOLEAN_TRUE:
          return Type.BOOL;
        case TCompactProtocol3.Types.CT_BYTE:
          return Type.BYTE;
        case TCompactProtocol3.Types.CT_I16:
          return Type.I16;
        case TCompactProtocol3.Types.CT_I32:
          return Type.I32;
        case TCompactProtocol3.Types.CT_I64:
          return Type.I64;
        case TCompactProtocol3.Types.CT_DOUBLE:
          return Type.DOUBLE;
        case TCompactProtocol3.Types.CT_BINARY:
          return Type.STRING;
        case TCompactProtocol3.Types.CT_LIST:
          return Type.LIST;
        case TCompactProtocol3.Types.CT_SET:
          return Type.SET;
        case TCompactProtocol3.Types.CT_MAP:
          return Type.MAP;
        case TCompactProtocol3.Types.CT_STRUCT:
          return Type.STRUCT;
        default:
          throw new Thrift6.TProtocolException(Thrift6.TProtocolExceptionType.INVALID_DATA, "Unknown type: " + type);
      }
      return Type.STOP;
    };
    TCompactProtocol3.prototype.flush = function() {
      return this.trans.flush();
    };
    TCompactProtocol3.prototype.writeMessageBegin = function(name, type, seqid) {
      this.writeByte(TCompactProtocol3.PROTOCOL_ID);
      this.writeByte(TCompactProtocol3.VERSION_N & TCompactProtocol3.VERSION_MASK | type << TCompactProtocol3.TYPE_SHIFT_AMOUNT & TCompactProtocol3.TYPE_MASK);
      this.writeVarint32(seqid);
      this.writeString(name);
      if (this._seqid) {
        log4.warning("SeqId already set", { "name": name });
      } else {
        this._seqid = seqid;
        this.trans.setCurrSeqId(seqid);
      }
    };
    TCompactProtocol3.prototype.writeMessageEnd = function() {
    };
    TCompactProtocol3.prototype.writeStructBegin = function(name) {
      this.lastField_.push(this.lastFieldId_);
      this.lastFieldId_ = 0;
    };
    TCompactProtocol3.prototype.writeStructEnd = function() {
      this.lastFieldId_ = this.lastField_.pop();
    };
    TCompactProtocol3.prototype.writeFieldBegin = function(name, type, id) {
      if (type != Type.BOOL) {
        return this.writeFieldBeginInternal(name, type, id, -1);
      }
      this.booleanField_.name = name;
      this.booleanField_.fieldType = type;
      this.booleanField_.fieldId = id;
    };
    TCompactProtocol3.prototype.writeFieldEnd = function() {
    };
    TCompactProtocol3.prototype.writeFieldStop = function() {
      this.writeByte(TCompactProtocol3.Types.CT_STOP);
    };
    TCompactProtocol3.prototype.writeMapBegin = function(keyType, valType, size) {
      if (size === 0) {
        this.writeByte(0);
      } else {
        this.writeVarint32(size);
        this.writeByte(this.getCompactType(keyType) << 4 | this.getCompactType(valType));
      }
    };
    TCompactProtocol3.prototype.writeMapEnd = function() {
    };
    TCompactProtocol3.prototype.writeListBegin = function(elemType, size) {
      this.writeCollectionBegin(elemType, size);
    };
    TCompactProtocol3.prototype.writeListEnd = function() {
    };
    TCompactProtocol3.prototype.writeSetBegin = function(elemType, size) {
      this.writeCollectionBegin(elemType, size);
    };
    TCompactProtocol3.prototype.writeSetEnd = function() {
    };
    TCompactProtocol3.prototype.writeBool = function(value) {
      if (this.booleanField_.name !== null) {
        this.writeFieldBeginInternal(
          this.booleanField_.name,
          this.booleanField_.fieldType,
          this.booleanField_.fieldId,
          value ? TCompactProtocol3.Types.CT_BOOLEAN_TRUE : TCompactProtocol3.Types.CT_BOOLEAN_FALSE
        );
        this.booleanField_.name = null;
      } else {
        this.writeByte(value ? TCompactProtocol3.Types.CT_BOOLEAN_TRUE : TCompactProtocol3.Types.CT_BOOLEAN_FALSE);
      }
    };
    TCompactProtocol3.prototype.writeByte = function(b) {
      this.trans.write(new Buffer([b]));
    };
    TCompactProtocol3.prototype.writeI16 = function(i16) {
      this.writeVarint32(this.i32ToZigzag(i16));
    };
    TCompactProtocol3.prototype.writeI32 = function(i32) {
      this.writeVarint32(this.i32ToZigzag(i32));
    };
    TCompactProtocol3.prototype.writeI64 = function(i64) {
      this.writeVarint64(this.i64ToZigzag(i64));
    };
    TCompactProtocol3.prototype.writeDouble = function(v2) {
      var buff = new Buffer(8);
      var m, e, c;
      buff[7] = v2 < 0 ? 128 : 0;
      v2 = Math.abs(v2);
      if (v2 !== v2) {
        m = 2251799813685248;
        e = 2047;
      } else if (v2 === Infinity) {
        m = 0;
        e = 2047;
      } else {
        e = Math.floor(Math.log(v2) / Math.LN2);
        c = Math.pow(2, -e);
        if (v2 * c < 1) {
          e--;
          c *= 2;
        }
        if (e + 1023 >= 2047) {
          m = 0;
          e = 2047;
        } else if (e + 1023 >= 1) {
          m = (v2 * c - 1) * POW_52;
          e += 1023;
        } else {
          m = v2 * POW_1022 * POW_52;
          e = 0;
        }
      }
      buff[6] = e << 4 & 240;
      buff[7] |= e >> 4 & 127;
      buff[0] = m & 255;
      m = Math.floor(m / POW_8);
      buff[1] = m & 255;
      m = Math.floor(m / POW_8);
      buff[2] = m & 255;
      m = Math.floor(m / POW_8);
      buff[3] = m & 255;
      m >>= 8;
      buff[4] = m & 255;
      m >>= 8;
      buff[5] = m & 255;
      m >>= 8;
      buff[6] |= m & 15;
      this.trans.write(buff);
    };
    TCompactProtocol3.prototype.writeStringOrBinary = function(name, encoding, arg) {
      if (typeof arg === "string") {
        this.writeVarint32(Buffer.byteLength(arg, encoding));
        this.trans.write(new Buffer(arg, encoding));
      } else if (arg instanceof Buffer || Object.prototype.toString.call(arg) == "[object Uint8Array]") {
        this.writeVarint32(arg.length);
        this.trans.write(arg);
      } else {
        throw new Error(name + " called without a string/Buffer argument: " + arg);
      }
    };
    TCompactProtocol3.prototype.writeString = function(arg) {
      this.writeStringOrBinary("writeString", "utf8", arg);
    };
    TCompactProtocol3.prototype.writeBinary = function(arg) {
      this.writeStringOrBinary("writeBinary", "binary", arg);
    };
    TCompactProtocol3.prototype.writeFieldBeginInternal = function(name, fieldType, fieldId, typeOverride) {
      var typeToWrite = typeOverride == -1 ? this.getCompactType(fieldType) : typeOverride;
      if (fieldId > this.lastFieldId_ && fieldId - this.lastFieldId_ <= 15) {
        this.writeByte(fieldId - this.lastFieldId_ << 4 | typeToWrite);
      } else {
        this.writeByte(typeToWrite);
        this.writeI16(fieldId);
      }
      this.lastFieldId_ = fieldId;
    };
    TCompactProtocol3.prototype.writeCollectionBegin = function(elemType, size) {
      if (size <= 14) {
        this.writeByte(size << 4 | this.getCompactType(elemType));
      } else {
        this.writeByte(240 | this.getCompactType(elemType));
        this.writeVarint32(size);
      }
    };
    TCompactProtocol3.prototype.writeVarint32 = function(n) {
      var buf = new Buffer(5);
      var wsize = 0;
      while (true) {
        if ((n & ~127) === 0) {
          buf[wsize++] = n;
          break;
        } else {
          buf[wsize++] = n & 127 | 128;
          n = n >>> 7;
        }
      }
      var wbuf = new Buffer(wsize);
      buf.copy(wbuf, 0, 0, wsize);
      this.trans.write(wbuf);
    };
    TCompactProtocol3.prototype.writeVarint64 = function(n) {
      if (typeof n === "number") {
        n = new Int642(n);
      }
      if (!(n instanceof Int642)) {
        throw new Thrift6.TProtocolException(Thrift6.TProtocolExceptionType.INVALID_DATA, "Expected Int64 or Number, found: " + n);
      }
      var buf = new Buffer(10);
      var wsize = 0;
      var hi = n.buffer.readUInt32BE(0, true);
      var lo = n.buffer.readUInt32BE(4, true);
      var mask = 0;
      while (true) {
        if ((lo & ~127) === 0 && hi === 0) {
          buf[wsize++] = lo;
          break;
        } else {
          buf[wsize++] = lo & 127 | 128;
          mask = hi << 25;
          lo = lo >>> 7;
          hi = hi >>> 7;
          lo = lo | mask;
        }
      }
      var wbuf = new Buffer(wsize);
      buf.copy(wbuf, 0, 0, wsize);
      this.trans.write(wbuf);
    };
    TCompactProtocol3.prototype.i64ToZigzag = function(l) {
      if (typeof l === "string") {
        l = new Int642(parseInt(l, 10));
      } else if (typeof l === "number") {
        l = new Int642(l);
      }
      if (!(l instanceof Int642)) {
        throw new Thrift6.TProtocolException(Thrift6.TProtocolExceptionType.INVALID_DATA, "Expected Int64 or Number, found: " + l);
      }
      var hi = l.buffer.readUInt32BE(0, true);
      var lo = l.buffer.readUInt32BE(4, true);
      var sign2 = hi >>> 31;
      hi = (hi << 1 | lo >>> 31) ^ (!!sign2 ? 4294967295 : 0);
      lo = lo << 1 ^ (!!sign2 ? 4294967295 : 0);
      return new Int642(hi, lo);
    };
    TCompactProtocol3.prototype.i32ToZigzag = function(n) {
      return n << 1 ^ (n & 2147483648 ? 4294967295 : 0);
    };
    TCompactProtocol3.prototype.readMessageBegin = function() {
      var protocolId = this.trans.readByte();
      if (protocolId != TCompactProtocol3.PROTOCOL_ID) {
        throw new Thrift6.TProtocolException(Thrift6.TProtocolExceptionType.BAD_VERSION, "Bad protocol identifier " + protocolId);
      }
      var versionAndType = this.trans.readByte();
      var version2 = versionAndType & TCompactProtocol3.VERSION_MASK;
      if (version2 != TCompactProtocol3.VERSION_N) {
        throw new Thrift6.TProtocolException(Thrift6.TProtocolExceptionType.BAD_VERSION, "Bad protocol version " + version2);
      }
      var type = versionAndType >> TCompactProtocol3.TYPE_SHIFT_AMOUNT & TCompactProtocol3.TYPE_BITS;
      var seqid = this.readVarint32();
      var name = this.readString();
      return { fname: name, mtype: type, rseqid: seqid };
    };
    TCompactProtocol3.prototype.readMessageEnd = function() {
    };
    TCompactProtocol3.prototype.readStructBegin = function() {
      this.lastField_.push(this.lastFieldId_);
      this.lastFieldId_ = 0;
      return { fname: "" };
    };
    TCompactProtocol3.prototype.readStructEnd = function() {
      this.lastFieldId_ = this.lastField_.pop();
    };
    TCompactProtocol3.prototype.readFieldBegin = function() {
      var fieldId = 0;
      var b = this.trans.readByte(b);
      var type = b & 15;
      if (type == TCompactProtocol3.Types.CT_STOP) {
        return { fname: null, ftype: Thrift6.Type.STOP, fid: 0 };
      }
      var modifier = (b & 240) >>> 4;
      if (modifier === 0) {
        fieldId = this.readI16();
      } else {
        fieldId = this.lastFieldId_ + modifier;
      }
      var fieldType = this.getTType(type);
      if (type == TCompactProtocol3.Types.CT_BOOLEAN_TRUE || type == TCompactProtocol3.Types.CT_BOOLEAN_FALSE) {
        this.boolValue_.hasBoolValue = true;
        this.boolValue_.boolValue = type == TCompactProtocol3.Types.CT_BOOLEAN_TRUE ? true : false;
      }
      this.lastFieldId_ = fieldId;
      return { fname: null, ftype: fieldType, fid: fieldId };
    };
    TCompactProtocol3.prototype.readFieldEnd = function() {
    };
    TCompactProtocol3.prototype.readMapBegin = function() {
      var msize = this.readVarint32();
      if (msize < 0) {
        throw new Thrift6.TProtocolException(Thrift6.TProtocolExceptionType.NEGATIVE_SIZE, "Negative map size");
      }
      var kvType = 0;
      if (msize !== 0) {
        kvType = this.trans.readByte();
      }
      var keyType = this.getTType((kvType & 240) >>> 4);
      var valType = this.getTType(kvType & 15);
      return { ktype: keyType, vtype: valType, size: msize };
    };
    TCompactProtocol3.prototype.readMapEnd = function() {
    };
    TCompactProtocol3.prototype.readListBegin = function() {
      var size_and_type = this.trans.readByte();
      var lsize = size_and_type >>> 4 & 15;
      if (lsize == 15) {
        lsize = this.readVarint32();
      }
      if (lsize < 0) {
        throw new Thrift6.TProtocolException(Thrift6.TProtocolExceptionType.NEGATIVE_SIZE, "Negative list size");
      }
      var elemType = this.getTType(size_and_type & 15);
      return { etype: elemType, size: lsize };
    };
    TCompactProtocol3.prototype.readListEnd = function() {
    };
    TCompactProtocol3.prototype.readSetBegin = function() {
      return this.readListBegin();
    };
    TCompactProtocol3.prototype.readSetEnd = function() {
    };
    TCompactProtocol3.prototype.readBool = function() {
      var value = false;
      var rsize = 0;
      if (this.boolValue_.hasBoolValue === true) {
        value = this.boolValue_.boolValue;
        this.boolValue_.hasBoolValue = false;
      } else {
        var res = this.trans.readByte();
        rsize = res.rsize;
        value = res.value == TCompactProtocol3.Types.CT_BOOLEAN_TRUE;
      }
      return value;
    };
    TCompactProtocol3.prototype.readByte = function() {
      return this.trans.readByte();
    };
    TCompactProtocol3.prototype.readI16 = function() {
      return this.readI32();
    };
    TCompactProtocol3.prototype.readI32 = function() {
      return this.zigzagToI32(this.readVarint32());
    };
    TCompactProtocol3.prototype.readI64 = function() {
      return this.zigzagToI64(this.readVarint64());
    };
    TCompactProtocol3.prototype.readDouble = function() {
      var buff = this.trans.read(8);
      var off2 = 0;
      var signed = buff[off2 + 7] & 128;
      var e = (buff[off2 + 6] & 240) >> 4;
      e += (buff[off2 + 7] & 127) << 4;
      var m = buff[off2];
      m += buff[off2 + 1] << 8;
      m += buff[off2 + 2] << 16;
      m += buff[off2 + 3] * POW_24;
      m += buff[off2 + 4] * POW_32;
      m += buff[off2 + 5] * POW_40;
      m += (buff[off2 + 6] & 15) * POW_48;
      switch (e) {
        case 0:
          e = -1022;
          break;
        case 2047:
          return m ? NaN : signed ? -Infinity : Infinity;
        default:
          m += POW_52;
          e -= 1023;
      }
      if (signed) {
        m *= -1;
      }
      return m * Math.pow(2, e - 52);
    };
    TCompactProtocol3.prototype.readBinary = function() {
      var size = this.readVarint32();
      if (size === 0) {
        return new Buffer(0);
      }
      if (size < 0) {
        throw new Thrift6.TProtocolException(Thrift6.TProtocolExceptionType.NEGATIVE_SIZE, "Negative binary size");
      }
      return this.trans.read(size);
    };
    TCompactProtocol3.prototype.readString = function() {
      var size = this.readVarint32();
      if (size === 0) {
        return "";
      }
      if (size < 0) {
        throw new Thrift6.TProtocolException(Thrift6.TProtocolExceptionType.NEGATIVE_SIZE, "Negative string size");
      }
      return this.trans.readString(size);
    };
    TCompactProtocol3.prototype.readVarint32 = function() {
      return this.readVarint64().toNumber();
    };
    TCompactProtocol3.prototype.readVarint64 = function() {
      var rsize = 0;
      var lo = 0;
      var hi = 0;
      var shift = 0;
      while (true) {
        var b = this.trans.readByte();
        rsize++;
        if (shift <= 25) {
          lo = lo | (b & 127) << shift;
        } else if (25 < shift && shift < 32) {
          lo = lo | (b & 127) << shift;
          hi = hi | (b & 127) >>> 32 - shift;
        } else {
          hi = hi | (b & 127) << shift - 32;
        }
        shift += 7;
        if (!(b & 128)) {
          break;
        }
        if (rsize >= 10) {
          throw new Thrift6.TProtocolException(Thrift6.TProtocolExceptionType.INVALID_DATA, "Variable-length int over 10 bytes.");
        }
      }
      return new Int642(hi, lo);
    };
    TCompactProtocol3.prototype.zigzagToI32 = function(n) {
      return n >>> 1 ^ -1 * (n & 1);
    };
    TCompactProtocol3.prototype.zigzagToI64 = function(n) {
      var hi = n.buffer.readUInt32BE(0, true);
      var lo = n.buffer.readUInt32BE(4, true);
      var neg = new Int642(hi & 0, lo & 1);
      neg._2scomp();
      var hi_neg = neg.buffer.readUInt32BE(0, true);
      var lo_neg = neg.buffer.readUInt32BE(4, true);
      var hi_lo = hi << 31;
      hi = hi >>> 1 ^ hi_neg;
      lo = (lo >>> 1 | hi_lo) ^ lo_neg;
      return new Int642(hi, lo);
    };
    TCompactProtocol3.prototype.skip = function(type) {
      switch (type) {
        case Type.BOOL:
          this.readBool();
          break;
        case Type.BYTE:
          this.readByte();
          break;
        case Type.I16:
          this.readI16();
          break;
        case Type.I32:
          this.readI32();
          break;
        case Type.I64:
          this.readI64();
          break;
        case Type.DOUBLE:
          this.readDouble();
          break;
        case Type.STRING:
          this.readString();
          break;
        case Type.STRUCT:
          this.readStructBegin();
          while (true) {
            var r = this.readFieldBegin();
            if (r.ftype === Type.STOP) {
              break;
            }
            this.skip(r.ftype);
            this.readFieldEnd();
          }
          this.readStructEnd();
          break;
        case Type.MAP:
          var mapBegin = this.readMapBegin();
          for (var i = 0; i < mapBegin.size; ++i) {
            this.skip(mapBegin.ktype);
            this.skip(mapBegin.vtype);
          }
          this.readMapEnd();
          break;
        case Type.SET:
          var setBegin = this.readSetBegin();
          for (var i2 = 0; i2 < setBegin.size; ++i2) {
            this.skip(setBegin.etype);
          }
          this.readSetEnd();
          break;
        case Type.LIST:
          var listBegin = this.readListBegin();
          for (var i3 = 0; i3 < listBegin.size; ++i3) {
            this.skip(listBegin.etype);
          }
          this.readListEnd();
          break;
        default:
          throw new Error("Invalid type: " + type);
      }
    };
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/binary_protocol.js
var require_binary_protocol = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/binary_protocol.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var log4 = require_log();
    var binary = require_binary();
    var Int642 = require_Int64();
    var Thrift6 = require_thrift();
    var Type = Thrift6.Type;
    module.exports = TBinaryProtocol4;
    var VERSION_MASK = -65536;
    var VERSION_1 = -2147418112;
    var TYPE_MASK = 255;
    TBinaryProtocol4.VERSION_MASK = VERSION_MASK;
    TBinaryProtocol4.VERSION_1 = VERSION_1;
    TBinaryProtocol4.TYPE_MASK = TYPE_MASK;
    function TBinaryProtocol4(trans, strictRead, strictWrite) {
      this.trans = trans;
      this.strictRead = strictRead !== void 0 ? strictRead : false;
      this.strictWrite = strictWrite !== void 0 ? strictWrite : true;
      this._seqid = null;
    }
    __name(TBinaryProtocol4, "TBinaryProtocol");
    TBinaryProtocol4.prototype.flush = function() {
      return this.trans.flush();
    };
    TBinaryProtocol4.prototype.writeMessageBegin = function(name, type, seqid) {
      if (this.strictWrite) {
        this.writeI32(VERSION_1 | type);
        this.writeString(name);
        this.writeI32(seqid);
      } else {
        this.writeString(name);
        this.writeByte(type);
        this.writeI32(seqid);
      }
      if (this._seqid !== null) {
        log4.warning("SeqId already set", { "name": name });
      } else {
        this._seqid = seqid;
        this.trans.setCurrSeqId(seqid);
      }
    };
    TBinaryProtocol4.prototype.writeMessageEnd = function() {
      if (this._seqid !== null) {
        this._seqid = null;
      } else {
        log4.warning("No seqid to unset");
      }
    };
    TBinaryProtocol4.prototype.writeStructBegin = function(name) {
    };
    TBinaryProtocol4.prototype.writeStructEnd = function() {
    };
    TBinaryProtocol4.prototype.writeFieldBegin = function(name, type, id) {
      this.writeByte(type);
      this.writeI16(id);
    };
    TBinaryProtocol4.prototype.writeFieldEnd = function() {
    };
    TBinaryProtocol4.prototype.writeFieldStop = function() {
      this.writeByte(Type.STOP);
    };
    TBinaryProtocol4.prototype.writeMapBegin = function(ktype, vtype, size) {
      this.writeByte(ktype);
      this.writeByte(vtype);
      this.writeI32(size);
    };
    TBinaryProtocol4.prototype.writeMapEnd = function() {
    };
    TBinaryProtocol4.prototype.writeListBegin = function(etype, size) {
      this.writeByte(etype);
      this.writeI32(size);
    };
    TBinaryProtocol4.prototype.writeListEnd = function() {
    };
    TBinaryProtocol4.prototype.writeSetBegin = function(etype, size) {
      this.writeByte(etype);
      this.writeI32(size);
    };
    TBinaryProtocol4.prototype.writeSetEnd = function() {
    };
    TBinaryProtocol4.prototype.writeBool = function(bool) {
      if (bool) {
        this.writeByte(1);
      } else {
        this.writeByte(0);
      }
    };
    TBinaryProtocol4.prototype.writeByte = function(b) {
      this.trans.write(new Buffer([b]));
    };
    TBinaryProtocol4.prototype.writeI16 = function(i16) {
      this.trans.write(binary.writeI16(new Buffer(2), i16));
    };
    TBinaryProtocol4.prototype.writeI32 = function(i32) {
      this.trans.write(binary.writeI32(new Buffer(4), i32));
    };
    TBinaryProtocol4.prototype.writeI64 = function(i64) {
      if (i64.buffer) {
        this.trans.write(i64.buffer);
      } else {
        this.trans.write(new Int642(i64).buffer);
      }
    };
    TBinaryProtocol4.prototype.writeDouble = function(dub) {
      this.trans.write(binary.writeDouble(new Buffer(8), dub));
    };
    TBinaryProtocol4.prototype.writeStringOrBinary = function(name, encoding, arg) {
      if (typeof arg === "string") {
        this.writeI32(Buffer.byteLength(arg, encoding));
        this.trans.write(new Buffer(arg, encoding));
      } else if (arg instanceof Buffer || Object.prototype.toString.call(arg) == "[object Uint8Array]") {
        this.writeI32(arg.length);
        this.trans.write(arg);
      } else {
        throw new Error(name + " called without a string/Buffer argument: " + arg);
      }
    };
    TBinaryProtocol4.prototype.writeString = function(arg) {
      this.writeStringOrBinary("writeString", "utf8", arg);
    };
    TBinaryProtocol4.prototype.writeBinary = function(arg) {
      this.writeStringOrBinary("writeBinary", "binary", arg);
    };
    TBinaryProtocol4.prototype.readMessageBegin = function() {
      var sz = this.readI32();
      var type, name, seqid;
      if (sz < 0) {
        var version2 = sz & VERSION_MASK;
        if (version2 != VERSION_1) {
          throw new Thrift6.TProtocolException(Thrift6.TProtocolExceptionType.BAD_VERSION, "Bad version in readMessageBegin: " + sz);
        }
        type = sz & TYPE_MASK;
        name = this.readString();
        seqid = this.readI32();
      } else {
        if (this.strictRead) {
          throw new Thrift6.TProtocolException(Thrift6.TProtocolExceptionType.BAD_VERSION, "No protocol version header");
        }
        name = this.trans.read(sz);
        type = this.readByte();
        seqid = this.readI32();
      }
      return { fname: name, mtype: type, rseqid: seqid };
    };
    TBinaryProtocol4.prototype.readMessageEnd = function() {
    };
    TBinaryProtocol4.prototype.readStructBegin = function() {
      return { fname: "" };
    };
    TBinaryProtocol4.prototype.readStructEnd = function() {
    };
    TBinaryProtocol4.prototype.readFieldBegin = function() {
      var type = this.readByte();
      if (type == Type.STOP) {
        return { fname: null, ftype: type, fid: 0 };
      }
      var id = this.readI16();
      return { fname: null, ftype: type, fid: id };
    };
    TBinaryProtocol4.prototype.readFieldEnd = function() {
    };
    TBinaryProtocol4.prototype.readMapBegin = function() {
      var ktype = this.readByte();
      var vtype = this.readByte();
      var size = this.readI32();
      return { ktype, vtype, size };
    };
    TBinaryProtocol4.prototype.readMapEnd = function() {
    };
    TBinaryProtocol4.prototype.readListBegin = function() {
      var etype = this.readByte();
      var size = this.readI32();
      return { etype, size };
    };
    TBinaryProtocol4.prototype.readListEnd = function() {
    };
    TBinaryProtocol4.prototype.readSetBegin = function() {
      var etype = this.readByte();
      var size = this.readI32();
      return { etype, size };
    };
    TBinaryProtocol4.prototype.readSetEnd = function() {
    };
    TBinaryProtocol4.prototype.readBool = function() {
      var b = this.readByte();
      if (b === 0) {
        return false;
      }
      return true;
    };
    TBinaryProtocol4.prototype.readByte = function() {
      return this.trans.readByte();
    };
    TBinaryProtocol4.prototype.readI16 = function() {
      return this.trans.readI16();
    };
    TBinaryProtocol4.prototype.readI32 = function() {
      return this.trans.readI32();
    };
    TBinaryProtocol4.prototype.readI64 = function() {
      var buff = this.trans.read(8);
      return new Int642(buff);
    };
    TBinaryProtocol4.prototype.readDouble = function() {
      return this.trans.readDouble();
    };
    TBinaryProtocol4.prototype.readBinary = function() {
      var len = this.readI32();
      if (len === 0) {
        return new Buffer(0);
      }
      if (len < 0) {
        throw new Thrift6.TProtocolException(Thrift6.TProtocolExceptionType.NEGATIVE_SIZE, "Negative binary size");
      }
      return this.trans.read(len);
    };
    TBinaryProtocol4.prototype.readString = function() {
      var len = this.readI32();
      if (len === 0) {
        return "";
      }
      if (len < 0) {
        throw new Thrift6.TProtocolException(Thrift6.TProtocolExceptionType.NEGATIVE_SIZE, "Negative string size");
      }
      return this.trans.readString(len);
    };
    TBinaryProtocol4.prototype.getTransport = function() {
      return this.trans;
    };
    TBinaryProtocol4.prototype.skip = function(type) {
      switch (type) {
        case Type.BOOL:
          this.readBool();
          break;
        case Type.BYTE:
          this.readByte();
          break;
        case Type.I16:
          this.readI16();
          break;
        case Type.I32:
          this.readI32();
          break;
        case Type.I64:
          this.readI64();
          break;
        case Type.DOUBLE:
          this.readDouble();
          break;
        case Type.STRING:
          this.readString();
          break;
        case Type.STRUCT:
          this.readStructBegin();
          while (true) {
            var r = this.readFieldBegin();
            if (r.ftype === Type.STOP) {
              break;
            }
            this.skip(r.ftype);
            this.readFieldEnd();
          }
          this.readStructEnd();
          break;
        case Type.MAP:
          var mapBegin = this.readMapBegin();
          for (var i = 0; i < mapBegin.size; ++i) {
            this.skip(mapBegin.ktype);
            this.skip(mapBegin.vtype);
          }
          this.readMapEnd();
          break;
        case Type.SET:
          var setBegin = this.readSetBegin();
          for (var i2 = 0; i2 < setBegin.size; ++i2) {
            this.skip(setBegin.etype);
          }
          this.readSetEnd();
          break;
        case Type.LIST:
          var listBegin = this.readListBegin();
          for (var i3 = 0; i3 < listBegin.size; ++i3) {
            this.skip(listBegin.etype);
          }
          this.readListEnd();
          break;
        default:
          throw new Error("Invalid type: " + type);
      }
    };
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/header_transport.js
var require_header_transport = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/header_transport.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var util = require_util();
    var TCompactProtocol3 = require_compact_protocol();
    var TBinaryProtocol4 = require_binary_protocol();
    var InputBufferUnderrunError = require_input_buffer_underrun_error();
    function THeaderTransportError(message) {
      Error.call(this);
      if (Error.captureStackTrace !== void 0) {
        Error.captureStackTrace(this, this.constructor);
      }
      this.name = this.constructor.name;
      this.message = message;
    }
    __name(THeaderTransportError, "THeaderTransportError");
    util.inherits(THeaderTransportError, Error);
    module.exports = THeaderTransport;
    var COMPACT_PROTOCOL_OFFSET = 0;
    var COMPACT_PROTOCOL_VERSION_OFFSET = 1;
    var FRAME_SIZE_OFFSET = 0;
    var HEADER_MAGIC_OFFSET = 32 / 8;
    var FLAGS_OFFSET = 48 / 8;
    var SEQID_OFFSET = 64 / 8;
    var HEADER_SIZE_OFFSET = 96 / 8;
    var HEADER_START_OFFSET = 112 / 8;
    var HEADER_MAGIC = 4095;
    var TINFO_HEADER_KEY_VALUE_TYPE = 1;
    var MAX_FRAME_SIZE = 1073741823;
    function VarintHelper(readBuffer) {
      var TBufferedTransport2 = require_buffered_transport();
      this.outputBuffer = null;
      var _this = this;
      this.transport = new TBufferedTransport2(null, function(output) {
        _this.outputBuffer = output;
      });
      this.transport.inBuf = readBuffer || Buffer.alloc(0);
      this.transport.writeCursor = this.transport.inBuf.length;
      this.protocol = new TCompactProtocol3(this.transport);
    }
    __name(VarintHelper, "VarintHelper");
    VarintHelper.prototype.readVarint32 = function() {
      return this.protocol.readVarint32();
    };
    VarintHelper.prototype.writeVarint32 = function(i) {
      this.protocol.writeVarint32(i);
    };
    VarintHelper.prototype.readString = function() {
      return this.protocol.readString();
    };
    VarintHelper.prototype.writeString = function(str) {
      this.protocol.writeString(str);
    };
    VarintHelper.prototype.getOutCount = function() {
      return this.transport.outCount;
    };
    VarintHelper.prototype.write = function(str) {
      this.transport.write(str);
    };
    VarintHelper.prototype.toBuffer = function() {
      this.transport.flush();
      return this.outputBuffer;
    };
    THeaderTransport.SubprotocolId = {
      BINARY: 0,
      JSON: 1,
      COMPACT: 2
    };
    function THeaderTransport() {
      this.maxFrameSize = MAX_FRAME_SIZE;
      this.protocolId = THeaderTransport.SubprotocolId.BINARY;
      this.rheaders = {};
      this.wheaders = {};
      this.inBuf = Buffer.alloc(0);
      this.outCount = 0;
      this.flags = null;
      this.seqid = 0;
      this.shouldWriteHeaders = true;
    }
    __name(THeaderTransport, "THeaderTransport");
    var validateHeaders = /* @__PURE__ */ __name(function(key, value) {
      if (typeof key !== "string" || typeof value !== "string") {
        throw new THeaderTransportError("Header key and values must be strings");
      }
    }, "validateHeaders");
    var validateProtocolId = /* @__PURE__ */ __name(function(protocolId) {
      var protocols = Object.keys(THeaderTransport.SubprotocolId);
      for (var i = 0; i < protocols.length; i++) {
        if (protocolId === THeaderTransport.SubprotocolId[protocols[i]])
          return true;
      }
      throw new Error(protocolId + " is not a valid protocol id");
    }, "validateProtocolId");
    THeaderTransport.prototype.setSeqId = function(seqid) {
      this.seqid = seqid;
    };
    THeaderTransport.prototype.getSeqId = function(seqid) {
      return this.seqid;
    };
    THeaderTransport.prototype.setFlags = function(flags) {
      this.flags = flags;
    };
    THeaderTransport.prototype.getReadHeaders = function() {
      return this.rheaders;
    };
    THeaderTransport.prototype.setReadHeader = function(key, value) {
      validateHeaders(key, value);
      this.rheaders[key] = value;
    };
    THeaderTransport.prototype.clearReadHeaders = function() {
      this.rheaders = {};
    };
    THeaderTransport.prototype.getWriteHeaders = function() {
      return this.wheaders;
    };
    THeaderTransport.prototype.setWriteHeader = function(key, value) {
      validateHeaders(key, value);
      this.wheaders[key] = value;
    };
    THeaderTransport.prototype.clearWriteHeaders = function() {
      this.wheaders = {};
    };
    THeaderTransport.prototype.setMaxFrameSize = function(frameSize) {
      this.maxFrameSize = frameSize;
    };
    THeaderTransport.prototype.setProtocolId = function(protocolId) {
      validateProtocolId(protocolId);
      this.protocolId = protocolId;
    };
    THeaderTransport.prototype.getProtocolId = function() {
      return this.protocolId;
    };
    var isUnframedBinary = /* @__PURE__ */ __name(function(readBuffer) {
      var version2 = readBuffer.readInt32BE();
      return (version2 & TBinaryProtocol4.VERSION_MASK) === TBinaryProtocol4.VERSION_1;
    }, "isUnframedBinary");
    var isUnframedCompact = /* @__PURE__ */ __name(function(readBuffer) {
      var protocolId = readBuffer.readInt8(COMPACT_PROTOCOL_OFFSET);
      var version2 = readBuffer.readInt8(COMPACT_PROTOCOL_VERSION_OFFSET);
      return protocolId === TCompactProtocol3.PROTOCOL_ID && (version2 & TCompactProtocol3.VERSION_MASK) === TCompactProtocol3.VERSION_N;
    }, "isUnframedCompact");
    THeaderTransport.prototype.readHeaders = function() {
      var readBuffer = this.inBuf;
      var isUnframed = false;
      if (isUnframedBinary(readBuffer)) {
        this.setProtocolId(THeaderTransport.SubprotocolId.BINARY);
        isUnframed = true;
      }
      if (isUnframedCompact(readBuffer)) {
        this.setProtocolId(THeaderTransport.SubprotocolId.COMPACT);
        isUnframed = true;
      }
      if (isUnframed) {
        this.shouldWriteHeaders = false;
        return;
      }
      var frameSize = readBuffer.readInt32BE(FRAME_SIZE_OFFSET);
      if (frameSize > this.maxFrameSize) {
        throw new THeaderTransportError("Frame exceeds maximum frame size");
      }
      var headerMagic = readBuffer.readInt16BE(HEADER_MAGIC_OFFSET);
      this.shouldWriteHeaders = headerMagic === HEADER_MAGIC;
      if (!this.shouldWriteHeaders) {
        return;
      }
      this.setFlags(readBuffer.readInt16BE(FLAGS_OFFSET));
      this.setSeqId(readBuffer.readInt32BE(SEQID_OFFSET));
      var headerSize = readBuffer.readInt16BE(HEADER_SIZE_OFFSET) * 4;
      var endOfHeaders = HEADER_START_OFFSET + headerSize;
      if (endOfHeaders > readBuffer.length) {
        throw new THeaderTransportError("Header size is greater than frame size");
      }
      var headerBuffer = Buffer.alloc(headerSize);
      readBuffer.copy(headerBuffer, 0, HEADER_START_OFFSET, endOfHeaders);
      var varintHelper = new VarintHelper(headerBuffer);
      this.setProtocolId(varintHelper.readVarint32());
      var transformCount = varintHelper.readVarint32();
      if (transformCount > 0) {
        throw new THeaderTransportError("Transforms are not yet supported");
      }
      while (true) {
        try {
          var headerType = varintHelper.readVarint32();
          if (headerType !== TINFO_HEADER_KEY_VALUE_TYPE) {
            break;
          }
          var numberOfHeaders = varintHelper.readVarint32();
          for (var i = 0; i < numberOfHeaders; i++) {
            var key = varintHelper.readString();
            var value = varintHelper.readString();
            this.setReadHeader(key, value);
          }
        } catch (e) {
          if (e instanceof InputBufferUnderrunError) {
            break;
          }
          throw e;
        }
      }
      this.read(endOfHeaders);
      return this.getReadHeaders();
    };
    THeaderTransport.prototype.writeHeaders = function() {
      if (!this.shouldWriteHeaders) {
        return;
      }
      var headers = this.getWriteHeaders();
      var varintWriter = new VarintHelper();
      varintWriter.writeVarint32(this.protocolId);
      varintWriter.writeVarint32(0);
      var headerKeys = Object.keys(headers);
      if (headerKeys.length > 0) {
        varintWriter.writeVarint32(TINFO_HEADER_KEY_VALUE_TYPE);
        varintWriter.writeVarint32(headerKeys.length);
        for (var i = 0; i < headerKeys.length; i++) {
          var key = headerKeys[i];
          var value = headers[key];
          varintWriter.writeString(key);
          varintWriter.writeString(value);
        }
      }
      var headerSizeWithoutPadding = varintWriter.getOutCount();
      var paddingNeeded = (4 - headerSizeWithoutPadding % 4) % 4;
      var headerSize = Buffer.alloc(2);
      headerSize.writeInt16BE(Math.floor((headerSizeWithoutPadding + paddingNeeded) / 4));
      var paddingBuffer = Buffer.alloc(paddingNeeded);
      paddingBuffer.fill(0);
      varintWriter.write(paddingBuffer);
      var headerContentBuffer = varintWriter.toBuffer();
      var frameSize = Buffer.alloc(4);
      frameSize.writeInt32BE(10 + this.outCount + headerContentBuffer.length);
      var headerMagic = Buffer.alloc(2);
      headerMagic.writeInt16BE(HEADER_MAGIC);
      var flags = Buffer.alloc(2);
      flags.writeInt16BE(0);
      var seqid = Buffer.alloc(4);
      seqid.writeInt32BE(this.getSeqId());
      var headerBuffer = Buffer.concat([
        frameSize,
        headerMagic,
        flags,
        seqid,
        headerSize,
        headerContentBuffer
      ]);
      this.outBuffers.unshift(headerBuffer);
      this.outCount += headerBuffer.length;
    };
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/buffered_transport.js
var require_buffered_transport = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/buffered_transport.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var binary = require_binary();
    var InputBufferUnderrunError = require_input_buffer_underrun_error();
    var THeaderTransport = require_header_transport();
    module.exports = TBufferedTransport2;
    function TBufferedTransport2(buffer, callback) {
      THeaderTransport.call(this);
      this.defaultReadBufferSize = 1024;
      this.writeBufferSize = 512;
      this.inBuf = new Buffer(this.defaultReadBufferSize);
      this.readCursor = 0;
      this.writeCursor = 0;
      this.outBuffers = [];
      this.outCount = 0;
      this.onFlush = callback;
    }
    __name(TBufferedTransport2, "TBufferedTransport");
    Object.setPrototypeOf(TBufferedTransport2.prototype, THeaderTransport.prototype);
    TBufferedTransport2.prototype.reset = function() {
      this.inBuf = new Buffer(this.defaultReadBufferSize);
      this.readCursor = 0;
      this.writeCursor = 0;
      this.outBuffers = [];
      this.outCount = 0;
    };
    TBufferedTransport2.receiver = function(callback, seqid) {
      var reader = new TBufferedTransport2();
      return function(data) {
        if (reader.writeCursor + data.length > reader.inBuf.length) {
          var buf = new Buffer(reader.writeCursor + data.length);
          reader.inBuf.copy(buf, 0, 0, reader.writeCursor);
          reader.inBuf = buf;
        }
        data.copy(reader.inBuf, reader.writeCursor, 0);
        reader.writeCursor += data.length;
        callback(reader, seqid);
      };
    };
    TBufferedTransport2.prototype.commitPosition = function() {
      var unreadSize = this.writeCursor - this.readCursor;
      var bufSize = unreadSize * 2 > this.defaultReadBufferSize ? unreadSize * 2 : this.defaultReadBufferSize;
      var buf = new Buffer(bufSize);
      if (unreadSize > 0) {
        this.inBuf.copy(buf, 0, this.readCursor, this.writeCursor);
      }
      this.readCursor = 0;
      this.writeCursor = unreadSize;
      this.inBuf = buf;
    };
    TBufferedTransport2.prototype.rollbackPosition = function() {
      this.readCursor = 0;
    };
    TBufferedTransport2.prototype.isOpen = function() {
      return true;
    };
    TBufferedTransport2.prototype.open = function() {
    };
    TBufferedTransport2.prototype.close = function() {
    };
    TBufferedTransport2.prototype.setCurrSeqId = function(seqid) {
      this._seqid = seqid;
    };
    TBufferedTransport2.prototype.ensureAvailable = function(len) {
      if (this.readCursor + len > this.writeCursor) {
        throw new InputBufferUnderrunError();
      }
    };
    TBufferedTransport2.prototype.read = function(len) {
      this.ensureAvailable(len);
      var buf = new Buffer(len);
      this.inBuf.copy(buf, 0, this.readCursor, this.readCursor + len);
      this.readCursor += len;
      return buf;
    };
    TBufferedTransport2.prototype.readByte = function() {
      this.ensureAvailable(1);
      return binary.readByte(this.inBuf[this.readCursor++]);
    };
    TBufferedTransport2.prototype.readI16 = function() {
      this.ensureAvailable(2);
      var i16 = binary.readI16(this.inBuf, this.readCursor);
      this.readCursor += 2;
      return i16;
    };
    TBufferedTransport2.prototype.readI32 = function() {
      this.ensureAvailable(4);
      var i32 = binary.readI32(this.inBuf, this.readCursor);
      this.readCursor += 4;
      return i32;
    };
    TBufferedTransport2.prototype.readDouble = function() {
      this.ensureAvailable(8);
      var d = binary.readDouble(this.inBuf, this.readCursor);
      this.readCursor += 8;
      return d;
    };
    TBufferedTransport2.prototype.readString = function(len) {
      this.ensureAvailable(len);
      var str = this.inBuf.toString("utf8", this.readCursor, this.readCursor + len);
      this.readCursor += len;
      return str;
    };
    TBufferedTransport2.prototype.borrow = function() {
      var obj = { buf: this.inBuf, readIndex: this.readCursor, writeIndex: this.writeCursor };
      return obj;
    };
    TBufferedTransport2.prototype.consume = function(bytesConsumed) {
      this.readCursor += bytesConsumed;
    };
    TBufferedTransport2.prototype.write = function(buf) {
      if (typeof buf === "string") {
        buf = new Buffer(buf, "utf8");
      }
      this.outBuffers.push(buf);
      this.outCount += buf.length;
    };
    TBufferedTransport2.prototype.flush = function() {
      var seqid = this._seqid;
      this._seqid = null;
      if (this.outCount < 1) {
        return;
      }
      var msg = new Buffer(this.outCount), pos = 0;
      this.outBuffers.forEach(function(buf) {
        buf.copy(msg, pos, 0);
        pos += buf.length;
      });
      if (this.onFlush) {
        this.onFlush(msg, seqid);
      }
      this.outBuffers = [];
      this.outCount = 0;
    };
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/int64_util.js
var require_int64_util = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/int64_util.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var Int642 = require_Int64();
    var Int64Util = module.exports = {};
    var POW2_24 = Math.pow(2, 24);
    var POW2_31 = Math.pow(2, 31);
    var POW2_32 = Math.pow(2, 32);
    var POW10_11 = Math.pow(10, 11);
    Int64Util.toDecimalString = function(i64) {
      var b = i64.buffer;
      var o = i64.offset;
      if (!b[o] && !(b[o + 1] & 224) || !~b[o] && !~(b[o + 1] & 224)) {
        return i64.toString();
      } else {
        var negative = b[o] & 128;
        if (negative) {
          var incremented = false;
          var buffer = new Buffer(8);
          for (var i = 7; i >= 0; --i) {
            buffer[i] = ~b[o + i] + (incremented ? 0 : 1) & 255;
            incremented |= b[o + i];
          }
          b = buffer;
        }
        var high2 = b[o + 1] + (b[o] << 8);
        var low = b[o + 7] + (b[o + 6] << 8) + (b[o + 5] << 16) + b[o + 4] * POW2_24 + (b[o + 3] + (b[o + 2] << 8)) * POW2_32 + high2 * 74976710656;
        var high = Math.floor(low / POW10_11) + high2 * 2814;
        low = ("00000000000" + String(low % POW10_11)).slice(-11);
        return (negative ? "-" : "") + String(high) + low;
      }
    };
    Int64Util.fromDecimalString = function(text) {
      var negative = text.charAt(0) === "-";
      if (text.length < (negative ? 17 : 16)) {
        return new Int642(+text);
      } else if (text.length > (negative ? 20 : 19)) {
        throw new RangeError("Too many digits for Int64: " + text);
      } else {
        var high5 = +text.slice(negative ? 1 : 0, -15);
        var low = +text.slice(-15) + high5 * 2764472320;
        var high = Math.floor(low / POW2_32) + high5 * 232830;
        low = low % POW2_32;
        if (high >= POW2_31 && !(negative && high == POW2_31 && low == 0)) {
          throw new RangeError("The magnitude is too large for Int64.");
        }
        if (negative) {
          high = ~high;
          if (low === 0) {
            high = high + 1 & 4294967295;
          } else {
            low = ~low + 1;
          }
          high = 2147483648 | high;
        }
        return new Int642(high, low);
      }
    };
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/json_parse.js
var require_json_parse = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/json_parse.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var Int642 = require_Int64();
    var Int64Util = require_int64_util();
    var json_parse = module.exports = function() {
      "use strict";
      var at, ch, escapee = {
        '"': '"',
        "\\": "\\",
        "/": "/",
        b: "\b",
        f: "\f",
        n: "\n",
        r: "\r",
        t: "	"
      }, text, error3 = /* @__PURE__ */ __name(function(m) {
        throw new SyntaxError(m);
      }, "error"), next = /* @__PURE__ */ __name(function(c) {
        if (c && c !== ch) {
          error3("Expected '" + c + "' instead of '" + ch + "'");
        }
        ch = text.charAt(at);
        at += 1;
        return ch;
      }, "next"), number = /* @__PURE__ */ __name(function() {
        var number2, string2 = "";
        if (ch === "-") {
          string2 = "-";
          next("-");
        }
        while (ch >= "0" && ch <= "9") {
          string2 += ch;
          next();
        }
        if (ch === ".") {
          string2 += ".";
          while (next() && ch >= "0" && ch <= "9") {
            string2 += ch;
          }
        }
        if (ch === "e" || ch === "E") {
          string2 += ch;
          next();
          if (ch === "-" || ch === "+") {
            string2 += ch;
            next();
          }
          while (ch >= "0" && ch <= "9") {
            string2 += ch;
            next();
          }
        }
        number2 = +string2;
        if (!isFinite(number2)) {
          error3("Bad number");
        } else if (number2 >= Int642.MAX_INT || number2 <= Int642.MIN_INT) {
          return string2;
        } else {
          return number2;
        }
      }, "number"), string = /* @__PURE__ */ __name(function() {
        var hex, i, string2 = "", uffff;
        if (ch === '"') {
          while (next()) {
            if (ch === '"') {
              next();
              return string2;
            }
            if (ch === "\\") {
              next();
              if (ch === "u") {
                uffff = 0;
                for (i = 0; i < 4; i += 1) {
                  hex = parseInt(next(), 16);
                  if (!isFinite(hex)) {
                    break;
                  }
                  uffff = uffff * 16 + hex;
                }
                string2 += String.fromCharCode(uffff);
              } else if (typeof escapee[ch] === "string") {
                string2 += escapee[ch];
              } else {
                break;
              }
            } else {
              string2 += ch;
            }
          }
        }
        error3("Bad string");
      }, "string"), white = /* @__PURE__ */ __name(function() {
        while (ch && ch <= " ") {
          next();
        }
      }, "white"), word = /* @__PURE__ */ __name(function() {
        switch (ch) {
          case "t":
            next("t");
            next("r");
            next("u");
            next("e");
            return true;
          case "f":
            next("f");
            next("a");
            next("l");
            next("s");
            next("e");
            return false;
          case "n":
            next("n");
            next("u");
            next("l");
            next("l");
            return null;
        }
        error3("Unexpected '" + ch + "'");
      }, "word"), value, array = /* @__PURE__ */ __name(function() {
        var array2 = [];
        if (ch === "[") {
          next("[");
          white();
          if (ch === "]") {
            next("]");
            return array2;
          }
          while (ch) {
            array2.push(value());
            white();
            if (ch === "]") {
              next("]");
              return array2;
            }
            next(",");
            white();
          }
        }
        error3("Bad array");
      }, "array"), object = /* @__PURE__ */ __name(function() {
        var key, object2 = {};
        if (ch === "{") {
          next("{");
          white();
          if (ch === "}") {
            next("}");
            return object2;
          }
          while (ch) {
            key = string();
            white();
            next(":");
            if (Object.hasOwnProperty.call(object2, key)) {
              error3('Duplicate key "' + key + '"');
            }
            object2[key] = value();
            white();
            if (ch === "}") {
              next("}");
              return object2;
            }
            next(",");
            white();
          }
        }
        error3("Bad object");
      }, "object");
      value = /* @__PURE__ */ __name(function() {
        white();
        switch (ch) {
          case "{":
            return object();
          case "[":
            return array();
          case '"':
            return string();
          case "-":
            return number();
          default:
            return ch >= "0" && ch <= "9" ? number() : word();
        }
      }, "value");
      return function(source) {
        var result;
        text = source;
        at = 0;
        ch = " ";
        result = value();
        white();
        if (ch) {
          error3("Syntax error");
        }
        return result;
      };
    }();
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/json_protocol.js
var require_json_protocol = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/json_protocol.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var Int642 = require_Int64();
    var Thrift6 = require_thrift();
    var Type = Thrift6.Type;
    var util = require_util();
    var Int64Util = require_int64_util();
    var json_parse = require_json_parse();
    var InputBufferUnderrunError = require_input_buffer_underrun_error();
    module.exports = TJSONProtocol;
    function TJSONProtocol(trans) {
      this.tstack = [];
      this.tpos = [];
      this.trans = trans;
    }
    __name(TJSONProtocol, "TJSONProtocol");
    TJSONProtocol.Type = {};
    TJSONProtocol.Type[Type.BOOL] = '"tf"';
    TJSONProtocol.Type[Type.BYTE] = '"i8"';
    TJSONProtocol.Type[Type.I16] = '"i16"';
    TJSONProtocol.Type[Type.I32] = '"i32"';
    TJSONProtocol.Type[Type.I64] = '"i64"';
    TJSONProtocol.Type[Type.DOUBLE] = '"dbl"';
    TJSONProtocol.Type[Type.STRUCT] = '"rec"';
    TJSONProtocol.Type[Type.STRING] = '"str"';
    TJSONProtocol.Type[Type.MAP] = '"map"';
    TJSONProtocol.Type[Type.LIST] = '"lst"';
    TJSONProtocol.Type[Type.SET] = '"set"';
    TJSONProtocol.RType = {};
    TJSONProtocol.RType.tf = Type.BOOL;
    TJSONProtocol.RType.i8 = Type.BYTE;
    TJSONProtocol.RType.i16 = Type.I16;
    TJSONProtocol.RType.i32 = Type.I32;
    TJSONProtocol.RType.i64 = Type.I64;
    TJSONProtocol.RType.dbl = Type.DOUBLE;
    TJSONProtocol.RType.rec = Type.STRUCT;
    TJSONProtocol.RType.str = Type.STRING;
    TJSONProtocol.RType.map = Type.MAP;
    TJSONProtocol.RType.lst = Type.LIST;
    TJSONProtocol.RType.set = Type.SET;
    TJSONProtocol.Version = 1;
    TJSONProtocol.prototype.flush = function() {
      this.writeToTransportIfStackIsFlushable();
      return this.trans.flush();
    };
    TJSONProtocol.prototype.writeToTransportIfStackIsFlushable = function() {
      if (this.tstack.length === 1) {
        this.trans.write(this.tstack.pop());
      }
    };
    TJSONProtocol.prototype.writeMessageBegin = function(name, messageType, seqid) {
      this.tstack.push([TJSONProtocol.Version, '"' + name + '"', messageType, seqid]);
    };
    TJSONProtocol.prototype.writeMessageEnd = function() {
      var obj = this.tstack.pop();
      this.wobj = this.tstack.pop();
      this.wobj.push(obj);
      this.wbuf = "[" + this.wobj.join(",") + "]";
      this.trans.write(this.wbuf);
    };
    TJSONProtocol.prototype.writeStructBegin = function(name) {
      this.tpos.push(this.tstack.length);
      this.tstack.push({});
    };
    TJSONProtocol.prototype.writeStructEnd = function() {
      var p = this.tpos.pop();
      var struct = this.tstack[p];
      var str = "{";
      var first = true;
      for (var key in struct) {
        if (first) {
          first = false;
        } else {
          str += ",";
        }
        str += key + ":" + struct[key];
      }
      str += "}";
      this.tstack[p] = str;
      this.writeToTransportIfStackIsFlushable();
    };
    TJSONProtocol.prototype.writeFieldBegin = function(name, fieldType, fieldId) {
      this.tpos.push(this.tstack.length);
      this.tstack.push({
        "fieldId": '"' + fieldId + '"',
        "fieldType": TJSONProtocol.Type[fieldType]
      });
    };
    TJSONProtocol.prototype.writeFieldEnd = function() {
      var value = this.tstack.pop();
      var fieldInfo = this.tstack.pop();
      if (":" + value === ":[object Object]") {
        this.tstack[this.tstack.length - 1][fieldInfo.fieldId] = "{" + fieldInfo.fieldType + ":" + JSON.stringify(value) + "}";
      } else {
        this.tstack[this.tstack.length - 1][fieldInfo.fieldId] = "{" + fieldInfo.fieldType + ":" + value + "}";
      }
      this.tpos.pop();
      this.writeToTransportIfStackIsFlushable();
    };
    TJSONProtocol.prototype.writeFieldStop = function() {
    };
    TJSONProtocol.prototype.writeMapBegin = function(keyType, valType, size) {
      this.tpos.push(this.tstack.length);
      this.tstack.push([TJSONProtocol.Type[keyType], TJSONProtocol.Type[valType], 0]);
    };
    TJSONProtocol.prototype.writeMapEnd = function() {
      var p = this.tpos.pop();
      if (p == this.tstack.length) {
        return;
      }
      if ((this.tstack.length - p - 1) % 2 !== 0) {
        this.tstack.push("");
      }
      var size = (this.tstack.length - p - 1) / 2;
      this.tstack[p][this.tstack[p].length - 1] = size;
      var map2 = "}";
      var first = true;
      while (this.tstack.length > p + 1) {
        var v2 = this.tstack.pop();
        var k = this.tstack.pop();
        if (first) {
          first = false;
        } else {
          map2 = "," + map2;
        }
        if (!isNaN(k)) {
          k = '"' + k + '"';
        }
        map2 = k + ":" + v2 + map2;
      }
      map2 = "{" + map2;
      this.tstack[p].push(map2);
      this.tstack[p] = "[" + this.tstack[p].join(",") + "]";
      this.writeToTransportIfStackIsFlushable();
    };
    TJSONProtocol.prototype.writeListBegin = function(elemType, size) {
      this.tpos.push(this.tstack.length);
      this.tstack.push([TJSONProtocol.Type[elemType], size]);
    };
    TJSONProtocol.prototype.writeListEnd = function() {
      var p = this.tpos.pop();
      while (this.tstack.length > p + 1) {
        var tmpVal = this.tstack[p + 1];
        this.tstack.splice(p + 1, 1);
        this.tstack[p].push(tmpVal);
      }
      this.tstack[p] = "[" + this.tstack[p].join(",") + "]";
      this.writeToTransportIfStackIsFlushable();
    };
    TJSONProtocol.prototype.writeSetBegin = function(elemType, size) {
      this.tpos.push(this.tstack.length);
      this.tstack.push([TJSONProtocol.Type[elemType], size]);
    };
    TJSONProtocol.prototype.writeSetEnd = function() {
      var p = this.tpos.pop();
      while (this.tstack.length > p + 1) {
        var tmpVal = this.tstack[p + 1];
        this.tstack.splice(p + 1, 1);
        this.tstack[p].push(tmpVal);
      }
      this.tstack[p] = "[" + this.tstack[p].join(",") + "]";
      this.writeToTransportIfStackIsFlushable();
    };
    TJSONProtocol.prototype.writeBool = function(bool) {
      this.tstack.push(bool ? 1 : 0);
    };
    TJSONProtocol.prototype.writeByte = function(byte) {
      this.tstack.push(byte);
    };
    TJSONProtocol.prototype.writeI16 = function(i16) {
      this.tstack.push(i16);
    };
    TJSONProtocol.prototype.writeI32 = function(i32) {
      this.tstack.push(i32);
    };
    TJSONProtocol.prototype.writeI64 = function(i64) {
      if (i64 instanceof Int642) {
        this.tstack.push(Int64Util.toDecimalString(i64));
      } else {
        this.tstack.push(i64);
      }
    };
    TJSONProtocol.prototype.writeDouble = function(dub) {
      this.tstack.push(dub);
    };
    TJSONProtocol.prototype.writeString = function(arg) {
      if (arg === null) {
        this.tstack.push(null);
      } else {
        if (typeof arg === "string") {
          var str = arg;
        } else if (arg instanceof Buffer) {
          var str = arg.toString("utf8");
        } else {
          throw new Error("writeString called without a string/Buffer argument: " + arg);
        }
        var escapedString = "";
        for (var i = 0; i < str.length; i++) {
          var ch = str.charAt(i);
          if (ch === '"') {
            escapedString += '\\"';
          } else if (ch === "\\") {
            escapedString += "\\\\";
          } else if (ch === "\b") {
            escapedString += "\\b";
          } else if (ch === "\f") {
            escapedString += "\\f";
          } else if (ch === "\n") {
            escapedString += "\\n";
          } else if (ch === "\r") {
            escapedString += "\\r";
          } else if (ch === "	") {
            escapedString += "\\t";
          } else {
            escapedString += ch;
          }
        }
        this.tstack.push('"' + escapedString + '"');
      }
    };
    TJSONProtocol.prototype.writeBinary = function(arg) {
      if (typeof arg === "string") {
        var buf = new Buffer(arg, "binary");
      } else if (arg instanceof Buffer || Object.prototype.toString.call(arg) == "[object Uint8Array]") {
        var buf = arg;
      } else {
        throw new Error("writeBinary called without a string/Buffer argument: " + arg);
      }
      this.tstack.push('"' + buf.toString("base64") + '"');
    };
    TJSONProtocol.prototype.readMessageBegin = function() {
      this.rstack = [];
      this.rpos = [];
      var transBuf = this.trans.borrow();
      if (transBuf.readIndex >= transBuf.writeIndex) {
        throw new InputBufferUnderrunError();
      }
      var cursor = transBuf.readIndex;
      if (transBuf.buf[cursor] !== 91) {
        throw new Error("Malformed JSON input, no opening bracket");
      }
      cursor++;
      var openBracketCount = 1;
      var inString = false;
      for (; cursor < transBuf.writeIndex; cursor++) {
        var chr = transBuf.buf[cursor];
        if (inString) {
          if (chr === 34) {
            inString = false;
          } else if (chr === 92) {
            cursor += 1;
          }
        } else {
          if (chr === 91) {
            openBracketCount += 1;
          } else if (chr === 93) {
            openBracketCount -= 1;
            if (openBracketCount === 0) {
              break;
            }
          } else if (chr === 34) {
            inString = true;
          }
        }
      }
      if (openBracketCount !== 0) {
        throw new InputBufferUnderrunError();
      }
      this.robj = json_parse(transBuf.buf.slice(transBuf.readIndex, cursor + 1).toString());
      this.trans.consume(cursor + 1 - transBuf.readIndex);
      var version2 = this.robj.shift();
      if (version2 != TJSONProtocol.Version) {
        throw new Error("Wrong thrift protocol version: " + version2);
      }
      var r = {};
      r.fname = this.robj.shift();
      r.mtype = this.robj.shift();
      r.rseqid = this.robj.shift();
      this.rstack.push(this.robj.shift());
      return r;
    };
    TJSONProtocol.prototype.readMessageEnd = function() {
    };
    TJSONProtocol.prototype.readStructBegin = function() {
      var r = {};
      r.fname = "";
      if (this.rstack[this.rstack.length - 1] instanceof Array) {
        this.rstack.push(this.rstack[this.rstack.length - 1].shift());
      }
      return r;
    };
    TJSONProtocol.prototype.readStructEnd = function() {
      this.rstack.pop();
    };
    TJSONProtocol.prototype.readFieldBegin = function() {
      var r = {};
      var fid = -1;
      var ftype = Type.STOP;
      for (var f in this.rstack[this.rstack.length - 1]) {
        if (f === null) {
          continue;
        }
        fid = parseInt(f, 10);
        this.rpos.push(this.rstack.length);
        var field = this.rstack[this.rstack.length - 1][fid];
        delete this.rstack[this.rstack.length - 1][fid];
        this.rstack.push(field);
        break;
      }
      if (fid != -1) {
        for (var i in this.rstack[this.rstack.length - 1]) {
          if (TJSONProtocol.RType[i] === null) {
            continue;
          }
          ftype = TJSONProtocol.RType[i];
          this.rstack[this.rstack.length - 1] = this.rstack[this.rstack.length - 1][i];
        }
      }
      r.fname = "";
      r.ftype = ftype;
      r.fid = fid;
      return r;
    };
    TJSONProtocol.prototype.readFieldEnd = function() {
      var pos = this.rpos.pop();
      while (this.rstack.length > pos) {
        this.rstack.pop();
      }
    };
    TJSONProtocol.prototype.readMapBegin = function() {
      var map2 = this.rstack.pop();
      var first = map2.shift();
      if (first instanceof Array) {
        this.rstack.push(map2);
        map2 = first;
        first = map2.shift();
      }
      var r = {};
      r.ktype = TJSONProtocol.RType[first];
      r.vtype = TJSONProtocol.RType[map2.shift()];
      r.size = map2.shift();
      this.rpos.push(this.rstack.length);
      this.rstack.push(map2.shift());
      return r;
    };
    TJSONProtocol.prototype.readMapEnd = function() {
      this.readFieldEnd();
    };
    TJSONProtocol.prototype.readListBegin = function() {
      var list = this.rstack[this.rstack.length - 1];
      var r = {};
      r.etype = TJSONProtocol.RType[list.shift()];
      r.size = list.shift();
      this.rpos.push(this.rstack.length);
      this.rstack.push(list.shift());
      return r;
    };
    TJSONProtocol.prototype.readListEnd = function() {
      var pos = this.rpos.pop() - 2;
      var st = this.rstack;
      st.pop();
      if (st instanceof Array && st.length > pos && st[pos].length > 0) {
        st.push(st[pos].shift());
      }
    };
    TJSONProtocol.prototype.readSetBegin = function() {
      return this.readListBegin();
    };
    TJSONProtocol.prototype.readSetEnd = function() {
      return this.readListEnd();
    };
    TJSONProtocol.prototype.readBool = function() {
      return this.readValue() == "1";
    };
    TJSONProtocol.prototype.readByte = function() {
      return this.readI32();
    };
    TJSONProtocol.prototype.readI16 = function() {
      return this.readI32();
    };
    TJSONProtocol.prototype.readI32 = function(f) {
      return +this.readValue();
    };
    TJSONProtocol.prototype.readValue = function(f) {
      if (f === void 0) {
        f = this.rstack[this.rstack.length - 1];
      }
      var r = {};
      if (f instanceof Array) {
        if (f.length === 0) {
          r.value = void 0;
        } else {
          r.value = f.shift();
        }
      } else if (!(f instanceof Int642) && f instanceof Object) {
        for (var i in f) {
          if (i === null) {
            continue;
          }
          this.rstack.push(f[i]);
          delete f[i];
          r.value = i;
          break;
        }
      } else {
        r.value = f;
        this.rstack.pop();
      }
      return r.value;
    };
    TJSONProtocol.prototype.readI64 = function() {
      var n = this.readValue();
      if (typeof n === "string") {
        return Int64Util.fromDecimalString(n);
      } else {
        return new Int642(n);
      }
    };
    TJSONProtocol.prototype.readDouble = function() {
      return this.readI32();
    };
    TJSONProtocol.prototype.readBinary = function() {
      return new Buffer(this.readValue(), "base64");
    };
    TJSONProtocol.prototype.readString = function() {
      return this.readValue();
    };
    TJSONProtocol.prototype.getTransport = function() {
      return this.trans;
    };
    TJSONProtocol.prototype.skip = function(type) {
      switch (type) {
        case Type.BOOL:
          this.readBool();
          break;
        case Type.BYTE:
          this.readByte();
          break;
        case Type.I16:
          this.readI16();
          break;
        case Type.I32:
          this.readI32();
          break;
        case Type.I64:
          this.readI64();
          break;
        case Type.DOUBLE:
          this.readDouble();
          break;
        case Type.STRING:
          this.readString();
          break;
        case Type.STRUCT:
          this.readStructBegin();
          while (true) {
            var r = this.readFieldBegin();
            if (r.ftype === Type.STOP) {
              break;
            }
            this.skip(r.ftype);
            this.readFieldEnd();
          }
          this.readStructEnd();
          break;
        case Type.MAP:
          var mapBegin = this.readMapBegin();
          for (var i = 0; i < mapBegin.size; ++i) {
            this.skip(mapBegin.ktype);
            this.skip(mapBegin.vtype);
          }
          this.readMapEnd();
          break;
        case Type.SET:
          var setBegin = this.readSetBegin();
          for (var i2 = 0; i2 < setBegin.size; ++i2) {
            this.skip(setBegin.etype);
          }
          this.readSetEnd();
          break;
        case Type.LIST:
          var listBegin = this.readListBegin();
          for (var i3 = 0; i3 < listBegin.size; ++i3) {
            this.skip(listBegin.etype);
          }
          this.readListEnd();
          break;
        default:
          throw new Error("Invalid type: " + type);
      }
    };
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/create_client.js
var require_create_client = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/create_client.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    module.exports = createClient;
    function createClient(ServiceClient, connection) {
      if (ServiceClient.Client) {
        ServiceClient = ServiceClient.Client;
      }
      var writeCb = /* @__PURE__ */ __name(function(buf, seqid) {
        connection.write(buf, seqid);
      }, "writeCb");
      var transport = new connection.transport(void 0, writeCb);
      var client = new ServiceClient(transport, connection.protocol);
      transport.client = client;
      connection.client = client;
      return client;
    }
    __name(createClient, "createClient");
  }
});

// node_modules/browser-or-node/lib/index.js
var require_lib = __commonJS({
  "node_modules/browser-or-node/lib/index.js"(exports) {
    "use strict";
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
    var isWebWorker = (typeof self === "undefined" ? "undefined" : _typeof(self)) === "object" && self.constructor && self.constructor.name === "DedicatedWorkerGlobalScope";
    var isNode = typeof process !== "undefined" && process.versions != null && process.versions.node != null;
    var isJsDom = /* @__PURE__ */ __name(function isJsDom2() {
      return typeof window !== "undefined" && window.name === "nodejs" || "Cloudflare-Workers".includes("Node.js") || "Cloudflare-Workers".includes("jsdom");
    }, "isJsDom");
    exports.isBrowser = isBrowser;
    exports.isWebWorker = isWebWorker;
    exports.isNode = isNode;
    exports.isJsDom = isJsDom;
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/ws_connection.js
var require_ws_connection = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/ws_connection.js"(exports) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var util = require_util();
    var WebSocket2 = require_browser();
    var EventEmitter2 = require_events().EventEmitter;
    var thrift5 = require_thrift();
    var TBufferedTransport2 = require_buffered_transport();
    var TJSONProtocol = require_json_protocol();
    var InputBufferUnderrunError = require_input_buffer_underrun_error();
    var createClient = require_create_client();
    var jsEnv = require_lib();
    exports.WSConnection = WSConnection;
    function WSConnection(host, port, options) {
      EventEmitter2.call(this);
      this.options = options || {};
      this.host = host;
      this.port = port;
      this.secure = this.options.secure || false;
      this.transport = this.options.transport || TBufferedTransport2;
      this.protocol = this.options.protocol || TJSONProtocol;
      this.path = this.options.path;
      this.send_pending = [];
      this.seqId2Service = {};
      this.wsOptions = {
        host: this.host,
        port: this.port || 80,
        path: this.options.path || "/",
        headers: this.options.headers || {}
      };
      for (var attrname in this.options.wsOptions) {
        this.wsOptions[attrname] = this.options.wsOptions[attrname];
      }
    }
    __name(WSConnection, "WSConnection");
    util.inherits(WSConnection, EventEmitter2);
    WSConnection.prototype.__reset = function() {
      this.socket = null;
      this.send_pending = [];
    };
    WSConnection.prototype.__onOpen = function() {
      this.emit("open");
      if (this.send_pending.length > 0) {
        this.send_pending.forEach(function(data) {
          this.socket.send(data);
        }, this);
        this.send_pending = [];
      }
    };
    WSConnection.prototype.__onClose = function(evt) {
      this.emit("close");
      this.__reset();
    };
    WSConnection.prototype.__decodeCallback = function(transport_with_data) {
      var proto = new this.protocol(transport_with_data);
      try {
        while (true) {
          var header = proto.readMessageBegin();
          var dummy_seqid = header.rseqid * -1;
          var client = this.client;
          var service_name = this.seqId2Service[header.rseqid];
          if (service_name) {
            client = this.client[service_name];
            delete this.seqId2Service[header.rseqid];
          }
          client._reqs[dummy_seqid] = function(err, success) {
            transport_with_data.commitPosition();
            var clientCallback = client._reqs[header.rseqid];
            delete client._reqs[header.rseqid];
            if (clientCallback) {
              clientCallback(err, success);
            }
          };
          if (client["recv_" + header.fname]) {
            client["recv_" + header.fname](proto, header.mtype, dummy_seqid);
          } else {
            delete client._reqs[dummy_seqid];
            this.emit(
              "error",
              new thrift5.TApplicationException(
                thrift5.TApplicationExceptionType.WRONG_METHOD_NAME,
                "Received a response to an unknown RPC function"
              )
            );
          }
        }
      } catch (e) {
        if (e instanceof InputBufferUnderrunError) {
          transport_with_data.rollbackPosition();
        } else {
          throw e;
        }
      }
    };
    WSConnection.prototype.__onData = function(data) {
      if (Object.prototype.toString.call(data) === "[object ArrayBuffer]") {
        data = new Uint8Array(data);
      }
      var buf = new Buffer(data);
      this.transport.receiver(this.__decodeCallback.bind(this))(buf);
    };
    WSConnection.prototype.__onMessage = function(evt) {
      this.__onData(evt.data);
    };
    WSConnection.prototype.__onError = function(evt) {
      this.emit("error", evt);
      this.socket.close();
    };
    WSConnection.prototype.isOpen = function() {
      return this.socket && this.socket.readyState === this.socket.OPEN;
    };
    WSConnection.prototype.open = function() {
      if (this.socket && this.socket.readyState !== this.socket.CLOSED) {
        return;
      }
      if (jsEnv.isBrowser) {
        this.socket = new WebSocket2(this.uri());
      } else {
        this.socket = new WebSocket2(this.uri(), "", this.wsOptions);
      }
      this.socket.binaryType = "arraybuffer";
      this.socket.onopen = this.__onOpen.bind(this);
      this.socket.onmessage = this.__onMessage.bind(this);
      this.socket.onerror = this.__onError.bind(this);
      this.socket.onclose = this.__onClose.bind(this);
    };
    WSConnection.prototype.close = function() {
      this.socket.close();
    };
    WSConnection.prototype.uri = function() {
      var schema = this.secure ? "wss" : "ws";
      var port = "";
      var path = this.path || "/";
      var host = this.host;
      if (this.port && ("wss" === schema && this.port !== 443 || "ws" === schema && this.port !== 80)) {
        port = ":" + this.port;
      }
      return schema + "://" + host + port + path;
    };
    WSConnection.prototype.write = function(data) {
      if (this.isOpen()) {
        this.socket.send(data);
      } else {
        this.send_pending.push(data);
      }
    };
    exports.createWSConnection = function(host, port, options) {
      return new WSConnection(host, port, options);
    };
    exports.createWSClient = createClient;
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/xhr_connection.js
var require_xhr_connection = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/xhr_connection.js"(exports) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var util = require_util();
    var EventEmitter2 = require_events().EventEmitter;
    var thrift5 = require_thrift();
    var TBufferedTransport2 = require_buffered_transport();
    var TJSONProtocol = require_json_protocol();
    var InputBufferUnderrunError = require_input_buffer_underrun_error();
    var createClient = require_create_client();
    exports.XHRConnection = XHRConnection;
    function XHRConnection(host, port, options) {
      this.options = options || {};
      this.wpos = 0;
      this.rpos = 0;
      this.useCORS = options && options.useCORS;
      this.send_buf = "";
      this.recv_buf = "";
      this.transport = options.transport || TBufferedTransport2;
      this.protocol = options.protocol || TJSONProtocol;
      this.headers = options.headers || {};
      host = host || window.location.host;
      port = port || window.location.port;
      var prefix = options.https ? "https://" : "http://";
      var path = options.path || "/";
      if (port === "") {
        port = void 0;
      }
      if (!port || port === 80 || port === "80") {
        this.url = prefix + host + path;
      } else {
        this.url = prefix + host + ":" + port + path;
      }
      this.seqId2Service = {};
    }
    __name(XHRConnection, "XHRConnection");
    util.inherits(XHRConnection, EventEmitter2);
    XHRConnection.prototype.getXmlHttpRequestObject = function() {
      try {
        return new XMLHttpRequest();
      } catch (e1) {
      }
      try {
        return new ActiveXObject("Msxml2.XMLHTTP");
      } catch (e2) {
      }
      try {
        return new ActiveXObject("Microsoft.XMLHTTP");
      } catch (e3) {
      }
      throw "Your browser doesn't support XHR.";
    };
    XHRConnection.prototype.flush = function() {
      var self2 = this;
      if (this.url === void 0 || this.url === "") {
        return this.send_buf;
      }
      var xreq = this.getXmlHttpRequestObject();
      if (xreq.overrideMimeType) {
        xreq.overrideMimeType("application/json");
      }
      xreq.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          self2.setRecvBuffer(this.responseText);
        }
      };
      xreq.open("POST", this.url, true);
      Object.keys(this.headers).forEach(function(headerKey) {
        xreq.setRequestHeader(headerKey, self2.headers[headerKey]);
      });
      xreq.send(this.send_buf);
    };
    XHRConnection.prototype.setRecvBuffer = function(buf) {
      this.recv_buf = buf;
      this.recv_buf_sz = this.recv_buf.length;
      this.wpos = this.recv_buf.length;
      this.rpos = 0;
      if (Object.prototype.toString.call(buf) == "[object ArrayBuffer]") {
        var data = new Uint8Array(buf);
      }
      var thing = new Buffer(data || buf);
      this.transport.receiver(this.__decodeCallback.bind(this))(thing);
    };
    XHRConnection.prototype.__decodeCallback = function(transport_with_data) {
      var proto = new this.protocol(transport_with_data);
      try {
        while (true) {
          var header = proto.readMessageBegin();
          var dummy_seqid = header.rseqid * -1;
          var client = this.client;
          var service_name = this.seqId2Service[header.rseqid];
          if (service_name) {
            client = this.client[service_name];
            delete this.seqId2Service[header.rseqid];
          }
          client._reqs[dummy_seqid] = function(err, success) {
            transport_with_data.commitPosition();
            var clientCallback = client._reqs[header.rseqid];
            delete client._reqs[header.rseqid];
            if (clientCallback) {
              clientCallback(err, success);
            }
          };
          if (client["recv_" + header.fname]) {
            client["recv_" + header.fname](proto, header.mtype, dummy_seqid);
          } else {
            delete client._reqs[dummy_seqid];
            this.emit(
              "error",
              new thrift5.TApplicationException(
                thrift5.TApplicationExceptionType.WRONG_METHOD_NAME,
                "Received a response to an unknown RPC function"
              )
            );
          }
        }
      } catch (e) {
        if (e instanceof InputBufferUnderrunError) {
          transport_with_data.rollbackPosition();
        } else {
          throw e;
        }
      }
    };
    XHRConnection.prototype.isOpen = function() {
      return true;
    };
    XHRConnection.prototype.open = function() {
    };
    XHRConnection.prototype.close = function() {
    };
    XHRConnection.prototype.read = function(len) {
      var avail = this.wpos - this.rpos;
      if (avail === 0) {
        return "";
      }
      var give = len;
      if (avail < len) {
        give = avail;
      }
      var ret = this.read_buf.substr(this.rpos, give);
      this.rpos += give;
      return ret;
    };
    XHRConnection.prototype.readAll = function() {
      return this.recv_buf;
    };
    XHRConnection.prototype.write = function(buf) {
      this.send_buf = buf;
      this.flush();
    };
    XHRConnection.prototype.getSendBuffer = function() {
      return this.send_buf;
    };
    exports.createXHRConnection = function(host, port, options) {
      return new XHRConnection(host, port, options);
    };
    exports.createXHRClient = createClient;
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/ohos_connection.js
var require_ohos_connection = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/ohos_connection.js"(exports) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var util = require_util();
    var EventEmitter2 = require_events().EventEmitter;
    var thrift5 = require_thrift();
    var TBufferedTransport2 = require_buffered_transport();
    var TBinaryProtocol4 = require_binary_protocol();
    var InputBufferUnderrunError = require_input_buffer_underrun_error();
    var createClient = require_create_client();
    var OhosConnection = exports.OhosConnection = function(options) {
      EventEmitter2.call(this);
      var self2 = this;
      this.options = options || {};
      this.host = this.options.host;
      this.port = this.options.port;
      this.path = this.options.path || "/";
      this.url = this.port === 80 ? this.host.replace(/\/$/, "") + this.path : this.host.replace(/\/$/, "") + ":" + this.port + this.path;
      this.transport = this.options.transport || TBufferedTransport2;
      this.protocol = this.options.protocol || TBinaryProtocol4;
      this.createHttp = this.options.createHttp;
      this.requestOptions = {
        method: "POST",
        header: this.options.header || {},
        readTimeout: this.options.readTimeout || 6e4,
        connectTimeout: this.options.connectTimeout || 6e4
      };
      for (var attrname in this.options.requestOptions) {
        this.requestOptions[attrname] = this.options.requestOptions[attrname];
      }
      if (!this.requestOptions.header["Connection"]) {
        this.requestOptions.header["Connection"] = "keep-alive";
      }
      this.seqId2Service = {};
      function decodeCallback(transport_with_data) {
        var proto = new self2.protocol(transport_with_data);
        try {
          while (true) {
            var header = proto.readMessageBegin();
            var dummy_seqid = header.rseqid * -1;
            var client = self2.client;
            var service_name = self2.seqId2Service[header.rseqid];
            if (service_name) {
              client = self2.client[service_name];
              delete self2.seqId2Service[header.rseqid];
            }
            client._reqs[dummy_seqid] = function(err, success) {
              transport_with_data.commitPosition();
              var clientCallback = client._reqs[header.rseqid];
              delete client._reqs[header.rseqid];
              if (clientCallback) {
                process.nextTick(function() {
                  clientCallback(err, success);
                });
              }
            };
            if (client["recv_" + header.fname]) {
              client["recv_" + header.fname](proto, header.mtype, dummy_seqid);
            } else {
              delete client._reqs[dummy_seqid];
              self2.emit(
                "error",
                new thrift5.TApplicationException(
                  thrift5.TApplicationExceptionType.WRONG_METHOD_NAME,
                  "Received a response to an unknown RPC function"
                )
              );
            }
          }
        } catch (e) {
          if (e instanceof InputBufferUnderrunError) {
            transport_with_data.rollbackPosition();
          } else {
            self2.emit("error", e);
          }
        }
      }
      __name(decodeCallback, "decodeCallback");
      this.responseCallback = function(error3, response) {
        var data = [];
        var dataLen = 0;
        if (error3) {
          self2.emit("error", error3);
          return;
        }
        if (!response || response.responseCode !== 200) {
          self2.emit("error", new THTTPException(response));
        }
        if (typeof response.result == "string" || Object.prototype.toString.call(response.result) == "[object Uint8Array]") {
          data.push(Buffer.from(response.result));
        }
        dataLen += response.result.length;
        var buf = Buffer.alloc(dataLen);
        for (var i = 0, len = data.length, pos = 0; i < len; i++) {
          data[i].copy(buf, pos);
          pos += data[i].length;
        }
        self2.transport.receiver(decodeCallback)(buf);
      };
      this.write = function(data) {
        var http = self2.createHttp();
        var opts = self2.requestOptions;
        opts.header["Content-length"] = data.length;
        if (!opts.header["Content-Type"])
          opts.header["Content-Type"] = "application/x-thrift";
        opts.extraData = data.toString();
        http.request(self2.url, opts, self2.responseCallback);
      };
    };
    util.inherits(OhosConnection, EventEmitter2);
    exports.createOhosConnection = function(createHttp, host, port, options) {
      options.createHttp = createHttp;
      options.host = host;
      options.port = port || 80;
      return new OhosConnection(options);
    };
    exports.createOhosClient = createClient;
    function THTTPException(response) {
      thrift5.TApplicationException.call(this);
      if (Error.captureStackTrace !== void 0) {
        Error.captureStackTrace(this, this.constructor);
      }
      this.name = this.constructor.name;
      this.responseCode = response.responseCode;
      this.response = response;
      this.type = thrift5.TApplicationExceptionType.PROTOCOL_ERROR;
      this.message = "Received a response with a bad HTTP status code: " + response.responseCode;
    }
    __name(THTTPException, "THTTPException");
    util.inherits(THTTPException, thrift5.TApplicationException);
  }
});

// node_modules/q/q.js
var require_q = __commonJS({
  "node_modules/q/q.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(definition) {
      "use strict";
      if (typeof bootstrap === "function") {
        bootstrap("promise", definition);
      } else if (typeof exports === "object" && typeof module === "object") {
        module.exports = definition();
      } else if (typeof define === "function" && define.amd) {
        define(definition);
      } else if (typeof ses !== "undefined") {
        if (!ses.ok()) {
          return;
        } else {
          ses.makeQ = definition;
        }
      } else if (typeof window !== "undefined" || typeof self !== "undefined") {
        var global2 = typeof window !== "undefined" ? window : self;
        var previousQ = global2.Q;
        global2.Q = definition();
        global2.Q.noConflict = function() {
          global2.Q = previousQ;
          return this;
        };
      } else {
        throw new Error("This environment was not anticipated by Q. Please file a bug.");
      }
    })(function() {
      "use strict";
      var hasStacks = false;
      try {
        throw new Error();
      } catch (e) {
        hasStacks = !!e.stack;
      }
      var qStartingLine = captureLine();
      var qFileName;
      var noop = /* @__PURE__ */ __name(function() {
      }, "noop");
      var nextTick2 = function() {
        var head = { task: void 0, next: null };
        var tail = head;
        var flushing = false;
        var requestTick = void 0;
        var isNodeJS = false;
        var laterQueue = [];
        function flush() {
          var task, domain2;
          while (head.next) {
            head = head.next;
            task = head.task;
            head.task = void 0;
            domain2 = head.domain;
            if (domain2) {
              head.domain = void 0;
              domain2.enter();
            }
            runSingle(task, domain2);
          }
          while (laterQueue.length) {
            task = laterQueue.pop();
            runSingle(task);
          }
          flushing = false;
        }
        __name(flush, "flush");
        function runSingle(task, domain2) {
          try {
            task();
          } catch (e) {
            if (isNodeJS) {
              if (domain2) {
                domain2.exit();
              }
              setTimeout(flush, 0);
              if (domain2) {
                domain2.enter();
              }
              throw e;
            } else {
              setTimeout(function() {
                throw e;
              }, 0);
            }
          }
          if (domain2) {
            domain2.exit();
          }
        }
        __name(runSingle, "runSingle");
        nextTick2 = /* @__PURE__ */ __name(function(task) {
          tail = tail.next = {
            task,
            domain: isNodeJS && process.domain,
            next: null
          };
          if (!flushing) {
            flushing = true;
            requestTick();
          }
        }, "nextTick");
        if (typeof process === "object" && process.toString() === "[object process]" && process.nextTick) {
          isNodeJS = true;
          requestTick = /* @__PURE__ */ __name(function() {
            process.nextTick(flush);
          }, "requestTick");
        } else if (typeof setImmediate === "function") {
          if (typeof window !== "undefined") {
            requestTick = setImmediate.bind(window, flush);
          } else {
            requestTick = /* @__PURE__ */ __name(function() {
              setImmediate(flush);
            }, "requestTick");
          }
        } else if (typeof MessageChannel !== "undefined") {
          var channel2 = new MessageChannel();
          channel2.port1.onmessage = function() {
            requestTick = requestPortTick;
            channel2.port1.onmessage = flush;
            flush();
          };
          var requestPortTick = /* @__PURE__ */ __name(function() {
            channel2.port2.postMessage(0);
          }, "requestPortTick");
          requestTick = /* @__PURE__ */ __name(function() {
            setTimeout(flush, 0);
            requestPortTick();
          }, "requestTick");
        } else {
          requestTick = /* @__PURE__ */ __name(function() {
            setTimeout(flush, 0);
          }, "requestTick");
        }
        nextTick2.runAfter = function(task) {
          laterQueue.push(task);
          if (!flushing) {
            flushing = true;
            requestTick();
          }
        };
        return nextTick2;
      }();
      var call = Function.call;
      function uncurryThis(f) {
        return function() {
          return call.apply(f, arguments);
        };
      }
      __name(uncurryThis, "uncurryThis");
      var array_slice = uncurryThis(Array.prototype.slice);
      var array_reduce = uncurryThis(
        Array.prototype.reduce || function(callback, basis) {
          var index = 0, length = this.length;
          if (arguments.length === 1) {
            do {
              if (index in this) {
                basis = this[index++];
                break;
              }
              if (++index >= length) {
                throw new TypeError();
              }
            } while (1);
          }
          for (; index < length; index++) {
            if (index in this) {
              basis = callback(basis, this[index], index);
            }
          }
          return basis;
        }
      );
      var array_indexOf = uncurryThis(
        Array.prototype.indexOf || function(value) {
          for (var i = 0; i < this.length; i++) {
            if (this[i] === value) {
              return i;
            }
          }
          return -1;
        }
      );
      var array_map = uncurryThis(
        Array.prototype.map || function(callback, thisp) {
          var self2 = this;
          var collect = [];
          array_reduce(self2, function(undefined2, value, index) {
            collect.push(callback.call(thisp, value, index, self2));
          }, void 0);
          return collect;
        }
      );
      var object_create = Object.create || function(prototype) {
        function Type() {
        }
        __name(Type, "Type");
        Type.prototype = prototype;
        return new Type();
      };
      var object_defineProperty = Object.defineProperty || function(obj, prop, descriptor) {
        obj[prop] = descriptor.value;
        return obj;
      };
      var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
      var object_keys = Object.keys || function(object) {
        var keys = [];
        for (var key in object) {
          if (object_hasOwnProperty(object, key)) {
            keys.push(key);
          }
        }
        return keys;
      };
      var object_toString = uncurryThis(Object.prototype.toString);
      function isObject2(value) {
        return value === Object(value);
      }
      __name(isObject2, "isObject");
      function isStopIteration(exception) {
        return object_toString(exception) === "[object StopIteration]" || exception instanceof QReturnValue;
      }
      __name(isStopIteration, "isStopIteration");
      var QReturnValue;
      if (typeof ReturnValue !== "undefined") {
        QReturnValue = ReturnValue;
      } else {
        QReturnValue = /* @__PURE__ */ __name(function(value) {
          this.value = value;
        }, "QReturnValue");
      }
      var STACK_JUMP_SEPARATOR = "From previous event:";
      function makeStackTraceLong(error3, promise2) {
        if (hasStacks && promise2.stack && typeof error3 === "object" && error3 !== null && error3.stack) {
          var stacks = [];
          for (var p = promise2; !!p; p = p.source) {
            if (p.stack && (!error3.__minimumStackCounter__ || error3.__minimumStackCounter__ > p.stackCounter)) {
              object_defineProperty(error3, "__minimumStackCounter__", { value: p.stackCounter, configurable: true });
              stacks.unshift(p.stack);
            }
          }
          stacks.unshift(error3.stack);
          var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
          var stack = filterStackString(concatedStacks);
          object_defineProperty(error3, "stack", { value: stack, configurable: true });
        }
      }
      __name(makeStackTraceLong, "makeStackTraceLong");
      function filterStackString(stackString) {
        var lines = stackString.split("\n");
        var desiredLines = [];
        for (var i = 0; i < lines.length; ++i) {
          var line = lines[i];
          if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
            desiredLines.push(line);
          }
        }
        return desiredLines.join("\n");
      }
      __name(filterStackString, "filterStackString");
      function isNodeFrame(stackLine) {
        return stackLine.indexOf("(module.js:") !== -1 || stackLine.indexOf("(node.js:") !== -1;
      }
      __name(isNodeFrame, "isNodeFrame");
      function getFileNameAndLineNumber(stackLine) {
        var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
        if (attempt1) {
          return [attempt1[1], Number(attempt1[2])];
        }
        var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
        if (attempt2) {
          return [attempt2[1], Number(attempt2[2])];
        }
        var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
        if (attempt3) {
          return [attempt3[1], Number(attempt3[2])];
        }
      }
      __name(getFileNameAndLineNumber, "getFileNameAndLineNumber");
      function isInternalFrame(stackLine) {
        var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
        if (!fileNameAndLineNumber) {
          return false;
        }
        var fileName = fileNameAndLineNumber[0];
        var lineNumber = fileNameAndLineNumber[1];
        return fileName === qFileName && lineNumber >= qStartingLine && lineNumber <= qEndingLine;
      }
      __name(isInternalFrame, "isInternalFrame");
      function captureLine() {
        if (!hasStacks) {
          return;
        }
        try {
          throw new Error();
        } catch (e) {
          var lines = e.stack.split("\n");
          var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
          var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
          if (!fileNameAndLineNumber) {
            return;
          }
          qFileName = fileNameAndLineNumber[0];
          return fileNameAndLineNumber[1];
        }
      }
      __name(captureLine, "captureLine");
      function deprecate2(callback, name, alternative) {
        return function() {
          if (typeof console !== "undefined" && typeof console.warn === "function") {
            console.warn(name + " is deprecated, use " + alternative + " instead.", new Error("").stack);
          }
          return callback.apply(callback, arguments);
        };
      }
      __name(deprecate2, "deprecate");
      function Q(value) {
        if (value instanceof Promise2) {
          return value;
        }
        if (isPromiseAlike(value)) {
          return coerce(value);
        } else {
          return fulfill(value);
        }
      }
      __name(Q, "Q");
      Q.resolve = Q;
      Q.nextTick = nextTick2;
      Q.longStackSupport = false;
      var longStackCounter = 1;
      if (typeof process === "object" && process && process.env && process.env.Q_DEBUG) {
        Q.longStackSupport = true;
      }
      Q.defer = defer;
      function defer() {
        var messages = [], progressListeners = [], resolvedPromise;
        var deferred = object_create(defer.prototype);
        var promise2 = object_create(Promise2.prototype);
        promise2.promiseDispatch = function(resolve, op, operands) {
          var args = array_slice(arguments);
          if (messages) {
            messages.push(args);
            if (op === "when" && operands[1]) {
              progressListeners.push(operands[1]);
            }
          } else {
            Q.nextTick(function() {
              resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
            });
          }
        };
        promise2.valueOf = function() {
          if (messages) {
            return promise2;
          }
          var nearerValue = nearer(resolvedPromise);
          if (isPromise(nearerValue)) {
            resolvedPromise = nearerValue;
          }
          return nearerValue;
        };
        promise2.inspect = function() {
          if (!resolvedPromise) {
            return { state: "pending" };
          }
          return resolvedPromise.inspect();
        };
        if (Q.longStackSupport && hasStacks) {
          try {
            throw new Error();
          } catch (e) {
            promise2.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
            promise2.stackCounter = longStackCounter++;
          }
        }
        function become(newPromise) {
          resolvedPromise = newPromise;
          if (Q.longStackSupport && hasStacks) {
            promise2.source = newPromise;
          }
          array_reduce(messages, function(undefined2, message) {
            Q.nextTick(function() {
              newPromise.promiseDispatch.apply(newPromise, message);
            });
          }, void 0);
          messages = void 0;
          progressListeners = void 0;
        }
        __name(become, "become");
        deferred.promise = promise2;
        deferred.resolve = function(value) {
          if (resolvedPromise) {
            return;
          }
          become(Q(value));
        };
        deferred.fulfill = function(value) {
          if (resolvedPromise) {
            return;
          }
          become(fulfill(value));
        };
        deferred.reject = function(reason) {
          if (resolvedPromise) {
            return;
          }
          become(reject(reason));
        };
        deferred.notify = function(progress2) {
          if (resolvedPromise) {
            return;
          }
          array_reduce(progressListeners, function(undefined2, progressListener) {
            Q.nextTick(function() {
              progressListener(progress2);
            });
          }, void 0);
        };
        return deferred;
      }
      __name(defer, "defer");
      defer.prototype.makeNodeResolver = function() {
        var self2 = this;
        return function(error3, value) {
          if (error3) {
            self2.reject(error3);
          } else if (arguments.length > 2) {
            self2.resolve(array_slice(arguments, 1));
          } else {
            self2.resolve(value);
          }
        };
      };
      Q.Promise = promise;
      Q.promise = promise;
      function promise(resolver) {
        if (typeof resolver !== "function") {
          throw new TypeError("resolver must be a function.");
        }
        var deferred = defer();
        try {
          resolver(deferred.resolve, deferred.reject, deferred.notify);
        } catch (reason) {
          deferred.reject(reason);
        }
        return deferred.promise;
      }
      __name(promise, "promise");
      promise.race = race;
      promise.all = all;
      promise.reject = reject;
      promise.resolve = Q;
      Q.passByCopy = function(object) {
        return object;
      };
      Promise2.prototype.passByCopy = function() {
        return this;
      };
      Q.join = function(x, y) {
        return Q(x).join(y);
      };
      Promise2.prototype.join = function(that) {
        return Q([this, that]).spread(function(x, y) {
          if (x === y) {
            return x;
          } else {
            throw new Error("Q can't join: not the same: " + x + " " + y);
          }
        });
      };
      Q.race = race;
      function race(answerPs) {
        return promise(function(resolve, reject2) {
          for (var i = 0, len = answerPs.length; i < len; i++) {
            Q(answerPs[i]).then(resolve, reject2);
          }
        });
      }
      __name(race, "race");
      Promise2.prototype.race = function() {
        return this.then(Q.race);
      };
      Q.makePromise = Promise2;
      function Promise2(descriptor, fallback, inspect2) {
        if (fallback === void 0) {
          fallback = /* @__PURE__ */ __name(function(op) {
            return reject(new Error(
              "Promise does not support operation: " + op
            ));
          }, "fallback");
        }
        if (inspect2 === void 0) {
          inspect2 = /* @__PURE__ */ __name(function() {
            return { state: "unknown" };
          }, "inspect");
        }
        var promise2 = object_create(Promise2.prototype);
        promise2.promiseDispatch = function(resolve, op, args) {
          var result;
          try {
            if (descriptor[op]) {
              result = descriptor[op].apply(promise2, args);
            } else {
              result = fallback.call(promise2, op, args);
            }
          } catch (exception) {
            result = reject(exception);
          }
          if (resolve) {
            resolve(result);
          }
        };
        promise2.inspect = inspect2;
        if (inspect2) {
          var inspected = inspect2();
          if (inspected.state === "rejected") {
            promise2.exception = inspected.reason;
          }
          promise2.valueOf = function() {
            var inspected2 = inspect2();
            if (inspected2.state === "pending" || inspected2.state === "rejected") {
              return promise2;
            }
            return inspected2.value;
          };
        }
        return promise2;
      }
      __name(Promise2, "Promise");
      Promise2.prototype.toString = function() {
        return "[object Promise]";
      };
      Promise2.prototype.then = function(fulfilled, rejected, progressed) {
        var self2 = this;
        var deferred = defer();
        var done = false;
        function _fulfilled(value) {
          try {
            return typeof fulfilled === "function" ? fulfilled(value) : value;
          } catch (exception) {
            return reject(exception);
          }
        }
        __name(_fulfilled, "_fulfilled");
        function _rejected(exception) {
          if (typeof rejected === "function") {
            makeStackTraceLong(exception, self2);
            try {
              return rejected(exception);
            } catch (newException) {
              return reject(newException);
            }
          }
          return reject(exception);
        }
        __name(_rejected, "_rejected");
        function _progressed(value) {
          return typeof progressed === "function" ? progressed(value) : value;
        }
        __name(_progressed, "_progressed");
        Q.nextTick(function() {
          self2.promiseDispatch(function(value) {
            if (done) {
              return;
            }
            done = true;
            deferred.resolve(_fulfilled(value));
          }, "when", [function(exception) {
            if (done) {
              return;
            }
            done = true;
            deferred.resolve(_rejected(exception));
          }]);
        });
        self2.promiseDispatch(void 0, "when", [void 0, function(value) {
          var newValue;
          var threw = false;
          try {
            newValue = _progressed(value);
          } catch (e) {
            threw = true;
            if (Q.onerror) {
              Q.onerror(e);
            } else {
              throw e;
            }
          }
          if (!threw) {
            deferred.notify(newValue);
          }
        }]);
        return deferred.promise;
      };
      Q.tap = function(promise2, callback) {
        return Q(promise2).tap(callback);
      };
      Promise2.prototype.tap = function(callback) {
        callback = Q(callback);
        return this.then(function(value) {
          return callback.fcall(value).thenResolve(value);
        });
      };
      Q.when = when;
      function when(value, fulfilled, rejected, progressed) {
        return Q(value).then(fulfilled, rejected, progressed);
      }
      __name(when, "when");
      Promise2.prototype.thenResolve = function(value) {
        return this.then(function() {
          return value;
        });
      };
      Q.thenResolve = function(promise2, value) {
        return Q(promise2).thenResolve(value);
      };
      Promise2.prototype.thenReject = function(reason) {
        return this.then(function() {
          throw reason;
        });
      };
      Q.thenReject = function(promise2, reason) {
        return Q(promise2).thenReject(reason);
      };
      Q.nearer = nearer;
      function nearer(value) {
        if (isPromise(value)) {
          var inspected = value.inspect();
          if (inspected.state === "fulfilled") {
            return inspected.value;
          }
        }
        return value;
      }
      __name(nearer, "nearer");
      Q.isPromise = isPromise;
      function isPromise(object) {
        return object instanceof Promise2;
      }
      __name(isPromise, "isPromise");
      Q.isPromiseAlike = isPromiseAlike;
      function isPromiseAlike(object) {
        return isObject2(object) && typeof object.then === "function";
      }
      __name(isPromiseAlike, "isPromiseAlike");
      Q.isPending = isPending;
      function isPending(object) {
        return isPromise(object) && object.inspect().state === "pending";
      }
      __name(isPending, "isPending");
      Promise2.prototype.isPending = function() {
        return this.inspect().state === "pending";
      };
      Q.isFulfilled = isFulfilled;
      function isFulfilled(object) {
        return !isPromise(object) || object.inspect().state === "fulfilled";
      }
      __name(isFulfilled, "isFulfilled");
      Promise2.prototype.isFulfilled = function() {
        return this.inspect().state === "fulfilled";
      };
      Q.isRejected = isRejected;
      function isRejected(object) {
        return isPromise(object) && object.inspect().state === "rejected";
      }
      __name(isRejected, "isRejected");
      Promise2.prototype.isRejected = function() {
        return this.inspect().state === "rejected";
      };
      var unhandledReasons = [];
      var unhandledRejections = [];
      var reportedUnhandledRejections = [];
      var trackUnhandledRejections = true;
      function resetUnhandledRejections() {
        unhandledReasons.length = 0;
        unhandledRejections.length = 0;
        if (!trackUnhandledRejections) {
          trackUnhandledRejections = true;
        }
      }
      __name(resetUnhandledRejections, "resetUnhandledRejections");
      function trackRejection(promise2, reason) {
        if (!trackUnhandledRejections) {
          return;
        }
        if (typeof process === "object" && typeof process.emit === "function") {
          Q.nextTick.runAfter(function() {
            if (array_indexOf(unhandledRejections, promise2) !== -1) {
              process.emit("unhandledRejection", reason, promise2);
              reportedUnhandledRejections.push(promise2);
            }
          });
        }
        unhandledRejections.push(promise2);
        if (reason && typeof reason.stack !== "undefined") {
          unhandledReasons.push(reason.stack);
        } else {
          unhandledReasons.push("(no stack) " + reason);
        }
      }
      __name(trackRejection, "trackRejection");
      function untrackRejection(promise2) {
        if (!trackUnhandledRejections) {
          return;
        }
        var at = array_indexOf(unhandledRejections, promise2);
        if (at !== -1) {
          if (typeof process === "object" && typeof process.emit === "function") {
            Q.nextTick.runAfter(function() {
              var atReport = array_indexOf(reportedUnhandledRejections, promise2);
              if (atReport !== -1) {
                process.emit("rejectionHandled", unhandledReasons[at], promise2);
                reportedUnhandledRejections.splice(atReport, 1);
              }
            });
          }
          unhandledRejections.splice(at, 1);
          unhandledReasons.splice(at, 1);
        }
      }
      __name(untrackRejection, "untrackRejection");
      Q.resetUnhandledRejections = resetUnhandledRejections;
      Q.getUnhandledReasons = function() {
        return unhandledReasons.slice();
      };
      Q.stopUnhandledRejectionTracking = function() {
        resetUnhandledRejections();
        trackUnhandledRejections = false;
      };
      resetUnhandledRejections();
      Q.reject = reject;
      function reject(reason) {
        var rejection = Promise2({
          "when": function(rejected) {
            if (rejected) {
              untrackRejection(this);
            }
            return rejected ? rejected(reason) : this;
          }
        }, /* @__PURE__ */ __name(function fallback() {
          return this;
        }, "fallback"), /* @__PURE__ */ __name(function inspect2() {
          return { state: "rejected", reason };
        }, "inspect"));
        trackRejection(rejection, reason);
        return rejection;
      }
      __name(reject, "reject");
      Q.fulfill = fulfill;
      function fulfill(value) {
        return Promise2({
          "when": function() {
            return value;
          },
          "get": function(name) {
            return value[name];
          },
          "set": function(name, rhs) {
            value[name] = rhs;
          },
          "delete": function(name) {
            delete value[name];
          },
          "post": function(name, args) {
            if (name === null || name === void 0) {
              return value.apply(void 0, args);
            } else {
              return value[name].apply(value, args);
            }
          },
          "apply": function(thisp, args) {
            return value.apply(thisp, args);
          },
          "keys": function() {
            return object_keys(value);
          }
        }, void 0, /* @__PURE__ */ __name(function inspect2() {
          return { state: "fulfilled", value };
        }, "inspect"));
      }
      __name(fulfill, "fulfill");
      function coerce(promise2) {
        var deferred = defer();
        Q.nextTick(function() {
          try {
            promise2.then(deferred.resolve, deferred.reject, deferred.notify);
          } catch (exception) {
            deferred.reject(exception);
          }
        });
        return deferred.promise;
      }
      __name(coerce, "coerce");
      Q.master = master;
      function master(object) {
        return Promise2({
          "isDef": function() {
          }
        }, /* @__PURE__ */ __name(function fallback(op, args) {
          return dispatch(object, op, args);
        }, "fallback"), function() {
          return Q(object).inspect();
        });
      }
      __name(master, "master");
      Q.spread = spread;
      function spread(value, fulfilled, rejected) {
        return Q(value).spread(fulfilled, rejected);
      }
      __name(spread, "spread");
      Promise2.prototype.spread = function(fulfilled, rejected) {
        return this.all().then(function(array) {
          return fulfilled.apply(void 0, array);
        }, rejected);
      };
      Q.async = async;
      function async(makeGenerator) {
        return function() {
          function continuer(verb, arg) {
            var result;
            if (typeof StopIteration === "undefined") {
              try {
                result = generator[verb](arg);
              } catch (exception) {
                return reject(exception);
              }
              if (result.done) {
                return Q(result.value);
              } else {
                return when(result.value, callback, errback);
              }
            } else {
              try {
                result = generator[verb](arg);
              } catch (exception) {
                if (isStopIteration(exception)) {
                  return Q(exception.value);
                } else {
                  return reject(exception);
                }
              }
              return when(result, callback, errback);
            }
          }
          __name(continuer, "continuer");
          var generator = makeGenerator.apply(this, arguments);
          var callback = continuer.bind(continuer, "next");
          var errback = continuer.bind(continuer, "throw");
          return callback();
        };
      }
      __name(async, "async");
      Q.spawn = spawn;
      function spawn(makeGenerator) {
        Q.done(Q.async(makeGenerator)());
      }
      __name(spawn, "spawn");
      Q["return"] = _return;
      function _return(value) {
        throw new QReturnValue(value);
      }
      __name(_return, "_return");
      Q.promised = promised;
      function promised(callback) {
        return function() {
          return spread([this, all(arguments)], function(self2, args) {
            return callback.apply(self2, args);
          });
        };
      }
      __name(promised, "promised");
      Q.dispatch = dispatch;
      function dispatch(object, op, args) {
        return Q(object).dispatch(op, args);
      }
      __name(dispatch, "dispatch");
      Promise2.prototype.dispatch = function(op, args) {
        var self2 = this;
        var deferred = defer();
        Q.nextTick(function() {
          self2.promiseDispatch(deferred.resolve, op, args);
        });
        return deferred.promise;
      };
      Q.get = function(object, key) {
        return Q(object).dispatch("get", [key]);
      };
      Promise2.prototype.get = function(key) {
        return this.dispatch("get", [key]);
      };
      Q.set = function(object, key, value) {
        return Q(object).dispatch("set", [key, value]);
      };
      Promise2.prototype.set = function(key, value) {
        return this.dispatch("set", [key, value]);
      };
      Q.del = // XXX legacy
      Q["delete"] = function(object, key) {
        return Q(object).dispatch("delete", [key]);
      };
      Promise2.prototype.del = // XXX legacy
      Promise2.prototype["delete"] = function(key) {
        return this.dispatch("delete", [key]);
      };
      Q.mapply = // XXX As proposed by "Redsandro"
      Q.post = function(object, name, args) {
        return Q(object).dispatch("post", [name, args]);
      };
      Promise2.prototype.mapply = // XXX As proposed by "Redsandro"
      Promise2.prototype.post = function(name, args) {
        return this.dispatch("post", [name, args]);
      };
      Q.send = // XXX Mark Miller's proposed parlance
      Q.mcall = // XXX As proposed by "Redsandro"
      Q.invoke = function(object, name) {
        return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
      };
      Promise2.prototype.send = // XXX Mark Miller's proposed parlance
      Promise2.prototype.mcall = // XXX As proposed by "Redsandro"
      Promise2.prototype.invoke = function(name) {
        return this.dispatch("post", [name, array_slice(arguments, 1)]);
      };
      Q.fapply = function(object, args) {
        return Q(object).dispatch("apply", [void 0, args]);
      };
      Promise2.prototype.fapply = function(args) {
        return this.dispatch("apply", [void 0, args]);
      };
      Q["try"] = Q.fcall = function(object) {
        return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
      };
      Promise2.prototype.fcall = function() {
        return this.dispatch("apply", [void 0, array_slice(arguments)]);
      };
      Q.fbind = function(object) {
        var promise2 = Q(object);
        var args = array_slice(arguments, 1);
        return /* @__PURE__ */ __name(function fbound() {
          return promise2.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
          ]);
        }, "fbound");
      };
      Promise2.prototype.fbind = function() {
        var promise2 = this;
        var args = array_slice(arguments);
        return /* @__PURE__ */ __name(function fbound() {
          return promise2.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
          ]);
        }, "fbound");
      };
      Q.keys = function(object) {
        return Q(object).dispatch("keys", []);
      };
      Promise2.prototype.keys = function() {
        return this.dispatch("keys", []);
      };
      Q.all = all;
      function all(promises) {
        return when(promises, function(promises2) {
          var pendingCount = 0;
          var deferred = defer();
          array_reduce(promises2, function(undefined2, promise2, index) {
            var snapshot;
            if (isPromise(promise2) && (snapshot = promise2.inspect()).state === "fulfilled") {
              promises2[index] = snapshot.value;
            } else {
              ++pendingCount;
              when(
                promise2,
                function(value) {
                  promises2[index] = value;
                  if (--pendingCount === 0) {
                    deferred.resolve(promises2);
                  }
                },
                deferred.reject,
                function(progress2) {
                  deferred.notify({ index, value: progress2 });
                }
              );
            }
          }, void 0);
          if (pendingCount === 0) {
            deferred.resolve(promises2);
          }
          return deferred.promise;
        });
      }
      __name(all, "all");
      Promise2.prototype.all = function() {
        return all(this);
      };
      Q.any = any;
      function any(promises) {
        if (promises.length === 0) {
          return Q.resolve();
        }
        var deferred = Q.defer();
        var pendingCount = 0;
        array_reduce(promises, function(prev, current, index) {
          var promise2 = promises[index];
          pendingCount++;
          when(promise2, onFulfilled, onRejected, onProgress);
          function onFulfilled(result) {
            deferred.resolve(result);
          }
          __name(onFulfilled, "onFulfilled");
          function onRejected(err) {
            pendingCount--;
            if (pendingCount === 0) {
              var rejection = err || new Error("" + err);
              rejection.message = "Q can't get fulfillment value from any promise, all promises were rejected. Last error message: " + rejection.message;
              deferred.reject(rejection);
            }
          }
          __name(onRejected, "onRejected");
          function onProgress(progress2) {
            deferred.notify({
              index,
              value: progress2
            });
          }
          __name(onProgress, "onProgress");
        }, void 0);
        return deferred.promise;
      }
      __name(any, "any");
      Promise2.prototype.any = function() {
        return any(this);
      };
      Q.allResolved = deprecate2(allResolved, "allResolved", "allSettled");
      function allResolved(promises) {
        return when(promises, function(promises2) {
          promises2 = array_map(promises2, Q);
          return when(all(array_map(promises2, function(promise2) {
            return when(promise2, noop, noop);
          })), function() {
            return promises2;
          });
        });
      }
      __name(allResolved, "allResolved");
      Promise2.prototype.allResolved = function() {
        return allResolved(this);
      };
      Q.allSettled = allSettled;
      function allSettled(promises) {
        return Q(promises).allSettled();
      }
      __name(allSettled, "allSettled");
      Promise2.prototype.allSettled = function() {
        return this.then(function(promises) {
          return all(array_map(promises, function(promise2) {
            promise2 = Q(promise2);
            function regardless() {
              return promise2.inspect();
            }
            __name(regardless, "regardless");
            return promise2.then(regardless, regardless);
          }));
        });
      };
      Q.fail = // XXX legacy
      Q["catch"] = function(object, rejected) {
        return Q(object).then(void 0, rejected);
      };
      Promise2.prototype.fail = // XXX legacy
      Promise2.prototype["catch"] = function(rejected) {
        return this.then(void 0, rejected);
      };
      Q.progress = progress;
      function progress(object, progressed) {
        return Q(object).then(void 0, void 0, progressed);
      }
      __name(progress, "progress");
      Promise2.prototype.progress = function(progressed) {
        return this.then(void 0, void 0, progressed);
      };
      Q.fin = // XXX legacy
      Q["finally"] = function(object, callback) {
        return Q(object)["finally"](callback);
      };
      Promise2.prototype.fin = // XXX legacy
      Promise2.prototype["finally"] = function(callback) {
        if (!callback || typeof callback.apply !== "function") {
          throw new Error("Q can't apply finally callback");
        }
        callback = Q(callback);
        return this.then(function(value) {
          return callback.fcall().then(function() {
            return value;
          });
        }, function(reason) {
          return callback.fcall().then(function() {
            throw reason;
          });
        });
      };
      Q.done = function(object, fulfilled, rejected, progress2) {
        return Q(object).done(fulfilled, rejected, progress2);
      };
      Promise2.prototype.done = function(fulfilled, rejected, progress2) {
        var onUnhandledError = /* @__PURE__ */ __name(function(error3) {
          Q.nextTick(function() {
            makeStackTraceLong(error3, promise2);
            if (Q.onerror) {
              Q.onerror(error3);
            } else {
              throw error3;
            }
          });
        }, "onUnhandledError");
        var promise2 = fulfilled || rejected || progress2 ? this.then(fulfilled, rejected, progress2) : this;
        if (typeof process === "object" && process && process.domain) {
          onUnhandledError = process.domain.bind(onUnhandledError);
        }
        promise2.then(void 0, onUnhandledError);
      };
      Q.timeout = function(object, ms, error3) {
        return Q(object).timeout(ms, error3);
      };
      Promise2.prototype.timeout = function(ms, error3) {
        var deferred = defer();
        var timeoutId = setTimeout(function() {
          if (!error3 || "string" === typeof error3) {
            error3 = new Error(error3 || "Timed out after " + ms + " ms");
            error3.code = "ETIMEDOUT";
          }
          deferred.reject(error3);
        }, ms);
        this.then(function(value) {
          clearTimeout(timeoutId);
          deferred.resolve(value);
        }, function(exception) {
          clearTimeout(timeoutId);
          deferred.reject(exception);
        }, deferred.notify);
        return deferred.promise;
      };
      Q.delay = function(object, timeout) {
        if (timeout === void 0) {
          timeout = object;
          object = void 0;
        }
        return Q(object).delay(timeout);
      };
      Promise2.prototype.delay = function(timeout) {
        return this.then(function(value) {
          var deferred = defer();
          setTimeout(function() {
            deferred.resolve(value);
          }, timeout);
          return deferred.promise;
        });
      };
      Q.nfapply = function(callback, args) {
        return Q(callback).nfapply(args);
      };
      Promise2.prototype.nfapply = function(args) {
        var deferred = defer();
        var nodeArgs = array_slice(args);
        nodeArgs.push(deferred.makeNodeResolver());
        this.fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
      };
      Q.nfcall = function(callback) {
        var args = array_slice(arguments, 1);
        return Q(callback).nfapply(args);
      };
      Promise2.prototype.nfcall = function() {
        var nodeArgs = array_slice(arguments);
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        this.fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
      };
      Q.nfbind = Q.denodeify = function(callback) {
        if (callback === void 0) {
          throw new Error("Q can't wrap an undefined function");
        }
        var baseArgs = array_slice(arguments, 1);
        return function() {
          var nodeArgs = baseArgs.concat(array_slice(arguments));
          var deferred = defer();
          nodeArgs.push(deferred.makeNodeResolver());
          Q(callback).fapply(nodeArgs).fail(deferred.reject);
          return deferred.promise;
        };
      };
      Promise2.prototype.nfbind = Promise2.prototype.denodeify = function() {
        var args = array_slice(arguments);
        args.unshift(this);
        return Q.denodeify.apply(void 0, args);
      };
      Q.nbind = function(callback, thisp) {
        var baseArgs = array_slice(arguments, 2);
        return function() {
          var nodeArgs = baseArgs.concat(array_slice(arguments));
          var deferred = defer();
          nodeArgs.push(deferred.makeNodeResolver());
          function bound() {
            return callback.apply(thisp, arguments);
          }
          __name(bound, "bound");
          Q(bound).fapply(nodeArgs).fail(deferred.reject);
          return deferred.promise;
        };
      };
      Promise2.prototype.nbind = function() {
        var args = array_slice(arguments, 0);
        args.unshift(this);
        return Q.nbind.apply(void 0, args);
      };
      Q.nmapply = // XXX As proposed by "Redsandro"
      Q.npost = function(object, name, args) {
        return Q(object).npost(name, args);
      };
      Promise2.prototype.nmapply = // XXX As proposed by "Redsandro"
      Promise2.prototype.npost = function(name, args) {
        var nodeArgs = array_slice(args || []);
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
        return deferred.promise;
      };
      Q.nsend = // XXX Based on Mark Miller's proposed "send"
      Q.nmcall = // XXX Based on "Redsandro's" proposal
      Q.ninvoke = function(object, name) {
        var nodeArgs = array_slice(arguments, 2);
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
        return deferred.promise;
      };
      Promise2.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
      Promise2.prototype.nmcall = // XXX Based on "Redsandro's" proposal
      Promise2.prototype.ninvoke = function(name) {
        var nodeArgs = array_slice(arguments, 1);
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
        return deferred.promise;
      };
      Q.nodeify = nodeify;
      function nodeify(object, nodeback) {
        return Q(object).nodeify(nodeback);
      }
      __name(nodeify, "nodeify");
      Promise2.prototype.nodeify = function(nodeback) {
        if (nodeback) {
          this.then(function(value) {
            Q.nextTick(function() {
              nodeback(null, value);
            });
          }, function(error3) {
            Q.nextTick(function() {
              nodeback(error3);
            });
          });
        } else {
          return this;
        }
      };
      Q.noConflict = function() {
        throw new Error("Q.noConflict only works when Q is used as a global");
      };
      var qEndingLine = captureLine();
      return Q;
    });
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/multiplexed_protocol.js
var require_multiplexed_protocol = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/multiplexed_protocol.js"(exports) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var util = require_util();
    var Thrift6 = require_thrift();
    exports.Multiplexer = Multiplexer;
    function Wrapper(serviceName, protocol, connection) {
      function MultiplexProtocol(trans, strictRead, strictWrite) {
        protocol.call(this, trans, strictRead, strictWrite);
      }
      __name(MultiplexProtocol, "MultiplexProtocol");
      ;
      util.inherits(MultiplexProtocol, protocol);
      MultiplexProtocol.prototype.writeMessageBegin = function(name, type, seqid) {
        if (type == Thrift6.MessageType.CALL || type == Thrift6.MessageType.ONEWAY) {
          connection.seqId2Service[seqid] = serviceName;
          MultiplexProtocol.super_.prototype.writeMessageBegin.call(
            this,
            serviceName + ":" + name,
            type,
            seqid
          );
        } else {
          MultiplexProtocol.super_.prototype.writeMessageBegin.call(this, name, type, seqid);
        }
      };
      return MultiplexProtocol;
    }
    __name(Wrapper, "Wrapper");
    function Multiplexer() {
      this.seqid = 0;
    }
    __name(Multiplexer, "Multiplexer");
    Multiplexer.prototype.createClient = function(serviceName, ServiceClient, connection) {
      if (ServiceClient.Client) {
        ServiceClient = ServiceClient.Client;
      }
      var writeCb = /* @__PURE__ */ __name(function(buf, seqid) {
        connection.write(buf, seqid);
      }, "writeCb");
      var transport = new connection.transport(void 0, writeCb);
      var protocolWrapper = new Wrapper(serviceName, connection.protocol, connection);
      var client = new ServiceClient(transport, protocolWrapper);
      var self2 = this;
      client.new_seqid = function() {
        self2.seqid += 1;
        return self2.seqid;
      };
      if (typeof connection.client !== "object") {
        connection.client = {};
      }
      connection.client[serviceName] = client;
      return client;
    };
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/framed_transport.js
var require_framed_transport = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/framed_transport.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var binary = require_binary();
    var InputBufferUnderrunError = require_input_buffer_underrun_error();
    var THeaderTransport = require_header_transport();
    module.exports = TFramedTransport2;
    function TFramedTransport2(buffer, callback) {
      THeaderTransport.call(this);
      this.inBuf = buffer || new Buffer(0);
      this.outBuffers = [];
      this.outCount = 0;
      this.readPos = 0;
      this.onFlush = callback;
    }
    __name(TFramedTransport2, "TFramedTransport");
    Object.setPrototypeOf(TFramedTransport2.prototype, THeaderTransport.prototype);
    TFramedTransport2.receiver = function(callback, seqid) {
      var residual = [];
      return function(data) {
        for (var i = 0; i < data.length; ++i) {
          residual.push(data[i]);
        }
        while (residual.length > 0) {
          if (residual.length < 4) {
            return;
          }
          var frameSize = binary.readI32(Buffer.from(residual.slice(0, 4)), 0);
          if (residual.length < 4 + frameSize) {
            return;
          }
          residual.splice(0, 4);
          var frame = Buffer.from(residual.splice(0, frameSize));
          callback(new TFramedTransport2(frame), seqid);
        }
      };
    };
    TFramedTransport2.prototype.commitPosition = function() {
    }, TFramedTransport2.prototype.rollbackPosition = function() {
    }, // TODO: Implement open/close support
    TFramedTransport2.prototype.isOpen = function() {
      return true;
    };
    TFramedTransport2.prototype.open = function() {
    };
    TFramedTransport2.prototype.close = function() {
    };
    TFramedTransport2.prototype.setCurrSeqId = function(seqid) {
      this._seqid = seqid;
    };
    TFramedTransport2.prototype.ensureAvailable = function(len) {
      if (this.readPos + len > this.inBuf.length) {
        throw new InputBufferUnderrunError();
      }
    };
    TFramedTransport2.prototype.read = function(len) {
      this.ensureAvailable(len);
      var end = this.readPos + len;
      if (this.inBuf.length < end) {
        throw new Error("read(" + len + ") failed - not enough data");
      }
      var buf = this.inBuf.slice(this.readPos, end);
      this.readPos = end;
      return buf;
    };
    TFramedTransport2.prototype.readByte = function() {
      this.ensureAvailable(1);
      return binary.readByte(this.inBuf[this.readPos++]);
    };
    TFramedTransport2.prototype.readI16 = function() {
      this.ensureAvailable(2);
      var i16 = binary.readI16(this.inBuf, this.readPos);
      this.readPos += 2;
      return i16;
    };
    TFramedTransport2.prototype.readI32 = function() {
      this.ensureAvailable(4);
      var i32 = binary.readI32(this.inBuf, this.readPos);
      this.readPos += 4;
      return i32;
    };
    TFramedTransport2.prototype.readDouble = function() {
      this.ensureAvailable(8);
      var d = binary.readDouble(this.inBuf, this.readPos);
      this.readPos += 8;
      return d;
    };
    TFramedTransport2.prototype.readString = function(len) {
      this.ensureAvailable(len);
      var str = this.inBuf.toString("utf8", this.readPos, this.readPos + len);
      this.readPos += len;
      return str;
    };
    TFramedTransport2.prototype.borrow = function() {
      return {
        buf: this.inBuf,
        readIndex: this.readPos,
        writeIndex: this.inBuf.length
      };
    };
    TFramedTransport2.prototype.consume = function(bytesConsumed) {
      this.readPos += bytesConsumed;
    };
    TFramedTransport2.prototype.write = function(buf, encoding) {
      if (typeof buf === "string") {
        buf = new Buffer(buf, encoding || "utf8");
      }
      this.outBuffers.push(buf);
      this.outCount += buf.length;
    };
    TFramedTransport2.prototype.flush = function() {
      var seqid = this._seqid;
      this._seqid = null;
      var out = new Buffer(this.outCount), pos = 0;
      this.outBuffers.forEach(function(buf) {
        buf.copy(out, pos, 0);
        pos += buf.length;
      });
      if (this.onFlush) {
        var msg = new Buffer(out.length + 4);
        binary.writeI32(msg, out.length);
        out.copy(msg, 4, 0, out.length);
        if (this.onFlush) {
          this.onFlush(msg, seqid);
        }
      }
      this.outBuffers = [];
      this.outCount = 0;
    };
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/ws_transport.js
var require_ws_transport = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/ws_transport.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var log4 = require_log();
    module.exports = TWebSocketTransport;
    function TWebSocketTransport(url) {
      this.__reset(url);
    }
    __name(TWebSocketTransport, "TWebSocketTransport");
    TWebSocketTransport.prototype.__reset = function(url) {
      this.url = url;
      this.socket = null;
      this.callbacks = [];
      this.send_pending = [];
      this.send_buf = "";
      this.recv_buf = "";
      this.rb_wpos = 0;
      this.rb_rpos = 0;
    };
    TWebSocketTransport.prototype.flush = function(async, callback) {
      var self2 = this;
      if (this.isOpen()) {
        this.socket.send(this.send_buf);
        this.callbacks.push(function() {
          var clientCallback = callback;
          return function(msg) {
            self2.setRecvBuffer(msg);
            clientCallback();
          };
        }());
      } else {
        this.send_pending.push({
          buf: this.send_buf,
          cb: callback
        });
      }
    };
    TWebSocketTransport.prototype.__onOpen = function() {
      var self2 = this;
      if (this.send_pending.length > 0) {
        this.send_pending.forEach(function(elem) {
          self2.socket.send(elem.buf);
          self2.callbacks.push(function() {
            var clientCallback = elem.cb;
            return function(msg) {
              self2.setRecvBuffer(msg);
              clientCallback();
            };
          }());
        });
        this.send_pending = [];
      }
    };
    TWebSocketTransport.prototype.__onClose = function(evt) {
      this.__reset(this.url);
    };
    TWebSocketTransport.prototype.__onMessage = function(evt) {
      if (this.callbacks.length) {
        this.callbacks.shift()(evt.data);
      }
    };
    TWebSocketTransport.prototype.__onError = function(evt) {
      log4.error("websocket: " + evt.toString());
      this.socket.close();
    };
    TWebSocketTransport.prototype.setRecvBuffer = function(buf) {
      this.recv_buf = buf;
      this.recv_buf_sz = this.recv_buf.length;
      this.wpos = this.recv_buf.length;
      this.rpos = 0;
    };
    TWebSocketTransport.prototype.isOpen = function() {
      return this.socket && this.socket.readyState == this.socket.OPEN;
    };
    TWebSocketTransport.prototype.open = function() {
      if (this.socket && this.socket.readyState != this.socket.CLOSED) {
        return;
      }
      this.socket = new WebSocket(this.url);
      this.socket.onopen = this.__onOpen.bind(this);
      this.socket.onmessage = this.__onMessage.bind(this);
      this.socket.onerror = this.__onError.bind(this);
      this.socket.onclose = this.__onClose.bind(this);
    };
    TWebSocketTransport.prototype.close = function() {
      this.socket.close();
    };
    TWebSocketTransport.prototype.read = function(len) {
      var avail = this.wpos - this.rpos;
      if (avail === 0) {
        return "";
      }
      var give = len;
      if (avail < len) {
        give = avail;
      }
      var ret = this.read_buf.substr(this.rpos, give);
      this.rpos += give;
      return ret;
    };
    TWebSocketTransport.prototype.readAll = function() {
      return this.recv_buf;
    };
    TWebSocketTransport.prototype.write = function(buf) {
      this.send_buf = buf;
    };
    TWebSocketTransport.prototype.getSendBuffer = function() {
      return this.send_buf;
    };
  }
});

// node_modules/thrift/lib/nodejs/lib/thrift/browser.js
var require_browser2 = __commonJS({
  "node_modules/thrift/lib/nodejs/lib/thrift/browser.js"(exports) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    exports.Thrift = require_thrift();
    var wsConnection = require_ws_connection();
    exports.WSConnection = wsConnection.WSConnection;
    exports.createWSConnection = wsConnection.createWSConnection;
    exports.createWSClient = wsConnection.createWSClient;
    var xhrConnection = require_xhr_connection();
    exports.XHRConnection = xhrConnection.XHRConnection;
    exports.createXHRConnection = xhrConnection.createXHRConnection;
    exports.createXHRClient = xhrConnection.createXHRClient;
    var ohosConnection = require_ohos_connection();
    exports.OhosConnection = ohosConnection.OhosConnection;
    exports.createOhosConnection = ohosConnection.createOhosConnection;
    exports.createOhosClient = ohosConnection.createOhosClient;
    exports.Int64 = require_Int64();
    exports.Q = require_q();
    var mpxProtocol = require_multiplexed_protocol();
    exports.Multiplexer = mpxProtocol.Multiplexer;
    exports.TBufferedTransport = require_buffered_transport();
    exports.TFramedTransport = require_framed_transport();
    exports.TWebSocketTransport = require_ws_transport();
    exports.Protocol = require_json_protocol();
    exports.TJSONProtocol = require_json_protocol();
    exports.TBinaryProtocol = require_binary_protocol();
    exports.TCompactProtocol = require_compact_protocol();
  }
});

// node_modules/unenv/dist/runtime/node/internal/crypto/web.mjs
var subtle;
var init_web = __esm({
  "node_modules/unenv/dist/runtime/node/internal/crypto/web.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    subtle = globalThis.crypto?.subtle;
  }
});

// node_modules/unenv/dist/runtime/node/internal/crypto/node.mjs
var webcrypto, createCipher, createDecipher, pseudoRandomBytes, createCipheriv, createDecipheriv, createECDH, createSign, createVerify, diffieHellman, getCipherInfo, privateDecrypt, privateEncrypt, publicDecrypt, publicEncrypt, sign, verify, hash, Cipher, Cipheriv, Decipher, Decipheriv, ECDH, Sign, Verify;
var init_node = __esm({
  "node_modules/unenv/dist/runtime/node/internal/crypto/node.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    init_utils();
    webcrypto = new Proxy(globalThis.crypto, { get(_, key) {
      if (key === "CryptoKey") {
        return globalThis.CryptoKey;
      }
      if (typeof globalThis.crypto[key] === "function") {
        return globalThis.crypto[key].bind(globalThis.crypto);
      }
      return globalThis.crypto[key];
    } });
    createCipher = /* @__PURE__ */ notImplemented("crypto.createCipher");
    createDecipher = /* @__PURE__ */ notImplemented("crypto.createDecipher");
    pseudoRandomBytes = /* @__PURE__ */ notImplemented("crypto.pseudoRandomBytes");
    createCipheriv = /* @__PURE__ */ notImplemented("crypto.createCipheriv");
    createDecipheriv = /* @__PURE__ */ notImplemented("crypto.createDecipheriv");
    createECDH = /* @__PURE__ */ notImplemented("crypto.createECDH");
    createSign = /* @__PURE__ */ notImplemented("crypto.createSign");
    createVerify = /* @__PURE__ */ notImplemented("crypto.createVerify");
    diffieHellman = /* @__PURE__ */ notImplemented("crypto.diffieHellman");
    getCipherInfo = /* @__PURE__ */ notImplemented("crypto.getCipherInfo");
    privateDecrypt = /* @__PURE__ */ notImplemented("crypto.privateDecrypt");
    privateEncrypt = /* @__PURE__ */ notImplemented("crypto.privateEncrypt");
    publicDecrypt = /* @__PURE__ */ notImplemented("crypto.publicDecrypt");
    publicEncrypt = /* @__PURE__ */ notImplemented("crypto.publicEncrypt");
    sign = /* @__PURE__ */ notImplemented("crypto.sign");
    verify = /* @__PURE__ */ notImplemented("crypto.verify");
    hash = /* @__PURE__ */ notImplemented("crypto.hash");
    Cipher = /* @__PURE__ */ notImplementedClass("crypto.Cipher");
    Cipheriv = /* @__PURE__ */ notImplementedClass(
      "crypto.Cipheriv"
      // @ts-expect-error not typed yet
    );
    Decipher = /* @__PURE__ */ notImplementedClass("crypto.Decipher");
    Decipheriv = /* @__PURE__ */ notImplementedClass(
      "crypto.Decipheriv"
      // @ts-expect-error not typed yet
    );
    ECDH = /* @__PURE__ */ notImplementedClass("crypto.ECDH");
    Sign = /* @__PURE__ */ notImplementedClass("crypto.Sign");
    Verify = /* @__PURE__ */ notImplementedClass("crypto.Verify");
  }
});

// node_modules/unenv/dist/runtime/node/internal/crypto/constants.mjs
var SSL_OP_ALL, SSL_OP_ALLOW_NO_DHE_KEX, SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION, SSL_OP_CIPHER_SERVER_PREFERENCE, SSL_OP_CISCO_ANYCONNECT, SSL_OP_COOKIE_EXCHANGE, SSL_OP_CRYPTOPRO_TLSEXT_BUG, SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS, SSL_OP_LEGACY_SERVER_CONNECT, SSL_OP_NO_COMPRESSION, SSL_OP_NO_ENCRYPT_THEN_MAC, SSL_OP_NO_QUERY_MTU, SSL_OP_NO_RENEGOTIATION, SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION, SSL_OP_NO_SSLv2, SSL_OP_NO_SSLv3, SSL_OP_NO_TICKET, SSL_OP_NO_TLSv1, SSL_OP_NO_TLSv1_1, SSL_OP_NO_TLSv1_2, SSL_OP_NO_TLSv1_3, SSL_OP_PRIORITIZE_CHACHA, SSL_OP_TLS_ROLLBACK_BUG, ENGINE_METHOD_RSA, ENGINE_METHOD_DSA, ENGINE_METHOD_DH, ENGINE_METHOD_RAND, ENGINE_METHOD_EC, ENGINE_METHOD_CIPHERS, ENGINE_METHOD_DIGESTS, ENGINE_METHOD_PKEY_METHS, ENGINE_METHOD_PKEY_ASN1_METHS, ENGINE_METHOD_ALL, ENGINE_METHOD_NONE, DH_CHECK_P_NOT_SAFE_PRIME, DH_CHECK_P_NOT_PRIME, DH_UNABLE_TO_CHECK_GENERATOR, DH_NOT_SUITABLE_GENERATOR, RSA_PKCS1_PADDING, RSA_NO_PADDING, RSA_PKCS1_OAEP_PADDING, RSA_X931_PADDING, RSA_PKCS1_PSS_PADDING, RSA_PSS_SALTLEN_DIGEST, RSA_PSS_SALTLEN_MAX_SIGN, RSA_PSS_SALTLEN_AUTO, POINT_CONVERSION_COMPRESSED, POINT_CONVERSION_UNCOMPRESSED, POINT_CONVERSION_HYBRID, defaultCoreCipherList, defaultCipherList, OPENSSL_VERSION_NUMBER, TLS1_VERSION, TLS1_1_VERSION, TLS1_2_VERSION, TLS1_3_VERSION;
var init_constants = __esm({
  "node_modules/unenv/dist/runtime/node/internal/crypto/constants.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    SSL_OP_ALL = 2147485776;
    SSL_OP_ALLOW_NO_DHE_KEX = 1024;
    SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = 262144;
    SSL_OP_CIPHER_SERVER_PREFERENCE = 4194304;
    SSL_OP_CISCO_ANYCONNECT = 32768;
    SSL_OP_COOKIE_EXCHANGE = 8192;
    SSL_OP_CRYPTOPRO_TLSEXT_BUG = 2147483648;
    SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS = 2048;
    SSL_OP_LEGACY_SERVER_CONNECT = 4;
    SSL_OP_NO_COMPRESSION = 131072;
    SSL_OP_NO_ENCRYPT_THEN_MAC = 524288;
    SSL_OP_NO_QUERY_MTU = 4096;
    SSL_OP_NO_RENEGOTIATION = 1073741824;
    SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION = 65536;
    SSL_OP_NO_SSLv2 = 0;
    SSL_OP_NO_SSLv3 = 33554432;
    SSL_OP_NO_TICKET = 16384;
    SSL_OP_NO_TLSv1 = 67108864;
    SSL_OP_NO_TLSv1_1 = 268435456;
    SSL_OP_NO_TLSv1_2 = 134217728;
    SSL_OP_NO_TLSv1_3 = 536870912;
    SSL_OP_PRIORITIZE_CHACHA = 2097152;
    SSL_OP_TLS_ROLLBACK_BUG = 8388608;
    ENGINE_METHOD_RSA = 1;
    ENGINE_METHOD_DSA = 2;
    ENGINE_METHOD_DH = 4;
    ENGINE_METHOD_RAND = 8;
    ENGINE_METHOD_EC = 2048;
    ENGINE_METHOD_CIPHERS = 64;
    ENGINE_METHOD_DIGESTS = 128;
    ENGINE_METHOD_PKEY_METHS = 512;
    ENGINE_METHOD_PKEY_ASN1_METHS = 1024;
    ENGINE_METHOD_ALL = 65535;
    ENGINE_METHOD_NONE = 0;
    DH_CHECK_P_NOT_SAFE_PRIME = 2;
    DH_CHECK_P_NOT_PRIME = 1;
    DH_UNABLE_TO_CHECK_GENERATOR = 4;
    DH_NOT_SUITABLE_GENERATOR = 8;
    RSA_PKCS1_PADDING = 1;
    RSA_NO_PADDING = 3;
    RSA_PKCS1_OAEP_PADDING = 4;
    RSA_X931_PADDING = 5;
    RSA_PKCS1_PSS_PADDING = 6;
    RSA_PSS_SALTLEN_DIGEST = -1;
    RSA_PSS_SALTLEN_MAX_SIGN = -2;
    RSA_PSS_SALTLEN_AUTO = -2;
    POINT_CONVERSION_COMPRESSED = 2;
    POINT_CONVERSION_UNCOMPRESSED = 4;
    POINT_CONVERSION_HYBRID = 6;
    defaultCoreCipherList = "";
    defaultCipherList = "";
    OPENSSL_VERSION_NUMBER = 0;
    TLS1_VERSION = 0;
    TLS1_1_VERSION = 0;
    TLS1_2_VERSION = 0;
    TLS1_3_VERSION = 0;
  }
});

// node_modules/unenv/dist/runtime/node/crypto.mjs
var constants;
var init_crypto = __esm({
  "node_modules/unenv/dist/runtime/node/crypto.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    init_constants();
    init_web();
    init_node();
    constants = {
      OPENSSL_VERSION_NUMBER,
      SSL_OP_ALL,
      SSL_OP_ALLOW_NO_DHE_KEX,
      SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION,
      SSL_OP_CIPHER_SERVER_PREFERENCE,
      SSL_OP_CISCO_ANYCONNECT,
      SSL_OP_COOKIE_EXCHANGE,
      SSL_OP_CRYPTOPRO_TLSEXT_BUG,
      SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS,
      SSL_OP_LEGACY_SERVER_CONNECT,
      SSL_OP_NO_COMPRESSION,
      SSL_OP_NO_ENCRYPT_THEN_MAC,
      SSL_OP_NO_QUERY_MTU,
      SSL_OP_NO_RENEGOTIATION,
      SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION,
      SSL_OP_NO_SSLv2,
      SSL_OP_NO_SSLv3,
      SSL_OP_NO_TICKET,
      SSL_OP_NO_TLSv1,
      SSL_OP_NO_TLSv1_1,
      SSL_OP_NO_TLSv1_2,
      SSL_OP_NO_TLSv1_3,
      SSL_OP_PRIORITIZE_CHACHA,
      SSL_OP_TLS_ROLLBACK_BUG,
      ENGINE_METHOD_RSA,
      ENGINE_METHOD_DSA,
      ENGINE_METHOD_DH,
      ENGINE_METHOD_RAND,
      ENGINE_METHOD_EC,
      ENGINE_METHOD_CIPHERS,
      ENGINE_METHOD_DIGESTS,
      ENGINE_METHOD_PKEY_METHS,
      ENGINE_METHOD_PKEY_ASN1_METHS,
      ENGINE_METHOD_ALL,
      ENGINE_METHOD_NONE,
      DH_CHECK_P_NOT_SAFE_PRIME,
      DH_CHECK_P_NOT_PRIME,
      DH_UNABLE_TO_CHECK_GENERATOR,
      DH_NOT_SUITABLE_GENERATOR,
      RSA_PKCS1_PADDING,
      RSA_NO_PADDING,
      RSA_PKCS1_OAEP_PADDING,
      RSA_X931_PADDING,
      RSA_PKCS1_PSS_PADDING,
      RSA_PSS_SALTLEN_DIGEST,
      RSA_PSS_SALTLEN_MAX_SIGN,
      RSA_PSS_SALTLEN_AUTO,
      defaultCoreCipherList,
      TLS1_VERSION,
      TLS1_1_VERSION,
      TLS1_2_VERSION,
      TLS1_3_VERSION,
      POINT_CONVERSION_COMPRESSED,
      POINT_CONVERSION_UNCOMPRESSED,
      POINT_CONVERSION_HYBRID,
      defaultCipherList
    };
  }
});

// node_modules/@cloudflare/unenv-preset/dist/runtime/node/crypto.mjs
var workerdCrypto, Certificate, DiffieHellman, DiffieHellmanGroup, Hash, Hmac, KeyObject, X509Certificate, checkPrime, checkPrimeSync, createDiffieHellman, createDiffieHellmanGroup, createHash, createHmac, createPrivateKey, createPublicKey, createSecretKey, generateKey, generateKeyPair, generateKeyPairSync, generateKeySync, generatePrime, generatePrimeSync, getCiphers, getCurves, getDiffieHellman, getFips, getHashes, hkdf, hkdfSync, pbkdf2, pbkdf2Sync, randomBytes, randomFill, randomFillSync, randomInt, randomUUID, scrypt, scryptSync, secureHeapUsed, setEngine, setFips, subtle2, timingSafeEqual, getRandomValues, webcrypto2, fips, crypto_default;
var init_crypto2 = __esm({
  "node_modules/@cloudflare/unenv-preset/dist/runtime/node/crypto.mjs"() {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    init_crypto();
    workerdCrypto = process.getBuiltinModule("node:crypto");
    ({
      Certificate,
      DiffieHellman,
      DiffieHellmanGroup,
      Hash,
      Hmac,
      KeyObject,
      X509Certificate,
      checkPrime,
      checkPrimeSync,
      createDiffieHellman,
      createDiffieHellmanGroup,
      createHash,
      createHmac,
      createPrivateKey,
      createPublicKey,
      createSecretKey,
      generateKey,
      generateKeyPair,
      generateKeyPairSync,
      generateKeySync,
      generatePrime,
      generatePrimeSync,
      getCiphers,
      getCurves,
      getDiffieHellman,
      getFips,
      getHashes,
      hkdf,
      hkdfSync,
      pbkdf2,
      pbkdf2Sync,
      randomBytes,
      randomFill,
      randomFillSync,
      randomInt,
      randomUUID,
      scrypt,
      scryptSync,
      secureHeapUsed,
      setEngine,
      setFips,
      subtle: subtle2,
      timingSafeEqual
    } = workerdCrypto);
    getRandomValues = workerdCrypto.getRandomValues.bind(
      workerdCrypto.webcrypto
    );
    webcrypto2 = {
      // @ts-expect-error unenv has unknown type
      CryptoKey: webcrypto.CryptoKey,
      getRandomValues,
      randomUUID,
      subtle: subtle2
    };
    fips = workerdCrypto.fips;
    crypto_default = {
      /**
       * manually unroll unenv-polyfilled-symbols to make it tree-shakeable
       */
      Certificate,
      Cipher,
      Cipheriv,
      Decipher,
      Decipheriv,
      ECDH,
      Sign,
      Verify,
      X509Certificate,
      // @ts-expect-error @types/node is out of date - this is a bug in typings
      constants,
      // @ts-expect-error unenv has unknown type
      createCipheriv,
      // @ts-expect-error unenv has unknown type
      createDecipheriv,
      // @ts-expect-error unenv has unknown type
      createECDH,
      // @ts-expect-error unenv has unknown type
      createSign,
      // @ts-expect-error unenv has unknown type
      createVerify,
      // @ts-expect-error unenv has unknown type
      diffieHellman,
      // @ts-expect-error unenv has unknown type
      getCipherInfo,
      // @ts-expect-error unenv has unknown type
      hash,
      // @ts-expect-error unenv has unknown type
      privateDecrypt,
      // @ts-expect-error unenv has unknown type
      privateEncrypt,
      // @ts-expect-error unenv has unknown type
      publicDecrypt,
      // @ts-expect-error unenv has unknown type
      publicEncrypt,
      scrypt,
      scryptSync,
      // @ts-expect-error unenv has unknown type
      sign,
      // @ts-expect-error unenv has unknown type
      verify,
      // default-only export from unenv
      // @ts-expect-error unenv has unknown type
      createCipher,
      // @ts-expect-error unenv has unknown type
      createDecipher,
      // @ts-expect-error unenv has unknown type
      pseudoRandomBytes,
      /**
       * manually unroll workerd-polyfilled-symbols to make it tree-shakeable
       */
      DiffieHellman,
      DiffieHellmanGroup,
      Hash,
      Hmac,
      KeyObject,
      checkPrime,
      checkPrimeSync,
      createDiffieHellman,
      createDiffieHellmanGroup,
      createHash,
      createHmac,
      createPrivateKey,
      createPublicKey,
      createSecretKey,
      generateKey,
      generateKeyPair,
      generateKeyPairSync,
      generateKeySync,
      generatePrime,
      generatePrimeSync,
      getCiphers,
      getCurves,
      getDiffieHellman,
      getFips,
      getHashes,
      getRandomValues,
      hkdf,
      hkdfSync,
      pbkdf2,
      pbkdf2Sync,
      randomBytes,
      randomFill,
      randomFillSync,
      randomInt,
      randomUUID,
      secureHeapUsed,
      setEngine,
      setFips,
      subtle: subtle2,
      timingSafeEqual,
      // default-only export from workerd
      fips,
      // special-cased deep merged symbols
      webcrypto: webcrypto2
    };
  }
});

// node-built-in-modules:crypto
var require_crypto = __commonJS({
  "node-built-in-modules:crypto"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    init_crypto2();
    module.exports = crypto_default;
  }
});

// node_modules/node-bignumber/lib/rsa/jsbn.js
var require_jsbn = __commonJS({
  "node_modules/node-bignumber/lib/rsa/jsbn.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var dbits;
    var canary = 244837814094590;
    var j_lm = (canary & 16777215) == 15715070;
    function BigInteger(a, b, c) {
      if (a != null)
        if ("number" == typeof a)
          this.fromNumber(a, b, c);
        else if (b == null && "string" != typeof a)
          this.fromString(a, 256);
        else
          this.fromString(a, b);
    }
    __name(BigInteger, "BigInteger");
    function nbi() {
      return new BigInteger(null);
    }
    __name(nbi, "nbi");
    function am3(i, x, w, j, c, n) {
      var xl = x & 16383, xh = x >> 14;
      while (--n >= 0) {
        var l = this[i] & 16383;
        var h = this[i++] >> 14;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 16383) << 14) + w[j] + c;
        c = (l >> 28) + (m >> 14) + xh * h;
        w[j++] = l & 268435455;
      }
      return c;
    }
    __name(am3, "am3");
    BigInteger.prototype.am = am3;
    dbits = 28;
    BigInteger.prototype.DB = dbits;
    BigInteger.prototype.DM = (1 << dbits) - 1;
    BigInteger.prototype.DV = 1 << dbits;
    var BI_FP = 52;
    BigInteger.prototype.FV = Math.pow(2, BI_FP);
    BigInteger.prototype.F1 = BI_FP - dbits;
    BigInteger.prototype.F2 = 2 * dbits - BI_FP;
    var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
    var BI_RC = new Array();
    var rr;
    var vv;
    rr = "0".charCodeAt(0);
    for (vv = 0; vv <= 9; ++vv)
      BI_RC[rr++] = vv;
    rr = "a".charCodeAt(0);
    for (vv = 10; vv < 36; ++vv)
      BI_RC[rr++] = vv;
    rr = "A".charCodeAt(0);
    for (vv = 10; vv < 36; ++vv)
      BI_RC[rr++] = vv;
    function int2char(n) {
      return BI_RM.charAt(n);
    }
    __name(int2char, "int2char");
    function intAt(s, i) {
      var c = BI_RC[s.charCodeAt(i)];
      return c == null ? -1 : c;
    }
    __name(intAt, "intAt");
    function bnpCopyTo(r) {
      for (var i = this.t - 1; i >= 0; --i)
        r[i] = this[i];
      r.t = this.t;
      r.s = this.s;
    }
    __name(bnpCopyTo, "bnpCopyTo");
    function bnpFromInt(x) {
      this.t = 1;
      this.s = x < 0 ? -1 : 0;
      if (x > 0)
        this[0] = x;
      else if (x < -1)
        this[0] = x + DV;
      else
        this.t = 0;
    }
    __name(bnpFromInt, "bnpFromInt");
    function nbv(i) {
      var r = nbi();
      r.fromInt(i);
      return r;
    }
    __name(nbv, "nbv");
    function bnpFromString(s, b) {
      var k;
      if (b == 16)
        k = 4;
      else if (b == 8)
        k = 3;
      else if (b == 256)
        k = 8;
      else if (b == 2)
        k = 1;
      else if (b == 32)
        k = 5;
      else if (b == 4)
        k = 2;
      else {
        this.fromRadix(s, b);
        return;
      }
      this.t = 0;
      this.s = 0;
      var i = s.length, mi = false, sh = 0;
      while (--i >= 0) {
        var x = k == 8 ? s[i] & 255 : intAt(s, i);
        if (x < 0) {
          if (s.charAt(i) == "-")
            mi = true;
          continue;
        }
        mi = false;
        if (sh == 0)
          this[this.t++] = x;
        else if (sh + k > this.DB) {
          this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
          this[this.t++] = x >> this.DB - sh;
        } else
          this[this.t - 1] |= x << sh;
        sh += k;
        if (sh >= this.DB)
          sh -= this.DB;
      }
      if (k == 8 && (s[0] & 128) != 0) {
        this.s = -1;
        if (sh > 0)
          this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;
      }
      this.clamp();
      if (mi)
        BigInteger.ZERO.subTo(this, this);
    }
    __name(bnpFromString, "bnpFromString");
    function bnpClamp() {
      var c = this.s & this.DM;
      while (this.t > 0 && this[this.t - 1] == c)
        --this.t;
    }
    __name(bnpClamp, "bnpClamp");
    function bnToString(b) {
      if (this.s < 0)
        return "-" + this.negate().toString(b);
      var k;
      if (b == 16)
        k = 4;
      else if (b == 8)
        k = 3;
      else if (b == 2)
        k = 1;
      else if (b == 32)
        k = 5;
      else if (b == 4)
        k = 2;
      else
        return this.toRadix(b);
      var km = (1 << k) - 1, d, m = false, r = "", i = this.t;
      var p = this.DB - i * this.DB % k;
      if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) > 0) {
          m = true;
          r = int2char(d);
        }
        while (i >= 0) {
          if (p < k) {
            d = (this[i] & (1 << p) - 1) << k - p;
            d |= this[--i] >> (p += this.DB - k);
          } else {
            d = this[i] >> (p -= k) & km;
            if (p <= 0) {
              p += this.DB;
              --i;
            }
          }
          if (d > 0)
            m = true;
          if (m)
            r += int2char(d);
        }
      }
      return m ? r : "0";
    }
    __name(bnToString, "bnToString");
    function bnNegate() {
      var r = nbi();
      BigInteger.ZERO.subTo(this, r);
      return r;
    }
    __name(bnNegate, "bnNegate");
    function bnAbs() {
      return this.s < 0 ? this.negate() : this;
    }
    __name(bnAbs, "bnAbs");
    function bnCompareTo(a) {
      var r = this.s - a.s;
      if (r != 0)
        return r;
      var i = this.t;
      r = i - a.t;
      if (r != 0)
        return this.s < 0 ? -r : r;
      while (--i >= 0)
        if ((r = this[i] - a[i]) != 0)
          return r;
      return 0;
    }
    __name(bnCompareTo, "bnCompareTo");
    function nbits(x) {
      var r = 1, t;
      if ((t = x >>> 16) != 0) {
        x = t;
        r += 16;
      }
      if ((t = x >> 8) != 0) {
        x = t;
        r += 8;
      }
      if ((t = x >> 4) != 0) {
        x = t;
        r += 4;
      }
      if ((t = x >> 2) != 0) {
        x = t;
        r += 2;
      }
      if ((t = x >> 1) != 0) {
        x = t;
        r += 1;
      }
      return r;
    }
    __name(nbits, "nbits");
    function bnBitLength() {
      if (this.t <= 0)
        return 0;
      return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
    }
    __name(bnBitLength, "bnBitLength");
    function bnpDLShiftTo(n, r) {
      var i;
      for (i = this.t - 1; i >= 0; --i)
        r[i + n] = this[i];
      for (i = n - 1; i >= 0; --i)
        r[i] = 0;
      r.t = this.t + n;
      r.s = this.s;
    }
    __name(bnpDLShiftTo, "bnpDLShiftTo");
    function bnpDRShiftTo(n, r) {
      for (var i = n; i < this.t; ++i)
        r[i - n] = this[i];
      r.t = Math.max(this.t - n, 0);
      r.s = this.s;
    }
    __name(bnpDRShiftTo, "bnpDRShiftTo");
    function bnpLShiftTo(n, r) {
      var bs = n % this.DB;
      var cbs = this.DB - bs;
      var bm = (1 << cbs) - 1;
      var ds = Math.floor(n / this.DB), c = this.s << bs & this.DM, i;
      for (i = this.t - 1; i >= 0; --i) {
        r[i + ds + 1] = this[i] >> cbs | c;
        c = (this[i] & bm) << bs;
      }
      for (i = ds - 1; i >= 0; --i)
        r[i] = 0;
      r[ds] = c;
      r.t = this.t + ds + 1;
      r.s = this.s;
      r.clamp();
    }
    __name(bnpLShiftTo, "bnpLShiftTo");
    function bnpRShiftTo(n, r) {
      r.s = this.s;
      var ds = Math.floor(n / this.DB);
      if (ds >= this.t) {
        r.t = 0;
        return;
      }
      var bs = n % this.DB;
      var cbs = this.DB - bs;
      var bm = (1 << bs) - 1;
      r[0] = this[ds] >> bs;
      for (var i = ds + 1; i < this.t; ++i) {
        r[i - ds - 1] |= (this[i] & bm) << cbs;
        r[i - ds] = this[i] >> bs;
      }
      if (bs > 0)
        r[this.t - ds - 1] |= (this.s & bm) << cbs;
      r.t = this.t - ds;
      r.clamp();
    }
    __name(bnpRShiftTo, "bnpRShiftTo");
    function bnpSubTo(a, r) {
      var i = 0, c = 0, m = Math.min(a.t, this.t);
      while (i < m) {
        c += this[i] - a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }
      if (a.t < this.t) {
        c -= a.s;
        while (i < this.t) {
          c += this[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c += this.s;
      } else {
        c += this.s;
        while (i < a.t) {
          c -= a[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c -= a.s;
      }
      r.s = c < 0 ? -1 : 0;
      if (c < -1)
        r[i++] = this.DV + c;
      else if (c > 0)
        r[i++] = c;
      r.t = i;
      r.clamp();
    }
    __name(bnpSubTo, "bnpSubTo");
    function bnpMultiplyTo(a, r) {
      var x = this.abs(), y = a.abs();
      var i = x.t;
      r.t = i + y.t;
      while (--i >= 0)
        r[i] = 0;
      for (i = 0; i < y.t; ++i)
        r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
      r.s = 0;
      r.clamp();
      if (this.s != a.s)
        BigInteger.ZERO.subTo(r, r);
    }
    __name(bnpMultiplyTo, "bnpMultiplyTo");
    function bnpSquareTo(r) {
      var x = this.abs();
      var i = r.t = 2 * x.t;
      while (--i >= 0)
        r[i] = 0;
      for (i = 0; i < x.t - 1; ++i) {
        var c = x.am(i, x[i], r, 2 * i, 0, 1);
        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
          r[i + x.t] -= x.DV;
          r[i + x.t + 1] = 1;
        }
      }
      if (r.t > 0)
        r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
      r.s = 0;
      r.clamp();
    }
    __name(bnpSquareTo, "bnpSquareTo");
    function bnpDivRemTo(m, q, r) {
      var pm = m.abs();
      if (pm.t <= 0)
        return;
      var pt = this.abs();
      if (pt.t < pm.t) {
        if (q != null)
          q.fromInt(0);
        if (r != null)
          this.copyTo(r);
        return;
      }
      if (r == null)
        r = nbi();
      var y = nbi(), ts = this.s, ms = m.s;
      var nsh = this.DB - nbits(pm[pm.t - 1]);
      if (nsh > 0) {
        pm.lShiftTo(nsh, y);
        pt.lShiftTo(nsh, r);
      } else {
        pm.copyTo(y);
        pt.copyTo(r);
      }
      var ys = y.t;
      var y0 = y[ys - 1];
      if (y0 == 0)
        return;
      var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
      var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;
      var i = r.t, j = i - ys, t = q == null ? nbi() : q;
      y.dlShiftTo(j, t);
      if (r.compareTo(t) >= 0) {
        r[r.t++] = 1;
        r.subTo(t, r);
      }
      BigInteger.ONE.dlShiftTo(ys, t);
      t.subTo(y, y);
      while (y.t < ys)
        y[y.t++] = 0;
      while (--j >= 0) {
        var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
          y.dlShiftTo(j, t);
          r.subTo(t, r);
          while (r[i] < --qd)
            r.subTo(t, r);
        }
      }
      if (q != null) {
        r.drShiftTo(ys, q);
        if (ts != ms)
          BigInteger.ZERO.subTo(q, q);
      }
      r.t = ys;
      r.clamp();
      if (nsh > 0)
        r.rShiftTo(nsh, r);
      if (ts < 0)
        BigInteger.ZERO.subTo(r, r);
    }
    __name(bnpDivRemTo, "bnpDivRemTo");
    function bnMod(a) {
      var r = nbi();
      this.abs().divRemTo(a, null, r);
      if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
        a.subTo(r, r);
      return r;
    }
    __name(bnMod, "bnMod");
    function Classic(m) {
      this.m = m;
    }
    __name(Classic, "Classic");
    function cConvert(x) {
      if (x.s < 0 || x.compareTo(this.m) >= 0)
        return x.mod(this.m);
      else
        return x;
    }
    __name(cConvert, "cConvert");
    function cRevert(x) {
      return x;
    }
    __name(cRevert, "cRevert");
    function cReduce(x) {
      x.divRemTo(this.m, null, x);
    }
    __name(cReduce, "cReduce");
    function cMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }
    __name(cMulTo, "cMulTo");
    function cSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    }
    __name(cSqrTo, "cSqrTo");
    Classic.prototype.convert = cConvert;
    Classic.prototype.revert = cRevert;
    Classic.prototype.reduce = cReduce;
    Classic.prototype.mulTo = cMulTo;
    Classic.prototype.sqrTo = cSqrTo;
    function bnpInvDigit() {
      if (this.t < 1)
        return 0;
      var x = this[0];
      if ((x & 1) == 0)
        return 0;
      var y = x & 3;
      y = y * (2 - (x & 15) * y) & 15;
      y = y * (2 - (x & 255) * y) & 255;
      y = y * (2 - ((x & 65535) * y & 65535)) & 65535;
      y = y * (2 - x * y % this.DV) % this.DV;
      return y > 0 ? this.DV - y : -y;
    }
    __name(bnpInvDigit, "bnpInvDigit");
    function Montgomery(m) {
      this.m = m;
      this.mp = m.invDigit();
      this.mpl = this.mp & 32767;
      this.mph = this.mp >> 15;
      this.um = (1 << m.DB - 15) - 1;
      this.mt2 = 2 * m.t;
    }
    __name(Montgomery, "Montgomery");
    function montConvert(x) {
      var r = nbi();
      x.abs().dlShiftTo(this.m.t, r);
      r.divRemTo(this.m, null, r);
      if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
        this.m.subTo(r, r);
      return r;
    }
    __name(montConvert, "montConvert");
    function montRevert(x) {
      var r = nbi();
      x.copyTo(r);
      this.reduce(r);
      return r;
    }
    __name(montRevert, "montRevert");
    function montReduce(x) {
      while (x.t <= this.mt2)
        x[x.t++] = 0;
      for (var i = 0; i < this.m.t; ++i) {
        var j = x[i] & 32767;
        var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
        j = i + this.m.t;
        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
        while (x[j] >= x.DV) {
          x[j] -= x.DV;
          x[++j]++;
        }
      }
      x.clamp();
      x.drShiftTo(this.m.t, x);
      if (x.compareTo(this.m) >= 0)
        x.subTo(this.m, x);
    }
    __name(montReduce, "montReduce");
    function montSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    }
    __name(montSqrTo, "montSqrTo");
    function montMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }
    __name(montMulTo, "montMulTo");
    Montgomery.prototype.convert = montConvert;
    Montgomery.prototype.revert = montRevert;
    Montgomery.prototype.reduce = montReduce;
    Montgomery.prototype.mulTo = montMulTo;
    Montgomery.prototype.sqrTo = montSqrTo;
    function bnpIsEven() {
      return (this.t > 0 ? this[0] & 1 : this.s) == 0;
    }
    __name(bnpIsEven, "bnpIsEven");
    function bnpExp(e, z) {
      if (e > 4294967295 || e < 1)
        return BigInteger.ONE;
      var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;
      g.copyTo(r);
      while (--i >= 0) {
        z.sqrTo(r, r2);
        if ((e & 1 << i) > 0)
          z.mulTo(r2, g, r);
        else {
          var t = r;
          r = r2;
          r2 = t;
        }
      }
      return z.revert(r);
    }
    __name(bnpExp, "bnpExp");
    function bnModPowInt(e, m) {
      var z;
      if (e < 256 || m.isEven())
        z = new Classic(m);
      else
        z = new Montgomery(m);
      return this.exp(e, z);
    }
    __name(bnModPowInt, "bnModPowInt");
    BigInteger.prototype.copyTo = bnpCopyTo;
    BigInteger.prototype.fromInt = bnpFromInt;
    BigInteger.prototype.fromString = bnpFromString;
    BigInteger.prototype.clamp = bnpClamp;
    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
    BigInteger.prototype.drShiftTo = bnpDRShiftTo;
    BigInteger.prototype.lShiftTo = bnpLShiftTo;
    BigInteger.prototype.rShiftTo = bnpRShiftTo;
    BigInteger.prototype.subTo = bnpSubTo;
    BigInteger.prototype.multiplyTo = bnpMultiplyTo;
    BigInteger.prototype.squareTo = bnpSquareTo;
    BigInteger.prototype.divRemTo = bnpDivRemTo;
    BigInteger.prototype.invDigit = bnpInvDigit;
    BigInteger.prototype.isEven = bnpIsEven;
    BigInteger.prototype.exp = bnpExp;
    BigInteger.prototype.toString = bnToString;
    BigInteger.prototype.negate = bnNegate;
    BigInteger.prototype.abs = bnAbs;
    BigInteger.prototype.compareTo = bnCompareTo;
    BigInteger.prototype.bitLength = bnBitLength;
    BigInteger.prototype.mod = bnMod;
    BigInteger.prototype.modPowInt = bnModPowInt;
    BigInteger.ZERO = nbv(0);
    BigInteger.ONE = nbv(1);
    function bnClone() {
      var r = nbi();
      this.copyTo(r);
      return r;
    }
    __name(bnClone, "bnClone");
    function bnIntValue() {
      if (this.s < 0) {
        if (this.t == 1)
          return this[0] - this.DV;
        else if (this.t == 0)
          return -1;
      } else if (this.t == 1)
        return this[0];
      else if (this.t == 0)
        return 0;
      return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
    }
    __name(bnIntValue, "bnIntValue");
    function bnByteValue() {
      return this.t == 0 ? this.s : this[0] << 24 >> 24;
    }
    __name(bnByteValue, "bnByteValue");
    function bnShortValue() {
      return this.t == 0 ? this.s : this[0] << 16 >> 16;
    }
    __name(bnShortValue, "bnShortValue");
    function bnpChunkSize(r) {
      return Math.floor(Math.LN2 * this.DB / Math.log(r));
    }
    __name(bnpChunkSize, "bnpChunkSize");
    function bnSigNum() {
      if (this.s < 0)
        return -1;
      else if (this.t <= 0 || this.t == 1 && this[0] <= 0)
        return 0;
      else
        return 1;
    }
    __name(bnSigNum, "bnSigNum");
    function bnpToRadix(b) {
      if (b == null)
        b = 10;
      if (this.signum() == 0 || b < 2 || b > 36)
        return "0";
      var cs = this.chunkSize(b);
      var a = Math.pow(b, cs);
      var d = nbv(a), y = nbi(), z = nbi(), r = "";
      this.divRemTo(d, y, z);
      while (y.signum() > 0) {
        r = (a + z.intValue()).toString(b).substr(1) + r;
        y.divRemTo(d, y, z);
      }
      return z.intValue().toString(b) + r;
    }
    __name(bnpToRadix, "bnpToRadix");
    function bnpFromRadix(s, b) {
      this.fromInt(0);
      if (b == null)
        b = 10;
      var cs = this.chunkSize(b);
      var d = Math.pow(b, cs), mi = false, j = 0, w = 0;
      for (var i = 0; i < s.length; ++i) {
        var x = intAt(s, i);
        if (x < 0) {
          if (s.charAt(i) == "-" && this.signum() == 0)
            mi = true;
          continue;
        }
        w = b * w + x;
        if (++j >= cs) {
          this.dMultiply(d);
          this.dAddOffset(w, 0);
          j = 0;
          w = 0;
        }
      }
      if (j > 0) {
        this.dMultiply(Math.pow(b, j));
        this.dAddOffset(w, 0);
      }
      if (mi)
        BigInteger.ZERO.subTo(this, this);
    }
    __name(bnpFromRadix, "bnpFromRadix");
    function bnpFromNumber(a, b, c) {
      if ("number" == typeof b) {
        if (a < 2)
          this.fromInt(1);
        else {
          this.fromNumber(a, c);
          if (!this.testBit(a - 1))
            this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
          if (this.isEven())
            this.dAddOffset(1, 0);
          while (!this.isProbablePrime(b)) {
            this.dAddOffset(2, 0);
            if (this.bitLength() > a)
              this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
          }
        }
      } else {
        var x = new Array(), t = a & 7;
        x.length = (a >> 3) + 1;
        b.nextBytes(x);
        if (t > 0)
          x[0] &= (1 << t) - 1;
        else
          x[0] = 0;
        this.fromString(x, 256);
      }
    }
    __name(bnpFromNumber, "bnpFromNumber");
    function bnToByteArray() {
      var i = this.t, r = new Array();
      r[0] = this.s;
      var p = this.DB - i * this.DB % 8, d, k = 0;
      if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)
          r[k++] = d | this.s << this.DB - p;
        while (i >= 0) {
          if (p < 8) {
            d = (this[i] & (1 << p) - 1) << 8 - p;
            d |= this[--i] >> (p += this.DB - 8);
          } else {
            d = this[i] >> (p -= 8) & 255;
            if (p <= 0) {
              p += this.DB;
              --i;
            }
          }
          if ((d & 128) != 0)
            d |= -256;
          if (k == 0 && (this.s & 128) != (d & 128))
            ++k;
          if (k > 0 || d != this.s)
            r[k++] = d;
        }
      }
      return r;
    }
    __name(bnToByteArray, "bnToByteArray");
    function bnEquals(a) {
      return this.compareTo(a) == 0;
    }
    __name(bnEquals, "bnEquals");
    function bnMin(a) {
      return this.compareTo(a) < 0 ? this : a;
    }
    __name(bnMin, "bnMin");
    function bnMax(a) {
      return this.compareTo(a) > 0 ? this : a;
    }
    __name(bnMax, "bnMax");
    function bnpBitwiseTo(a, op, r) {
      var i, f, m = Math.min(a.t, this.t);
      for (i = 0; i < m; ++i)
        r[i] = op(this[i], a[i]);
      if (a.t < this.t) {
        f = a.s & this.DM;
        for (i = m; i < this.t; ++i)
          r[i] = op(this[i], f);
        r.t = this.t;
      } else {
        f = this.s & this.DM;
        for (i = m; i < a.t; ++i)
          r[i] = op(f, a[i]);
        r.t = a.t;
      }
      r.s = op(this.s, a.s);
      r.clamp();
    }
    __name(bnpBitwiseTo, "bnpBitwiseTo");
    function op_and(x, y) {
      return x & y;
    }
    __name(op_and, "op_and");
    function bnAnd(a) {
      var r = nbi();
      this.bitwiseTo(a, op_and, r);
      return r;
    }
    __name(bnAnd, "bnAnd");
    function op_or(x, y) {
      return x | y;
    }
    __name(op_or, "op_or");
    function bnOr(a) {
      var r = nbi();
      this.bitwiseTo(a, op_or, r);
      return r;
    }
    __name(bnOr, "bnOr");
    function op_xor(x, y) {
      return x ^ y;
    }
    __name(op_xor, "op_xor");
    function bnXor(a) {
      var r = nbi();
      this.bitwiseTo(a, op_xor, r);
      return r;
    }
    __name(bnXor, "bnXor");
    function op_andnot(x, y) {
      return x & ~y;
    }
    __name(op_andnot, "op_andnot");
    function bnAndNot(a) {
      var r = nbi();
      this.bitwiseTo(a, op_andnot, r);
      return r;
    }
    __name(bnAndNot, "bnAndNot");
    function bnNot() {
      var r = nbi();
      for (var i = 0; i < this.t; ++i)
        r[i] = this.DM & ~this[i];
      r.t = this.t;
      r.s = ~this.s;
      return r;
    }
    __name(bnNot, "bnNot");
    function bnShiftLeft(n) {
      var r = nbi();
      if (n < 0)
        this.rShiftTo(-n, r);
      else
        this.lShiftTo(n, r);
      return r;
    }
    __name(bnShiftLeft, "bnShiftLeft");
    function bnShiftRight(n) {
      var r = nbi();
      if (n < 0)
        this.lShiftTo(-n, r);
      else
        this.rShiftTo(n, r);
      return r;
    }
    __name(bnShiftRight, "bnShiftRight");
    function lbit(x) {
      if (x == 0)
        return -1;
      var r = 0;
      if ((x & 65535) == 0) {
        x >>= 16;
        r += 16;
      }
      if ((x & 255) == 0) {
        x >>= 8;
        r += 8;
      }
      if ((x & 15) == 0) {
        x >>= 4;
        r += 4;
      }
      if ((x & 3) == 0) {
        x >>= 2;
        r += 2;
      }
      if ((x & 1) == 0)
        ++r;
      return r;
    }
    __name(lbit, "lbit");
    function bnGetLowestSetBit() {
      for (var i = 0; i < this.t; ++i)
        if (this[i] != 0)
          return i * this.DB + lbit(this[i]);
      if (this.s < 0)
        return this.t * this.DB;
      return -1;
    }
    __name(bnGetLowestSetBit, "bnGetLowestSetBit");
    function cbit(x) {
      var r = 0;
      while (x != 0) {
        x &= x - 1;
        ++r;
      }
      return r;
    }
    __name(cbit, "cbit");
    function bnBitCount() {
      var r = 0, x = this.s & this.DM;
      for (var i = 0; i < this.t; ++i)
        r += cbit(this[i] ^ x);
      return r;
    }
    __name(bnBitCount, "bnBitCount");
    function bnTestBit(n) {
      var j = Math.floor(n / this.DB);
      if (j >= this.t)
        return this.s != 0;
      return (this[j] & 1 << n % this.DB) != 0;
    }
    __name(bnTestBit, "bnTestBit");
    function bnpChangeBit(n, op) {
      var r = BigInteger.ONE.shiftLeft(n);
      this.bitwiseTo(r, op, r);
      return r;
    }
    __name(bnpChangeBit, "bnpChangeBit");
    function bnSetBit(n) {
      return this.changeBit(n, op_or);
    }
    __name(bnSetBit, "bnSetBit");
    function bnClearBit(n) {
      return this.changeBit(n, op_andnot);
    }
    __name(bnClearBit, "bnClearBit");
    function bnFlipBit(n) {
      return this.changeBit(n, op_xor);
    }
    __name(bnFlipBit, "bnFlipBit");
    function bnpAddTo(a, r) {
      var i = 0, c = 0, m = Math.min(a.t, this.t);
      while (i < m) {
        c += this[i] + a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }
      if (a.t < this.t) {
        c += a.s;
        while (i < this.t) {
          c += this[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c += this.s;
      } else {
        c += this.s;
        while (i < a.t) {
          c += a[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c += a.s;
      }
      r.s = c < 0 ? -1 : 0;
      if (c > 0)
        r[i++] = c;
      else if (c < -1)
        r[i++] = this.DV + c;
      r.t = i;
      r.clamp();
    }
    __name(bnpAddTo, "bnpAddTo");
    function bnAdd(a) {
      var r = nbi();
      this.addTo(a, r);
      return r;
    }
    __name(bnAdd, "bnAdd");
    function bnSubtract(a) {
      var r = nbi();
      this.subTo(a, r);
      return r;
    }
    __name(bnSubtract, "bnSubtract");
    function bnMultiply(a) {
      var r = nbi();
      this.multiplyTo(a, r);
      return r;
    }
    __name(bnMultiply, "bnMultiply");
    function bnSquare() {
      var r = nbi();
      this.squareTo(r);
      return r;
    }
    __name(bnSquare, "bnSquare");
    function bnDivide(a) {
      var r = nbi();
      this.divRemTo(a, r, null);
      return r;
    }
    __name(bnDivide, "bnDivide");
    function bnRemainder(a) {
      var r = nbi();
      this.divRemTo(a, null, r);
      return r;
    }
    __name(bnRemainder, "bnRemainder");
    function bnDivideAndRemainder(a) {
      var q = nbi(), r = nbi();
      this.divRemTo(a, q, r);
      return new Array(q, r);
    }
    __name(bnDivideAndRemainder, "bnDivideAndRemainder");
    function bnpDMultiply(n) {
      this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
      ++this.t;
      this.clamp();
    }
    __name(bnpDMultiply, "bnpDMultiply");
    function bnpDAddOffset(n, w) {
      if (n == 0)
        return;
      while (this.t <= w)
        this[this.t++] = 0;
      this[w] += n;
      while (this[w] >= this.DV) {
        this[w] -= this.DV;
        if (++w >= this.t)
          this[this.t++] = 0;
        ++this[w];
      }
    }
    __name(bnpDAddOffset, "bnpDAddOffset");
    function NullExp() {
    }
    __name(NullExp, "NullExp");
    function nNop(x) {
      return x;
    }
    __name(nNop, "nNop");
    function nMulTo(x, y, r) {
      x.multiplyTo(y, r);
    }
    __name(nMulTo, "nMulTo");
    function nSqrTo(x, r) {
      x.squareTo(r);
    }
    __name(nSqrTo, "nSqrTo");
    NullExp.prototype.convert = nNop;
    NullExp.prototype.revert = nNop;
    NullExp.prototype.mulTo = nMulTo;
    NullExp.prototype.sqrTo = nSqrTo;
    function bnPow(e) {
      return this.exp(e, new NullExp());
    }
    __name(bnPow, "bnPow");
    function bnpMultiplyLowerTo(a, n, r) {
      var i = Math.min(this.t + a.t, n);
      r.s = 0;
      r.t = i;
      while (i > 0)
        r[--i] = 0;
      var j;
      for (j = r.t - this.t; i < j; ++i)
        r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);
      for (j = Math.min(a.t, n); i < j; ++i)
        this.am(0, a[i], r, i, 0, n - i);
      r.clamp();
    }
    __name(bnpMultiplyLowerTo, "bnpMultiplyLowerTo");
    function bnpMultiplyUpperTo(a, n, r) {
      --n;
      var i = r.t = this.t + a.t - n;
      r.s = 0;
      while (--i >= 0)
        r[i] = 0;
      for (i = Math.max(n - this.t, 0); i < a.t; ++i)
        r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);
      r.clamp();
      r.drShiftTo(1, r);
    }
    __name(bnpMultiplyUpperTo, "bnpMultiplyUpperTo");
    function Barrett(m) {
      this.r2 = nbi();
      this.q3 = nbi();
      BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
      this.mu = this.r2.divide(m);
      this.m = m;
    }
    __name(Barrett, "Barrett");
    function barrettConvert(x) {
      if (x.s < 0 || x.t > 2 * this.m.t)
        return x.mod(this.m);
      else if (x.compareTo(this.m) < 0)
        return x;
      else {
        var r = nbi();
        x.copyTo(r);
        this.reduce(r);
        return r;
      }
    }
    __name(barrettConvert, "barrettConvert");
    function barrettRevert(x) {
      return x;
    }
    __name(barrettRevert, "barrettRevert");
    function barrettReduce(x) {
      x.drShiftTo(this.m.t - 1, this.r2);
      if (x.t > this.m.t + 1) {
        x.t = this.m.t + 1;
        x.clamp();
      }
      this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
      this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
      while (x.compareTo(this.r2) < 0)
        x.dAddOffset(1, this.m.t + 1);
      x.subTo(this.r2, x);
      while (x.compareTo(this.m) >= 0)
        x.subTo(this.m, x);
    }
    __name(barrettReduce, "barrettReduce");
    function barrettSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    }
    __name(barrettSqrTo, "barrettSqrTo");
    function barrettMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }
    __name(barrettMulTo, "barrettMulTo");
    Barrett.prototype.convert = barrettConvert;
    Barrett.prototype.revert = barrettRevert;
    Barrett.prototype.reduce = barrettReduce;
    Barrett.prototype.mulTo = barrettMulTo;
    Barrett.prototype.sqrTo = barrettSqrTo;
    function bnModPow(e, m) {
      var i = e.bitLength(), k, r = nbv(1), z;
      if (i <= 0)
        return r;
      else if (i < 18)
        k = 1;
      else if (i < 48)
        k = 3;
      else if (i < 144)
        k = 4;
      else if (i < 768)
        k = 5;
      else
        k = 6;
      if (i < 8)
        z = new Classic(m);
      else if (m.isEven())
        z = new Barrett(m);
      else
        z = new Montgomery(m);
      var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;
      g[1] = z.convert(this);
      if (k > 1) {
        var g2 = nbi();
        z.sqrTo(g[1], g2);
        while (n <= km) {
          g[n] = nbi();
          z.mulTo(g2, g[n - 2], g[n]);
          n += 2;
        }
      }
      var j = e.t - 1, w, is1 = true, r2 = nbi(), t;
      i = nbits(e[j]) - 1;
      while (j >= 0) {
        if (i >= k1)
          w = e[j] >> i - k1 & km;
        else {
          w = (e[j] & (1 << i + 1) - 1) << k1 - i;
          if (j > 0)
            w |= e[j - 1] >> this.DB + i - k1;
        }
        n = k;
        while ((w & 1) == 0) {
          w >>= 1;
          --n;
        }
        if ((i -= n) < 0) {
          i += this.DB;
          --j;
        }
        if (is1) {
          g[w].copyTo(r);
          is1 = false;
        } else {
          while (n > 1) {
            z.sqrTo(r, r2);
            z.sqrTo(r2, r);
            n -= 2;
          }
          if (n > 0)
            z.sqrTo(r, r2);
          else {
            t = r;
            r = r2;
            r2 = t;
          }
          z.mulTo(r2, g[w], r);
        }
        while (j >= 0 && (e[j] & 1 << i) == 0) {
          z.sqrTo(r, r2);
          t = r;
          r = r2;
          r2 = t;
          if (--i < 0) {
            i = this.DB - 1;
            --j;
          }
        }
      }
      return z.revert(r);
    }
    __name(bnModPow, "bnModPow");
    function bnGCD(a) {
      var x = this.s < 0 ? this.negate() : this.clone();
      var y = a.s < 0 ? a.negate() : a.clone();
      if (x.compareTo(y) < 0) {
        var t = x;
        x = y;
        y = t;
      }
      var i = x.getLowestSetBit(), g = y.getLowestSetBit();
      if (g < 0)
        return x;
      if (i < g)
        g = i;
      if (g > 0) {
        x.rShiftTo(g, x);
        y.rShiftTo(g, y);
      }
      while (x.signum() > 0) {
        if ((i = x.getLowestSetBit()) > 0)
          x.rShiftTo(i, x);
        if ((i = y.getLowestSetBit()) > 0)
          y.rShiftTo(i, y);
        if (x.compareTo(y) >= 0) {
          x.subTo(y, x);
          x.rShiftTo(1, x);
        } else {
          y.subTo(x, y);
          y.rShiftTo(1, y);
        }
      }
      if (g > 0)
        y.lShiftTo(g, y);
      return y;
    }
    __name(bnGCD, "bnGCD");
    function bnpModInt(n) {
      if (n <= 0)
        return 0;
      var d = this.DV % n, r = this.s < 0 ? n - 1 : 0;
      if (this.t > 0)
        if (d == 0)
          r = this[0] % n;
        else
          for (var i = this.t - 1; i >= 0; --i)
            r = (d * r + this[i]) % n;
      return r;
    }
    __name(bnpModInt, "bnpModInt");
    function bnModInverse(m) {
      var ac = m.isEven();
      if (this.isEven() && ac || m.signum() == 0)
        return BigInteger.ZERO;
      var u = m.clone(), v2 = this.clone();
      var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
      while (u.signum() != 0) {
        while (u.isEven()) {
          u.rShiftTo(1, u);
          if (ac) {
            if (!a.isEven() || !b.isEven()) {
              a.addTo(this, a);
              b.subTo(m, b);
            }
            a.rShiftTo(1, a);
          } else if (!b.isEven())
            b.subTo(m, b);
          b.rShiftTo(1, b);
        }
        while (v2.isEven()) {
          v2.rShiftTo(1, v2);
          if (ac) {
            if (!c.isEven() || !d.isEven()) {
              c.addTo(this, c);
              d.subTo(m, d);
            }
            c.rShiftTo(1, c);
          } else if (!d.isEven())
            d.subTo(m, d);
          d.rShiftTo(1, d);
        }
        if (u.compareTo(v2) >= 0) {
          u.subTo(v2, u);
          if (ac)
            a.subTo(c, a);
          b.subTo(d, b);
        } else {
          v2.subTo(u, v2);
          if (ac)
            c.subTo(a, c);
          d.subTo(b, d);
        }
      }
      if (v2.compareTo(BigInteger.ONE) != 0)
        return BigInteger.ZERO;
      if (d.compareTo(m) >= 0)
        return d.subtract(m);
      if (d.signum() < 0)
        d.addTo(m, d);
      else
        return d;
      if (d.signum() < 0)
        return d.add(m);
      else
        return d;
    }
    __name(bnModInverse, "bnModInverse");
    var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];
    var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];
    function bnIsProbablePrime(t) {
      var i, x = this.abs();
      if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
        for (i = 0; i < lowprimes.length; ++i)
          if (x[0] == lowprimes[i])
            return true;
        return false;
      }
      if (x.isEven())
        return false;
      i = 1;
      while (i < lowprimes.length) {
        var m = lowprimes[i], j = i + 1;
        while (j < lowprimes.length && m < lplim)
          m *= lowprimes[j++];
        m = x.modInt(m);
        while (i < j)
          if (m % lowprimes[i++] == 0)
            return false;
      }
      return x.millerRabin(t);
    }
    __name(bnIsProbablePrime, "bnIsProbablePrime");
    function bnpMillerRabin(t) {
      var n1 = this.subtract(BigInteger.ONE);
      var k = n1.getLowestSetBit();
      if (k <= 0)
        return false;
      var r = n1.shiftRight(k);
      t = t + 1 >> 1;
      if (t > lowprimes.length)
        t = lowprimes.length;
      var a = nbi();
      for (var i = 0; i < t; ++i) {
        a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);
        var y = a.modPow(r, this);
        if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
          var j = 1;
          while (j++ < k && y.compareTo(n1) != 0) {
            y = y.modPowInt(2, this);
            if (y.compareTo(BigInteger.ONE) == 0)
              return false;
          }
          if (y.compareTo(n1) != 0)
            return false;
        }
      }
      return true;
    }
    __name(bnpMillerRabin, "bnpMillerRabin");
    BigInteger.prototype.chunkSize = bnpChunkSize;
    BigInteger.prototype.toRadix = bnpToRadix;
    BigInteger.prototype.fromRadix = bnpFromRadix;
    BigInteger.prototype.fromNumber = bnpFromNumber;
    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
    BigInteger.prototype.changeBit = bnpChangeBit;
    BigInteger.prototype.addTo = bnpAddTo;
    BigInteger.prototype.dMultiply = bnpDMultiply;
    BigInteger.prototype.dAddOffset = bnpDAddOffset;
    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
    BigInteger.prototype.modInt = bnpModInt;
    BigInteger.prototype.millerRabin = bnpMillerRabin;
    BigInteger.prototype.clone = bnClone;
    BigInteger.prototype.intValue = bnIntValue;
    BigInteger.prototype.byteValue = bnByteValue;
    BigInteger.prototype.shortValue = bnShortValue;
    BigInteger.prototype.signum = bnSigNum;
    BigInteger.prototype.toByteArray = bnToByteArray;
    BigInteger.prototype.equals = bnEquals;
    BigInteger.prototype.min = bnMin;
    BigInteger.prototype.max = bnMax;
    BigInteger.prototype.and = bnAnd;
    BigInteger.prototype.or = bnOr;
    BigInteger.prototype.xor = bnXor;
    BigInteger.prototype.andNot = bnAndNot;
    BigInteger.prototype.not = bnNot;
    BigInteger.prototype.shiftLeft = bnShiftLeft;
    BigInteger.prototype.shiftRight = bnShiftRight;
    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
    BigInteger.prototype.bitCount = bnBitCount;
    BigInteger.prototype.testBit = bnTestBit;
    BigInteger.prototype.setBit = bnSetBit;
    BigInteger.prototype.clearBit = bnClearBit;
    BigInteger.prototype.flipBit = bnFlipBit;
    BigInteger.prototype.add = bnAdd;
    BigInteger.prototype.subtract = bnSubtract;
    BigInteger.prototype.multiply = bnMultiply;
    BigInteger.prototype.divide = bnDivide;
    BigInteger.prototype.remainder = bnRemainder;
    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
    BigInteger.prototype.modPow = bnModPow;
    BigInteger.prototype.modInverse = bnModInverse;
    BigInteger.prototype.pow = bnPow;
    BigInteger.prototype.gcd = bnGCD;
    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;
    BigInteger.int2char = int2char;
    BigInteger.prototype.square = bnSquare;
    module.exports = BigInteger;
  }
});

// node_modules/node-bignumber/lib/rsa/rng.js
var require_rng = __commonJS({
  "node_modules/node-bignumber/lib/rsa/rng.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var crypto = require_crypto();
    function rng_get_bytes(ba) {
      var i;
      var random = crypto.randomBytes(ba.length);
      for (i = 0; i < ba.length; ++i)
        ba[i] = random[i];
    }
    __name(rng_get_bytes, "rng_get_bytes");
    function SecureRandom() {
    }
    __name(SecureRandom, "SecureRandom");
    function Arcfour() {
      this.i = 0;
      this.j = 0;
      this.S = new Array();
    }
    __name(Arcfour, "Arcfour");
    function ARC4init(key) {
      var i, j, t;
      for (i = 0; i < 256; ++i)
        this.S[i] = i;
      j = 0;
      for (i = 0; i < 256; ++i) {
        j = j + this.S[i] + key[i % key.length] & 255;
        t = this.S[i];
        this.S[i] = this.S[j];
        this.S[j] = t;
      }
      this.i = 0;
      this.j = 0;
    }
    __name(ARC4init, "ARC4init");
    function ARC4next() {
      var t;
      this.i = this.i + 1 & 255;
      this.j = this.j + this.S[this.i] & 255;
      t = this.S[this.i];
      this.S[this.i] = this.S[this.j];
      this.S[this.j] = t;
      return this.S[t + this.S[this.i] & 255];
    }
    __name(ARC4next, "ARC4next");
    SecureRandom.prototype.nextBytes = rng_get_bytes;
    Arcfour.prototype.init = ARC4init;
    Arcfour.prototype.next = ARC4next;
    module.exports = SecureRandom;
  }
});

// node_modules/node-bignumber/lib/rsa/b64.js
var require_b64 = __commonJS({
  "node_modules/node-bignumber/lib/rsa/b64.js"(exports) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var int2char = require_jsbn().int2char;
    var b64map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var b64pad = "=";
    function hex2b64(h) {
      var i;
      var c;
      var ret = "";
      for (i = 0; i + 3 <= h.length; i += 3) {
        c = parseInt(h.substring(i, i + 3), 16);
        ret += b64map.charAt(c >> 6) + b64map.charAt(c & 63);
      }
      if (i + 1 == h.length) {
        c = parseInt(h.substring(i, i + 1), 16);
        ret += b64map.charAt(c << 2);
      } else if (i + 2 == h.length) {
        c = parseInt(h.substring(i, i + 2), 16);
        ret += b64map.charAt(c >> 2) + b64map.charAt((c & 3) << 4);
      }
      while ((ret.length & 3) > 0)
        ret += b64pad;
      return ret;
    }
    __name(hex2b64, "hex2b64");
    function b64tohex(s) {
      var ret = "";
      var i;
      var k = 0;
      var slop;
      for (i = 0; i < s.length; ++i) {
        if (s.charAt(i) == b64pad)
          break;
        v = b64map.indexOf(s.charAt(i));
        if (v < 0)
          continue;
        if (k == 0) {
          ret += int2char(v >> 2);
          slop = v & 3;
          k = 1;
        } else if (k == 1) {
          ret += int2char(slop << 2 | v >> 4);
          slop = v & 15;
          k = 2;
        } else if (k == 2) {
          ret += int2char(slop);
          ret += int2char(v >> 2);
          slop = v & 3;
          k = 3;
        } else {
          ret += int2char(slop << 2 | v >> 4);
          ret += int2char(v & 15);
          k = 0;
        }
      }
      if (k == 1)
        ret += int2char(slop << 2);
      return ret;
    }
    __name(b64tohex, "b64tohex");
    function b64toBA(s) {
      var h = b64tohex(s);
      var i;
      var a = new Array();
      for (i = 0; 2 * i < h.length; ++i) {
        a[i] = parseInt(h.substring(2 * i, 2 * i + 2), 16);
      }
      return a;
    }
    __name(b64toBA, "b64toBA");
    exports.hex2b64 = hex2b64;
    exports.b64tohex = b64tohex;
    exports.b64toBA = b64toBA;
  }
});

// node_modules/node-bignumber/lib/rsa/rsa.js
var require_rsa = __commonJS({
  "node_modules/node-bignumber/lib/rsa/rsa.js"(exports) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    var crypto = require_crypto();
    var BigInteger = require_jsbn();
    var SecureRandom = require_rng();
    var B64 = require_b64();
    function parseBigInt(str, r) {
      return new BigInteger(str, r);
    }
    __name(parseBigInt, "parseBigInt");
    function linebrk(buf, n) {
      var s = buf.toString("ascii");
      var ret = "";
      var i = 0;
      while (i + n < s.length) {
        ret += s.substring(i, i + n) + "\n";
        i += n;
      }
      return ret + s.substring(i, s.length);
    }
    __name(linebrk, "linebrk");
    function byte2Hex(b) {
      if (b < 16)
        return "0" + b.toString(16);
      else
        return b.toString(16);
    }
    __name(byte2Hex, "byte2Hex");
    function pkcs1pad2(s, n) {
      if (n < s.length + 11) {
        throw new Error("Message too long for RSA (n=" + n + ", l=" + s.length + ")");
        return null;
      }
      var ba = new Array();
      var i = s.length - 1;
      while (i >= 0 && n > 0) {
        var c = s.charCodeAt(i--);
        if (c < 128) {
          ba[--n] = c;
        } else if (c > 127 && c < 2048) {
          ba[--n] = c & 63 | 128;
          ba[--n] = c >> 6 | 192;
        } else {
          ba[--n] = c & 63 | 128;
          ba[--n] = c >> 6 & 63 | 128;
          ba[--n] = c >> 12 | 224;
        }
      }
      ba[--n] = 0;
      var rng = new SecureRandom();
      var x = new Array();
      while (n > 2) {
        x[0] = 0;
        while (x[0] == 0)
          rng.nextBytes(x);
        ba[--n] = x[0];
      }
      ba[--n] = 2;
      ba[--n] = 0;
      return new BigInteger(ba);
    }
    __name(pkcs1pad2, "pkcs1pad2");
    function RSAKey() {
      this.n = null;
      this.e = 0;
      this.d = null;
      this.p = null;
      this.q = null;
      this.dmp1 = null;
      this.dmq1 = null;
      this.coeff = null;
    }
    __name(RSAKey, "RSAKey");
    function RSASetPublic(N, E) {
      if (N != null && E != null && N.length > 0 && E.length > 0) {
        this.n = parseBigInt(N, 16);
        this.e = parseInt(E, 16);
      } else
        console.error("Invalid RSA public key");
    }
    __name(RSASetPublic, "RSASetPublic");
    function RSADoPublic(x) {
      return x.modPowInt(this.e, this.n);
    }
    __name(RSADoPublic, "RSADoPublic");
    function RSAEncrypt(text) {
      var m = pkcs1pad2(text, this.n.bitLength() + 7 >> 3);
      if (m == null)
        return null;
      var c = this.doPublic(m);
      if (c == null)
        return null;
      var h = c.toString(16);
      if ((h.length & 1) == 0)
        return h;
      else
        return "0" + h;
    }
    __name(RSAEncrypt, "RSAEncrypt");
    function pkcs1unpad2(d, n) {
      var b = d.toByteArray();
      var i = 0;
      while (i < b.length && b[i] == 0)
        ++i;
      if (b.length - i != n - 1 || b[i] != 2)
        return null;
      ++i;
      while (b[i] != 0)
        if (++i >= b.length)
          return null;
      var ret = [];
      while (++i < b.length) {
        var c = b[i] & 255;
        ret.push(c);
      }
      return Buffer.from(ret);
    }
    __name(pkcs1unpad2, "pkcs1unpad2");
    function RSASetPrivate(N, E, D) {
      if (N != null && E != null && N.length > 0 && E.length > 0) {
        this.n = parseBigInt(N, 16);
        this.e = parseInt(E, 16);
        this.d = parseBigInt(D, 16);
      } else
        console.error("Invalid RSA private key");
    }
    __name(RSASetPrivate, "RSASetPrivate");
    function RSASetPrivateEx(N, E, D, P, Q, DP, DQ, C) {
      if (N != null && E != null && N.length > 0 && E.length > 0) {
        this.n = parseBigInt(N, 16);
        this.e = parseInt(E, 16);
        this.d = parseBigInt(D, 16);
        this.p = parseBigInt(P, 16);
        this.q = parseBigInt(Q, 16);
        this.dmp1 = parseBigInt(DP, 16);
        this.dmq1 = parseBigInt(DQ, 16);
        this.coeff = parseBigInt(C, 16);
      } else
        console.error("Invalid RSA private key");
    }
    __name(RSASetPrivateEx, "RSASetPrivateEx");
    function RSAGenerate(B, E) {
      var rng = new SecureRandom();
      var qs = B >> 1;
      this.e = parseInt(E, 16);
      var ee = new BigInteger(E, 16);
      for (; ; ) {
        for (; ; ) {
          this.p = new BigInteger(B - qs, 1, rng);
          if (this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(
            BigInteger.ONE
          ) == 0 && this.p.isProbablePrime(10))
            break;
        }
        for (; ; ) {
          this.q = new BigInteger(qs, 1, rng);
          if (this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(
            BigInteger.ONE
          ) == 0 && this.q.isProbablePrime(10))
            break;
        }
        if (this.p.compareTo(this.q) <= 0) {
          var t = this.p;
          this.p = this.q;
          this.q = t;
        }
        var p1 = this.p.subtract(BigInteger.ONE);
        var q1 = this.q.subtract(BigInteger.ONE);
        var phi = p1.multiply(q1);
        if (phi.gcd(ee).compareTo(BigInteger.ONE) == 0) {
          this.n = this.p.multiply(this.q);
          this.d = ee.modInverse(phi);
          this.dmp1 = this.d.mod(p1);
          this.dmq1 = this.d.mod(q1);
          this.coeff = this.q.modInverse(this.p);
          break;
        }
      }
    }
    __name(RSAGenerate, "RSAGenerate");
    function RSADoPrivate(x) {
      if (this.p == null || this.q == null)
        return x.modPow(this.d, this.n);
      var xp = x.mod(this.p).modPow(this.dmp1, this.p);
      var xq = x.mod(this.q).modPow(this.dmq1, this.q);
      while (xp.compareTo(xq) < 0)
        xp = xp.add(this.p);
      return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);
    }
    __name(RSADoPrivate, "RSADoPrivate");
    function RSADecrypt(ctext) {
      var c = parseBigInt(ctext, 16);
      var m = this.doPrivate(c);
      if (m == null)
        return null;
      return pkcs1unpad2(m, this.n.bitLength() + 7 >> 3);
    }
    __name(RSADecrypt, "RSADecrypt");
    function baToString(b) {
      var ret = "";
      for (var i = 0; i < b.length; i++) {
        var c = b[i] & 255;
        if (c < 128) {
          ret += String.fromCharCode(c);
        } else if (c > 191 && c < 224) {
          ret += String.fromCharCode((c & 31) << 6 | b[i + 1] & 63);
          ++i;
        } else {
          ret += String.fromCharCode((c & 15) << 12 | (b[i + 1] & 63) << 6 | b[i + 2] & 63);
          i += 2;
        }
      }
      return ret;
    }
    __name(baToString, "baToString");
    var _RSASIGN_DIHEAD = [];
    _RSASIGN_DIHEAD["sha1"] = "3021300906052b0e03021a05000414";
    _RSASIGN_DIHEAD["sha256"] = "3031300d060960864801650304020105000420";
    _RSASIGN_DIHEAD["sha384"] = "3041300d060960864801650304020205000430";
    _RSASIGN_DIHEAD["sha512"] = "3051300d060960864801650304020305000440";
    _RSASIGN_DIHEAD["md2"] = "3020300c06082a864886f70d020205000410";
    _RSASIGN_DIHEAD["md5"] = "3020300c06082a864886f70d020505000410";
    _RSASIGN_DIHEAD["ripemd160"] = "3021300906052b2403020105000414";
    var _RSASIGN_HASHHEXFUNC = [];
    _RSASIGN_HASHHEXFUNC["sha1"] = function(s) {
      var sha = crypto.createHash("sha1");
      sha.update(s);
      var out = sha.digest("hex");
      return out;
    };
    _RSASIGN_HASHHEXFUNC["sha256"] = function(s) {
      var sha = crypto.createHash("sha256");
      sha.update(s);
      var out = sha.digest("hex");
      return out;
    };
    _RSASIGN_HASHHEXFUNC["sha512"] = function(s) {
      var sha = crypto.createHash("sha512");
      sha.update(s);
      var out = sha.digest("hex");
      return out;
    };
    _RSASIGN_HASHHEXFUNC["md5"] = function(s) {
      var sha = crypto.createHash("md5");
      sha.update(s);
      var out = sha.digest("hex");
      return out;
    };
    _RSASIGN_HASHHEXFUNC["ripemd160"] = function(s) {
      return hex_rmd160(s);
    };
    var _RE_HEXDECONLY = new RegExp("");
    _RE_HEXDECONLY.compile("[^0-9a-f]", "gi");
    function _rsasign_getHexPaddedDigestInfoForString(s, keySize, hashAlg) {
      var pmStrLen = keySize / 4;
      var hashFunc = _RSASIGN_HASHHEXFUNC[hashAlg];
      var sHashHex = hashFunc(s);
      var sHead = "0001";
      var sTail = "00" + _RSASIGN_DIHEAD[hashAlg] + sHashHex;
      var sMid = "";
      var fLen = pmStrLen - sHead.length - sTail.length;
      for (var i = 0; i < fLen; i += 2) {
        sMid += "ff";
      }
      sPaddedMessageHex = sHead + sMid + sTail;
      return sPaddedMessageHex;
    }
    __name(_rsasign_getHexPaddedDigestInfoForString, "_rsasign_getHexPaddedDigestInfoForString");
    function _zeroPaddingOfSignature(hex, bitLength) {
      var s = "";
      var nZero = bitLength / 4 - hex.length;
      for (var i = 0; i < nZero; i++) {
        s = s + "0";
      }
      return s + hex;
    }
    __name(_zeroPaddingOfSignature, "_zeroPaddingOfSignature");
    function _rsasign_signString(s, hashAlg) {
      var hPM = _rsasign_getHexPaddedDigestInfoForString(s, this.n.bitLength(), hashAlg);
      var biPaddedMessage = parseBigInt(hPM, 16);
      var biSign = this.doPrivate(biPaddedMessage);
      var hexSign = biSign.toString(16);
      return _zeroPaddingOfSignature(hexSign, this.n.bitLength());
    }
    __name(_rsasign_signString, "_rsasign_signString");
    function _rsasign_signStringWithSHA1(s) {
      return _rsasign_signString(s, "sha1");
    }
    __name(_rsasign_signStringWithSHA1, "_rsasign_signStringWithSHA1");
    function _rsasign_signStringWithSHA256(s) {
      return _rsasign_signString(s, "sha256");
    }
    __name(_rsasign_signStringWithSHA256, "_rsasign_signStringWithSHA256");
    function _rsasign_getDecryptSignatureBI(biSig, hN, hE) {
      var rsa = new RSAKey();
      rsa.setPublic(hN, hE);
      var biDecryptedSig = rsa.doPublic(biSig);
      return biDecryptedSig;
    }
    __name(_rsasign_getDecryptSignatureBI, "_rsasign_getDecryptSignatureBI");
    function _rsasign_getHexDigestInfoFromSig(biSig, hN, hE) {
      var biDecryptedSig = _rsasign_getDecryptSignatureBI(biSig, hN, hE);
      var hDigestInfo = biDecryptedSig.toString(16).replace(/^1f+00/, "");
      return hDigestInfo;
    }
    __name(_rsasign_getHexDigestInfoFromSig, "_rsasign_getHexDigestInfoFromSig");
    function _rsasign_getAlgNameAndHashFromHexDisgestInfo(hDigestInfo) {
      for (var algName in _RSASIGN_DIHEAD) {
        var head = _RSASIGN_DIHEAD[algName];
        var len = head.length;
        if (hDigestInfo.substring(0, len) == head) {
          var a = [algName, hDigestInfo.substring(len)];
          return a;
        }
      }
      return [];
    }
    __name(_rsasign_getAlgNameAndHashFromHexDisgestInfo, "_rsasign_getAlgNameAndHashFromHexDisgestInfo");
    function _rsasign_verifySignatureWithArgs(sMsg, biSig, hN, hE) {
      var hDigestInfo = _rsasign_getHexDigestInfoFromSig(biSig, hN, hE);
      var digestInfoAry = _rsasign_getAlgNameAndHashFromHexDisgestInfo(hDigestInfo);
      if (digestInfoAry.length == 0)
        return false;
      var algName = digestInfoAry[0];
      var diHashValue = digestInfoAry[1];
      var ff = _RSASIGN_HASHHEXFUNC[algName];
      var msgHashValue = ff(sMsg);
      return diHashValue == msgHashValue;
    }
    __name(_rsasign_verifySignatureWithArgs, "_rsasign_verifySignatureWithArgs");
    function _rsasign_verifyHexSignatureForMessage(hSig, sMsg) {
      var biSig = parseBigInt(hSig, 16);
      var result = _rsasign_verifySignatureWithArgs(
        sMsg,
        biSig,
        this.n.toString(16),
        this.e.toString(16)
      );
      return result;
    }
    __name(_rsasign_verifyHexSignatureForMessage, "_rsasign_verifyHexSignatureForMessage");
    function _rsasign_verifyString(sMsg, hSig) {
      hSig = hSig.replace(_RE_HEXDECONLY, "");
      if (hSig.length != Math.ceil(this.n.bitLength() / 4)) {
        return 0;
      }
      hSig = hSig.replace(/[ \n]+/g, "");
      var biSig = parseBigInt(hSig, 16);
      var biDecryptedSig = this.doPublic(biSig);
      var hDigestInfo = biDecryptedSig.toString(16).replace(/^1f+00/, "");
      var digestInfoAry = _rsasign_getAlgNameAndHashFromHexDisgestInfo(hDigestInfo);
      if (digestInfoAry.length == 0)
        return false;
      var algName = digestInfoAry[0];
      var diHashValue = digestInfoAry[1];
      var ff = _RSASIGN_HASHHEXFUNC[algName];
      var msgHashValue = ff(sMsg);
      return diHashValue == msgHashValue;
    }
    __name(_rsasign_verifyString, "_rsasign_verifyString");
    RSAKey.prototype.doPrivate = RSADoPrivate;
    RSAKey.prototype.doPublic = RSADoPublic;
    RSAKey.prototype.setPrivate = RSASetPrivate;
    RSAKey.prototype.setPrivateEx = RSASetPrivateEx;
    RSAKey.prototype.generate = RSAGenerate;
    RSAKey.prototype.decrypt = RSADecrypt;
    RSAKey.prototype.setPublic = RSASetPublic;
    RSAKey.prototype.encrypt = RSAEncrypt;
    RSAKey.prototype.signString = _rsasign_signString;
    RSAKey.prototype.signStringWithSHA1 = _rsasign_signStringWithSHA1;
    RSAKey.prototype.signStringWithSHA256 = _rsasign_signStringWithSHA256;
    RSAKey.prototype.sign = _rsasign_signString;
    RSAKey.prototype.signWithSHA1 = _rsasign_signStringWithSHA1;
    RSAKey.prototype.signWithSHA256 = _rsasign_signStringWithSHA256;
    RSAKey.prototype.verifyString = _rsasign_verifyString;
    RSAKey.prototype.verifyHexSignatureForMessage = _rsasign_verifyHexSignatureForMessage;
    RSAKey.prototype.verify = _rsasign_verifyString;
    RSAKey.prototype.verifyHexSignatureForByteArrayMessage = _rsasign_verifyHexSignatureForMessage;
    exports.Key = RSAKey;
    exports.BigInteger = BigInteger;
    exports.linebrk = linebrk;
    exports.byte2Hex = byte2Hex;
    exports.hex2b64 = B64.hex2b64;
    exports.b64tohex = B64.b64tohex;
    exports.b64toBA = B64.b64toBA;
    exports.batoString = baToString;
  }
});

// node_modules/node-bignumber/lib/rsa/index.js
var require_rsa2 = __commonJS({
  "node_modules/node-bignumber/lib/rsa/index.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    module.exports = require_rsa();
  }
});

// node_modules/curve25519-js/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/curve25519-js/lib/index.js"(exports) {
    "use strict";
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    Object.defineProperty(exports, "__esModule", { value: true });
    var _0 = new Uint8Array(16);
    var _9 = new Uint8Array(32);
    _9[0] = 9;
    function gf(init) {
      var i, r = new Float64Array(16);
      if (init)
        for (i = 0; i < init.length; i++)
          r[i] = init[i];
      return r;
    }
    __name(gf, "gf");
    var gf0 = gf();
    var gf1 = gf([1]);
    var _121665 = gf([56129, 1]);
    var D = gf([
      30883,
      4953,
      19914,
      30187,
      55467,
      16705,
      2637,
      112,
      59544,
      30585,
      16505,
      36039,
      65139,
      11119,
      27886,
      20995
    ]);
    var D2 = gf([
      61785,
      9906,
      39828,
      60374,
      45398,
      33411,
      5274,
      224,
      53552,
      61171,
      33010,
      6542,
      64743,
      22239,
      55772,
      9222
    ]);
    var X = gf([
      54554,
      36645,
      11616,
      51542,
      42930,
      38181,
      51040,
      26924,
      56412,
      64982,
      57905,
      49316,
      21502,
      52590,
      14035,
      8553
    ]);
    var Y = gf([
      26200,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214
    ]);
    var I = gf([
      41136,
      18958,
      6951,
      50414,
      58488,
      44335,
      6150,
      12099,
      55207,
      15867,
      153,
      11085,
      57099,
      20417,
      9344,
      11139
    ]);
    function ts64(x, i, h, l) {
      x[i] = h >> 24 & 255;
      x[i + 1] = h >> 16 & 255;
      x[i + 2] = h >> 8 & 255;
      x[i + 3] = h & 255;
      x[i + 4] = l >> 24 & 255;
      x[i + 5] = l >> 16 & 255;
      x[i + 6] = l >> 8 & 255;
      x[i + 7] = l & 255;
    }
    __name(ts64, "ts64");
    function vn(x, xi, y, yi, n) {
      var i, d = 0;
      for (i = 0; i < n; i++)
        d |= x[xi + i] ^ y[yi + i];
      return (1 & d - 1 >>> 8) - 1;
    }
    __name(vn, "vn");
    function crypto_verify_32(x, xi, y, yi) {
      return vn(x, xi, y, yi, 32);
    }
    __name(crypto_verify_32, "crypto_verify_32");
    function set25519(r, a) {
      var i;
      for (i = 0; i < 16; i++)
        r[i] = a[i] | 0;
    }
    __name(set25519, "set25519");
    function car25519(o) {
      var i, v2, c = 1;
      for (i = 0; i < 16; i++) {
        v2 = o[i] + c + 65535;
        c = Math.floor(v2 / 65536);
        o[i] = v2 - c * 65536;
      }
      o[0] += c - 1 + 37 * (c - 1);
    }
    __name(car25519, "car25519");
    function sel25519(p, q, b) {
      var t, c = ~(b - 1);
      for (var i = 0; i < 16; i++) {
        t = c & (p[i] ^ q[i]);
        p[i] ^= t;
        q[i] ^= t;
      }
    }
    __name(sel25519, "sel25519");
    function pack25519(o, n) {
      var i, j, b;
      var m = gf(), t = gf();
      for (i = 0; i < 16; i++)
        t[i] = n[i];
      car25519(t);
      car25519(t);
      car25519(t);
      for (j = 0; j < 2; j++) {
        m[0] = t[0] - 65517;
        for (i = 1; i < 15; i++) {
          m[i] = t[i] - 65535 - (m[i - 1] >> 16 & 1);
          m[i - 1] &= 65535;
        }
        m[15] = t[15] - 32767 - (m[14] >> 16 & 1);
        b = m[15] >> 16 & 1;
        m[14] &= 65535;
        sel25519(t, m, 1 - b);
      }
      for (i = 0; i < 16; i++) {
        o[2 * i] = t[i] & 255;
        o[2 * i + 1] = t[i] >> 8;
      }
    }
    __name(pack25519, "pack25519");
    function neq25519(a, b) {
      var c = new Uint8Array(32), d = new Uint8Array(32);
      pack25519(c, a);
      pack25519(d, b);
      return crypto_verify_32(c, 0, d, 0);
    }
    __name(neq25519, "neq25519");
    function par25519(a) {
      var d = new Uint8Array(32);
      pack25519(d, a);
      return d[0] & 1;
    }
    __name(par25519, "par25519");
    function unpack25519(o, n) {
      var i;
      for (i = 0; i < 16; i++)
        o[i] = n[2 * i] + (n[2 * i + 1] << 8);
      o[15] &= 32767;
    }
    __name(unpack25519, "unpack25519");
    function A(o, a, b) {
      for (var i = 0; i < 16; i++)
        o[i] = a[i] + b[i];
    }
    __name(A, "A");
    function Z(o, a, b) {
      for (var i = 0; i < 16; i++)
        o[i] = a[i] - b[i];
    }
    __name(Z, "Z");
    function M(o, a, b) {
      var v2, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
      v2 = a[0];
      t0 += v2 * b0;
      t1 += v2 * b1;
      t2 += v2 * b2;
      t3 += v2 * b3;
      t4 += v2 * b4;
      t5 += v2 * b5;
      t6 += v2 * b6;
      t7 += v2 * b7;
      t8 += v2 * b8;
      t9 += v2 * b9;
      t10 += v2 * b10;
      t11 += v2 * b11;
      t12 += v2 * b12;
      t13 += v2 * b13;
      t14 += v2 * b14;
      t15 += v2 * b15;
      v2 = a[1];
      t1 += v2 * b0;
      t2 += v2 * b1;
      t3 += v2 * b2;
      t4 += v2 * b3;
      t5 += v2 * b4;
      t6 += v2 * b5;
      t7 += v2 * b6;
      t8 += v2 * b7;
      t9 += v2 * b8;
      t10 += v2 * b9;
      t11 += v2 * b10;
      t12 += v2 * b11;
      t13 += v2 * b12;
      t14 += v2 * b13;
      t15 += v2 * b14;
      t16 += v2 * b15;
      v2 = a[2];
      t2 += v2 * b0;
      t3 += v2 * b1;
      t4 += v2 * b2;
      t5 += v2 * b3;
      t6 += v2 * b4;
      t7 += v2 * b5;
      t8 += v2 * b6;
      t9 += v2 * b7;
      t10 += v2 * b8;
      t11 += v2 * b9;
      t12 += v2 * b10;
      t13 += v2 * b11;
      t14 += v2 * b12;
      t15 += v2 * b13;
      t16 += v2 * b14;
      t17 += v2 * b15;
      v2 = a[3];
      t3 += v2 * b0;
      t4 += v2 * b1;
      t5 += v2 * b2;
      t6 += v2 * b3;
      t7 += v2 * b4;
      t8 += v2 * b5;
      t9 += v2 * b6;
      t10 += v2 * b7;
      t11 += v2 * b8;
      t12 += v2 * b9;
      t13 += v2 * b10;
      t14 += v2 * b11;
      t15 += v2 * b12;
      t16 += v2 * b13;
      t17 += v2 * b14;
      t18 += v2 * b15;
      v2 = a[4];
      t4 += v2 * b0;
      t5 += v2 * b1;
      t6 += v2 * b2;
      t7 += v2 * b3;
      t8 += v2 * b4;
      t9 += v2 * b5;
      t10 += v2 * b6;
      t11 += v2 * b7;
      t12 += v2 * b8;
      t13 += v2 * b9;
      t14 += v2 * b10;
      t15 += v2 * b11;
      t16 += v2 * b12;
      t17 += v2 * b13;
      t18 += v2 * b14;
      t19 += v2 * b15;
      v2 = a[5];
      t5 += v2 * b0;
      t6 += v2 * b1;
      t7 += v2 * b2;
      t8 += v2 * b3;
      t9 += v2 * b4;
      t10 += v2 * b5;
      t11 += v2 * b6;
      t12 += v2 * b7;
      t13 += v2 * b8;
      t14 += v2 * b9;
      t15 += v2 * b10;
      t16 += v2 * b11;
      t17 += v2 * b12;
      t18 += v2 * b13;
      t19 += v2 * b14;
      t20 += v2 * b15;
      v2 = a[6];
      t6 += v2 * b0;
      t7 += v2 * b1;
      t8 += v2 * b2;
      t9 += v2 * b3;
      t10 += v2 * b4;
      t11 += v2 * b5;
      t12 += v2 * b6;
      t13 += v2 * b7;
      t14 += v2 * b8;
      t15 += v2 * b9;
      t16 += v2 * b10;
      t17 += v2 * b11;
      t18 += v2 * b12;
      t19 += v2 * b13;
      t20 += v2 * b14;
      t21 += v2 * b15;
      v2 = a[7];
      t7 += v2 * b0;
      t8 += v2 * b1;
      t9 += v2 * b2;
      t10 += v2 * b3;
      t11 += v2 * b4;
      t12 += v2 * b5;
      t13 += v2 * b6;
      t14 += v2 * b7;
      t15 += v2 * b8;
      t16 += v2 * b9;
      t17 += v2 * b10;
      t18 += v2 * b11;
      t19 += v2 * b12;
      t20 += v2 * b13;
      t21 += v2 * b14;
      t22 += v2 * b15;
      v2 = a[8];
      t8 += v2 * b0;
      t9 += v2 * b1;
      t10 += v2 * b2;
      t11 += v2 * b3;
      t12 += v2 * b4;
      t13 += v2 * b5;
      t14 += v2 * b6;
      t15 += v2 * b7;
      t16 += v2 * b8;
      t17 += v2 * b9;
      t18 += v2 * b10;
      t19 += v2 * b11;
      t20 += v2 * b12;
      t21 += v2 * b13;
      t22 += v2 * b14;
      t23 += v2 * b15;
      v2 = a[9];
      t9 += v2 * b0;
      t10 += v2 * b1;
      t11 += v2 * b2;
      t12 += v2 * b3;
      t13 += v2 * b4;
      t14 += v2 * b5;
      t15 += v2 * b6;
      t16 += v2 * b7;
      t17 += v2 * b8;
      t18 += v2 * b9;
      t19 += v2 * b10;
      t20 += v2 * b11;
      t21 += v2 * b12;
      t22 += v2 * b13;
      t23 += v2 * b14;
      t24 += v2 * b15;
      v2 = a[10];
      t10 += v2 * b0;
      t11 += v2 * b1;
      t12 += v2 * b2;
      t13 += v2 * b3;
      t14 += v2 * b4;
      t15 += v2 * b5;
      t16 += v2 * b6;
      t17 += v2 * b7;
      t18 += v2 * b8;
      t19 += v2 * b9;
      t20 += v2 * b10;
      t21 += v2 * b11;
      t22 += v2 * b12;
      t23 += v2 * b13;
      t24 += v2 * b14;
      t25 += v2 * b15;
      v2 = a[11];
      t11 += v2 * b0;
      t12 += v2 * b1;
      t13 += v2 * b2;
      t14 += v2 * b3;
      t15 += v2 * b4;
      t16 += v2 * b5;
      t17 += v2 * b6;
      t18 += v2 * b7;
      t19 += v2 * b8;
      t20 += v2 * b9;
      t21 += v2 * b10;
      t22 += v2 * b11;
      t23 += v2 * b12;
      t24 += v2 * b13;
      t25 += v2 * b14;
      t26 += v2 * b15;
      v2 = a[12];
      t12 += v2 * b0;
      t13 += v2 * b1;
      t14 += v2 * b2;
      t15 += v2 * b3;
      t16 += v2 * b4;
      t17 += v2 * b5;
      t18 += v2 * b6;
      t19 += v2 * b7;
      t20 += v2 * b8;
      t21 += v2 * b9;
      t22 += v2 * b10;
      t23 += v2 * b11;
      t24 += v2 * b12;
      t25 += v2 * b13;
      t26 += v2 * b14;
      t27 += v2 * b15;
      v2 = a[13];
      t13 += v2 * b0;
      t14 += v2 * b1;
      t15 += v2 * b2;
      t16 += v2 * b3;
      t17 += v2 * b4;
      t18 += v2 * b5;
      t19 += v2 * b6;
      t20 += v2 * b7;
      t21 += v2 * b8;
      t22 += v2 * b9;
      t23 += v2 * b10;
      t24 += v2 * b11;
      t25 += v2 * b12;
      t26 += v2 * b13;
      t27 += v2 * b14;
      t28 += v2 * b15;
      v2 = a[14];
      t14 += v2 * b0;
      t15 += v2 * b1;
      t16 += v2 * b2;
      t17 += v2 * b3;
      t18 += v2 * b4;
      t19 += v2 * b5;
      t20 += v2 * b6;
      t21 += v2 * b7;
      t22 += v2 * b8;
      t23 += v2 * b9;
      t24 += v2 * b10;
      t25 += v2 * b11;
      t26 += v2 * b12;
      t27 += v2 * b13;
      t28 += v2 * b14;
      t29 += v2 * b15;
      v2 = a[15];
      t15 += v2 * b0;
      t16 += v2 * b1;
      t17 += v2 * b2;
      t18 += v2 * b3;
      t19 += v2 * b4;
      t20 += v2 * b5;
      t21 += v2 * b6;
      t22 += v2 * b7;
      t23 += v2 * b8;
      t24 += v2 * b9;
      t25 += v2 * b10;
      t26 += v2 * b11;
      t27 += v2 * b12;
      t28 += v2 * b13;
      t29 += v2 * b14;
      t30 += v2 * b15;
      t0 += 38 * t16;
      t1 += 38 * t17;
      t2 += 38 * t18;
      t3 += 38 * t19;
      t4 += 38 * t20;
      t5 += 38 * t21;
      t6 += 38 * t22;
      t7 += 38 * t23;
      t8 += 38 * t24;
      t9 += 38 * t25;
      t10 += 38 * t26;
      t11 += 38 * t27;
      t12 += 38 * t28;
      t13 += 38 * t29;
      t14 += 38 * t30;
      c = 1;
      v2 = t0 + c + 65535;
      c = Math.floor(v2 / 65536);
      t0 = v2 - c * 65536;
      v2 = t1 + c + 65535;
      c = Math.floor(v2 / 65536);
      t1 = v2 - c * 65536;
      v2 = t2 + c + 65535;
      c = Math.floor(v2 / 65536);
      t2 = v2 - c * 65536;
      v2 = t3 + c + 65535;
      c = Math.floor(v2 / 65536);
      t3 = v2 - c * 65536;
      v2 = t4 + c + 65535;
      c = Math.floor(v2 / 65536);
      t4 = v2 - c * 65536;
      v2 = t5 + c + 65535;
      c = Math.floor(v2 / 65536);
      t5 = v2 - c * 65536;
      v2 = t6 + c + 65535;
      c = Math.floor(v2 / 65536);
      t6 = v2 - c * 65536;
      v2 = t7 + c + 65535;
      c = Math.floor(v2 / 65536);
      t7 = v2 - c * 65536;
      v2 = t8 + c + 65535;
      c = Math.floor(v2 / 65536);
      t8 = v2 - c * 65536;
      v2 = t9 + c + 65535;
      c = Math.floor(v2 / 65536);
      t9 = v2 - c * 65536;
      v2 = t10 + c + 65535;
      c = Math.floor(v2 / 65536);
      t10 = v2 - c * 65536;
      v2 = t11 + c + 65535;
      c = Math.floor(v2 / 65536);
      t11 = v2 - c * 65536;
      v2 = t12 + c + 65535;
      c = Math.floor(v2 / 65536);
      t12 = v2 - c * 65536;
      v2 = t13 + c + 65535;
      c = Math.floor(v2 / 65536);
      t13 = v2 - c * 65536;
      v2 = t14 + c + 65535;
      c = Math.floor(v2 / 65536);
      t14 = v2 - c * 65536;
      v2 = t15 + c + 65535;
      c = Math.floor(v2 / 65536);
      t15 = v2 - c * 65536;
      t0 += c - 1 + 37 * (c - 1);
      c = 1;
      v2 = t0 + c + 65535;
      c = Math.floor(v2 / 65536);
      t0 = v2 - c * 65536;
      v2 = t1 + c + 65535;
      c = Math.floor(v2 / 65536);
      t1 = v2 - c * 65536;
      v2 = t2 + c + 65535;
      c = Math.floor(v2 / 65536);
      t2 = v2 - c * 65536;
      v2 = t3 + c + 65535;
      c = Math.floor(v2 / 65536);
      t3 = v2 - c * 65536;
      v2 = t4 + c + 65535;
      c = Math.floor(v2 / 65536);
      t4 = v2 - c * 65536;
      v2 = t5 + c + 65535;
      c = Math.floor(v2 / 65536);
      t5 = v2 - c * 65536;
      v2 = t6 + c + 65535;
      c = Math.floor(v2 / 65536);
      t6 = v2 - c * 65536;
      v2 = t7 + c + 65535;
      c = Math.floor(v2 / 65536);
      t7 = v2 - c * 65536;
      v2 = t8 + c + 65535;
      c = Math.floor(v2 / 65536);
      t8 = v2 - c * 65536;
      v2 = t9 + c + 65535;
      c = Math.floor(v2 / 65536);
      t9 = v2 - c * 65536;
      v2 = t10 + c + 65535;
      c = Math.floor(v2 / 65536);
      t10 = v2 - c * 65536;
      v2 = t11 + c + 65535;
      c = Math.floor(v2 / 65536);
      t11 = v2 - c * 65536;
      v2 = t12 + c + 65535;
      c = Math.floor(v2 / 65536);
      t12 = v2 - c * 65536;
      v2 = t13 + c + 65535;
      c = Math.floor(v2 / 65536);
      t13 = v2 - c * 65536;
      v2 = t14 + c + 65535;
      c = Math.floor(v2 / 65536);
      t14 = v2 - c * 65536;
      v2 = t15 + c + 65535;
      c = Math.floor(v2 / 65536);
      t15 = v2 - c * 65536;
      t0 += c - 1 + 37 * (c - 1);
      o[0] = t0;
      o[1] = t1;
      o[2] = t2;
      o[3] = t3;
      o[4] = t4;
      o[5] = t5;
      o[6] = t6;
      o[7] = t7;
      o[8] = t8;
      o[9] = t9;
      o[10] = t10;
      o[11] = t11;
      o[12] = t12;
      o[13] = t13;
      o[14] = t14;
      o[15] = t15;
    }
    __name(M, "M");
    function S(o, a) {
      M(o, a, a);
    }
    __name(S, "S");
    function inv25519(o, i) {
      var c = gf();
      var a;
      for (a = 0; a < 16; a++)
        c[a] = i[a];
      for (a = 253; a >= 0; a--) {
        S(c, c);
        if (a !== 2 && a !== 4)
          M(c, c, i);
      }
      for (a = 0; a < 16; a++)
        o[a] = c[a];
    }
    __name(inv25519, "inv25519");
    function pow2523(o, i) {
      var c = gf();
      var a;
      for (a = 0; a < 16; a++)
        c[a] = i[a];
      for (a = 250; a >= 0; a--) {
        S(c, c);
        if (a !== 1)
          M(c, c, i);
      }
      for (a = 0; a < 16; a++)
        o[a] = c[a];
    }
    __name(pow2523, "pow2523");
    function crypto_scalarmult(q, n, p) {
      var z = new Uint8Array(32);
      var x = new Float64Array(80), r, i;
      var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf();
      for (i = 0; i < 31; i++)
        z[i] = n[i];
      z[31] = n[31] & 127 | 64;
      z[0] &= 248;
      unpack25519(x, p);
      for (i = 0; i < 16; i++) {
        b[i] = x[i];
        d[i] = a[i] = c[i] = 0;
      }
      a[0] = d[0] = 1;
      for (i = 254; i >= 0; --i) {
        r = z[i >>> 3] >>> (i & 7) & 1;
        sel25519(a, b, r);
        sel25519(c, d, r);
        A(e, a, c);
        Z(a, a, c);
        A(c, b, d);
        Z(b, b, d);
        S(d, e);
        S(f, a);
        M(a, c, a);
        M(c, b, e);
        A(e, a, c);
        Z(a, a, c);
        S(b, a);
        Z(c, d, f);
        M(a, c, _121665);
        A(a, a, d);
        M(c, c, a);
        M(a, d, f);
        M(d, b, x);
        S(b, e);
        sel25519(a, b, r);
        sel25519(c, d, r);
      }
      for (i = 0; i < 16; i++) {
        x[i + 16] = a[i];
        x[i + 32] = c[i];
        x[i + 48] = b[i];
        x[i + 64] = d[i];
      }
      var x32 = x.subarray(32);
      var x16 = x.subarray(16);
      inv25519(x32, x32);
      M(x16, x16, x32);
      pack25519(q, x16);
      return 0;
    }
    __name(crypto_scalarmult, "crypto_scalarmult");
    function crypto_scalarmult_base(q, n) {
      return crypto_scalarmult(q, n, _9);
    }
    __name(crypto_scalarmult_base, "crypto_scalarmult_base");
    var K = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    function crypto_hashblocks_hl(hh, hl, m, n) {
      var wh = new Int32Array(16), wl = new Int32Array(16), bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7, bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7, th, tl, i, j, h, l, a, b, c, d;
      var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];
      var pos = 0;
      while (n >= 128) {
        for (i = 0; i < 16; i++) {
          j = 8 * i + pos;
          wh[i] = m[j + 0] << 24 | m[j + 1] << 16 | m[j + 2] << 8 | m[j + 3];
          wl[i] = m[j + 4] << 24 | m[j + 5] << 16 | m[j + 6] << 8 | m[j + 7];
        }
        for (i = 0; i < 80; i++) {
          bh0 = ah0;
          bh1 = ah1;
          bh2 = ah2;
          bh3 = ah3;
          bh4 = ah4;
          bh5 = ah5;
          bh6 = ah6;
          bh7 = ah7;
          bl0 = al0;
          bl1 = al1;
          bl2 = al2;
          bl3 = al3;
          bl4 = al4;
          bl5 = al5;
          bl6 = al6;
          bl7 = al7;
          h = ah7;
          l = al7;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));
          l = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          h = ah4 & ah5 ^ ~ah4 & ah6;
          l = al4 & al5 ^ ~al4 & al6;
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          h = K[i * 2];
          l = K[i * 2 + 1];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          h = wh[i % 16];
          l = wl[i % 16];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          th = c & 65535 | d << 16;
          tl = a & 65535 | b << 16;
          h = th;
          l = tl;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));
          l = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
          l = al0 & al1 ^ al0 & al2 ^ al1 & al2;
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          bh7 = c & 65535 | d << 16;
          bl7 = a & 65535 | b << 16;
          h = bh3;
          l = bl3;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = th;
          l = tl;
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          bh3 = c & 65535 | d << 16;
          bl3 = a & 65535 | b << 16;
          ah1 = bh0;
          ah2 = bh1;
          ah3 = bh2;
          ah4 = bh3;
          ah5 = bh4;
          ah6 = bh5;
          ah7 = bh6;
          ah0 = bh7;
          al1 = bl0;
          al2 = bl1;
          al3 = bl2;
          al4 = bl3;
          al5 = bl4;
          al6 = bl5;
          al7 = bl6;
          al0 = bl7;
          if (i % 16 === 15) {
            for (j = 0; j < 16; j++) {
              h = wh[j];
              l = wl[j];
              a = l & 65535;
              b = l >>> 16;
              c = h & 65535;
              d = h >>> 16;
              h = wh[(j + 9) % 16];
              l = wl[(j + 9) % 16];
              a += l & 65535;
              b += l >>> 16;
              c += h & 65535;
              d += h >>> 16;
              th = wh[(j + 1) % 16];
              tl = wl[(j + 1) % 16];
              h = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;
              l = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);
              a += l & 65535;
              b += l >>> 16;
              c += h & 65535;
              d += h >>> 16;
              th = wh[(j + 14) % 16];
              tl = wl[(j + 14) % 16];
              h = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;
              l = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);
              a += l & 65535;
              b += l >>> 16;
              c += h & 65535;
              d += h >>> 16;
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
              wh[j] = c & 65535 | d << 16;
              wl[j] = a & 65535 | b << 16;
            }
          }
        }
        h = ah0;
        l = al0;
        a = l & 65535;
        b = l >>> 16;
        c = h & 65535;
        d = h >>> 16;
        h = hh[0];
        l = hl[0];
        a += l & 65535;
        b += l >>> 16;
        c += h & 65535;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[0] = ah0 = c & 65535 | d << 16;
        hl[0] = al0 = a & 65535 | b << 16;
        h = ah1;
        l = al1;
        a = l & 65535;
        b = l >>> 16;
        c = h & 65535;
        d = h >>> 16;
        h = hh[1];
        l = hl[1];
        a += l & 65535;
        b += l >>> 16;
        c += h & 65535;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[1] = ah1 = c & 65535 | d << 16;
        hl[1] = al1 = a & 65535 | b << 16;
        h = ah2;
        l = al2;
        a = l & 65535;
        b = l >>> 16;
        c = h & 65535;
        d = h >>> 16;
        h = hh[2];
        l = hl[2];
        a += l & 65535;
        b += l >>> 16;
        c += h & 65535;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[2] = ah2 = c & 65535 | d << 16;
        hl[2] = al2 = a & 65535 | b << 16;
        h = ah3;
        l = al3;
        a = l & 65535;
        b = l >>> 16;
        c = h & 65535;
        d = h >>> 16;
        h = hh[3];
        l = hl[3];
        a += l & 65535;
        b += l >>> 16;
        c += h & 65535;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[3] = ah3 = c & 65535 | d << 16;
        hl[3] = al3 = a & 65535 | b << 16;
        h = ah4;
        l = al4;
        a = l & 65535;
        b = l >>> 16;
        c = h & 65535;
        d = h >>> 16;
        h = hh[4];
        l = hl[4];
        a += l & 65535;
        b += l >>> 16;
        c += h & 65535;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[4] = ah4 = c & 65535 | d << 16;
        hl[4] = al4 = a & 65535 | b << 16;
        h = ah5;
        l = al5;
        a = l & 65535;
        b = l >>> 16;
        c = h & 65535;
        d = h >>> 16;
        h = hh[5];
        l = hl[5];
        a += l & 65535;
        b += l >>> 16;
        c += h & 65535;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[5] = ah5 = c & 65535 | d << 16;
        hl[5] = al5 = a & 65535 | b << 16;
        h = ah6;
        l = al6;
        a = l & 65535;
        b = l >>> 16;
        c = h & 65535;
        d = h >>> 16;
        h = hh[6];
        l = hl[6];
        a += l & 65535;
        b += l >>> 16;
        c += h & 65535;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[6] = ah6 = c & 65535 | d << 16;
        hl[6] = al6 = a & 65535 | b << 16;
        h = ah7;
        l = al7;
        a = l & 65535;
        b = l >>> 16;
        c = h & 65535;
        d = h >>> 16;
        h = hh[7];
        l = hl[7];
        a += l & 65535;
        b += l >>> 16;
        c += h & 65535;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[7] = ah7 = c & 65535 | d << 16;
        hl[7] = al7 = a & 65535 | b << 16;
        pos += 128;
        n -= 128;
      }
      return n;
    }
    __name(crypto_hashblocks_hl, "crypto_hashblocks_hl");
    function crypto_hash(out, m, n) {
      var hh = new Int32Array(8), hl = new Int32Array(8), x = new Uint8Array(256), i, b = n;
      hh[0] = 1779033703;
      hh[1] = 3144134277;
      hh[2] = 1013904242;
      hh[3] = 2773480762;
      hh[4] = 1359893119;
      hh[5] = 2600822924;
      hh[6] = 528734635;
      hh[7] = 1541459225;
      hl[0] = 4089235720;
      hl[1] = 2227873595;
      hl[2] = 4271175723;
      hl[3] = 1595750129;
      hl[4] = 2917565137;
      hl[5] = 725511199;
      hl[6] = 4215389547;
      hl[7] = 327033209;
      crypto_hashblocks_hl(hh, hl, m, n);
      n %= 128;
      for (i = 0; i < n; i++)
        x[i] = m[b - n + i];
      x[n] = 128;
      n = 256 - 128 * (n < 112 ? 1 : 0);
      x[n - 9] = 0;
      ts64(x, n - 8, b / 536870912 | 0, b << 3);
      crypto_hashblocks_hl(hh, hl, x, n);
      for (i = 0; i < 8; i++)
        ts64(out, 8 * i, hh[i], hl[i]);
      return 0;
    }
    __name(crypto_hash, "crypto_hash");
    function add(p, q) {
      var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();
      Z(a, p[1], p[0]);
      Z(t, q[1], q[0]);
      M(a, a, t);
      A(b, p[0], p[1]);
      A(t, q[0], q[1]);
      M(b, b, t);
      M(c, p[3], q[3]);
      M(c, c, D2);
      M(d, p[2], q[2]);
      A(d, d, d);
      Z(e, b, a);
      Z(f, d, c);
      A(g, d, c);
      A(h, b, a);
      M(p[0], e, f);
      M(p[1], h, g);
      M(p[2], g, f);
      M(p[3], e, h);
    }
    __name(add, "add");
    function cswap(p, q, b) {
      var i;
      for (i = 0; i < 4; i++) {
        sel25519(p[i], q[i], b);
      }
    }
    __name(cswap, "cswap");
    function pack(r, p) {
      var tx = gf(), ty = gf(), zi = gf();
      inv25519(zi, p[2]);
      M(tx, p[0], zi);
      M(ty, p[1], zi);
      pack25519(r, ty);
      r[31] ^= par25519(tx) << 7;
    }
    __name(pack, "pack");
    function scalarmult(p, q, s) {
      var b, i;
      set25519(p[0], gf0);
      set25519(p[1], gf1);
      set25519(p[2], gf1);
      set25519(p[3], gf0);
      for (i = 255; i >= 0; --i) {
        b = s[i / 8 | 0] >> (i & 7) & 1;
        cswap(p, q, b);
        add(q, p);
        add(p, p);
        cswap(p, q, b);
      }
    }
    __name(scalarmult, "scalarmult");
    function scalarbase(p, s) {
      var q = [gf(), gf(), gf(), gf()];
      set25519(q[0], X);
      set25519(q[1], Y);
      set25519(q[2], gf1);
      M(q[3], X, Y);
      scalarmult(p, q, s);
    }
    __name(scalarbase, "scalarbase");
    var L = new Float64Array([
      237,
      211,
      245,
      92,
      26,
      99,
      18,
      88,
      214,
      156,
      247,
      162,
      222,
      249,
      222,
      20,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      16
    ]);
    function modL(r, x) {
      var carry, i, j, k;
      for (i = 63; i >= 32; --i) {
        carry = 0;
        for (j = i - 32, k = i - 12; j < k; ++j) {
          x[j] += carry - 16 * x[i] * L[j - (i - 32)];
          carry = x[j] + 128 >> 8;
          x[j] -= carry * 256;
        }
        x[j] += carry;
        x[i] = 0;
      }
      carry = 0;
      for (j = 0; j < 32; j++) {
        x[j] += carry - (x[31] >> 4) * L[j];
        carry = x[j] >> 8;
        x[j] &= 255;
      }
      for (j = 0; j < 32; j++)
        x[j] -= carry * L[j];
      for (i = 0; i < 32; i++) {
        x[i + 1] += x[i] >> 8;
        r[i] = x[i] & 255;
      }
    }
    __name(modL, "modL");
    function reduce(r) {
      var x = new Float64Array(64), i;
      for (i = 0; i < 64; i++)
        x[i] = r[i];
      for (i = 0; i < 64; i++)
        r[i] = 0;
      modL(r, x);
    }
    __name(reduce, "reduce");
    function crypto_sign_direct(sm, m, n, sk) {
      var h = new Uint8Array(64), r = new Uint8Array(64);
      var i, j, x = new Float64Array(64);
      var p = [gf(), gf(), gf(), gf()];
      for (i = 0; i < n; i++)
        sm[64 + i] = m[i];
      for (i = 0; i < 32; i++)
        sm[32 + i] = sk[i];
      crypto_hash(r, sm.subarray(32), n + 32);
      reduce(r);
      scalarbase(p, r);
      pack(sm, p);
      for (i = 0; i < 32; i++)
        sm[i + 32] = sk[32 + i];
      crypto_hash(h, sm, n + 64);
      reduce(h);
      for (i = 0; i < 64; i++)
        x[i] = 0;
      for (i = 0; i < 32; i++)
        x[i] = r[i];
      for (i = 0; i < 32; i++) {
        for (j = 0; j < 32; j++) {
          x[i + j] += h[i] * sk[j];
        }
      }
      modL(sm.subarray(32), x);
      return n + 64;
    }
    __name(crypto_sign_direct, "crypto_sign_direct");
    function crypto_sign_direct_rnd(sm, m, n, sk, rnd) {
      var h = new Uint8Array(64), r = new Uint8Array(64);
      var i, j, x = new Float64Array(64);
      var p = [gf(), gf(), gf(), gf()];
      sm[0] = 254;
      for (i = 1; i < 32; i++)
        sm[i] = 255;
      for (i = 0; i < 32; i++)
        sm[32 + i] = sk[i];
      for (i = 0; i < n; i++)
        sm[64 + i] = m[i];
      for (i = 0; i < 64; i++)
        sm[n + 64 + i] = rnd[i];
      crypto_hash(r, sm, n + 128);
      reduce(r);
      scalarbase(p, r);
      pack(sm, p);
      for (i = 0; i < 32; i++)
        sm[i + 32] = sk[32 + i];
      crypto_hash(h, sm, n + 64);
      reduce(h);
      for (i = 0; i < 64; i++)
        sm[n + 64 + i] = 0;
      for (i = 0; i < 64; i++)
        x[i] = 0;
      for (i = 0; i < 32; i++)
        x[i] = r[i];
      for (i = 0; i < 32; i++) {
        for (j = 0; j < 32; j++) {
          x[i + j] += h[i] * sk[j];
        }
      }
      modL(sm.subarray(32, n + 64), x);
      return n + 64;
    }
    __name(crypto_sign_direct_rnd, "crypto_sign_direct_rnd");
    function curve25519_sign(sm, m, n, sk, opt_rnd) {
      var edsk = new Uint8Array(64);
      var p = [gf(), gf(), gf(), gf()];
      for (var i = 0; i < 32; i++)
        edsk[i] = sk[i];
      edsk[0] &= 248;
      edsk[31] &= 127;
      edsk[31] |= 64;
      scalarbase(p, edsk);
      pack(edsk.subarray(32), p);
      var signBit = edsk[63] & 128;
      var smlen;
      if (opt_rnd) {
        smlen = crypto_sign_direct_rnd(sm, m, n, edsk, opt_rnd);
      } else {
        smlen = crypto_sign_direct(sm, m, n, edsk);
      }
      sm[63] |= signBit;
      return smlen;
    }
    __name(curve25519_sign, "curve25519_sign");
    function unpackneg(r, p) {
      var t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();
      set25519(r[2], gf1);
      unpack25519(r[1], p);
      S(num, r[1]);
      M(den, num, D);
      Z(num, num, r[2]);
      A(den, r[2], den);
      S(den2, den);
      S(den4, den2);
      M(den6, den4, den2);
      M(t, den6, num);
      M(t, t, den);
      pow2523(t, t);
      M(t, t, num);
      M(t, t, den);
      M(t, t, den);
      M(r[0], t, den);
      S(chk, r[0]);
      M(chk, chk, den);
      if (neq25519(chk, num))
        M(r[0], r[0], I);
      S(chk, r[0]);
      M(chk, chk, den);
      if (neq25519(chk, num))
        return -1;
      if (par25519(r[0]) === p[31] >> 7)
        Z(r[0], gf0, r[0]);
      M(r[3], r[0], r[1]);
      return 0;
    }
    __name(unpackneg, "unpackneg");
    function crypto_sign_open(m, sm, n, pk) {
      var i, mlen;
      var t = new Uint8Array(32), h = new Uint8Array(64);
      var p = [gf(), gf(), gf(), gf()], q = [gf(), gf(), gf(), gf()];
      mlen = -1;
      if (n < 64)
        return -1;
      if (unpackneg(q, pk))
        return -1;
      for (i = 0; i < n; i++)
        m[i] = sm[i];
      for (i = 0; i < 32; i++)
        m[i + 32] = pk[i];
      crypto_hash(h, m, n);
      reduce(h);
      scalarmult(p, q, h);
      scalarbase(q, sm.subarray(32));
      add(p, q);
      pack(t, p);
      n -= 64;
      if (crypto_verify_32(sm, 0, t, 0)) {
        for (i = 0; i < n; i++)
          m[i] = 0;
        return -1;
      }
      for (i = 0; i < n; i++)
        m[i] = sm[i + 64];
      mlen = n;
      return mlen;
    }
    __name(crypto_sign_open, "crypto_sign_open");
    function convertPublicKey(pk) {
      var z = new Uint8Array(32), x = gf(), a = gf(), b = gf();
      unpack25519(x, pk);
      A(a, x, gf1);
      Z(b, x, gf1);
      inv25519(a, a);
      M(a, a, b);
      pack25519(z, a);
      return z;
    }
    __name(convertPublicKey, "convertPublicKey");
    function curve25519_sign_open(m, sm, n, pk) {
      var edpk = convertPublicKey(pk);
      edpk[31] |= sm[63] & 128;
      sm[63] &= 127;
      return crypto_sign_open(m, sm, n, edpk);
    }
    __name(curve25519_sign_open, "curve25519_sign_open");
    function checkArrayTypes(...args) {
      var t, i;
      for (i = 0; i < arguments.length; i++) {
        if ((t = Object.prototype.toString.call(arguments[i])) !== "[object Uint8Array]")
          throw new TypeError("unexpected type " + t + ", use Uint8Array");
      }
    }
    __name(checkArrayTypes, "checkArrayTypes");
    function sharedKey2(secretKey, publicKey) {
      checkArrayTypes(publicKey, secretKey);
      if (publicKey.length !== 32)
        throw new Error("wrong public key length");
      if (secretKey.length !== 32)
        throw new Error("wrong secret key length");
      var sharedKey3 = new Uint8Array(32);
      crypto_scalarmult(sharedKey3, secretKey, publicKey);
      return sharedKey3;
    }
    __name(sharedKey2, "sharedKey");
    exports.sharedKey = sharedKey2;
    function signMessage(secretKey, msg, opt_random) {
      checkArrayTypes(msg, secretKey);
      if (secretKey.length !== 32)
        throw new Error("wrong secret key length");
      if (opt_random) {
        checkArrayTypes(opt_random);
        if (opt_random.length !== 64)
          throw new Error("wrong random data length");
        var buf = new Uint8Array(128 + msg.length);
        curve25519_sign(buf, msg, msg.length, secretKey, opt_random);
        return new Uint8Array(buf.subarray(0, 64 + msg.length));
      } else {
        var signedMsg = new Uint8Array(64 + msg.length);
        curve25519_sign(signedMsg, msg, msg.length, secretKey);
        return signedMsg;
      }
    }
    __name(signMessage, "signMessage");
    exports.signMessage = signMessage;
    function openMessage(publicKey, signedMsg) {
      checkArrayTypes(signedMsg, publicKey);
      if (publicKey.length !== 32)
        throw new Error("wrong public key length");
      var tmp = new Uint8Array(signedMsg.length);
      var mlen = curve25519_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
      if (mlen < 0)
        return null;
      var m = new Uint8Array(mlen);
      for (var i = 0; i < m.length; i++)
        m[i] = tmp[i];
      return m;
    }
    __name(openMessage, "openMessage");
    exports.openMessage = openMessage;
    function sign2(secretKey, msg, opt_random) {
      checkArrayTypes(secretKey, msg);
      if (secretKey.length !== 32)
        throw new Error("wrong secret key length");
      if (opt_random) {
        checkArrayTypes(opt_random);
        if (opt_random.length !== 64)
          throw new Error("wrong random data length");
      }
      var buf = new Uint8Array((opt_random ? 128 : 64) + msg.length);
      curve25519_sign(buf, msg, msg.length, secretKey, opt_random);
      var signature = new Uint8Array(64);
      for (var i = 0; i < signature.length; i++)
        signature[i] = buf[i];
      return signature;
    }
    __name(sign2, "sign");
    exports.sign = sign2;
    function verify2(publicKey, msg, signature) {
      checkArrayTypes(msg, signature, publicKey);
      if (signature.length !== 64)
        throw new Error("wrong signature length");
      if (publicKey.length !== 32)
        throw new Error("wrong public key length");
      var sm = new Uint8Array(64 + msg.length);
      var m = new Uint8Array(64 + msg.length);
      var i;
      for (i = 0; i < 64; i++)
        sm[i] = signature[i];
      for (i = 0; i < msg.length; i++)
        sm[i + 64] = msg[i];
      return curve25519_sign_open(m, sm, sm.length, publicKey) >= 0;
    }
    __name(verify2, "verify");
    exports.verify = verify2;
    function generateKeyPair2(seed) {
      checkArrayTypes(seed);
      if (seed.length !== 32)
        throw new Error("wrong seed length");
      var sk = new Uint8Array(32);
      var pk = new Uint8Array(32);
      for (var i = 0; i < 32; i++)
        sk[i] = seed[i];
      crypto_scalarmult_base(pk, sk);
      sk[0] &= 248;
      sk[31] &= 127;
      sk[31] |= 64;
      pk[31] &= 127;
      return {
        public: pk,
        private: sk
      };
    }
    __name(generateKeyPair2, "generateKeyPair");
    exports.generateKeyPair = generateKeyPair2;
    exports.default = {};
  }
});

// node_modules/tweetnacl/nacl-fast.js
var require_nacl_fast = __commonJS({
  "node_modules/tweetnacl/nacl-fast.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(nacl2) {
      "use strict";
      var gf = /* @__PURE__ */ __name(function(init) {
        var i, r = new Float64Array(16);
        if (init)
          for (i = 0; i < init.length; i++)
            r[i] = init[i];
        return r;
      }, "gf");
      var randombytes = /* @__PURE__ */ __name(function() {
        throw new Error("no PRNG");
      }, "randombytes");
      var _0 = new Uint8Array(16);
      var _9 = new Uint8Array(32);
      _9[0] = 9;
      var gf0 = gf(), gf1 = gf([1]), _121665 = gf([56129, 1]), D = gf([30883, 4953, 19914, 30187, 55467, 16705, 2637, 112, 59544, 30585, 16505, 36039, 65139, 11119, 27886, 20995]), D2 = gf([61785, 9906, 39828, 60374, 45398, 33411, 5274, 224, 53552, 61171, 33010, 6542, 64743, 22239, 55772, 9222]), X = gf([54554, 36645, 11616, 51542, 42930, 38181, 51040, 26924, 56412, 64982, 57905, 49316, 21502, 52590, 14035, 8553]), Y = gf([26200, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214]), I = gf([41136, 18958, 6951, 50414, 58488, 44335, 6150, 12099, 55207, 15867, 153, 11085, 57099, 20417, 9344, 11139]);
      function ts64(x, i, h, l) {
        x[i] = h >> 24 & 255;
        x[i + 1] = h >> 16 & 255;
        x[i + 2] = h >> 8 & 255;
        x[i + 3] = h & 255;
        x[i + 4] = l >> 24 & 255;
        x[i + 5] = l >> 16 & 255;
        x[i + 6] = l >> 8 & 255;
        x[i + 7] = l & 255;
      }
      __name(ts64, "ts64");
      function vn(x, xi, y, yi, n) {
        var i, d = 0;
        for (i = 0; i < n; i++)
          d |= x[xi + i] ^ y[yi + i];
        return (1 & d - 1 >>> 8) - 1;
      }
      __name(vn, "vn");
      function crypto_verify_16(x, xi, y, yi) {
        return vn(x, xi, y, yi, 16);
      }
      __name(crypto_verify_16, "crypto_verify_16");
      function crypto_verify_32(x, xi, y, yi) {
        return vn(x, xi, y, yi, 32);
      }
      __name(crypto_verify_32, "crypto_verify_32");
      function core_salsa20(o, p, k, c) {
        var j0 = c[0] & 255 | (c[1] & 255) << 8 | (c[2] & 255) << 16 | (c[3] & 255) << 24, j1 = k[0] & 255 | (k[1] & 255) << 8 | (k[2] & 255) << 16 | (k[3] & 255) << 24, j2 = k[4] & 255 | (k[5] & 255) << 8 | (k[6] & 255) << 16 | (k[7] & 255) << 24, j3 = k[8] & 255 | (k[9] & 255) << 8 | (k[10] & 255) << 16 | (k[11] & 255) << 24, j4 = k[12] & 255 | (k[13] & 255) << 8 | (k[14] & 255) << 16 | (k[15] & 255) << 24, j5 = c[4] & 255 | (c[5] & 255) << 8 | (c[6] & 255) << 16 | (c[7] & 255) << 24, j6 = p[0] & 255 | (p[1] & 255) << 8 | (p[2] & 255) << 16 | (p[3] & 255) << 24, j7 = p[4] & 255 | (p[5] & 255) << 8 | (p[6] & 255) << 16 | (p[7] & 255) << 24, j8 = p[8] & 255 | (p[9] & 255) << 8 | (p[10] & 255) << 16 | (p[11] & 255) << 24, j9 = p[12] & 255 | (p[13] & 255) << 8 | (p[14] & 255) << 16 | (p[15] & 255) << 24, j10 = c[8] & 255 | (c[9] & 255) << 8 | (c[10] & 255) << 16 | (c[11] & 255) << 24, j11 = k[16] & 255 | (k[17] & 255) << 8 | (k[18] & 255) << 16 | (k[19] & 255) << 24, j12 = k[20] & 255 | (k[21] & 255) << 8 | (k[22] & 255) << 16 | (k[23] & 255) << 24, j13 = k[24] & 255 | (k[25] & 255) << 8 | (k[26] & 255) << 16 | (k[27] & 255) << 24, j14 = k[28] & 255 | (k[29] & 255) << 8 | (k[30] & 255) << 16 | (k[31] & 255) << 24, j15 = c[12] & 255 | (c[13] & 255) << 8 | (c[14] & 255) << 16 | (c[15] & 255) << 24;
        var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;
        for (var i = 0; i < 20; i += 2) {
          u = x0 + x12 | 0;
          x4 ^= u << 7 | u >>> 32 - 7;
          u = x4 + x0 | 0;
          x8 ^= u << 9 | u >>> 32 - 9;
          u = x8 + x4 | 0;
          x12 ^= u << 13 | u >>> 32 - 13;
          u = x12 + x8 | 0;
          x0 ^= u << 18 | u >>> 32 - 18;
          u = x5 + x1 | 0;
          x9 ^= u << 7 | u >>> 32 - 7;
          u = x9 + x5 | 0;
          x13 ^= u << 9 | u >>> 32 - 9;
          u = x13 + x9 | 0;
          x1 ^= u << 13 | u >>> 32 - 13;
          u = x1 + x13 | 0;
          x5 ^= u << 18 | u >>> 32 - 18;
          u = x10 + x6 | 0;
          x14 ^= u << 7 | u >>> 32 - 7;
          u = x14 + x10 | 0;
          x2 ^= u << 9 | u >>> 32 - 9;
          u = x2 + x14 | 0;
          x6 ^= u << 13 | u >>> 32 - 13;
          u = x6 + x2 | 0;
          x10 ^= u << 18 | u >>> 32 - 18;
          u = x15 + x11 | 0;
          x3 ^= u << 7 | u >>> 32 - 7;
          u = x3 + x15 | 0;
          x7 ^= u << 9 | u >>> 32 - 9;
          u = x7 + x3 | 0;
          x11 ^= u << 13 | u >>> 32 - 13;
          u = x11 + x7 | 0;
          x15 ^= u << 18 | u >>> 32 - 18;
          u = x0 + x3 | 0;
          x1 ^= u << 7 | u >>> 32 - 7;
          u = x1 + x0 | 0;
          x2 ^= u << 9 | u >>> 32 - 9;
          u = x2 + x1 | 0;
          x3 ^= u << 13 | u >>> 32 - 13;
          u = x3 + x2 | 0;
          x0 ^= u << 18 | u >>> 32 - 18;
          u = x5 + x4 | 0;
          x6 ^= u << 7 | u >>> 32 - 7;
          u = x6 + x5 | 0;
          x7 ^= u << 9 | u >>> 32 - 9;
          u = x7 + x6 | 0;
          x4 ^= u << 13 | u >>> 32 - 13;
          u = x4 + x7 | 0;
          x5 ^= u << 18 | u >>> 32 - 18;
          u = x10 + x9 | 0;
          x11 ^= u << 7 | u >>> 32 - 7;
          u = x11 + x10 | 0;
          x8 ^= u << 9 | u >>> 32 - 9;
          u = x8 + x11 | 0;
          x9 ^= u << 13 | u >>> 32 - 13;
          u = x9 + x8 | 0;
          x10 ^= u << 18 | u >>> 32 - 18;
          u = x15 + x14 | 0;
          x12 ^= u << 7 | u >>> 32 - 7;
          u = x12 + x15 | 0;
          x13 ^= u << 9 | u >>> 32 - 9;
          u = x13 + x12 | 0;
          x14 ^= u << 13 | u >>> 32 - 13;
          u = x14 + x13 | 0;
          x15 ^= u << 18 | u >>> 32 - 18;
        }
        x0 = x0 + j0 | 0;
        x1 = x1 + j1 | 0;
        x2 = x2 + j2 | 0;
        x3 = x3 + j3 | 0;
        x4 = x4 + j4 | 0;
        x5 = x5 + j5 | 0;
        x6 = x6 + j6 | 0;
        x7 = x7 + j7 | 0;
        x8 = x8 + j8 | 0;
        x9 = x9 + j9 | 0;
        x10 = x10 + j10 | 0;
        x11 = x11 + j11 | 0;
        x12 = x12 + j12 | 0;
        x13 = x13 + j13 | 0;
        x14 = x14 + j14 | 0;
        x15 = x15 + j15 | 0;
        o[0] = x0 >>> 0 & 255;
        o[1] = x0 >>> 8 & 255;
        o[2] = x0 >>> 16 & 255;
        o[3] = x0 >>> 24 & 255;
        o[4] = x1 >>> 0 & 255;
        o[5] = x1 >>> 8 & 255;
        o[6] = x1 >>> 16 & 255;
        o[7] = x1 >>> 24 & 255;
        o[8] = x2 >>> 0 & 255;
        o[9] = x2 >>> 8 & 255;
        o[10] = x2 >>> 16 & 255;
        o[11] = x2 >>> 24 & 255;
        o[12] = x3 >>> 0 & 255;
        o[13] = x3 >>> 8 & 255;
        o[14] = x3 >>> 16 & 255;
        o[15] = x3 >>> 24 & 255;
        o[16] = x4 >>> 0 & 255;
        o[17] = x4 >>> 8 & 255;
        o[18] = x4 >>> 16 & 255;
        o[19] = x4 >>> 24 & 255;
        o[20] = x5 >>> 0 & 255;
        o[21] = x5 >>> 8 & 255;
        o[22] = x5 >>> 16 & 255;
        o[23] = x5 >>> 24 & 255;
        o[24] = x6 >>> 0 & 255;
        o[25] = x6 >>> 8 & 255;
        o[26] = x6 >>> 16 & 255;
        o[27] = x6 >>> 24 & 255;
        o[28] = x7 >>> 0 & 255;
        o[29] = x7 >>> 8 & 255;
        o[30] = x7 >>> 16 & 255;
        o[31] = x7 >>> 24 & 255;
        o[32] = x8 >>> 0 & 255;
        o[33] = x8 >>> 8 & 255;
        o[34] = x8 >>> 16 & 255;
        o[35] = x8 >>> 24 & 255;
        o[36] = x9 >>> 0 & 255;
        o[37] = x9 >>> 8 & 255;
        o[38] = x9 >>> 16 & 255;
        o[39] = x9 >>> 24 & 255;
        o[40] = x10 >>> 0 & 255;
        o[41] = x10 >>> 8 & 255;
        o[42] = x10 >>> 16 & 255;
        o[43] = x10 >>> 24 & 255;
        o[44] = x11 >>> 0 & 255;
        o[45] = x11 >>> 8 & 255;
        o[46] = x11 >>> 16 & 255;
        o[47] = x11 >>> 24 & 255;
        o[48] = x12 >>> 0 & 255;
        o[49] = x12 >>> 8 & 255;
        o[50] = x12 >>> 16 & 255;
        o[51] = x12 >>> 24 & 255;
        o[52] = x13 >>> 0 & 255;
        o[53] = x13 >>> 8 & 255;
        o[54] = x13 >>> 16 & 255;
        o[55] = x13 >>> 24 & 255;
        o[56] = x14 >>> 0 & 255;
        o[57] = x14 >>> 8 & 255;
        o[58] = x14 >>> 16 & 255;
        o[59] = x14 >>> 24 & 255;
        o[60] = x15 >>> 0 & 255;
        o[61] = x15 >>> 8 & 255;
        o[62] = x15 >>> 16 & 255;
        o[63] = x15 >>> 24 & 255;
      }
      __name(core_salsa20, "core_salsa20");
      function core_hsalsa20(o, p, k, c) {
        var j0 = c[0] & 255 | (c[1] & 255) << 8 | (c[2] & 255) << 16 | (c[3] & 255) << 24, j1 = k[0] & 255 | (k[1] & 255) << 8 | (k[2] & 255) << 16 | (k[3] & 255) << 24, j2 = k[4] & 255 | (k[5] & 255) << 8 | (k[6] & 255) << 16 | (k[7] & 255) << 24, j3 = k[8] & 255 | (k[9] & 255) << 8 | (k[10] & 255) << 16 | (k[11] & 255) << 24, j4 = k[12] & 255 | (k[13] & 255) << 8 | (k[14] & 255) << 16 | (k[15] & 255) << 24, j5 = c[4] & 255 | (c[5] & 255) << 8 | (c[6] & 255) << 16 | (c[7] & 255) << 24, j6 = p[0] & 255 | (p[1] & 255) << 8 | (p[2] & 255) << 16 | (p[3] & 255) << 24, j7 = p[4] & 255 | (p[5] & 255) << 8 | (p[6] & 255) << 16 | (p[7] & 255) << 24, j8 = p[8] & 255 | (p[9] & 255) << 8 | (p[10] & 255) << 16 | (p[11] & 255) << 24, j9 = p[12] & 255 | (p[13] & 255) << 8 | (p[14] & 255) << 16 | (p[15] & 255) << 24, j10 = c[8] & 255 | (c[9] & 255) << 8 | (c[10] & 255) << 16 | (c[11] & 255) << 24, j11 = k[16] & 255 | (k[17] & 255) << 8 | (k[18] & 255) << 16 | (k[19] & 255) << 24, j12 = k[20] & 255 | (k[21] & 255) << 8 | (k[22] & 255) << 16 | (k[23] & 255) << 24, j13 = k[24] & 255 | (k[25] & 255) << 8 | (k[26] & 255) << 16 | (k[27] & 255) << 24, j14 = k[28] & 255 | (k[29] & 255) << 8 | (k[30] & 255) << 16 | (k[31] & 255) << 24, j15 = c[12] & 255 | (c[13] & 255) << 8 | (c[14] & 255) << 16 | (c[15] & 255) << 24;
        var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;
        for (var i = 0; i < 20; i += 2) {
          u = x0 + x12 | 0;
          x4 ^= u << 7 | u >>> 32 - 7;
          u = x4 + x0 | 0;
          x8 ^= u << 9 | u >>> 32 - 9;
          u = x8 + x4 | 0;
          x12 ^= u << 13 | u >>> 32 - 13;
          u = x12 + x8 | 0;
          x0 ^= u << 18 | u >>> 32 - 18;
          u = x5 + x1 | 0;
          x9 ^= u << 7 | u >>> 32 - 7;
          u = x9 + x5 | 0;
          x13 ^= u << 9 | u >>> 32 - 9;
          u = x13 + x9 | 0;
          x1 ^= u << 13 | u >>> 32 - 13;
          u = x1 + x13 | 0;
          x5 ^= u << 18 | u >>> 32 - 18;
          u = x10 + x6 | 0;
          x14 ^= u << 7 | u >>> 32 - 7;
          u = x14 + x10 | 0;
          x2 ^= u << 9 | u >>> 32 - 9;
          u = x2 + x14 | 0;
          x6 ^= u << 13 | u >>> 32 - 13;
          u = x6 + x2 | 0;
          x10 ^= u << 18 | u >>> 32 - 18;
          u = x15 + x11 | 0;
          x3 ^= u << 7 | u >>> 32 - 7;
          u = x3 + x15 | 0;
          x7 ^= u << 9 | u >>> 32 - 9;
          u = x7 + x3 | 0;
          x11 ^= u << 13 | u >>> 32 - 13;
          u = x11 + x7 | 0;
          x15 ^= u << 18 | u >>> 32 - 18;
          u = x0 + x3 | 0;
          x1 ^= u << 7 | u >>> 32 - 7;
          u = x1 + x0 | 0;
          x2 ^= u << 9 | u >>> 32 - 9;
          u = x2 + x1 | 0;
          x3 ^= u << 13 | u >>> 32 - 13;
          u = x3 + x2 | 0;
          x0 ^= u << 18 | u >>> 32 - 18;
          u = x5 + x4 | 0;
          x6 ^= u << 7 | u >>> 32 - 7;
          u = x6 + x5 | 0;
          x7 ^= u << 9 | u >>> 32 - 9;
          u = x7 + x6 | 0;
          x4 ^= u << 13 | u >>> 32 - 13;
          u = x4 + x7 | 0;
          x5 ^= u << 18 | u >>> 32 - 18;
          u = x10 + x9 | 0;
          x11 ^= u << 7 | u >>> 32 - 7;
          u = x11 + x10 | 0;
          x8 ^= u << 9 | u >>> 32 - 9;
          u = x8 + x11 | 0;
          x9 ^= u << 13 | u >>> 32 - 13;
          u = x9 + x8 | 0;
          x10 ^= u << 18 | u >>> 32 - 18;
          u = x15 + x14 | 0;
          x12 ^= u << 7 | u >>> 32 - 7;
          u = x12 + x15 | 0;
          x13 ^= u << 9 | u >>> 32 - 9;
          u = x13 + x12 | 0;
          x14 ^= u << 13 | u >>> 32 - 13;
          u = x14 + x13 | 0;
          x15 ^= u << 18 | u >>> 32 - 18;
        }
        o[0] = x0 >>> 0 & 255;
        o[1] = x0 >>> 8 & 255;
        o[2] = x0 >>> 16 & 255;
        o[3] = x0 >>> 24 & 255;
        o[4] = x5 >>> 0 & 255;
        o[5] = x5 >>> 8 & 255;
        o[6] = x5 >>> 16 & 255;
        o[7] = x5 >>> 24 & 255;
        o[8] = x10 >>> 0 & 255;
        o[9] = x10 >>> 8 & 255;
        o[10] = x10 >>> 16 & 255;
        o[11] = x10 >>> 24 & 255;
        o[12] = x15 >>> 0 & 255;
        o[13] = x15 >>> 8 & 255;
        o[14] = x15 >>> 16 & 255;
        o[15] = x15 >>> 24 & 255;
        o[16] = x6 >>> 0 & 255;
        o[17] = x6 >>> 8 & 255;
        o[18] = x6 >>> 16 & 255;
        o[19] = x6 >>> 24 & 255;
        o[20] = x7 >>> 0 & 255;
        o[21] = x7 >>> 8 & 255;
        o[22] = x7 >>> 16 & 255;
        o[23] = x7 >>> 24 & 255;
        o[24] = x8 >>> 0 & 255;
        o[25] = x8 >>> 8 & 255;
        o[26] = x8 >>> 16 & 255;
        o[27] = x8 >>> 24 & 255;
        o[28] = x9 >>> 0 & 255;
        o[29] = x9 >>> 8 & 255;
        o[30] = x9 >>> 16 & 255;
        o[31] = x9 >>> 24 & 255;
      }
      __name(core_hsalsa20, "core_hsalsa20");
      function crypto_core_salsa20(out, inp, k, c) {
        core_salsa20(out, inp, k, c);
      }
      __name(crypto_core_salsa20, "crypto_core_salsa20");
      function crypto_core_hsalsa20(out, inp, k, c) {
        core_hsalsa20(out, inp, k, c);
      }
      __name(crypto_core_hsalsa20, "crypto_core_hsalsa20");
      var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
      function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
        var z = new Uint8Array(16), x = new Uint8Array(64);
        var u, i;
        for (i = 0; i < 16; i++)
          z[i] = 0;
        for (i = 0; i < 8; i++)
          z[i] = n[i];
        while (b >= 64) {
          crypto_core_salsa20(x, z, k, sigma);
          for (i = 0; i < 64; i++)
            c[cpos + i] = m[mpos + i] ^ x[i];
          u = 1;
          for (i = 8; i < 16; i++) {
            u = u + (z[i] & 255) | 0;
            z[i] = u & 255;
            u >>>= 8;
          }
          b -= 64;
          cpos += 64;
          mpos += 64;
        }
        if (b > 0) {
          crypto_core_salsa20(x, z, k, sigma);
          for (i = 0; i < b; i++)
            c[cpos + i] = m[mpos + i] ^ x[i];
        }
        return 0;
      }
      __name(crypto_stream_salsa20_xor, "crypto_stream_salsa20_xor");
      function crypto_stream_salsa20(c, cpos, b, n, k) {
        var z = new Uint8Array(16), x = new Uint8Array(64);
        var u, i;
        for (i = 0; i < 16; i++)
          z[i] = 0;
        for (i = 0; i < 8; i++)
          z[i] = n[i];
        while (b >= 64) {
          crypto_core_salsa20(x, z, k, sigma);
          for (i = 0; i < 64; i++)
            c[cpos + i] = x[i];
          u = 1;
          for (i = 8; i < 16; i++) {
            u = u + (z[i] & 255) | 0;
            z[i] = u & 255;
            u >>>= 8;
          }
          b -= 64;
          cpos += 64;
        }
        if (b > 0) {
          crypto_core_salsa20(x, z, k, sigma);
          for (i = 0; i < b; i++)
            c[cpos + i] = x[i];
        }
        return 0;
      }
      __name(crypto_stream_salsa20, "crypto_stream_salsa20");
      function crypto_stream(c, cpos, d, n, k) {
        var s = new Uint8Array(32);
        crypto_core_hsalsa20(s, n, k, sigma);
        var sn = new Uint8Array(8);
        for (var i = 0; i < 8; i++)
          sn[i] = n[i + 16];
        return crypto_stream_salsa20(c, cpos, d, sn, s);
      }
      __name(crypto_stream, "crypto_stream");
      function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
        var s = new Uint8Array(32);
        crypto_core_hsalsa20(s, n, k, sigma);
        var sn = new Uint8Array(8);
        for (var i = 0; i < 8; i++)
          sn[i] = n[i + 16];
        return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);
      }
      __name(crypto_stream_xor, "crypto_stream_xor");
      var poly1305 = /* @__PURE__ */ __name(function(key) {
        this.buffer = new Uint8Array(16);
        this.r = new Uint16Array(10);
        this.h = new Uint16Array(10);
        this.pad = new Uint16Array(8);
        this.leftover = 0;
        this.fin = 0;
        var t0, t1, t2, t3, t4, t5, t6, t7;
        t0 = key[0] & 255 | (key[1] & 255) << 8;
        this.r[0] = t0 & 8191;
        t1 = key[2] & 255 | (key[3] & 255) << 8;
        this.r[1] = (t0 >>> 13 | t1 << 3) & 8191;
        t2 = key[4] & 255 | (key[5] & 255) << 8;
        this.r[2] = (t1 >>> 10 | t2 << 6) & 7939;
        t3 = key[6] & 255 | (key[7] & 255) << 8;
        this.r[3] = (t2 >>> 7 | t3 << 9) & 8191;
        t4 = key[8] & 255 | (key[9] & 255) << 8;
        this.r[4] = (t3 >>> 4 | t4 << 12) & 255;
        this.r[5] = t4 >>> 1 & 8190;
        t5 = key[10] & 255 | (key[11] & 255) << 8;
        this.r[6] = (t4 >>> 14 | t5 << 2) & 8191;
        t6 = key[12] & 255 | (key[13] & 255) << 8;
        this.r[7] = (t5 >>> 11 | t6 << 5) & 8065;
        t7 = key[14] & 255 | (key[15] & 255) << 8;
        this.r[8] = (t6 >>> 8 | t7 << 8) & 8191;
        this.r[9] = t7 >>> 5 & 127;
        this.pad[0] = key[16] & 255 | (key[17] & 255) << 8;
        this.pad[1] = key[18] & 255 | (key[19] & 255) << 8;
        this.pad[2] = key[20] & 255 | (key[21] & 255) << 8;
        this.pad[3] = key[22] & 255 | (key[23] & 255) << 8;
        this.pad[4] = key[24] & 255 | (key[25] & 255) << 8;
        this.pad[5] = key[26] & 255 | (key[27] & 255) << 8;
        this.pad[6] = key[28] & 255 | (key[29] & 255) << 8;
        this.pad[7] = key[30] & 255 | (key[31] & 255) << 8;
      }, "poly1305");
      poly1305.prototype.blocks = function(m, mpos, bytes) {
        var hibit = this.fin ? 0 : 1 << 11;
        var t0, t1, t2, t3, t4, t5, t6, t7, c;
        var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
        var h0 = this.h[0], h1 = this.h[1], h2 = this.h[2], h3 = this.h[3], h4 = this.h[4], h5 = this.h[5], h6 = this.h[6], h7 = this.h[7], h8 = this.h[8], h9 = this.h[9];
        var r0 = this.r[0], r1 = this.r[1], r2 = this.r[2], r3 = this.r[3], r4 = this.r[4], r5 = this.r[5], r6 = this.r[6], r7 = this.r[7], r8 = this.r[8], r9 = this.r[9];
        while (bytes >= 16) {
          t0 = m[mpos + 0] & 255 | (m[mpos + 1] & 255) << 8;
          h0 += t0 & 8191;
          t1 = m[mpos + 2] & 255 | (m[mpos + 3] & 255) << 8;
          h1 += (t0 >>> 13 | t1 << 3) & 8191;
          t2 = m[mpos + 4] & 255 | (m[mpos + 5] & 255) << 8;
          h2 += (t1 >>> 10 | t2 << 6) & 8191;
          t3 = m[mpos + 6] & 255 | (m[mpos + 7] & 255) << 8;
          h3 += (t2 >>> 7 | t3 << 9) & 8191;
          t4 = m[mpos + 8] & 255 | (m[mpos + 9] & 255) << 8;
          h4 += (t3 >>> 4 | t4 << 12) & 8191;
          h5 += t4 >>> 1 & 8191;
          t5 = m[mpos + 10] & 255 | (m[mpos + 11] & 255) << 8;
          h6 += (t4 >>> 14 | t5 << 2) & 8191;
          t6 = m[mpos + 12] & 255 | (m[mpos + 13] & 255) << 8;
          h7 += (t5 >>> 11 | t6 << 5) & 8191;
          t7 = m[mpos + 14] & 255 | (m[mpos + 15] & 255) << 8;
          h8 += (t6 >>> 8 | t7 << 8) & 8191;
          h9 += t7 >>> 5 | hibit;
          c = 0;
          d0 = c;
          d0 += h0 * r0;
          d0 += h1 * (5 * r9);
          d0 += h2 * (5 * r8);
          d0 += h3 * (5 * r7);
          d0 += h4 * (5 * r6);
          c = d0 >>> 13;
          d0 &= 8191;
          d0 += h5 * (5 * r5);
          d0 += h6 * (5 * r4);
          d0 += h7 * (5 * r3);
          d0 += h8 * (5 * r2);
          d0 += h9 * (5 * r1);
          c += d0 >>> 13;
          d0 &= 8191;
          d1 = c;
          d1 += h0 * r1;
          d1 += h1 * r0;
          d1 += h2 * (5 * r9);
          d1 += h3 * (5 * r8);
          d1 += h4 * (5 * r7);
          c = d1 >>> 13;
          d1 &= 8191;
          d1 += h5 * (5 * r6);
          d1 += h6 * (5 * r5);
          d1 += h7 * (5 * r4);
          d1 += h8 * (5 * r3);
          d1 += h9 * (5 * r2);
          c += d1 >>> 13;
          d1 &= 8191;
          d2 = c;
          d2 += h0 * r2;
          d2 += h1 * r1;
          d2 += h2 * r0;
          d2 += h3 * (5 * r9);
          d2 += h4 * (5 * r8);
          c = d2 >>> 13;
          d2 &= 8191;
          d2 += h5 * (5 * r7);
          d2 += h6 * (5 * r6);
          d2 += h7 * (5 * r5);
          d2 += h8 * (5 * r4);
          d2 += h9 * (5 * r3);
          c += d2 >>> 13;
          d2 &= 8191;
          d3 = c;
          d3 += h0 * r3;
          d3 += h1 * r2;
          d3 += h2 * r1;
          d3 += h3 * r0;
          d3 += h4 * (5 * r9);
          c = d3 >>> 13;
          d3 &= 8191;
          d3 += h5 * (5 * r8);
          d3 += h6 * (5 * r7);
          d3 += h7 * (5 * r6);
          d3 += h8 * (5 * r5);
          d3 += h9 * (5 * r4);
          c += d3 >>> 13;
          d3 &= 8191;
          d4 = c;
          d4 += h0 * r4;
          d4 += h1 * r3;
          d4 += h2 * r2;
          d4 += h3 * r1;
          d4 += h4 * r0;
          c = d4 >>> 13;
          d4 &= 8191;
          d4 += h5 * (5 * r9);
          d4 += h6 * (5 * r8);
          d4 += h7 * (5 * r7);
          d4 += h8 * (5 * r6);
          d4 += h9 * (5 * r5);
          c += d4 >>> 13;
          d4 &= 8191;
          d5 = c;
          d5 += h0 * r5;
          d5 += h1 * r4;
          d5 += h2 * r3;
          d5 += h3 * r2;
          d5 += h4 * r1;
          c = d5 >>> 13;
          d5 &= 8191;
          d5 += h5 * r0;
          d5 += h6 * (5 * r9);
          d5 += h7 * (5 * r8);
          d5 += h8 * (5 * r7);
          d5 += h9 * (5 * r6);
          c += d5 >>> 13;
          d5 &= 8191;
          d6 = c;
          d6 += h0 * r6;
          d6 += h1 * r5;
          d6 += h2 * r4;
          d6 += h3 * r3;
          d6 += h4 * r2;
          c = d6 >>> 13;
          d6 &= 8191;
          d6 += h5 * r1;
          d6 += h6 * r0;
          d6 += h7 * (5 * r9);
          d6 += h8 * (5 * r8);
          d6 += h9 * (5 * r7);
          c += d6 >>> 13;
          d6 &= 8191;
          d7 = c;
          d7 += h0 * r7;
          d7 += h1 * r6;
          d7 += h2 * r5;
          d7 += h3 * r4;
          d7 += h4 * r3;
          c = d7 >>> 13;
          d7 &= 8191;
          d7 += h5 * r2;
          d7 += h6 * r1;
          d7 += h7 * r0;
          d7 += h8 * (5 * r9);
          d7 += h9 * (5 * r8);
          c += d7 >>> 13;
          d7 &= 8191;
          d8 = c;
          d8 += h0 * r8;
          d8 += h1 * r7;
          d8 += h2 * r6;
          d8 += h3 * r5;
          d8 += h4 * r4;
          c = d8 >>> 13;
          d8 &= 8191;
          d8 += h5 * r3;
          d8 += h6 * r2;
          d8 += h7 * r1;
          d8 += h8 * r0;
          d8 += h9 * (5 * r9);
          c += d8 >>> 13;
          d8 &= 8191;
          d9 = c;
          d9 += h0 * r9;
          d9 += h1 * r8;
          d9 += h2 * r7;
          d9 += h3 * r6;
          d9 += h4 * r5;
          c = d9 >>> 13;
          d9 &= 8191;
          d9 += h5 * r4;
          d9 += h6 * r3;
          d9 += h7 * r2;
          d9 += h8 * r1;
          d9 += h9 * r0;
          c += d9 >>> 13;
          d9 &= 8191;
          c = (c << 2) + c | 0;
          c = c + d0 | 0;
          d0 = c & 8191;
          c = c >>> 13;
          d1 += c;
          h0 = d0;
          h1 = d1;
          h2 = d2;
          h3 = d3;
          h4 = d4;
          h5 = d5;
          h6 = d6;
          h7 = d7;
          h8 = d8;
          h9 = d9;
          mpos += 16;
          bytes -= 16;
        }
        this.h[0] = h0;
        this.h[1] = h1;
        this.h[2] = h2;
        this.h[3] = h3;
        this.h[4] = h4;
        this.h[5] = h5;
        this.h[6] = h6;
        this.h[7] = h7;
        this.h[8] = h8;
        this.h[9] = h9;
      };
      poly1305.prototype.finish = function(mac, macpos) {
        var g = new Uint16Array(10);
        var c, mask, f, i;
        if (this.leftover) {
          i = this.leftover;
          this.buffer[i++] = 1;
          for (; i < 16; i++)
            this.buffer[i] = 0;
          this.fin = 1;
          this.blocks(this.buffer, 0, 16);
        }
        c = this.h[1] >>> 13;
        this.h[1] &= 8191;
        for (i = 2; i < 10; i++) {
          this.h[i] += c;
          c = this.h[i] >>> 13;
          this.h[i] &= 8191;
        }
        this.h[0] += c * 5;
        c = this.h[0] >>> 13;
        this.h[0] &= 8191;
        this.h[1] += c;
        c = this.h[1] >>> 13;
        this.h[1] &= 8191;
        this.h[2] += c;
        g[0] = this.h[0] + 5;
        c = g[0] >>> 13;
        g[0] &= 8191;
        for (i = 1; i < 10; i++) {
          g[i] = this.h[i] + c;
          c = g[i] >>> 13;
          g[i] &= 8191;
        }
        g[9] -= 1 << 13;
        mask = (c ^ 1) - 1;
        for (i = 0; i < 10; i++)
          g[i] &= mask;
        mask = ~mask;
        for (i = 0; i < 10; i++)
          this.h[i] = this.h[i] & mask | g[i];
        this.h[0] = (this.h[0] | this.h[1] << 13) & 65535;
        this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 65535;
        this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 65535;
        this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 65535;
        this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 65535;
        this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 65535;
        this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 65535;
        this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 65535;
        f = this.h[0] + this.pad[0];
        this.h[0] = f & 65535;
        for (i = 1; i < 8; i++) {
          f = (this.h[i] + this.pad[i] | 0) + (f >>> 16) | 0;
          this.h[i] = f & 65535;
        }
        mac[macpos + 0] = this.h[0] >>> 0 & 255;
        mac[macpos + 1] = this.h[0] >>> 8 & 255;
        mac[macpos + 2] = this.h[1] >>> 0 & 255;
        mac[macpos + 3] = this.h[1] >>> 8 & 255;
        mac[macpos + 4] = this.h[2] >>> 0 & 255;
        mac[macpos + 5] = this.h[2] >>> 8 & 255;
        mac[macpos + 6] = this.h[3] >>> 0 & 255;
        mac[macpos + 7] = this.h[3] >>> 8 & 255;
        mac[macpos + 8] = this.h[4] >>> 0 & 255;
        mac[macpos + 9] = this.h[4] >>> 8 & 255;
        mac[macpos + 10] = this.h[5] >>> 0 & 255;
        mac[macpos + 11] = this.h[5] >>> 8 & 255;
        mac[macpos + 12] = this.h[6] >>> 0 & 255;
        mac[macpos + 13] = this.h[6] >>> 8 & 255;
        mac[macpos + 14] = this.h[7] >>> 0 & 255;
        mac[macpos + 15] = this.h[7] >>> 8 & 255;
      };
      poly1305.prototype.update = function(m, mpos, bytes) {
        var i, want;
        if (this.leftover) {
          want = 16 - this.leftover;
          if (want > bytes)
            want = bytes;
          for (i = 0; i < want; i++)
            this.buffer[this.leftover + i] = m[mpos + i];
          bytes -= want;
          mpos += want;
          this.leftover += want;
          if (this.leftover < 16)
            return;
          this.blocks(this.buffer, 0, 16);
          this.leftover = 0;
        }
        if (bytes >= 16) {
          want = bytes - bytes % 16;
          this.blocks(m, mpos, want);
          mpos += want;
          bytes -= want;
        }
        if (bytes) {
          for (i = 0; i < bytes; i++)
            this.buffer[this.leftover + i] = m[mpos + i];
          this.leftover += bytes;
        }
      };
      function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
        var s = new poly1305(k);
        s.update(m, mpos, n);
        s.finish(out, outpos);
        return 0;
      }
      __name(crypto_onetimeauth, "crypto_onetimeauth");
      function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
        var x = new Uint8Array(16);
        crypto_onetimeauth(x, 0, m, mpos, n, k);
        return crypto_verify_16(h, hpos, x, 0);
      }
      __name(crypto_onetimeauth_verify, "crypto_onetimeauth_verify");
      function crypto_secretbox(c, m, d, n, k) {
        var i;
        if (d < 32)
          return -1;
        crypto_stream_xor(c, 0, m, 0, d, n, k);
        crypto_onetimeauth(c, 16, c, 32, d - 32, c);
        for (i = 0; i < 16; i++)
          c[i] = 0;
        return 0;
      }
      __name(crypto_secretbox, "crypto_secretbox");
      function crypto_secretbox_open(m, c, d, n, k) {
        var i;
        var x = new Uint8Array(32);
        if (d < 32)
          return -1;
        crypto_stream(x, 0, 32, n, k);
        if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0)
          return -1;
        crypto_stream_xor(m, 0, c, 0, d, n, k);
        for (i = 0; i < 32; i++)
          m[i] = 0;
        return 0;
      }
      __name(crypto_secretbox_open, "crypto_secretbox_open");
      function set25519(r, a) {
        var i;
        for (i = 0; i < 16; i++)
          r[i] = a[i] | 0;
      }
      __name(set25519, "set25519");
      function car25519(o) {
        var i, v2, c = 1;
        for (i = 0; i < 16; i++) {
          v2 = o[i] + c + 65535;
          c = Math.floor(v2 / 65536);
          o[i] = v2 - c * 65536;
        }
        o[0] += c - 1 + 37 * (c - 1);
      }
      __name(car25519, "car25519");
      function sel25519(p, q, b) {
        var t, c = ~(b - 1);
        for (var i = 0; i < 16; i++) {
          t = c & (p[i] ^ q[i]);
          p[i] ^= t;
          q[i] ^= t;
        }
      }
      __name(sel25519, "sel25519");
      function pack25519(o, n) {
        var i, j, b;
        var m = gf(), t = gf();
        for (i = 0; i < 16; i++)
          t[i] = n[i];
        car25519(t);
        car25519(t);
        car25519(t);
        for (j = 0; j < 2; j++) {
          m[0] = t[0] - 65517;
          for (i = 1; i < 15; i++) {
            m[i] = t[i] - 65535 - (m[i - 1] >> 16 & 1);
            m[i - 1] &= 65535;
          }
          m[15] = t[15] - 32767 - (m[14] >> 16 & 1);
          b = m[15] >> 16 & 1;
          m[14] &= 65535;
          sel25519(t, m, 1 - b);
        }
        for (i = 0; i < 16; i++) {
          o[2 * i] = t[i] & 255;
          o[2 * i + 1] = t[i] >> 8;
        }
      }
      __name(pack25519, "pack25519");
      function neq25519(a, b) {
        var c = new Uint8Array(32), d = new Uint8Array(32);
        pack25519(c, a);
        pack25519(d, b);
        return crypto_verify_32(c, 0, d, 0);
      }
      __name(neq25519, "neq25519");
      function par25519(a) {
        var d = new Uint8Array(32);
        pack25519(d, a);
        return d[0] & 1;
      }
      __name(par25519, "par25519");
      function unpack25519(o, n) {
        var i;
        for (i = 0; i < 16; i++)
          o[i] = n[2 * i] + (n[2 * i + 1] << 8);
        o[15] &= 32767;
      }
      __name(unpack25519, "unpack25519");
      function A(o, a, b) {
        for (var i = 0; i < 16; i++)
          o[i] = a[i] + b[i];
      }
      __name(A, "A");
      function Z(o, a, b) {
        for (var i = 0; i < 16; i++)
          o[i] = a[i] - b[i];
      }
      __name(Z, "Z");
      function M(o, a, b) {
        var v2, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
        v2 = a[0];
        t0 += v2 * b0;
        t1 += v2 * b1;
        t2 += v2 * b2;
        t3 += v2 * b3;
        t4 += v2 * b4;
        t5 += v2 * b5;
        t6 += v2 * b6;
        t7 += v2 * b7;
        t8 += v2 * b8;
        t9 += v2 * b9;
        t10 += v2 * b10;
        t11 += v2 * b11;
        t12 += v2 * b12;
        t13 += v2 * b13;
        t14 += v2 * b14;
        t15 += v2 * b15;
        v2 = a[1];
        t1 += v2 * b0;
        t2 += v2 * b1;
        t3 += v2 * b2;
        t4 += v2 * b3;
        t5 += v2 * b4;
        t6 += v2 * b5;
        t7 += v2 * b6;
        t8 += v2 * b7;
        t9 += v2 * b8;
        t10 += v2 * b9;
        t11 += v2 * b10;
        t12 += v2 * b11;
        t13 += v2 * b12;
        t14 += v2 * b13;
        t15 += v2 * b14;
        t16 += v2 * b15;
        v2 = a[2];
        t2 += v2 * b0;
        t3 += v2 * b1;
        t4 += v2 * b2;
        t5 += v2 * b3;
        t6 += v2 * b4;
        t7 += v2 * b5;
        t8 += v2 * b6;
        t9 += v2 * b7;
        t10 += v2 * b8;
        t11 += v2 * b9;
        t12 += v2 * b10;
        t13 += v2 * b11;
        t14 += v2 * b12;
        t15 += v2 * b13;
        t16 += v2 * b14;
        t17 += v2 * b15;
        v2 = a[3];
        t3 += v2 * b0;
        t4 += v2 * b1;
        t5 += v2 * b2;
        t6 += v2 * b3;
        t7 += v2 * b4;
        t8 += v2 * b5;
        t9 += v2 * b6;
        t10 += v2 * b7;
        t11 += v2 * b8;
        t12 += v2 * b9;
        t13 += v2 * b10;
        t14 += v2 * b11;
        t15 += v2 * b12;
        t16 += v2 * b13;
        t17 += v2 * b14;
        t18 += v2 * b15;
        v2 = a[4];
        t4 += v2 * b0;
        t5 += v2 * b1;
        t6 += v2 * b2;
        t7 += v2 * b3;
        t8 += v2 * b4;
        t9 += v2 * b5;
        t10 += v2 * b6;
        t11 += v2 * b7;
        t12 += v2 * b8;
        t13 += v2 * b9;
        t14 += v2 * b10;
        t15 += v2 * b11;
        t16 += v2 * b12;
        t17 += v2 * b13;
        t18 += v2 * b14;
        t19 += v2 * b15;
        v2 = a[5];
        t5 += v2 * b0;
        t6 += v2 * b1;
        t7 += v2 * b2;
        t8 += v2 * b3;
        t9 += v2 * b4;
        t10 += v2 * b5;
        t11 += v2 * b6;
        t12 += v2 * b7;
        t13 += v2 * b8;
        t14 += v2 * b9;
        t15 += v2 * b10;
        t16 += v2 * b11;
        t17 += v2 * b12;
        t18 += v2 * b13;
        t19 += v2 * b14;
        t20 += v2 * b15;
        v2 = a[6];
        t6 += v2 * b0;
        t7 += v2 * b1;
        t8 += v2 * b2;
        t9 += v2 * b3;
        t10 += v2 * b4;
        t11 += v2 * b5;
        t12 += v2 * b6;
        t13 += v2 * b7;
        t14 += v2 * b8;
        t15 += v2 * b9;
        t16 += v2 * b10;
        t17 += v2 * b11;
        t18 += v2 * b12;
        t19 += v2 * b13;
        t20 += v2 * b14;
        t21 += v2 * b15;
        v2 = a[7];
        t7 += v2 * b0;
        t8 += v2 * b1;
        t9 += v2 * b2;
        t10 += v2 * b3;
        t11 += v2 * b4;
        t12 += v2 * b5;
        t13 += v2 * b6;
        t14 += v2 * b7;
        t15 += v2 * b8;
        t16 += v2 * b9;
        t17 += v2 * b10;
        t18 += v2 * b11;
        t19 += v2 * b12;
        t20 += v2 * b13;
        t21 += v2 * b14;
        t22 += v2 * b15;
        v2 = a[8];
        t8 += v2 * b0;
        t9 += v2 * b1;
        t10 += v2 * b2;
        t11 += v2 * b3;
        t12 += v2 * b4;
        t13 += v2 * b5;
        t14 += v2 * b6;
        t15 += v2 * b7;
        t16 += v2 * b8;
        t17 += v2 * b9;
        t18 += v2 * b10;
        t19 += v2 * b11;
        t20 += v2 * b12;
        t21 += v2 * b13;
        t22 += v2 * b14;
        t23 += v2 * b15;
        v2 = a[9];
        t9 += v2 * b0;
        t10 += v2 * b1;
        t11 += v2 * b2;
        t12 += v2 * b3;
        t13 += v2 * b4;
        t14 += v2 * b5;
        t15 += v2 * b6;
        t16 += v2 * b7;
        t17 += v2 * b8;
        t18 += v2 * b9;
        t19 += v2 * b10;
        t20 += v2 * b11;
        t21 += v2 * b12;
        t22 += v2 * b13;
        t23 += v2 * b14;
        t24 += v2 * b15;
        v2 = a[10];
        t10 += v2 * b0;
        t11 += v2 * b1;
        t12 += v2 * b2;
        t13 += v2 * b3;
        t14 += v2 * b4;
        t15 += v2 * b5;
        t16 += v2 * b6;
        t17 += v2 * b7;
        t18 += v2 * b8;
        t19 += v2 * b9;
        t20 += v2 * b10;
        t21 += v2 * b11;
        t22 += v2 * b12;
        t23 += v2 * b13;
        t24 += v2 * b14;
        t25 += v2 * b15;
        v2 = a[11];
        t11 += v2 * b0;
        t12 += v2 * b1;
        t13 += v2 * b2;
        t14 += v2 * b3;
        t15 += v2 * b4;
        t16 += v2 * b5;
        t17 += v2 * b6;
        t18 += v2 * b7;
        t19 += v2 * b8;
        t20 += v2 * b9;
        t21 += v2 * b10;
        t22 += v2 * b11;
        t23 += v2 * b12;
        t24 += v2 * b13;
        t25 += v2 * b14;
        t26 += v2 * b15;
        v2 = a[12];
        t12 += v2 * b0;
        t13 += v2 * b1;
        t14 += v2 * b2;
        t15 += v2 * b3;
        t16 += v2 * b4;
        t17 += v2 * b5;
        t18 += v2 * b6;
        t19 += v2 * b7;
        t20 += v2 * b8;
        t21 += v2 * b9;
        t22 += v2 * b10;
        t23 += v2 * b11;
        t24 += v2 * b12;
        t25 += v2 * b13;
        t26 += v2 * b14;
        t27 += v2 * b15;
        v2 = a[13];
        t13 += v2 * b0;
        t14 += v2 * b1;
        t15 += v2 * b2;
        t16 += v2 * b3;
        t17 += v2 * b4;
        t18 += v2 * b5;
        t19 += v2 * b6;
        t20 += v2 * b7;
        t21 += v2 * b8;
        t22 += v2 * b9;
        t23 += v2 * b10;
        t24 += v2 * b11;
        t25 += v2 * b12;
        t26 += v2 * b13;
        t27 += v2 * b14;
        t28 += v2 * b15;
        v2 = a[14];
        t14 += v2 * b0;
        t15 += v2 * b1;
        t16 += v2 * b2;
        t17 += v2 * b3;
        t18 += v2 * b4;
        t19 += v2 * b5;
        t20 += v2 * b6;
        t21 += v2 * b7;
        t22 += v2 * b8;
        t23 += v2 * b9;
        t24 += v2 * b10;
        t25 += v2 * b11;
        t26 += v2 * b12;
        t27 += v2 * b13;
        t28 += v2 * b14;
        t29 += v2 * b15;
        v2 = a[15];
        t15 += v2 * b0;
        t16 += v2 * b1;
        t17 += v2 * b2;
        t18 += v2 * b3;
        t19 += v2 * b4;
        t20 += v2 * b5;
        t21 += v2 * b6;
        t22 += v2 * b7;
        t23 += v2 * b8;
        t24 += v2 * b9;
        t25 += v2 * b10;
        t26 += v2 * b11;
        t27 += v2 * b12;
        t28 += v2 * b13;
        t29 += v2 * b14;
        t30 += v2 * b15;
        t0 += 38 * t16;
        t1 += 38 * t17;
        t2 += 38 * t18;
        t3 += 38 * t19;
        t4 += 38 * t20;
        t5 += 38 * t21;
        t6 += 38 * t22;
        t7 += 38 * t23;
        t8 += 38 * t24;
        t9 += 38 * t25;
        t10 += 38 * t26;
        t11 += 38 * t27;
        t12 += 38 * t28;
        t13 += 38 * t29;
        t14 += 38 * t30;
        c = 1;
        v2 = t0 + c + 65535;
        c = Math.floor(v2 / 65536);
        t0 = v2 - c * 65536;
        v2 = t1 + c + 65535;
        c = Math.floor(v2 / 65536);
        t1 = v2 - c * 65536;
        v2 = t2 + c + 65535;
        c = Math.floor(v2 / 65536);
        t2 = v2 - c * 65536;
        v2 = t3 + c + 65535;
        c = Math.floor(v2 / 65536);
        t3 = v2 - c * 65536;
        v2 = t4 + c + 65535;
        c = Math.floor(v2 / 65536);
        t4 = v2 - c * 65536;
        v2 = t5 + c + 65535;
        c = Math.floor(v2 / 65536);
        t5 = v2 - c * 65536;
        v2 = t6 + c + 65535;
        c = Math.floor(v2 / 65536);
        t6 = v2 - c * 65536;
        v2 = t7 + c + 65535;
        c = Math.floor(v2 / 65536);
        t7 = v2 - c * 65536;
        v2 = t8 + c + 65535;
        c = Math.floor(v2 / 65536);
        t8 = v2 - c * 65536;
        v2 = t9 + c + 65535;
        c = Math.floor(v2 / 65536);
        t9 = v2 - c * 65536;
        v2 = t10 + c + 65535;
        c = Math.floor(v2 / 65536);
        t10 = v2 - c * 65536;
        v2 = t11 + c + 65535;
        c = Math.floor(v2 / 65536);
        t11 = v2 - c * 65536;
        v2 = t12 + c + 65535;
        c = Math.floor(v2 / 65536);
        t12 = v2 - c * 65536;
        v2 = t13 + c + 65535;
        c = Math.floor(v2 / 65536);
        t13 = v2 - c * 65536;
        v2 = t14 + c + 65535;
        c = Math.floor(v2 / 65536);
        t14 = v2 - c * 65536;
        v2 = t15 + c + 65535;
        c = Math.floor(v2 / 65536);
        t15 = v2 - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        c = 1;
        v2 = t0 + c + 65535;
        c = Math.floor(v2 / 65536);
        t0 = v2 - c * 65536;
        v2 = t1 + c + 65535;
        c = Math.floor(v2 / 65536);
        t1 = v2 - c * 65536;
        v2 = t2 + c + 65535;
        c = Math.floor(v2 / 65536);
        t2 = v2 - c * 65536;
        v2 = t3 + c + 65535;
        c = Math.floor(v2 / 65536);
        t3 = v2 - c * 65536;
        v2 = t4 + c + 65535;
        c = Math.floor(v2 / 65536);
        t4 = v2 - c * 65536;
        v2 = t5 + c + 65535;
        c = Math.floor(v2 / 65536);
        t5 = v2 - c * 65536;
        v2 = t6 + c + 65535;
        c = Math.floor(v2 / 65536);
        t6 = v2 - c * 65536;
        v2 = t7 + c + 65535;
        c = Math.floor(v2 / 65536);
        t7 = v2 - c * 65536;
        v2 = t8 + c + 65535;
        c = Math.floor(v2 / 65536);
        t8 = v2 - c * 65536;
        v2 = t9 + c + 65535;
        c = Math.floor(v2 / 65536);
        t9 = v2 - c * 65536;
        v2 = t10 + c + 65535;
        c = Math.floor(v2 / 65536);
        t10 = v2 - c * 65536;
        v2 = t11 + c + 65535;
        c = Math.floor(v2 / 65536);
        t11 = v2 - c * 65536;
        v2 = t12 + c + 65535;
        c = Math.floor(v2 / 65536);
        t12 = v2 - c * 65536;
        v2 = t13 + c + 65535;
        c = Math.floor(v2 / 65536);
        t13 = v2 - c * 65536;
        v2 = t14 + c + 65535;
        c = Math.floor(v2 / 65536);
        t14 = v2 - c * 65536;
        v2 = t15 + c + 65535;
        c = Math.floor(v2 / 65536);
        t15 = v2 - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        o[0] = t0;
        o[1] = t1;
        o[2] = t2;
        o[3] = t3;
        o[4] = t4;
        o[5] = t5;
        o[6] = t6;
        o[7] = t7;
        o[8] = t8;
        o[9] = t9;
        o[10] = t10;
        o[11] = t11;
        o[12] = t12;
        o[13] = t13;
        o[14] = t14;
        o[15] = t15;
      }
      __name(M, "M");
      function S(o, a) {
        M(o, a, a);
      }
      __name(S, "S");
      function inv25519(o, i) {
        var c = gf();
        var a;
        for (a = 0; a < 16; a++)
          c[a] = i[a];
        for (a = 253; a >= 0; a--) {
          S(c, c);
          if (a !== 2 && a !== 4)
            M(c, c, i);
        }
        for (a = 0; a < 16; a++)
          o[a] = c[a];
      }
      __name(inv25519, "inv25519");
      function pow2523(o, i) {
        var c = gf();
        var a;
        for (a = 0; a < 16; a++)
          c[a] = i[a];
        for (a = 250; a >= 0; a--) {
          S(c, c);
          if (a !== 1)
            M(c, c, i);
        }
        for (a = 0; a < 16; a++)
          o[a] = c[a];
      }
      __name(pow2523, "pow2523");
      function crypto_scalarmult(q, n, p) {
        var z = new Uint8Array(32);
        var x = new Float64Array(80), r, i;
        var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf();
        for (i = 0; i < 31; i++)
          z[i] = n[i];
        z[31] = n[31] & 127 | 64;
        z[0] &= 248;
        unpack25519(x, p);
        for (i = 0; i < 16; i++) {
          b[i] = x[i];
          d[i] = a[i] = c[i] = 0;
        }
        a[0] = d[0] = 1;
        for (i = 254; i >= 0; --i) {
          r = z[i >>> 3] >>> (i & 7) & 1;
          sel25519(a, b, r);
          sel25519(c, d, r);
          A(e, a, c);
          Z(a, a, c);
          A(c, b, d);
          Z(b, b, d);
          S(d, e);
          S(f, a);
          M(a, c, a);
          M(c, b, e);
          A(e, a, c);
          Z(a, a, c);
          S(b, a);
          Z(c, d, f);
          M(a, c, _121665);
          A(a, a, d);
          M(c, c, a);
          M(a, d, f);
          M(d, b, x);
          S(b, e);
          sel25519(a, b, r);
          sel25519(c, d, r);
        }
        for (i = 0; i < 16; i++) {
          x[i + 16] = a[i];
          x[i + 32] = c[i];
          x[i + 48] = b[i];
          x[i + 64] = d[i];
        }
        var x32 = x.subarray(32);
        var x16 = x.subarray(16);
        inv25519(x32, x32);
        M(x16, x16, x32);
        pack25519(q, x16);
        return 0;
      }
      __name(crypto_scalarmult, "crypto_scalarmult");
      function crypto_scalarmult_base(q, n) {
        return crypto_scalarmult(q, n, _9);
      }
      __name(crypto_scalarmult_base, "crypto_scalarmult_base");
      function crypto_box_keypair(y, x) {
        randombytes(x, 32);
        return crypto_scalarmult_base(y, x);
      }
      __name(crypto_box_keypair, "crypto_box_keypair");
      function crypto_box_beforenm(k, y, x) {
        var s = new Uint8Array(32);
        crypto_scalarmult(s, x, y);
        return crypto_core_hsalsa20(k, _0, s, sigma);
      }
      __name(crypto_box_beforenm, "crypto_box_beforenm");
      var crypto_box_afternm = crypto_secretbox;
      var crypto_box_open_afternm = crypto_secretbox_open;
      function crypto_box(c, m, d, n, y, x) {
        var k = new Uint8Array(32);
        crypto_box_beforenm(k, y, x);
        return crypto_box_afternm(c, m, d, n, k);
      }
      __name(crypto_box, "crypto_box");
      function crypto_box_open(m, c, d, n, y, x) {
        var k = new Uint8Array(32);
        crypto_box_beforenm(k, y, x);
        return crypto_box_open_afternm(m, c, d, n, k);
      }
      __name(crypto_box_open, "crypto_box_open");
      var K = [
        1116352408,
        3609767458,
        1899447441,
        602891725,
        3049323471,
        3964484399,
        3921009573,
        2173295548,
        961987163,
        4081628472,
        1508970993,
        3053834265,
        2453635748,
        2937671579,
        2870763221,
        3664609560,
        3624381080,
        2734883394,
        310598401,
        1164996542,
        607225278,
        1323610764,
        1426881987,
        3590304994,
        1925078388,
        4068182383,
        2162078206,
        991336113,
        2614888103,
        633803317,
        3248222580,
        3479774868,
        3835390401,
        2666613458,
        4022224774,
        944711139,
        264347078,
        2341262773,
        604807628,
        2007800933,
        770255983,
        1495990901,
        1249150122,
        1856431235,
        1555081692,
        3175218132,
        1996064986,
        2198950837,
        2554220882,
        3999719339,
        2821834349,
        766784016,
        2952996808,
        2566594879,
        3210313671,
        3203337956,
        3336571891,
        1034457026,
        3584528711,
        2466948901,
        113926993,
        3758326383,
        338241895,
        168717936,
        666307205,
        1188179964,
        773529912,
        1546045734,
        1294757372,
        1522805485,
        1396182291,
        2643833823,
        1695183700,
        2343527390,
        1986661051,
        1014477480,
        2177026350,
        1206759142,
        2456956037,
        344077627,
        2730485921,
        1290863460,
        2820302411,
        3158454273,
        3259730800,
        3505952657,
        3345764771,
        106217008,
        3516065817,
        3606008344,
        3600352804,
        1432725776,
        4094571909,
        1467031594,
        275423344,
        851169720,
        430227734,
        3100823752,
        506948616,
        1363258195,
        659060556,
        3750685593,
        883997877,
        3785050280,
        958139571,
        3318307427,
        1322822218,
        3812723403,
        1537002063,
        2003034995,
        1747873779,
        3602036899,
        1955562222,
        1575990012,
        2024104815,
        1125592928,
        2227730452,
        2716904306,
        2361852424,
        442776044,
        2428436474,
        593698344,
        2756734187,
        3733110249,
        3204031479,
        2999351573,
        3329325298,
        3815920427,
        3391569614,
        3928383900,
        3515267271,
        566280711,
        3940187606,
        3454069534,
        4118630271,
        4000239992,
        116418474,
        1914138554,
        174292421,
        2731055270,
        289380356,
        3203993006,
        460393269,
        320620315,
        685471733,
        587496836,
        852142971,
        1086792851,
        1017036298,
        365543100,
        1126000580,
        2618297676,
        1288033470,
        3409855158,
        1501505948,
        4234509866,
        1607167915,
        987167468,
        1816402316,
        1246189591
      ];
      function crypto_hashblocks_hl(hh, hl, m, n) {
        var wh = new Int32Array(16), wl = new Int32Array(16), bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7, bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7, th, tl, i, j, h, l, a, b, c, d;
        var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];
        var pos = 0;
        while (n >= 128) {
          for (i = 0; i < 16; i++) {
            j = 8 * i + pos;
            wh[i] = m[j + 0] << 24 | m[j + 1] << 16 | m[j + 2] << 8 | m[j + 3];
            wl[i] = m[j + 4] << 24 | m[j + 5] << 16 | m[j + 6] << 8 | m[j + 7];
          }
          for (i = 0; i < 80; i++) {
            bh0 = ah0;
            bh1 = ah1;
            bh2 = ah2;
            bh3 = ah3;
            bh4 = ah4;
            bh5 = ah5;
            bh6 = ah6;
            bh7 = ah7;
            bl0 = al0;
            bl1 = al1;
            bl2 = al2;
            bl3 = al3;
            bl4 = al4;
            bl5 = al5;
            bl6 = al6;
            bl7 = al7;
            h = ah7;
            l = al7;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));
            l = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            h = ah4 & ah5 ^ ~ah4 & ah6;
            l = al4 & al5 ^ ~al4 & al6;
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            h = K[i * 2];
            l = K[i * 2 + 1];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            h = wh[i % 16];
            l = wl[i % 16];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            th = c & 65535 | d << 16;
            tl = a & 65535 | b << 16;
            h = th;
            l = tl;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));
            l = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
            l = al0 & al1 ^ al0 & al2 ^ al1 & al2;
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            bh7 = c & 65535 | d << 16;
            bl7 = a & 65535 | b << 16;
            h = bh3;
            l = bl3;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = th;
            l = tl;
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            bh3 = c & 65535 | d << 16;
            bl3 = a & 65535 | b << 16;
            ah1 = bh0;
            ah2 = bh1;
            ah3 = bh2;
            ah4 = bh3;
            ah5 = bh4;
            ah6 = bh5;
            ah7 = bh6;
            ah0 = bh7;
            al1 = bl0;
            al2 = bl1;
            al3 = bl2;
            al4 = bl3;
            al5 = bl4;
            al6 = bl5;
            al7 = bl6;
            al0 = bl7;
            if (i % 16 === 15) {
              for (j = 0; j < 16; j++) {
                h = wh[j];
                l = wl[j];
                a = l & 65535;
                b = l >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = wh[(j + 9) % 16];
                l = wl[(j + 9) % 16];
                a += l & 65535;
                b += l >>> 16;
                c += h & 65535;
                d += h >>> 16;
                th = wh[(j + 1) % 16];
                tl = wl[(j + 1) % 16];
                h = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;
                l = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);
                a += l & 65535;
                b += l >>> 16;
                c += h & 65535;
                d += h >>> 16;
                th = wh[(j + 14) % 16];
                tl = wl[(j + 14) % 16];
                h = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;
                l = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);
                a += l & 65535;
                b += l >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                wh[j] = c & 65535 | d << 16;
                wl[j] = a & 65535 | b << 16;
              }
            }
          }
          h = ah0;
          l = al0;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[0];
          l = hl[0];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[0] = ah0 = c & 65535 | d << 16;
          hl[0] = al0 = a & 65535 | b << 16;
          h = ah1;
          l = al1;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[1];
          l = hl[1];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[1] = ah1 = c & 65535 | d << 16;
          hl[1] = al1 = a & 65535 | b << 16;
          h = ah2;
          l = al2;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[2];
          l = hl[2];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[2] = ah2 = c & 65535 | d << 16;
          hl[2] = al2 = a & 65535 | b << 16;
          h = ah3;
          l = al3;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[3];
          l = hl[3];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[3] = ah3 = c & 65535 | d << 16;
          hl[3] = al3 = a & 65535 | b << 16;
          h = ah4;
          l = al4;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[4];
          l = hl[4];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[4] = ah4 = c & 65535 | d << 16;
          hl[4] = al4 = a & 65535 | b << 16;
          h = ah5;
          l = al5;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[5];
          l = hl[5];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[5] = ah5 = c & 65535 | d << 16;
          hl[5] = al5 = a & 65535 | b << 16;
          h = ah6;
          l = al6;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[6];
          l = hl[6];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[6] = ah6 = c & 65535 | d << 16;
          hl[6] = al6 = a & 65535 | b << 16;
          h = ah7;
          l = al7;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[7];
          l = hl[7];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[7] = ah7 = c & 65535 | d << 16;
          hl[7] = al7 = a & 65535 | b << 16;
          pos += 128;
          n -= 128;
        }
        return n;
      }
      __name(crypto_hashblocks_hl, "crypto_hashblocks_hl");
      function crypto_hash(out, m, n) {
        var hh = new Int32Array(8), hl = new Int32Array(8), x = new Uint8Array(256), i, b = n;
        hh[0] = 1779033703;
        hh[1] = 3144134277;
        hh[2] = 1013904242;
        hh[3] = 2773480762;
        hh[4] = 1359893119;
        hh[5] = 2600822924;
        hh[6] = 528734635;
        hh[7] = 1541459225;
        hl[0] = 4089235720;
        hl[1] = 2227873595;
        hl[2] = 4271175723;
        hl[3] = 1595750129;
        hl[4] = 2917565137;
        hl[5] = 725511199;
        hl[6] = 4215389547;
        hl[7] = 327033209;
        crypto_hashblocks_hl(hh, hl, m, n);
        n %= 128;
        for (i = 0; i < n; i++)
          x[i] = m[b - n + i];
        x[n] = 128;
        n = 256 - 128 * (n < 112 ? 1 : 0);
        x[n - 9] = 0;
        ts64(x, n - 8, b / 536870912 | 0, b << 3);
        crypto_hashblocks_hl(hh, hl, x, n);
        for (i = 0; i < 8; i++)
          ts64(out, 8 * i, hh[i], hl[i]);
        return 0;
      }
      __name(crypto_hash, "crypto_hash");
      function add(p, q) {
        var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();
        Z(a, p[1], p[0]);
        Z(t, q[1], q[0]);
        M(a, a, t);
        A(b, p[0], p[1]);
        A(t, q[0], q[1]);
        M(b, b, t);
        M(c, p[3], q[3]);
        M(c, c, D2);
        M(d, p[2], q[2]);
        A(d, d, d);
        Z(e, b, a);
        Z(f, d, c);
        A(g, d, c);
        A(h, b, a);
        M(p[0], e, f);
        M(p[1], h, g);
        M(p[2], g, f);
        M(p[3], e, h);
      }
      __name(add, "add");
      function cswap(p, q, b) {
        var i;
        for (i = 0; i < 4; i++) {
          sel25519(p[i], q[i], b);
        }
      }
      __name(cswap, "cswap");
      function pack(r, p) {
        var tx = gf(), ty = gf(), zi = gf();
        inv25519(zi, p[2]);
        M(tx, p[0], zi);
        M(ty, p[1], zi);
        pack25519(r, ty);
        r[31] ^= par25519(tx) << 7;
      }
      __name(pack, "pack");
      function scalarmult(p, q, s) {
        var b, i;
        set25519(p[0], gf0);
        set25519(p[1], gf1);
        set25519(p[2], gf1);
        set25519(p[3], gf0);
        for (i = 255; i >= 0; --i) {
          b = s[i / 8 | 0] >> (i & 7) & 1;
          cswap(p, q, b);
          add(q, p);
          add(p, p);
          cswap(p, q, b);
        }
      }
      __name(scalarmult, "scalarmult");
      function scalarbase(p, s) {
        var q = [gf(), gf(), gf(), gf()];
        set25519(q[0], X);
        set25519(q[1], Y);
        set25519(q[2], gf1);
        M(q[3], X, Y);
        scalarmult(p, q, s);
      }
      __name(scalarbase, "scalarbase");
      function crypto_sign_keypair(pk, sk, seeded) {
        var d = new Uint8Array(64);
        var p = [gf(), gf(), gf(), gf()];
        var i;
        if (!seeded)
          randombytes(sk, 32);
        crypto_hash(d, sk, 32);
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;
        scalarbase(p, d);
        pack(pk, p);
        for (i = 0; i < 32; i++)
          sk[i + 32] = pk[i];
        return 0;
      }
      __name(crypto_sign_keypair, "crypto_sign_keypair");
      var L = new Float64Array([237, 211, 245, 92, 26, 99, 18, 88, 214, 156, 247, 162, 222, 249, 222, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16]);
      function modL(r, x) {
        var carry, i, j, k;
        for (i = 63; i >= 32; --i) {
          carry = 0;
          for (j = i - 32, k = i - 12; j < k; ++j) {
            x[j] += carry - 16 * x[i] * L[j - (i - 32)];
            carry = Math.floor((x[j] + 128) / 256);
            x[j] -= carry * 256;
          }
          x[j] += carry;
          x[i] = 0;
        }
        carry = 0;
        for (j = 0; j < 32; j++) {
          x[j] += carry - (x[31] >> 4) * L[j];
          carry = x[j] >> 8;
          x[j] &= 255;
        }
        for (j = 0; j < 32; j++)
          x[j] -= carry * L[j];
        for (i = 0; i < 32; i++) {
          x[i + 1] += x[i] >> 8;
          r[i] = x[i] & 255;
        }
      }
      __name(modL, "modL");
      function reduce(r) {
        var x = new Float64Array(64), i;
        for (i = 0; i < 64; i++)
          x[i] = r[i];
        for (i = 0; i < 64; i++)
          r[i] = 0;
        modL(r, x);
      }
      __name(reduce, "reduce");
      function crypto_sign(sm, m, n, sk) {
        var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
        var i, j, x = new Float64Array(64);
        var p = [gf(), gf(), gf(), gf()];
        crypto_hash(d, sk, 32);
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;
        var smlen = n + 64;
        for (i = 0; i < n; i++)
          sm[64 + i] = m[i];
        for (i = 0; i < 32; i++)
          sm[32 + i] = d[32 + i];
        crypto_hash(r, sm.subarray(32), n + 32);
        reduce(r);
        scalarbase(p, r);
        pack(sm, p);
        for (i = 32; i < 64; i++)
          sm[i] = sk[i];
        crypto_hash(h, sm, n + 64);
        reduce(h);
        for (i = 0; i < 64; i++)
          x[i] = 0;
        for (i = 0; i < 32; i++)
          x[i] = r[i];
        for (i = 0; i < 32; i++) {
          for (j = 0; j < 32; j++) {
            x[i + j] += h[i] * d[j];
          }
        }
        modL(sm.subarray(32), x);
        return smlen;
      }
      __name(crypto_sign, "crypto_sign");
      function unpackneg(r, p) {
        var t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();
        set25519(r[2], gf1);
        unpack25519(r[1], p);
        S(num, r[1]);
        M(den, num, D);
        Z(num, num, r[2]);
        A(den, r[2], den);
        S(den2, den);
        S(den4, den2);
        M(den6, den4, den2);
        M(t, den6, num);
        M(t, t, den);
        pow2523(t, t);
        M(t, t, num);
        M(t, t, den);
        M(t, t, den);
        M(r[0], t, den);
        S(chk, r[0]);
        M(chk, chk, den);
        if (neq25519(chk, num))
          M(r[0], r[0], I);
        S(chk, r[0]);
        M(chk, chk, den);
        if (neq25519(chk, num))
          return -1;
        if (par25519(r[0]) === p[31] >> 7)
          Z(r[0], gf0, r[0]);
        M(r[3], r[0], r[1]);
        return 0;
      }
      __name(unpackneg, "unpackneg");
      function crypto_sign_open(m, sm, n, pk) {
        var i;
        var t = new Uint8Array(32), h = new Uint8Array(64);
        var p = [gf(), gf(), gf(), gf()], q = [gf(), gf(), gf(), gf()];
        if (n < 64)
          return -1;
        if (unpackneg(q, pk))
          return -1;
        for (i = 0; i < n; i++)
          m[i] = sm[i];
        for (i = 0; i < 32; i++)
          m[i + 32] = pk[i];
        crypto_hash(h, m, n);
        reduce(h);
        scalarmult(p, q, h);
        scalarbase(q, sm.subarray(32));
        add(p, q);
        pack(t, p);
        n -= 64;
        if (crypto_verify_32(sm, 0, t, 0)) {
          for (i = 0; i < n; i++)
            m[i] = 0;
          return -1;
        }
        for (i = 0; i < n; i++)
          m[i] = sm[i + 64];
        return n;
      }
      __name(crypto_sign_open, "crypto_sign_open");
      var crypto_secretbox_KEYBYTES = 32, crypto_secretbox_NONCEBYTES = 24, crypto_secretbox_ZEROBYTES = 32, crypto_secretbox_BOXZEROBYTES = 16, crypto_scalarmult_BYTES = 32, crypto_scalarmult_SCALARBYTES = 32, crypto_box_PUBLICKEYBYTES = 32, crypto_box_SECRETKEYBYTES = 32, crypto_box_BEFORENMBYTES = 32, crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES, crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES, crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES, crypto_sign_BYTES = 64, crypto_sign_PUBLICKEYBYTES = 32, crypto_sign_SECRETKEYBYTES = 64, crypto_sign_SEEDBYTES = 32, crypto_hash_BYTES = 64;
      nacl2.lowlevel = {
        crypto_core_hsalsa20,
        crypto_stream_xor,
        crypto_stream,
        crypto_stream_salsa20_xor,
        crypto_stream_salsa20,
        crypto_onetimeauth,
        crypto_onetimeauth_verify,
        crypto_verify_16,
        crypto_verify_32,
        crypto_secretbox,
        crypto_secretbox_open,
        crypto_scalarmult,
        crypto_scalarmult_base,
        crypto_box_beforenm,
        crypto_box_afternm,
        crypto_box,
        crypto_box_open,
        crypto_box_keypair,
        crypto_hash,
        crypto_sign,
        crypto_sign_keypair,
        crypto_sign_open,
        crypto_secretbox_KEYBYTES,
        crypto_secretbox_NONCEBYTES,
        crypto_secretbox_ZEROBYTES,
        crypto_secretbox_BOXZEROBYTES,
        crypto_scalarmult_BYTES,
        crypto_scalarmult_SCALARBYTES,
        crypto_box_PUBLICKEYBYTES,
        crypto_box_SECRETKEYBYTES,
        crypto_box_BEFORENMBYTES,
        crypto_box_NONCEBYTES,
        crypto_box_ZEROBYTES,
        crypto_box_BOXZEROBYTES,
        crypto_sign_BYTES,
        crypto_sign_PUBLICKEYBYTES,
        crypto_sign_SECRETKEYBYTES,
        crypto_sign_SEEDBYTES,
        crypto_hash_BYTES,
        gf,
        D,
        L,
        pack25519,
        unpack25519,
        M,
        A,
        S,
        Z,
        pow2523,
        add,
        set25519,
        modL,
        scalarmult,
        scalarbase
      };
      function checkLengths(k, n) {
        if (k.length !== crypto_secretbox_KEYBYTES)
          throw new Error("bad key size");
        if (n.length !== crypto_secretbox_NONCEBYTES)
          throw new Error("bad nonce size");
      }
      __name(checkLengths, "checkLengths");
      function checkBoxLengths(pk, sk) {
        if (pk.length !== crypto_box_PUBLICKEYBYTES)
          throw new Error("bad public key size");
        if (sk.length !== crypto_box_SECRETKEYBYTES)
          throw new Error("bad secret key size");
      }
      __name(checkBoxLengths, "checkBoxLengths");
      function checkArrayTypes() {
        for (var i = 0; i < arguments.length; i++) {
          if (!(arguments[i] instanceof Uint8Array))
            throw new TypeError("unexpected type, use Uint8Array");
        }
      }
      __name(checkArrayTypes, "checkArrayTypes");
      function cleanup(arr) {
        for (var i = 0; i < arr.length; i++)
          arr[i] = 0;
      }
      __name(cleanup, "cleanup");
      nacl2.randomBytes = function(n) {
        var b = new Uint8Array(n);
        randombytes(b, n);
        return b;
      };
      nacl2.secretbox = function(msg, nonce, key) {
        checkArrayTypes(msg, nonce, key);
        checkLengths(key, nonce);
        var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
        var c = new Uint8Array(m.length);
        for (var i = 0; i < msg.length; i++)
          m[i + crypto_secretbox_ZEROBYTES] = msg[i];
        crypto_secretbox(c, m, m.length, nonce, key);
        return c.subarray(crypto_secretbox_BOXZEROBYTES);
      };
      nacl2.secretbox.open = function(box, nonce, key) {
        checkArrayTypes(box, nonce, key);
        checkLengths(key, nonce);
        var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
        var m = new Uint8Array(c.length);
        for (var i = 0; i < box.length; i++)
          c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
        if (c.length < 32)
          return null;
        if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0)
          return null;
        return m.subarray(crypto_secretbox_ZEROBYTES);
      };
      nacl2.secretbox.keyLength = crypto_secretbox_KEYBYTES;
      nacl2.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
      nacl2.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
      nacl2.scalarMult = function(n, p) {
        checkArrayTypes(n, p);
        if (n.length !== crypto_scalarmult_SCALARBYTES)
          throw new Error("bad n size");
        if (p.length !== crypto_scalarmult_BYTES)
          throw new Error("bad p size");
        var q = new Uint8Array(crypto_scalarmult_BYTES);
        crypto_scalarmult(q, n, p);
        return q;
      };
      nacl2.scalarMult.base = function(n) {
        checkArrayTypes(n);
        if (n.length !== crypto_scalarmult_SCALARBYTES)
          throw new Error("bad n size");
        var q = new Uint8Array(crypto_scalarmult_BYTES);
        crypto_scalarmult_base(q, n);
        return q;
      };
      nacl2.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
      nacl2.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
      nacl2.box = function(msg, nonce, publicKey, secretKey) {
        var k = nacl2.box.before(publicKey, secretKey);
        return nacl2.secretbox(msg, nonce, k);
      };
      nacl2.box.before = function(publicKey, secretKey) {
        checkArrayTypes(publicKey, secretKey);
        checkBoxLengths(publicKey, secretKey);
        var k = new Uint8Array(crypto_box_BEFORENMBYTES);
        crypto_box_beforenm(k, publicKey, secretKey);
        return k;
      };
      nacl2.box.after = nacl2.secretbox;
      nacl2.box.open = function(msg, nonce, publicKey, secretKey) {
        var k = nacl2.box.before(publicKey, secretKey);
        return nacl2.secretbox.open(msg, nonce, k);
      };
      nacl2.box.open.after = nacl2.secretbox.open;
      nacl2.box.keyPair = function() {
        var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
        crypto_box_keypair(pk, sk);
        return { publicKey: pk, secretKey: sk };
      };
      nacl2.box.keyPair.fromSecretKey = function(secretKey) {
        checkArrayTypes(secretKey);
        if (secretKey.length !== crypto_box_SECRETKEYBYTES)
          throw new Error("bad secret key size");
        var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
        crypto_scalarmult_base(pk, secretKey);
        return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
      };
      nacl2.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
      nacl2.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
      nacl2.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
      nacl2.box.nonceLength = crypto_box_NONCEBYTES;
      nacl2.box.overheadLength = nacl2.secretbox.overheadLength;
      nacl2.sign = function(msg, secretKey) {
        checkArrayTypes(msg, secretKey);
        if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
          throw new Error("bad secret key size");
        var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
        crypto_sign(signedMsg, msg, msg.length, secretKey);
        return signedMsg;
      };
      nacl2.sign.open = function(signedMsg, publicKey) {
        checkArrayTypes(signedMsg, publicKey);
        if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
          throw new Error("bad public key size");
        var tmp = new Uint8Array(signedMsg.length);
        var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
        if (mlen < 0)
          return null;
        var m = new Uint8Array(mlen);
        for (var i = 0; i < m.length; i++)
          m[i] = tmp[i];
        return m;
      };
      nacl2.sign.detached = function(msg, secretKey) {
        var signedMsg = nacl2.sign(msg, secretKey);
        var sig = new Uint8Array(crypto_sign_BYTES);
        for (var i = 0; i < sig.length; i++)
          sig[i] = signedMsg[i];
        return sig;
      };
      nacl2.sign.detached.verify = function(msg, sig, publicKey) {
        checkArrayTypes(msg, sig, publicKey);
        if (sig.length !== crypto_sign_BYTES)
          throw new Error("bad signature size");
        if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
          throw new Error("bad public key size");
        var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
        var m = new Uint8Array(crypto_sign_BYTES + msg.length);
        var i;
        for (i = 0; i < crypto_sign_BYTES; i++)
          sm[i] = sig[i];
        for (i = 0; i < msg.length; i++)
          sm[i + crypto_sign_BYTES] = msg[i];
        return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
      };
      nacl2.sign.keyPair = function() {
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
        crypto_sign_keypair(pk, sk);
        return { publicKey: pk, secretKey: sk };
      };
      nacl2.sign.keyPair.fromSecretKey = function(secretKey) {
        checkArrayTypes(secretKey);
        if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
          throw new Error("bad secret key size");
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        for (var i = 0; i < pk.length; i++)
          pk[i] = secretKey[32 + i];
        return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
      };
      nacl2.sign.keyPair.fromSeed = function(seed) {
        checkArrayTypes(seed);
        if (seed.length !== crypto_sign_SEEDBYTES)
          throw new Error("bad seed size");
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
        for (var i = 0; i < 32; i++)
          sk[i] = seed[i];
        crypto_sign_keypair(pk, sk, true);
        return { publicKey: pk, secretKey: sk };
      };
      nacl2.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
      nacl2.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
      nacl2.sign.seedLength = crypto_sign_SEEDBYTES;
      nacl2.sign.signatureLength = crypto_sign_BYTES;
      nacl2.hash = function(msg) {
        checkArrayTypes(msg);
        var h = new Uint8Array(crypto_hash_BYTES);
        crypto_hash(h, msg, msg.length);
        return h;
      };
      nacl2.hash.hashLength = crypto_hash_BYTES;
      nacl2.verify = function(x, y) {
        checkArrayTypes(x, y);
        if (x.length === 0 || y.length === 0)
          return false;
        if (x.length !== y.length)
          return false;
        return vn(x, 0, y, 0, x.length) === 0 ? true : false;
      };
      nacl2.setPRNG = function(fn) {
        randombytes = fn;
      };
      (function() {
        var crypto = typeof self !== "undefined" ? self.crypto || self.msCrypto : null;
        if (crypto && crypto.getRandomValues) {
          var QUOTA = 65536;
          nacl2.setPRNG(function(x, n) {
            var i, v2 = new Uint8Array(n);
            for (i = 0; i < n; i += QUOTA) {
              crypto.getRandomValues(v2.subarray(i, i + Math.min(n - i, QUOTA)));
            }
            for (i = 0; i < n; i++)
              x[i] = v2[i];
            cleanup(v2);
          });
        } else if (typeof __require !== "undefined") {
          crypto = require_crypto();
          if (crypto && crypto.randomBytes) {
            nacl2.setPRNG(function(x, n) {
              var i, v2 = crypto.randomBytes(n);
              for (i = 0; i < n; i++)
                x[i] = v2[i];
              cleanup(v2);
            });
          }
        }
      })();
    })(typeof module !== "undefined" && module.exports ? module.exports : self.nacl = self.nacl || {});
  }
});

// node_modules/crypto-js/core.js
var require_core = __commonJS({
  "node_modules/crypto-js/core.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory();
      } else if (typeof define === "function" && define.amd) {
        define([], factory);
      } else {
        root.CryptoJS = factory();
      }
    })(exports, function() {
      var CryptoJS2 = CryptoJS2 || function(Math2, undefined2) {
        var crypto;
        if (typeof window !== "undefined" && window.crypto) {
          crypto = window.crypto;
        }
        if (typeof self !== "undefined" && self.crypto) {
          crypto = self.crypto;
        }
        if (typeof globalThis !== "undefined" && globalThis.crypto) {
          crypto = globalThis.crypto;
        }
        if (!crypto && typeof window !== "undefined" && window.msCrypto) {
          crypto = window.msCrypto;
        }
        if (!crypto && typeof global !== "undefined" && global.crypto) {
          crypto = global.crypto;
        }
        if (!crypto && typeof __require === "function") {
          try {
            crypto = require_crypto();
          } catch (err) {
          }
        }
        var cryptoSecureRandomInt = /* @__PURE__ */ __name(function() {
          if (crypto) {
            if (typeof crypto.getRandomValues === "function") {
              try {
                return crypto.getRandomValues(new Uint32Array(1))[0];
              } catch (err) {
              }
            }
            if (typeof crypto.randomBytes === "function") {
              try {
                return crypto.randomBytes(4).readInt32LE();
              } catch (err) {
              }
            }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        }, "cryptoSecureRandomInt");
        var create = Object.create || function() {
          function F() {
          }
          __name(F, "F");
          return function(obj) {
            var subtype;
            F.prototype = obj;
            subtype = new F();
            F.prototype = null;
            return subtype;
          };
        }();
        var C = {};
        var C_lib = C.lib = {};
        var Base = C_lib.Base = function() {
          return {
            /**
             * Creates a new object that inherits from this object.
             *
             * @param {Object} overrides Properties to copy into the new object.
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function(overrides) {
              var subtype = create(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var instance = MyType.create();
             */
            create: function() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            /**
             * Initializes a newly created object.
             * Override this method to add some logic when your objects are created.
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
             */
            init: function() {
            },
            /**
             * Copies properties into this object.
             *
             * @param {Object} properties The properties to mix in.
             *
             * @example
             *
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = instance.clone();
             */
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        var WordArray = C_lib.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of 32-bit words.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.create();
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },
          /**
           * Converts this word array to a string.
           *
           * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
           *
           * @return {string} The stringified word array.
           *
           * @example
           *
           *     var string = wordArray + '';
           *     var string = wordArray.toString();
           *     var string = wordArray.toString(CryptoJS.enc.Utf8);
           */
          toString: function(encoder) {
            return (encoder || Hex).stringify(this);
          },
          /**
           * Concatenates a word array to this word array.
           *
           * @param {WordArray} wordArray The word array to append.
           *
           * @return {WordArray} This word array.
           *
           * @example
           *
           *     wordArray1.concat(wordArray2);
           */
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i = 0; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
              }
            } else {
              for (var j = 0; j < thatSigBytes; j += 4) {
                thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          /**
           * Removes insignificant bits.
           *
           * @example
           *
           *     wordArray.clamp();
           */
          clamp: function() {
            var words = this.words;
            var sigBytes = this.sigBytes;
            words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words.length = Math2.ceil(sigBytes / 4);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {WordArray} The clone.
           *
           * @example
           *
           *     var clone = wordArray.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone;
          },
          /**
           * Creates a word array filled with random bytes.
           *
           * @param {number} nBytes The number of random bytes to generate.
           *
           * @return {WordArray} The random word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.random(16);
           */
          random: function(nBytes) {
            var words = [];
            for (var i = 0; i < nBytes; i += 4) {
              words.push(cryptoSecureRandomInt());
            }
            return new WordArray.init(words, nBytes);
          }
        });
        var C_enc = C.enc = {};
        var Hex = C_enc.Hex = {
          /**
           * Converts a word array to a hex string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The hex string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          /**
           * Converts a hex string to a word array.
           *
           * @param {string} hexStr The hex string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
           */
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words = [];
            for (var i = 0; i < hexStrLength; i += 2) {
              words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
            }
            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          /**
           * Converts a word array to a Latin1 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Latin1 string.
           *
           * @static
           *
           * @example
           *
           *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          /**
           * Converts a Latin1 string to a word array.
           *
           * @param {string} latin1Str The Latin1 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
           */
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words = [];
            for (var i = 0; i < latin1StrLength; i++) {
              words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
            }
            return new WordArray.init(words, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          /**
           * Converts a word array to a UTF-8 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-8 string.
           *
           * @static
           *
           * @example
           *
           *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
           */
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          /**
           * Converts a UTF-8 string to a word array.
           *
           * @param {string} utf8Str The UTF-8 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
           */
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          /**
           * Resets this block algorithm's data buffer to its initial state.
           *
           * @example
           *
           *     bufferedBlockAlgorithm.reset();
           */
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          /**
           * Adds new data to this block algorithm's buffer.
           *
           * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
           *
           * @example
           *
           *     bufferedBlockAlgorithm._append('data');
           *     bufferedBlockAlgorithm._append(wordArray);
           */
          _append: function(data) {
            if (typeof data == "string") {
              data = Utf8.parse(data);
            }
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          /**
           * Processes available data blocks.
           *
           * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
           *
           * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
           *
           * @return {WordArray} The processed data.
           *
           * @example
           *
           *     var processedData = bufferedBlockAlgorithm._process();
           *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
           */
          _process: function(doFlush) {
            var processedWords;
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          /**
           * Creates a copy of this object.
           *
           * @return {Object} The clone.
           *
           * @example
           *
           *     var clone = bufferedBlockAlgorithm.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone;
          },
          _minBufferSize: 0
        });
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           */
          cfg: Base.extend(),
          /**
           * Initializes a newly created hasher.
           *
           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
           *
           * @example
           *
           *     var hasher = CryptoJS.algo.SHA256.create();
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          /**
           * Resets this hasher to its initial state.
           *
           * @example
           *
           *     hasher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Updates this hasher with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {Hasher} This hasher.
           *
           * @example
           *
           *     hasher.update('message');
           *     hasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          /**
           * Finalizes the hash computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The hash.
           *
           * @example
           *
           *     var hash = hasher.finalize();
           *     var hash = hasher.finalize('message');
           *     var hash = hasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash2 = this._doFinalize();
            return hash2;
          },
          blockSize: 512 / 32,
          /**
           * Creates a shortcut function to a hasher's object interface.
           *
           * @param {Hasher} hasher The hasher to create a helper for.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
           */
          _createHelper: function(hasher) {
            return function(message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },
          /**
           * Creates a shortcut function to the HMAC's object interface.
           *
           * @param {Hasher} hasher The hasher to use in this HMAC helper.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
           */
          _createHmacHelper: function(hasher) {
            return function(message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
          }
        });
        var C_algo = C.algo = {};
        return C;
      }(Math);
      return CryptoJS2;
    });
  }
});

// node_modules/crypto-js/x64-core.js
var require_x64_core = __commonJS({
  "node_modules/crypto-js/x64-core.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(undefined2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;
        var C_x64 = C.x64 = {};
        var X64Word = C_x64.Word = Base.extend({
          /**
           * Initializes a newly created 64-bit word.
           *
           * @param {number} high The high 32 bits.
           * @param {number} low The low 32 bits.
           *
           * @example
           *
           *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
           */
          init: function(high, low) {
            this.high = high;
            this.low = low;
          }
          /**
           * Bitwise NOTs this word.
           *
           * @return {X64Word} A new x64-Word object after negating.
           *
           * @example
           *
           *     var negated = x64Word.not();
           */
          // not: function () {
          // var high = ~this.high;
          // var low = ~this.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ANDs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to AND with this word.
           *
           * @return {X64Word} A new x64-Word object after ANDing.
           *
           * @example
           *
           *     var anded = x64Word.and(anotherX64Word);
           */
          // and: function (word) {
          // var high = this.high & word.high;
          // var low = this.low & word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to OR with this word.
           *
           * @return {X64Word} A new x64-Word object after ORing.
           *
           * @example
           *
           *     var ored = x64Word.or(anotherX64Word);
           */
          // or: function (word) {
          // var high = this.high | word.high;
          // var low = this.low | word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise XORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to XOR with this word.
           *
           * @return {X64Word} A new x64-Word object after XORing.
           *
           * @example
           *
           *     var xored = x64Word.xor(anotherX64Word);
           */
          // xor: function (word) {
          // var high = this.high ^ word.high;
          // var low = this.low ^ word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the left.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftL(25);
           */
          // shiftL: function (n) {
          // if (n < 32) {
          // var high = (this.high << n) | (this.low >>> (32 - n));
          // var low = this.low << n;
          // } else {
          // var high = this.low << (n - 32);
          // var low = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the right.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftR(7);
           */
          // shiftR: function (n) {
          // if (n < 32) {
          // var low = (this.low >>> n) | (this.high << (32 - n));
          // var high = this.high >>> n;
          // } else {
          // var low = this.high >>> (n - 32);
          // var high = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Rotates this word n bits to the left.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotL(25);
           */
          // rotL: function (n) {
          // return this.shiftL(n).or(this.shiftR(64 - n));
          // },
          /**
           * Rotates this word n bits to the right.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotR(7);
           */
          // rotR: function (n) {
          // return this.shiftR(n).or(this.shiftL(64 - n));
          // },
          /**
           * Adds this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to add with this word.
           *
           * @return {X64Word} A new x64-Word object after adding.
           *
           * @example
           *
           *     var added = x64Word.add(anotherX64Word);
           */
          // add: function (word) {
          // var low = (this.low + word.low) | 0;
          // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
          // var high = (this.high + word.high + carry) | 0;
          // return X64Word.create(high, low);
          // }
        });
        var X64WordArray = C_x64.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.x64.WordArray.create();
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ]);
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ], 10);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 8;
            }
          },
          /**
           * Converts this 64-bit word array to a 32-bit word array.
           *
           * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
           *
           * @example
           *
           *     var x32WordArray = x64WordArray.toX32();
           */
          toX32: function() {
            var x64Words = this.words;
            var x64WordsLength = x64Words.length;
            var x32Words = [];
            for (var i = 0; i < x64WordsLength; i++) {
              var x64Word = x64Words[i];
              x32Words.push(x64Word.high);
              x32Words.push(x64Word.low);
            }
            return X32WordArray.create(x32Words, this.sigBytes);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {X64WordArray} The clone.
           *
           * @example
           *
           *     var clone = x64WordArray.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            var words = clone.words = this.words.slice(0);
            var wordsLength = words.length;
            for (var i = 0; i < wordsLength; i++) {
              words[i] = words[i].clone();
            }
            return clone;
          }
        });
      })();
      return CryptoJS2;
    });
  }
});

// node_modules/crypto-js/lib-typedarrays.js
var require_lib_typedarrays = __commonJS({
  "node_modules/crypto-js/lib-typedarrays.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        if (typeof ArrayBuffer != "function") {
          return;
        }
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var superInit = WordArray.init;
        var subInit = WordArray.init = function(typedArray) {
          if (typedArray instanceof ArrayBuffer) {
            typedArray = new Uint8Array(typedArray);
          }
          if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
          }
          if (typedArray instanceof Uint8Array) {
            var typedArrayByteLength = typedArray.byteLength;
            var words = [];
            for (var i = 0; i < typedArrayByteLength; i++) {
              words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
            }
            superInit.call(this, words, typedArrayByteLength);
          } else {
            superInit.apply(this, arguments);
          }
        };
        subInit.prototype = WordArray;
      })();
      return CryptoJS2.lib.WordArray;
    });
  }
});

// node_modules/crypto-js/enc-utf16.js
var require_enc_utf16 = __commonJS({
  "node_modules/crypto-js/enc-utf16.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
          /**
           * Converts a word array to a UTF-16 BE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 BE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 65535;
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 BE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 BE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        C_enc.Utf16LE = {
          /**
           * Converts a word array to a UTF-16 LE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 LE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 65535);
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 LE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 LE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        function swapEndian(word) {
          return word << 8 & 4278255360 | word >>> 8 & 16711935;
        }
        __name(swapEndian, "swapEndian");
      })();
      return CryptoJS2.enc.Utf16;
    });
  }
});

// node_modules/crypto-js/enc-base64.js
var require_enc_base64 = __commonJS({
  "node_modules/crypto-js/enc-base64.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64 = C_enc.Base64 = {
          /**
           * Converts a word array to a Base64 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Base64 string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map2 = this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map2.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map2.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64 string to a word array.
           *
           * @param {string} base64Str The Base64 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
           */
          parse: function(base64Str) {
            var base64StrLength = base64Str.length;
            var map2 = this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map2.length; j++) {
                reverseMap[map2.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map2.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
        __name(parseLoop, "parseLoop");
      })();
      return CryptoJS2.enc.Base64;
    });
  }
});

// node_modules/crypto-js/enc-base64url.js
var require_enc_base64url = __commonJS({
  "node_modules/crypto-js/enc-base64url.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64url = C_enc.Base64url = {
          /**
           * Converts a word array to a Base64url string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {string} The Base64url string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
           */
          stringify: function(wordArray, urlSafe) {
            if (urlSafe === void 0) {
              urlSafe = true;
            }
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map2 = urlSafe ? this._safe_map : this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map2.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map2.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64url string to a word array.
           *
           * @param {string} base64Str The Base64url string.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
           */
          parse: function(base64Str, urlSafe) {
            if (urlSafe === void 0) {
              urlSafe = true;
            }
            var base64StrLength = base64Str.length;
            var map2 = urlSafe ? this._safe_map : this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map2.length; j++) {
                reverseMap[map2.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map2.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
          _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
        __name(parseLoop, "parseLoop");
      })();
      return CryptoJS2.enc.Base64url;
    });
  }
});

// node_modules/crypto-js/md5.js
var require_md5 = __commonJS({
  "node_modules/crypto-js/md5.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var T = [];
        (function() {
          for (var i = 0; i < 64; i++) {
            T[i] = Math2.abs(Math2.sin(i + 1)) * 4294967296 | 0;
          }
        })();
        var MD5 = C_algo.MD5 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878
            ]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var M_offset_0 = M[offset + 0];
            var M_offset_1 = M[offset + 1];
            var M_offset_2 = M[offset + 2];
            var M_offset_3 = M[offset + 3];
            var M_offset_4 = M[offset + 4];
            var M_offset_5 = M[offset + 5];
            var M_offset_6 = M[offset + 6];
            var M_offset_7 = M[offset + 7];
            var M_offset_8 = M[offset + 8];
            var M_offset_9 = M[offset + 9];
            var M_offset_10 = M[offset + 10];
            var M_offset_11 = M[offset + 11];
            var M_offset_12 = M[offset + 12];
            var M_offset_13 = M[offset + 13];
            var M_offset_14 = M[offset + 14];
            var M_offset_15 = M[offset + 15];
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            a = FF(a, b, c, d, M_offset_0, 7, T[0]);
            d = FF(d, a, b, c, M_offset_1, 12, T[1]);
            c = FF(c, d, a, b, M_offset_2, 17, T[2]);
            b = FF(b, c, d, a, M_offset_3, 22, T[3]);
            a = FF(a, b, c, d, M_offset_4, 7, T[4]);
            d = FF(d, a, b, c, M_offset_5, 12, T[5]);
            c = FF(c, d, a, b, M_offset_6, 17, T[6]);
            b = FF(b, c, d, a, M_offset_7, 22, T[7]);
            a = FF(a, b, c, d, M_offset_8, 7, T[8]);
            d = FF(d, a, b, c, M_offset_9, 12, T[9]);
            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
            a = FF(a, b, c, d, M_offset_12, 7, T[12]);
            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
            b = FF(b, c, d, a, M_offset_15, 22, T[15]);
            a = GG(a, b, c, d, M_offset_1, 5, T[16]);
            d = GG(d, a, b, c, M_offset_6, 9, T[17]);
            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
            b = GG(b, c, d, a, M_offset_0, 20, T[19]);
            a = GG(a, b, c, d, M_offset_5, 5, T[20]);
            d = GG(d, a, b, c, M_offset_10, 9, T[21]);
            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
            b = GG(b, c, d, a, M_offset_4, 20, T[23]);
            a = GG(a, b, c, d, M_offset_9, 5, T[24]);
            d = GG(d, a, b, c, M_offset_14, 9, T[25]);
            c = GG(c, d, a, b, M_offset_3, 14, T[26]);
            b = GG(b, c, d, a, M_offset_8, 20, T[27]);
            a = GG(a, b, c, d, M_offset_13, 5, T[28]);
            d = GG(d, a, b, c, M_offset_2, 9, T[29]);
            c = GG(c, d, a, b, M_offset_7, 14, T[30]);
            b = GG(b, c, d, a, M_offset_12, 20, T[31]);
            a = HH(a, b, c, d, M_offset_5, 4, T[32]);
            d = HH(d, a, b, c, M_offset_8, 11, T[33]);
            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
            a = HH(a, b, c, d, M_offset_1, 4, T[36]);
            d = HH(d, a, b, c, M_offset_4, 11, T[37]);
            c = HH(c, d, a, b, M_offset_7, 16, T[38]);
            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
            a = HH(a, b, c, d, M_offset_13, 4, T[40]);
            d = HH(d, a, b, c, M_offset_0, 11, T[41]);
            c = HH(c, d, a, b, M_offset_3, 16, T[42]);
            b = HH(b, c, d, a, M_offset_6, 23, T[43]);
            a = HH(a, b, c, d, M_offset_9, 4, T[44]);
            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
            b = HH(b, c, d, a, M_offset_2, 23, T[47]);
            a = II(a, b, c, d, M_offset_0, 6, T[48]);
            d = II(d, a, b, c, M_offset_7, 10, T[49]);
            c = II(c, d, a, b, M_offset_14, 15, T[50]);
            b = II(b, c, d, a, M_offset_5, 21, T[51]);
            a = II(a, b, c, d, M_offset_12, 6, T[52]);
            d = II(d, a, b, c, M_offset_3, 10, T[53]);
            c = II(c, d, a, b, M_offset_10, 15, T[54]);
            b = II(b, c, d, a, M_offset_1, 21, T[55]);
            a = II(a, b, c, d, M_offset_8, 6, T[56]);
            d = II(d, a, b, c, M_offset_15, 10, T[57]);
            c = II(c, d, a, b, M_offset_6, 15, T[58]);
            b = II(b, c, d, a, M_offset_13, 21, T[59]);
            a = II(a, b, c, d, M_offset_4, 6, T[60]);
            d = II(d, a, b, c, M_offset_11, 10, T[61]);
            c = II(c, d, a, b, M_offset_2, 15, T[62]);
            b = II(b, c, d, a, M_offset_9, 21, T[63]);
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
            var nBitsTotalL = nBitsTotal;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash2 = this._hash;
            var H = hash2.words;
            for (var i = 0; i < 4; i++) {
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash2;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function FF(a, b, c, d, x, s, t) {
          var n = a + (b & c | ~b & d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        __name(FF, "FF");
        function GG(a, b, c, d, x, s, t) {
          var n = a + (b & d | c & ~d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        __name(GG, "GG");
        function HH(a, b, c, d, x, s, t) {
          var n = a + (b ^ c ^ d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        __name(HH, "HH");
        function II(a, b, c, d, x, s, t) {
          var n = a + (c ^ (b | ~d)) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        __name(II, "II");
        C.MD5 = Hasher._createHelper(MD5);
        C.HmacMD5 = Hasher._createHmacHelper(MD5);
      })(Math);
      return CryptoJS2.MD5;
    });
  }
});

// node_modules/crypto-js/sha1.js
var require_sha1 = __commonJS({
  "node_modules/crypto-js/sha1.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var W = [];
        var SHA1 = C_algo.SHA1 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878,
              3285377520
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            var e = H[4];
            for (var i = 0; i < 80; i++) {
              if (i < 16) {
                W[i] = M[offset + i] | 0;
              } else {
                var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                W[i] = n << 1 | n >>> 31;
              }
              var t = (a << 5 | a >>> 27) + e + W[i];
              if (i < 20) {
                t += (b & c | ~b & d) + 1518500249;
              } else if (i < 40) {
                t += (b ^ c ^ d) + 1859775393;
              } else if (i < 60) {
                t += (b & c | b & d | c & d) - 1894007588;
              } else {
                t += (b ^ c ^ d) - 899497514;
              }
              e = d;
              d = c;
              c = b << 30 | b >>> 2;
              b = a;
              a = t;
            }
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
            H[4] = H[4] + e | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C.SHA1 = Hasher._createHelper(SHA1);
        C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
      })();
      return CryptoJS2.SHA1;
    });
  }
});

// node_modules/crypto-js/sha256.js
var require_sha256 = __commonJS({
  "node_modules/crypto-js/sha256.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var H = [];
        var K = [];
        (function() {
          function isPrime(n2) {
            var sqrtN = Math2.sqrt(n2);
            for (var factor = 2; factor <= sqrtN; factor++) {
              if (!(n2 % factor)) {
                return false;
              }
            }
            return true;
          }
          __name(isPrime, "isPrime");
          function getFractionalBits(n2) {
            return (n2 - (n2 | 0)) * 4294967296 | 0;
          }
          __name(getFractionalBits, "getFractionalBits");
          var n = 2;
          var nPrime = 0;
          while (nPrime < 64) {
            if (isPrime(n)) {
              if (nPrime < 8) {
                H[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
              }
              K[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
              nPrime++;
            }
            n++;
          }
        })();
        var W = [];
        var SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init(H.slice(0));
          },
          _doProcessBlock: function(M, offset) {
            var H2 = this._hash.words;
            var a = H2[0];
            var b = H2[1];
            var c = H2[2];
            var d = H2[3];
            var e = H2[4];
            var f = H2[5];
            var g = H2[6];
            var h = H2[7];
            for (var i = 0; i < 64; i++) {
              if (i < 16) {
                W[i] = M[offset + i] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                var gamma1x = W[i - 2];
                var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
              }
              var ch = e & f ^ ~e & g;
              var maj = a & b ^ a & c ^ b & c;
              var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
              var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
              var t1 = h + sigma1 + ch + K[i] + W[i];
              var t2 = sigma0 + maj;
              h = g;
              g = f;
              f = e;
              e = d + t1 | 0;
              d = c;
              c = b;
              b = a;
              a = t1 + t2 | 0;
            }
            H2[0] = H2[0] + a | 0;
            H2[1] = H2[1] + b | 0;
            H2[2] = H2[2] + c | 0;
            H2[3] = H2[3] + d | 0;
            H2[4] = H2[4] + e | 0;
            H2[5] = H2[5] + f | 0;
            H2[6] = H2[6] + g | 0;
            H2[7] = H2[7] + h | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C.SHA256 = Hasher._createHelper(SHA256);
        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
      })(Math);
      return CryptoJS2.SHA256;
    });
  }
});

// node_modules/crypto-js/sha224.js
var require_sha224 = __commonJS({
  "node_modules/crypto-js/sha224.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_sha256());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var SHA224 = C_algo.SHA224 = SHA256.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              3238371032,
              914150663,
              812702999,
              4144912697,
              4290775857,
              1750603025,
              1694076839,
              3204075428
            ]);
          },
          _doFinalize: function() {
            var hash2 = SHA256._doFinalize.call(this);
            hash2.sigBytes -= 4;
            return hash2;
          }
        });
        C.SHA224 = SHA256._createHelper(SHA224);
        C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
      })();
      return CryptoJS2.SHA224;
    });
  }
});

// node_modules/crypto-js/sha512.js
var require_sha512 = __commonJS({
  "node_modules/crypto-js/sha512.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        function X64Word_create() {
          return X64Word.create.apply(X64Word, arguments);
        }
        __name(X64Word_create, "X64Word_create");
        var K = [
          X64Word_create(1116352408, 3609767458),
          X64Word_create(1899447441, 602891725),
          X64Word_create(3049323471, 3964484399),
          X64Word_create(3921009573, 2173295548),
          X64Word_create(961987163, 4081628472),
          X64Word_create(1508970993, 3053834265),
          X64Word_create(2453635748, 2937671579),
          X64Word_create(2870763221, 3664609560),
          X64Word_create(3624381080, 2734883394),
          X64Word_create(310598401, 1164996542),
          X64Word_create(607225278, 1323610764),
          X64Word_create(1426881987, 3590304994),
          X64Word_create(1925078388, 4068182383),
          X64Word_create(2162078206, 991336113),
          X64Word_create(2614888103, 633803317),
          X64Word_create(3248222580, 3479774868),
          X64Word_create(3835390401, 2666613458),
          X64Word_create(4022224774, 944711139),
          X64Word_create(264347078, 2341262773),
          X64Word_create(604807628, 2007800933),
          X64Word_create(770255983, 1495990901),
          X64Word_create(1249150122, 1856431235),
          X64Word_create(1555081692, 3175218132),
          X64Word_create(1996064986, 2198950837),
          X64Word_create(2554220882, 3999719339),
          X64Word_create(2821834349, 766784016),
          X64Word_create(2952996808, 2566594879),
          X64Word_create(3210313671, 3203337956),
          X64Word_create(3336571891, 1034457026),
          X64Word_create(3584528711, 2466948901),
          X64Word_create(113926993, 3758326383),
          X64Word_create(338241895, 168717936),
          X64Word_create(666307205, 1188179964),
          X64Word_create(773529912, 1546045734),
          X64Word_create(1294757372, 1522805485),
          X64Word_create(1396182291, 2643833823),
          X64Word_create(1695183700, 2343527390),
          X64Word_create(1986661051, 1014477480),
          X64Word_create(2177026350, 1206759142),
          X64Word_create(2456956037, 344077627),
          X64Word_create(2730485921, 1290863460),
          X64Word_create(2820302411, 3158454273),
          X64Word_create(3259730800, 3505952657),
          X64Word_create(3345764771, 106217008),
          X64Word_create(3516065817, 3606008344),
          X64Word_create(3600352804, 1432725776),
          X64Word_create(4094571909, 1467031594),
          X64Word_create(275423344, 851169720),
          X64Word_create(430227734, 3100823752),
          X64Word_create(506948616, 1363258195),
          X64Word_create(659060556, 3750685593),
          X64Word_create(883997877, 3785050280),
          X64Word_create(958139571, 3318307427),
          X64Word_create(1322822218, 3812723403),
          X64Word_create(1537002063, 2003034995),
          X64Word_create(1747873779, 3602036899),
          X64Word_create(1955562222, 1575990012),
          X64Word_create(2024104815, 1125592928),
          X64Word_create(2227730452, 2716904306),
          X64Word_create(2361852424, 442776044),
          X64Word_create(2428436474, 593698344),
          X64Word_create(2756734187, 3733110249),
          X64Word_create(3204031479, 2999351573),
          X64Word_create(3329325298, 3815920427),
          X64Word_create(3391569614, 3928383900),
          X64Word_create(3515267271, 566280711),
          X64Word_create(3940187606, 3454069534),
          X64Word_create(4118630271, 4000239992),
          X64Word_create(116418474, 1914138554),
          X64Word_create(174292421, 2731055270),
          X64Word_create(289380356, 3203993006),
          X64Word_create(460393269, 320620315),
          X64Word_create(685471733, 587496836),
          X64Word_create(852142971, 1086792851),
          X64Word_create(1017036298, 365543100),
          X64Word_create(1126000580, 2618297676),
          X64Word_create(1288033470, 3409855158),
          X64Word_create(1501505948, 4234509866),
          X64Word_create(1607167915, 987167468),
          X64Word_create(1816402316, 1246189591)
        ];
        var W = [];
        (function() {
          for (var i = 0; i < 80; i++) {
            W[i] = X64Word_create();
          }
        })();
        var SHA512 = C_algo.SHA512 = Hasher.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(1779033703, 4089235720),
              new X64Word.init(3144134277, 2227873595),
              new X64Word.init(1013904242, 4271175723),
              new X64Word.init(2773480762, 1595750129),
              new X64Word.init(1359893119, 2917565137),
              new X64Word.init(2600822924, 725511199),
              new X64Word.init(528734635, 4215389547),
              new X64Word.init(1541459225, 327033209)
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var H0 = H[0];
            var H1 = H[1];
            var H2 = H[2];
            var H3 = H[3];
            var H4 = H[4];
            var H5 = H[5];
            var H6 = H[6];
            var H7 = H[7];
            var H0h = H0.high;
            var H0l = H0.low;
            var H1h = H1.high;
            var H1l = H1.low;
            var H2h = H2.high;
            var H2l = H2.low;
            var H3h = H3.high;
            var H3l = H3.low;
            var H4h = H4.high;
            var H4l = H4.low;
            var H5h = H5.high;
            var H5l = H5.low;
            var H6h = H6.high;
            var H6l = H6.low;
            var H7h = H7.high;
            var H7l = H7.low;
            var ah = H0h;
            var al = H0l;
            var bh = H1h;
            var bl = H1l;
            var ch = H2h;
            var cl = H2l;
            var dh = H3h;
            var dl = H3l;
            var eh = H4h;
            var el = H4l;
            var fh = H5h;
            var fl = H5l;
            var gh = H6h;
            var gl = H6l;
            var hh = H7h;
            var hl = H7l;
            for (var i = 0; i < 80; i++) {
              var Wil;
              var Wih;
              var Wi = W[i];
              if (i < 16) {
                Wih = Wi.high = M[offset + i * 2] | 0;
                Wil = Wi.low = M[offset + i * 2 + 1] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0xh = gamma0x.high;
                var gamma0xl = gamma0x.low;
                var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                var gamma1x = W[i - 2];
                var gamma1xh = gamma1x.high;
                var gamma1xl = gamma1x.low;
                var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                var Wi7 = W[i - 7];
                var Wi7h = Wi7.high;
                var Wi7l = Wi7.low;
                var Wi16 = W[i - 16];
                var Wi16h = Wi16.high;
                var Wi16l = Wi16.low;
                Wil = gamma0l + Wi7l;
                Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                Wil = Wil + gamma1l;
                Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                Wil = Wil + Wi16l;
                Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                Wi.high = Wih;
                Wi.low = Wil;
              }
              var chh = eh & fh ^ ~eh & gh;
              var chl = el & fl ^ ~el & gl;
              var majh = ah & bh ^ ah & ch ^ bh & ch;
              var majl = al & bl ^ al & cl ^ bl & cl;
              var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
              var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
              var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
              var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
              var Ki = K[i];
              var Kih = Ki.high;
              var Kil = Ki.low;
              var t1l = hl + sigma1l;
              var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
              var t1l = t1l + chl;
              var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
              var t1l = t1l + Kil;
              var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
              var t1l = t1l + Wil;
              var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
              var t2l = sigma0l + majl;
              var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el;
              el = dl + t1l | 0;
              eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              al = t1l + t2l | 0;
              ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
            }
            H0l = H0.low = H0l + al;
            H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
            H1l = H1.low = H1l + bl;
            H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
            H2l = H2.low = H2l + cl;
            H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
            H3l = H3.low = H3l + dl;
            H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
            H4l = H4.low = H4l + el;
            H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
            H5l = H5.low = H5l + fl;
            H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
            H6l = H6.low = H6l + gl;
            H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
            H7l = H7.low = H7l + hl;
            H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var hash2 = this._hash.toX32();
            return hash2;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          },
          blockSize: 1024 / 32
        });
        C.SHA512 = Hasher._createHelper(SHA512);
        C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
      })();
      return CryptoJS2.SHA512;
    });
  }
});

// node_modules/crypto-js/sha384.js
var require_sha384 = __commonJS({
  "node_modules/crypto-js/sha384.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_x64_core(), require_sha512());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./sha512"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        var SHA512 = C_algo.SHA512;
        var SHA384 = C_algo.SHA384 = SHA512.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(3418070365, 3238371032),
              new X64Word.init(1654270250, 914150663),
              new X64Word.init(2438529370, 812702999),
              new X64Word.init(355462360, 4144912697),
              new X64Word.init(1731405415, 4290775857),
              new X64Word.init(2394180231, 1750603025),
              new X64Word.init(3675008525, 1694076839),
              new X64Word.init(1203062813, 3204075428)
            ]);
          },
          _doFinalize: function() {
            var hash2 = SHA512._doFinalize.call(this);
            hash2.sigBytes -= 16;
            return hash2;
          }
        });
        C.SHA384 = SHA512._createHelper(SHA384);
        C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
      })();
      return CryptoJS2.SHA384;
    });
  }
});

// node_modules/crypto-js/sha3.js
var require_sha3 = __commonJS({
  "node_modules/crypto-js/sha3.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var C_algo = C.algo;
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        (function() {
          var x = 1, y = 0;
          for (var t = 0; t < 24; t++) {
            RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
            var newX = y % 5;
            var newY = (2 * x + 3 * y) % 5;
            x = newX;
            y = newY;
          }
          for (var x = 0; x < 5; x++) {
            for (var y = 0; y < 5; y++) {
              PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
            }
          }
          var LFSR = 1;
          for (var i = 0; i < 24; i++) {
            var roundConstantMsw = 0;
            var roundConstantLsw = 0;
            for (var j = 0; j < 7; j++) {
              if (LFSR & 1) {
                var bitPosition = (1 << j) - 1;
                if (bitPosition < 32) {
                  roundConstantLsw ^= 1 << bitPosition;
                } else {
                  roundConstantMsw ^= 1 << bitPosition - 32;
                }
              }
              if (LFSR & 128) {
                LFSR = LFSR << 1 ^ 113;
              } else {
                LFSR <<= 1;
              }
            }
            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
          }
        })();
        var T = [];
        (function() {
          for (var i = 0; i < 25; i++) {
            T[i] = X64Word.create();
          }
        })();
        var SHA3 = C_algo.SHA3 = Hasher.extend({
          /**
           * Configuration options.
           *
           * @property {number} outputLength
           *   The desired number of bits in the output hash.
           *   Only values permitted are: 224, 256, 384, 512.
           *   Default: 512
           */
          cfg: Hasher.cfg.extend({
            outputLength: 512
          }),
          _doReset: function() {
            var state = this._state = [];
            for (var i = 0; i < 25; i++) {
              state[i] = new X64Word.init();
            }
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          },
          _doProcessBlock: function(M, offset) {
            var state = this._state;
            var nBlockSizeLanes = this.blockSize / 2;
            for (var i = 0; i < nBlockSizeLanes; i++) {
              var M2i = M[offset + 2 * i];
              var M2i1 = M[offset + 2 * i + 1];
              M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
              M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
              var lane = state[i];
              lane.high ^= M2i1;
              lane.low ^= M2i;
            }
            for (var round = 0; round < 24; round++) {
              for (var x = 0; x < 5; x++) {
                var tMsw = 0, tLsw = 0;
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  tMsw ^= lane.high;
                  tLsw ^= lane.low;
                }
                var Tx = T[x];
                Tx.high = tMsw;
                Tx.low = tLsw;
              }
              for (var x = 0; x < 5; x++) {
                var Tx4 = T[(x + 4) % 5];
                var Tx1 = T[(x + 1) % 5];
                var Tx1Msw = Tx1.high;
                var Tx1Lsw = Tx1.low;
                var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  lane.high ^= tMsw;
                  lane.low ^= tLsw;
                }
              }
              for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                var tMsw;
                var tLsw;
                var lane = state[laneIndex];
                var laneMsw = lane.high;
                var laneLsw = lane.low;
                var rhoOffset = RHO_OFFSETS[laneIndex];
                if (rhoOffset < 32) {
                  tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                  tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                } else {
                  tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                  tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                }
                var TPiLane = T[PI_INDEXES[laneIndex]];
                TPiLane.high = tMsw;
                TPiLane.low = tLsw;
              }
              var T0 = T[0];
              var state0 = state[0];
              T0.high = state0.high;
              T0.low = state0.low;
              for (var x = 0; x < 5; x++) {
                for (var y = 0; y < 5; y++) {
                  var laneIndex = x + 5 * y;
                  var lane = state[laneIndex];
                  var TLane = T[laneIndex];
                  var Tx1Lane = T[(x + 1) % 5 + 5 * y];
                  var Tx2Lane = T[(x + 2) % 5 + 5 * y];
                  lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                  lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                }
              }
              var lane = state[0];
              var roundConstant = ROUND_CONSTANTS[round];
              lane.high ^= roundConstant.high;
              lane.low ^= roundConstant.low;
            }
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            var blockSizeBits = this.blockSize * 32;
            dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
            dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var state = this._state;
            var outputLengthBytes = this.cfg.outputLength / 8;
            var outputLengthLanes = outputLengthBytes / 8;
            var hashWords = [];
            for (var i = 0; i < outputLengthLanes; i++) {
              var lane = state[i];
              var laneMsw = lane.high;
              var laneLsw = lane.low;
              laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
              laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
              hashWords.push(laneLsw);
              hashWords.push(laneMsw);
            }
            return new WordArray.init(hashWords, outputLengthBytes);
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            var state = clone._state = this._state.slice(0);
            for (var i = 0; i < 25; i++) {
              state[i] = state[i].clone();
            }
            return clone;
          }
        });
        C.SHA3 = Hasher._createHelper(SHA3);
        C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
      })(Math);
      return CryptoJS2.SHA3;
    });
  }
});

// node_modules/crypto-js/ripemd160.js
var require_ripemd160 = __commonJS({
  "node_modules/crypto-js/ripemd160.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var _zl = WordArray.create([
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ]);
        var _zr = WordArray.create([
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ]);
        var _sl = WordArray.create([
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ]);
        var _sr = WordArray.create([
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ]);
        var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
        var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
        var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
          _doReset: function() {
            this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var hl = _hl.words;
            var hr = _hr.words;
            var zl = _zl.words;
            var zr = _zr.words;
            var sl = _sl.words;
            var sr = _sr.words;
            var al, bl, cl, dl, el;
            var ar, br, cr, dr, er;
            ar = al = H[0];
            br = bl = H[1];
            cr = cl = H[2];
            dr = dl = H[3];
            er = el = H[4];
            var t;
            for (var i = 0; i < 80; i += 1) {
              t = al + M[offset + zl[i]] | 0;
              if (i < 16) {
                t += f1(bl, cl, dl) + hl[0];
              } else if (i < 32) {
                t += f2(bl, cl, dl) + hl[1];
              } else if (i < 48) {
                t += f3(bl, cl, dl) + hl[2];
              } else if (i < 64) {
                t += f4(bl, cl, dl) + hl[3];
              } else {
                t += f5(bl, cl, dl) + hl[4];
              }
              t = t | 0;
              t = rotl(t, sl[i]);
              t = t + el | 0;
              al = el;
              el = dl;
              dl = rotl(cl, 10);
              cl = bl;
              bl = t;
              t = ar + M[offset + zr[i]] | 0;
              if (i < 16) {
                t += f5(br, cr, dr) + hr[0];
              } else if (i < 32) {
                t += f4(br, cr, dr) + hr[1];
              } else if (i < 48) {
                t += f3(br, cr, dr) + hr[2];
              } else if (i < 64) {
                t += f2(br, cr, dr) + hr[3];
              } else {
                t += f1(br, cr, dr) + hr[4];
              }
              t = t | 0;
              t = rotl(t, sr[i]);
              t = t + er | 0;
              ar = er;
              er = dr;
              dr = rotl(cr, 10);
              cr = br;
              br = t;
            }
            t = H[1] + cl + dr | 0;
            H[1] = H[2] + dl + er | 0;
            H[2] = H[3] + el + ar | 0;
            H[3] = H[4] + al + br | 0;
            H[4] = H[0] + bl + cr | 0;
            H[0] = t;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash2 = this._hash;
            var H = hash2.words;
            for (var i = 0; i < 5; i++) {
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash2;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function f1(x, y, z) {
          return x ^ y ^ z;
        }
        __name(f1, "f1");
        function f2(x, y, z) {
          return x & y | ~x & z;
        }
        __name(f2, "f2");
        function f3(x, y, z) {
          return (x | ~y) ^ z;
        }
        __name(f3, "f3");
        function f4(x, y, z) {
          return x & z | y & ~z;
        }
        __name(f4, "f4");
        function f5(x, y, z) {
          return x ^ (y | ~z);
        }
        __name(f5, "f5");
        function rotl(x, n) {
          return x << n | x >>> 32 - n;
        }
        __name(rotl, "rotl");
        C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
        C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
      })(Math);
      return CryptoJS2.RIPEMD160;
    });
  }
});

// node_modules/crypto-js/hmac.js
var require_hmac = __commonJS({
  "node_modules/crypto-js/hmac.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C.algo;
        var HMAC = C_algo.HMAC = Base.extend({
          /**
           * Initializes a newly created HMAC.
           *
           * @param {Hasher} hasher The hash algorithm to use.
           * @param {WordArray|string} key The secret key.
           *
           * @example
           *
           *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
           */
          init: function(hasher, key) {
            hasher = this._hasher = new hasher.init();
            if (typeof key == "string") {
              key = Utf8.parse(key);
            }
            var hasherBlockSize = hasher.blockSize;
            var hasherBlockSizeBytes = hasherBlockSize * 4;
            if (key.sigBytes > hasherBlockSizeBytes) {
              key = hasher.finalize(key);
            }
            key.clamp();
            var oKey = this._oKey = key.clone();
            var iKey = this._iKey = key.clone();
            var oKeyWords = oKey.words;
            var iKeyWords = iKey.words;
            for (var i = 0; i < hasherBlockSize; i++) {
              oKeyWords[i] ^= 1549556828;
              iKeyWords[i] ^= 909522486;
            }
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
            this.reset();
          },
          /**
           * Resets this HMAC to its initial state.
           *
           * @example
           *
           *     hmacHasher.reset();
           */
          reset: function() {
            var hasher = this._hasher;
            hasher.reset();
            hasher.update(this._iKey);
          },
          /**
           * Updates this HMAC with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {HMAC} This HMAC instance.
           *
           * @example
           *
           *     hmacHasher.update('message');
           *     hmacHasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._hasher.update(messageUpdate);
            return this;
          },
          /**
           * Finalizes the HMAC computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The HMAC.
           *
           * @example
           *
           *     var hmac = hmacHasher.finalize();
           *     var hmac = hmacHasher.finalize('message');
           *     var hmac = hmacHasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            var hasher = this._hasher;
            var innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
            return hmac;
          }
        });
      })();
    });
  }
});

// node_modules/crypto-js/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "node_modules/crypto-js/pbkdf2.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_sha256(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var HMAC = C_algo.HMAC;
        var PBKDF2 = C_algo.PBKDF2 = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hasher to use. Default: SHA256
           * @property {number} iterations The number of iterations to perform. Default: 250000
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: SHA256,
            iterations: 25e4
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.PBKDF2.create();
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Computes the Password-Based Key Derivation Function 2.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var cfg = this.cfg;
            var hmac = HMAC.create(cfg.hasher, password);
            var derivedKey = WordArray.create();
            var blockIndex = WordArray.create([1]);
            var derivedKeyWords = derivedKey.words;
            var blockIndexWords = blockIndex.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              var block = hmac.update(salt).finalize(blockIndex);
              hmac.reset();
              var blockWords = block.words;
              var blockWordsLength = blockWords.length;
              var intermediate = block;
              for (var i = 1; i < iterations; i++) {
                intermediate = hmac.finalize(intermediate);
                hmac.reset();
                var intermediateWords = intermediate.words;
                for (var j = 0; j < blockWordsLength; j++) {
                  blockWords[j] ^= intermediateWords[j];
                }
              }
              derivedKey.concat(block);
              blockIndexWords[0]++;
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.PBKDF2 = function(password, salt, cfg) {
          return PBKDF2.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS2.PBKDF2;
    });
  }
});

// node_modules/crypto-js/evpkdf.js
var require_evpkdf = __commonJS({
  "node_modules/crypto-js/evpkdf.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_sha1(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var MD5 = C_algo.MD5;
        var EvpKDF = C_algo.EvpKDF = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hash algorithm to use. Default: MD5
           * @property {number} iterations The number of iterations to perform. Default: 1
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: MD5,
            iterations: 1
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.EvpKDF.create();
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Derives a key from a password.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var block;
            var cfg = this.cfg;
            var hasher = cfg.hasher.create();
            var derivedKey = WordArray.create();
            var derivedKeyWords = derivedKey.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              if (block) {
                hasher.update(block);
              }
              block = hasher.update(password).finalize(salt);
              hasher.reset();
              for (var i = 1; i < iterations; i++) {
                block = hasher.finalize(block);
                hasher.reset();
              }
              derivedKey.concat(block);
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.EvpKDF = function(password, salt, cfg) {
          return EvpKDF.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS2.EvpKDF;
    });
  }
});

// node_modules/crypto-js/cipher-core.js
var require_cipher_core = __commonJS({
  "node_modules/crypto-js/cipher-core.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_evpkdf());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./evpkdf"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.lib.Cipher || function(undefined2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        var Cipher2 = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           *
           * @property {WordArray} iv The IV to use for this operation.
           */
          cfg: Base.extend(),
          /**
           * Creates this cipher in encryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
           */
          createEncryptor: function(key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
          },
          /**
           * Creates this cipher in decryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
           */
          createDecryptor: function(key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
          },
          /**
           * Initializes a newly created cipher.
           *
           * @param {number} xformMode Either the encryption or decryption transormation mode constant.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
           */
          init: function(xformMode, key, cfg) {
            this.cfg = this.cfg.extend(cfg);
            this._xformMode = xformMode;
            this._key = key;
            this.reset();
          },
          /**
           * Resets this cipher to its initial state.
           *
           * @example
           *
           *     cipher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Adds data to be encrypted or decrypted.
           *
           * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
           *
           * @return {WordArray} The data after processing.
           *
           * @example
           *
           *     var encrypted = cipher.process('data');
           *     var encrypted = cipher.process(wordArray);
           */
          process: function(dataUpdate) {
            this._append(dataUpdate);
            return this._process();
          },
          /**
           * Finalizes the encryption or decryption process.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
           *
           * @return {WordArray} The data after final processing.
           *
           * @example
           *
           *     var encrypted = cipher.finalize();
           *     var encrypted = cipher.finalize('data');
           *     var encrypted = cipher.finalize(wordArray);
           */
          finalize: function(dataUpdate) {
            if (dataUpdate) {
              this._append(dataUpdate);
            }
            var finalProcessedData = this._doFinalize();
            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          /**
           * Creates shortcut functions to a cipher's object interface.
           *
           * @param {Cipher} cipher The cipher to create a helper for.
           *
           * @return {Object} An object with encrypt and decrypt shortcut functions.
           *
           * @static
           *
           * @example
           *
           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
           */
          _createHelper: function() {
            function selectCipherStrategy(key) {
              if (typeof key == "string") {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }
            __name(selectCipherStrategy, "selectCipherStrategy");
            return function(cipher) {
              return {
                encrypt: function(message, key, cfg) {
                  return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                },
                decrypt: function(ciphertext, key, cfg) {
                  return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                }
              };
            };
          }()
        });
        var StreamCipher = C_lib.StreamCipher = Cipher2.extend({
          _doFinalize: function() {
            var finalProcessedBlocks = this._process(true);
            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        var C_mode = C.mode = {};
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          /**
           * Creates this mode for encryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
           */
          createEncryptor: function(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },
          /**
           * Creates this mode for decryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
           */
          createDecryptor: function(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },
          /**
           * Initializes a newly created mode.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
           */
          init: function(cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        var CBC = C_mode.CBC = function() {
          var CBC2 = BlockCipherMode.extend();
          CBC2.Encryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              xorBlock.call(this, words, offset, blockSize);
              cipher.encryptBlock(words, offset);
              this._prevBlock = words.slice(offset, offset + blockSize);
            }
          });
          CBC2.Decryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words.slice(offset, offset + blockSize);
              cipher.decryptBlock(words, offset);
              xorBlock.call(this, words, offset, blockSize);
              this._prevBlock = thisBlock;
            }
          });
          function xorBlock(words, offset, blockSize) {
            var block;
            var iv = this._iv;
            if (iv) {
              block = iv;
              this._iv = undefined2;
            } else {
              block = this._prevBlock;
            }
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= block[i];
            }
          }
          __name(xorBlock, "xorBlock");
          return CBC2;
        }();
        var C_pad = C.pad = {};
        var Pkcs7 = C_pad.Pkcs7 = {
          /**
           * Pads data using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to pad.
           * @param {number} blockSize The multiple that the data should be padded to.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
           */
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
            var paddingWords = [];
            for (var i = 0; i < nPaddingBytes; i += 4) {
              paddingWords.push(paddingWord);
            }
            var padding = WordArray.create(paddingWords, nPaddingBytes);
            data.concat(padding);
          },
          /**
           * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to unpad.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.unpad(wordArray);
           */
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        var BlockCipher = C_lib.BlockCipher = Cipher2.extend({
          /**
           * Configuration options.
           *
           * @property {Mode} mode The block mode to use. Default: CBC
           * @property {Padding} padding The padding strategy to use. Default: Pkcs7
           */
          cfg: Cipher2.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function() {
            var modeCreator;
            Cipher2.reset.call(this);
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              modeCreator = mode.createEncryptor;
            } else {
              modeCreator = mode.createDecryptor;
              this._minBufferSize = 1;
            }
            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function(words, offset) {
            this._mode.processBlock(words, offset);
          },
          _doFinalize: function() {
            var finalProcessedBlocks;
            var padding = this.cfg.padding;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              padding.pad(this._data, this.blockSize);
              finalProcessedBlocks = this._process(true);
            } else {
              finalProcessedBlocks = this._process(true);
              padding.unpad(finalProcessedBlocks);
            }
            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        var CipherParams = C_lib.CipherParams = Base.extend({
          /**
           * Initializes a newly created cipher params object.
           *
           * @param {Object} cipherParams An object with any of the possible cipher parameters.
           *
           * @example
           *
           *     var cipherParams = CryptoJS.lib.CipherParams.create({
           *         ciphertext: ciphertextWordArray,
           *         key: keyWordArray,
           *         iv: ivWordArray,
           *         salt: saltWordArray,
           *         algorithm: CryptoJS.algo.AES,
           *         mode: CryptoJS.mode.CBC,
           *         padding: CryptoJS.pad.PKCS7,
           *         blockSize: 4,
           *         formatter: CryptoJS.format.OpenSSL
           *     });
           */
          init: function(cipherParams) {
            this.mixIn(cipherParams);
          },
          /**
           * Converts this cipher params object to a string.
           *
           * @param {Format} formatter (Optional) The formatting strategy to use.
           *
           * @return {string} The stringified cipher params.
           *
           * @throws Error If neither the formatter nor the default formatter is set.
           *
           * @example
           *
           *     var string = cipherParams + '';
           *     var string = cipherParams.toString();
           *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
           */
          toString: function(formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        var C_format = C.format = {};
        var OpenSSLFormatter = C_format.OpenSSL = {
          /**
           * Converts a cipher params object to an OpenSSL-compatible string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The OpenSSL-compatible string.
           *
           * @static
           *
           * @example
           *
           *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            var wordArray;
            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt;
            if (salt) {
              wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }
            return wordArray.toString(Base64);
          },
          /**
           * Converts an OpenSSL-compatible string to a cipher params object.
           *
           * @param {string} openSSLStr The OpenSSL-compatible string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
           */
          parse: function(openSSLStr) {
            var salt;
            var ciphertext = Base64.parse(openSSLStr);
            var ciphertextWords = ciphertext.words;
            if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
              salt = WordArray.create(ciphertextWords.slice(2, 4));
              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }
            return CipherParams.create({ ciphertext, salt });
          }
        };
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          /**
           * Configuration options.
           *
           * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
           */
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),
          /**
           * Encrypts a message.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message, key, cfg) {
            cfg = this.cfg.extend(cfg);
            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message);
            var cipherCfg = encryptor.cfg;
            return CipherParams.create({
              ciphertext,
              key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },
          /**
           * Decrypts serialized ciphertext.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, key, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },
          /**
           * Converts serialized ciphertext to CipherParams,
           * else assumed CipherParams already and returns ciphertext unchanged.
           *
           * @param {CipherParams|string} ciphertext The ciphertext.
           * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
           *
           * @return {CipherParams} The unserialized ciphertext.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
           */
          _parse: function(ciphertext, format2) {
            if (typeof ciphertext == "string") {
              return format2.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        var C_kdf = C.kdf = {};
        var OpenSSLKdf = C_kdf.OpenSSL = {
          /**
           * Derives a key and IV from a password.
           *
           * @param {string} password The password to derive from.
           * @param {number} keySize The size in words of the key to generate.
           * @param {number} ivSize The size in words of the IV to generate.
           * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
           *
           * @return {CipherParams} A cipher params object with the key, IV, and salt.
           *
           * @static
           *
           * @example
           *
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
           */
          execute: function(password, keySize, ivSize, salt, hasher) {
            if (!salt) {
              salt = WordArray.random(64 / 8);
            }
            if (!hasher) {
              var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
            } else {
              var key = EvpKDF.create({ keySize: keySize + ivSize, hasher }).compute(password, salt);
            }
            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4;
            return CipherParams.create({ key, iv, salt });
          }
        };
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          /**
           * Configuration options.
           *
           * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
           */
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),
          /**
           * Encrypts a message using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message, password, cfg) {
            cfg = this.cfg.extend(cfg);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);
            cfg.iv = derivedParams.iv;
            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },
          /**
           * Decrypts serialized ciphertext using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, password, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);
            cfg.iv = derivedParams.iv;
            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();
    });
  }
});

// node_modules/crypto-js/mode-cfb.js
var require_mode_cfb = __commonJS({
  "node_modules/crypto-js/mode-cfb.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.CFB = function() {
        var CFB = CryptoJS2.lib.BlockCipherMode.extend();
        CFB.Encryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = words.slice(offset, offset + blockSize);
          }
        });
        CFB.Decryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var thisBlock = words.slice(offset, offset + blockSize);
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = thisBlock;
          }
        });
        function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
          var keystream;
          var iv = this._iv;
          if (iv) {
            keystream = iv.slice(0);
            this._iv = void 0;
          } else {
            keystream = this._prevBlock;
          }
          cipher.encryptBlock(keystream, 0);
          for (var i = 0; i < blockSize; i++) {
            words[offset + i] ^= keystream[i];
          }
        }
        __name(generateKeystreamAndEncrypt, "generateKeystreamAndEncrypt");
        return CFB;
      }();
      return CryptoJS2.mode.CFB;
    });
  }
});

// node_modules/crypto-js/mode-ctr.js
var require_mode_ctr = __commonJS({
  "node_modules/crypto-js/mode-ctr.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.CTR = function() {
        var CTR = CryptoJS2.lib.BlockCipherMode.extend();
        var Encryptor = CTR.Encryptor = CTR.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        CTR.Decryptor = Encryptor;
        return CTR;
      }();
      return CryptoJS2.mode.CTR;
    });
  }
});

// node_modules/crypto-js/mode-ctr-gladman.js
var require_mode_ctr_gladman = __commonJS({
  "node_modules/crypto-js/mode-ctr-gladman.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.CTRGladman = function() {
        var CTRGladman = CryptoJS2.lib.BlockCipherMode.extend();
        function incWord(word) {
          if ((word >> 24 & 255) === 255) {
            var b1 = word >> 16 & 255;
            var b2 = word >> 8 & 255;
            var b3 = word & 255;
            if (b1 === 255) {
              b1 = 0;
              if (b2 === 255) {
                b2 = 0;
                if (b3 === 255) {
                  b3 = 0;
                } else {
                  ++b3;
                }
              } else {
                ++b2;
              }
            } else {
              ++b1;
            }
            word = 0;
            word += b1 << 16;
            word += b2 << 8;
            word += b3;
          } else {
            word += 1 << 24;
          }
          return word;
        }
        __name(incWord, "incWord");
        function incCounter(counter) {
          if ((counter[0] = incWord(counter[0])) === 0) {
            counter[1] = incWord(counter[1]);
          }
          return counter;
        }
        __name(incCounter, "incCounter");
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            incCounter(counter);
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        CTRGladman.Decryptor = Encryptor;
        return CTRGladman;
      }();
      return CryptoJS2.mode.CTRGladman;
    });
  }
});

// node_modules/crypto-js/mode-ofb.js
var require_mode_ofb = __commonJS({
  "node_modules/crypto-js/mode-ofb.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.OFB = function() {
        var OFB = CryptoJS2.lib.BlockCipherMode.extend();
        var Encryptor = OFB.Encryptor = OFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var keystream = this._keystream;
            if (iv) {
              keystream = this._keystream = iv.slice(0);
              this._iv = void 0;
            }
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        OFB.Decryptor = Encryptor;
        return OFB;
      }();
      return CryptoJS2.mode.OFB;
    });
  }
});

// node_modules/crypto-js/mode-ecb.js
var require_mode_ecb = __commonJS({
  "node_modules/crypto-js/mode-ecb.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.ECB = function() {
        var ECB = CryptoJS2.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.encryptBlock(words, offset);
          }
        });
        ECB.Decryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.decryptBlock(words, offset);
          }
        });
        return ECB;
      }();
      return CryptoJS2.mode.ECB;
    });
  }
});

// node_modules/crypto-js/pad-ansix923.js
var require_pad_ansix923 = __commonJS({
  "node_modules/crypto-js/pad-ansix923.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.AnsiX923 = {
        pad: function(data, blockSize) {
          var dataSigBytes = data.sigBytes;
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
          var lastBytePos = dataSigBytes + nPaddingBytes - 1;
          data.clamp();
          data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
          data.sigBytes += nPaddingBytes;
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS2.pad.Ansix923;
    });
  }
});

// node_modules/crypto-js/pad-iso10126.js
var require_pad_iso10126 = __commonJS({
  "node_modules/crypto-js/pad-iso10126.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.Iso10126 = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
          data.concat(CryptoJS2.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS2.lib.WordArray.create([nPaddingBytes << 24], 1));
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS2.pad.Iso10126;
    });
  }
});

// node_modules/crypto-js/pad-iso97971.js
var require_pad_iso97971 = __commonJS({
  "node_modules/crypto-js/pad-iso97971.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.Iso97971 = {
        pad: function(data, blockSize) {
          data.concat(CryptoJS2.lib.WordArray.create([2147483648], 1));
          CryptoJS2.pad.ZeroPadding.pad(data, blockSize);
        },
        unpad: function(data) {
          CryptoJS2.pad.ZeroPadding.unpad(data);
          data.sigBytes--;
        }
      };
      return CryptoJS2.pad.Iso97971;
    });
  }
});

// node_modules/crypto-js/pad-zeropadding.js
var require_pad_zeropadding = __commonJS({
  "node_modules/crypto-js/pad-zeropadding.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.ZeroPadding = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          data.clamp();
          data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
        },
        unpad: function(data) {
          var dataWords = data.words;
          var i = data.sigBytes - 1;
          for (var i = data.sigBytes - 1; i >= 0; i--) {
            if (dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 255) {
              data.sigBytes = i + 1;
              break;
            }
          }
        }
      };
      return CryptoJS2.pad.ZeroPadding;
    });
  }
});

// node_modules/crypto-js/pad-nopadding.js
var require_pad_nopadding = __commonJS({
  "node_modules/crypto-js/pad-nopadding.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.NoPadding = {
        pad: function() {
        },
        unpad: function() {
        }
      };
      return CryptoJS2.pad.NoPadding;
    });
  }
});

// node_modules/crypto-js/format-hex.js
var require_format_hex = __commonJS({
  "node_modules/crypto-js/format-hex.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(undefined2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var CipherParams = C_lib.CipherParams;
        var C_enc = C.enc;
        var Hex = C_enc.Hex;
        var C_format = C.format;
        var HexFormatter = C_format.Hex = {
          /**
           * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The hexadecimally encoded string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            return cipherParams.ciphertext.toString(Hex);
          },
          /**
           * Converts a hexadecimally encoded ciphertext string to a cipher params object.
           *
           * @param {string} input The hexadecimally encoded string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
           */
          parse: function(input) {
            var ciphertext = Hex.parse(input);
            return CipherParams.create({ ciphertext });
          }
        };
      })();
      return CryptoJS2.format.Hex;
    });
  }
});

// node_modules/crypto-js/aes.js
var require_aes = __commonJS({
  "node_modules/crypto-js/aes.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        (function() {
          var d = [];
          for (var i = 0; i < 256; i++) {
            if (i < 128) {
              d[i] = i << 1;
            } else {
              d[i] = i << 1 ^ 283;
            }
          }
          var x = 0;
          var xi = 0;
          for (var i = 0; i < 256; i++) {
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ sx & 255 ^ 99;
            SBOX[x] = sx;
            INV_SBOX[sx] = x;
            var x2 = d[x];
            var x4 = d[x2];
            var x8 = d[x4];
            var t = d[sx] * 257 ^ sx * 16843008;
            SUB_MIX_0[x] = t << 24 | t >>> 8;
            SUB_MIX_1[x] = t << 16 | t >>> 16;
            SUB_MIX_2[x] = t << 8 | t >>> 24;
            SUB_MIX_3[x] = t;
            var t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
            INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
            INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
            INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
            INV_SUB_MIX_3[sx] = t;
            if (!x) {
              x = xi = 1;
            } else {
              x = x2 ^ d[d[d[x8 ^ x2]]];
              xi ^= d[d[xi]];
            }
          }
        })();
        var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var AES = C_algo.AES = BlockCipher.extend({
          _doReset: function() {
            var t;
            if (this._nRounds && this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            var nRounds = this._nRounds = keySize + 6;
            var ksRows = (nRounds + 1) * 4;
            var keySchedule = this._keySchedule = [];
            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                keySchedule[ksRow] = keyWords[ksRow];
              } else {
                t = keySchedule[ksRow - 1];
                if (!(ksRow % keySize)) {
                  t = t << 8 | t >>> 24;
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                  t ^= RCON[ksRow / keySize | 0] << 24;
                } else if (keySize > 6 && ksRow % keySize == 4) {
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                }
                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
              }
            }
            var invKeySchedule = this._invKeySchedule = [];
            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              var ksRow = ksRows - invKsRow;
              if (invKsRow % 4) {
                var t = keySchedule[ksRow];
              } else {
                var t = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t;
              } else {
                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t & 255]];
              }
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function(M, offset) {
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
          },
          _doCryptBlock: function(M, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
            var nRounds = this._nRounds;
            var s0 = M[offset] ^ keySchedule[0];
            var s1 = M[offset + 1] ^ keySchedule[1];
            var s2 = M[offset + 2] ^ keySchedule[2];
            var s3 = M[offset + 3] ^ keySchedule[3];
            var ksRow = 4;
            for (var round = 1; round < nRounds; round++) {
              var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
              var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
              var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
              var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
              s0 = t0;
              s1 = t1;
              s2 = t2;
              s3 = t3;
            }
            var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
            var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
            var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
            var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
            M[offset] = t0;
            M[offset + 1] = t1;
            M[offset + 2] = t2;
            M[offset + 3] = t3;
          },
          keySize: 256 / 32
        });
        C.AES = BlockCipher._createHelper(AES);
      })();
      return CryptoJS2.AES;
    });
  }
});

// node_modules/crypto-js/tripledes.js
var require_tripledes = __commonJS({
  "node_modules/crypto-js/tripledes.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var PC1 = [
          57,
          49,
          41,
          33,
          25,
          17,
          9,
          1,
          58,
          50,
          42,
          34,
          26,
          18,
          10,
          2,
          59,
          51,
          43,
          35,
          27,
          19,
          11,
          3,
          60,
          52,
          44,
          36,
          63,
          55,
          47,
          39,
          31,
          23,
          15,
          7,
          62,
          54,
          46,
          38,
          30,
          22,
          14,
          6,
          61,
          53,
          45,
          37,
          29,
          21,
          13,
          5,
          28,
          20,
          12,
          4
        ];
        var PC2 = [
          14,
          17,
          11,
          24,
          1,
          5,
          3,
          28,
          15,
          6,
          21,
          10,
          23,
          19,
          12,
          4,
          26,
          8,
          16,
          7,
          27,
          20,
          13,
          2,
          41,
          52,
          31,
          37,
          47,
          55,
          30,
          40,
          51,
          45,
          33,
          48,
          44,
          49,
          39,
          56,
          34,
          53,
          46,
          42,
          50,
          36,
          29,
          32
        ];
        var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
        var SBOX_P = [
          {
            0: 8421888,
            268435456: 32768,
            536870912: 8421378,
            805306368: 2,
            1073741824: 512,
            1342177280: 8421890,
            1610612736: 8389122,
            1879048192: 8388608,
            2147483648: 514,
            2415919104: 8389120,
            2684354560: 33280,
            2952790016: 8421376,
            3221225472: 32770,
            3489660928: 8388610,
            3758096384: 0,
            4026531840: 33282,
            134217728: 0,
            402653184: 8421890,
            671088640: 33282,
            939524096: 32768,
            1207959552: 8421888,
            1476395008: 512,
            1744830464: 8421378,
            2013265920: 2,
            2281701376: 8389120,
            2550136832: 33280,
            2818572288: 8421376,
            3087007744: 8389122,
            3355443200: 8388610,
            3623878656: 32770,
            3892314112: 514,
            4160749568: 8388608,
            1: 32768,
            268435457: 2,
            536870913: 8421888,
            805306369: 8388608,
            1073741825: 8421378,
            1342177281: 33280,
            1610612737: 512,
            1879048193: 8389122,
            2147483649: 8421890,
            2415919105: 8421376,
            2684354561: 8388610,
            2952790017: 33282,
            3221225473: 514,
            3489660929: 8389120,
            3758096385: 32770,
            4026531841: 0,
            134217729: 8421890,
            402653185: 8421376,
            671088641: 8388608,
            939524097: 512,
            1207959553: 32768,
            1476395009: 8388610,
            1744830465: 2,
            2013265921: 33282,
            2281701377: 32770,
            2550136833: 8389122,
            2818572289: 514,
            3087007745: 8421888,
            3355443201: 8389120,
            3623878657: 0,
            3892314113: 33280,
            4160749569: 8421378
          },
          {
            0: 1074282512,
            16777216: 16384,
            33554432: 524288,
            50331648: 1074266128,
            67108864: 1073741840,
            83886080: 1074282496,
            100663296: 1073758208,
            117440512: 16,
            134217728: 540672,
            150994944: 1073758224,
            167772160: 1073741824,
            184549376: 540688,
            201326592: 524304,
            218103808: 0,
            234881024: 16400,
            251658240: 1074266112,
            8388608: 1073758208,
            25165824: 540688,
            41943040: 16,
            58720256: 1073758224,
            75497472: 1074282512,
            92274688: 1073741824,
            109051904: 524288,
            125829120: 1074266128,
            142606336: 524304,
            159383552: 0,
            176160768: 16384,
            192937984: 1074266112,
            209715200: 1073741840,
            226492416: 540672,
            243269632: 1074282496,
            260046848: 16400,
            268435456: 0,
            285212672: 1074266128,
            301989888: 1073758224,
            318767104: 1074282496,
            335544320: 1074266112,
            352321536: 16,
            369098752: 540688,
            385875968: 16384,
            402653184: 16400,
            419430400: 524288,
            436207616: 524304,
            452984832: 1073741840,
            469762048: 540672,
            486539264: 1073758208,
            503316480: 1073741824,
            520093696: 1074282512,
            276824064: 540688,
            293601280: 524288,
            310378496: 1074266112,
            327155712: 16384,
            343932928: 1073758208,
            360710144: 1074282512,
            377487360: 16,
            394264576: 1073741824,
            411041792: 1074282496,
            427819008: 1073741840,
            444596224: 1073758224,
            461373440: 524304,
            478150656: 0,
            494927872: 16400,
            511705088: 1074266128,
            528482304: 540672
          },
          {
            0: 260,
            1048576: 0,
            2097152: 67109120,
            3145728: 65796,
            4194304: 65540,
            5242880: 67108868,
            6291456: 67174660,
            7340032: 67174400,
            8388608: 67108864,
            9437184: 67174656,
            10485760: 65792,
            11534336: 67174404,
            12582912: 67109124,
            13631488: 65536,
            14680064: 4,
            15728640: 256,
            524288: 67174656,
            1572864: 67174404,
            2621440: 0,
            3670016: 67109120,
            4718592: 67108868,
            5767168: 65536,
            6815744: 65540,
            7864320: 260,
            8912896: 4,
            9961472: 256,
            11010048: 67174400,
            12058624: 65796,
            13107200: 65792,
            14155776: 67109124,
            15204352: 67174660,
            16252928: 67108864,
            16777216: 67174656,
            17825792: 65540,
            18874368: 65536,
            19922944: 67109120,
            20971520: 256,
            22020096: 67174660,
            23068672: 67108868,
            24117248: 0,
            25165824: 67109124,
            26214400: 67108864,
            27262976: 4,
            28311552: 65792,
            29360128: 67174400,
            30408704: 260,
            31457280: 65796,
            32505856: 67174404,
            17301504: 67108864,
            18350080: 260,
            19398656: 67174656,
            20447232: 0,
            21495808: 65540,
            22544384: 67109120,
            23592960: 256,
            24641536: 67174404,
            25690112: 65536,
            26738688: 67174660,
            27787264: 65796,
            28835840: 67108868,
            29884416: 67109124,
            30932992: 67174400,
            31981568: 4,
            33030144: 65792
          },
          {
            0: 2151682048,
            65536: 2147487808,
            131072: 4198464,
            196608: 2151677952,
            262144: 0,
            327680: 4198400,
            393216: 2147483712,
            458752: 4194368,
            524288: 2147483648,
            589824: 4194304,
            655360: 64,
            720896: 2147487744,
            786432: 2151678016,
            851968: 4160,
            917504: 4096,
            983040: 2151682112,
            32768: 2147487808,
            98304: 64,
            163840: 2151678016,
            229376: 2147487744,
            294912: 4198400,
            360448: 2151682112,
            425984: 0,
            491520: 2151677952,
            557056: 4096,
            622592: 2151682048,
            688128: 4194304,
            753664: 4160,
            819200: 2147483648,
            884736: 4194368,
            950272: 4198464,
            1015808: 2147483712,
            1048576: 4194368,
            1114112: 4198400,
            1179648: 2147483712,
            1245184: 0,
            1310720: 4160,
            1376256: 2151678016,
            1441792: 2151682048,
            1507328: 2147487808,
            1572864: 2151682112,
            1638400: 2147483648,
            1703936: 2151677952,
            1769472: 4198464,
            1835008: 2147487744,
            1900544: 4194304,
            1966080: 64,
            2031616: 4096,
            1081344: 2151677952,
            1146880: 2151682112,
            1212416: 0,
            1277952: 4198400,
            1343488: 4194368,
            1409024: 2147483648,
            1474560: 2147487808,
            1540096: 64,
            1605632: 2147483712,
            1671168: 4096,
            1736704: 2147487744,
            1802240: 2151678016,
            1867776: 4160,
            1933312: 2151682048,
            1998848: 4194304,
            2064384: 4198464
          },
          {
            0: 128,
            4096: 17039360,
            8192: 262144,
            12288: 536870912,
            16384: 537133184,
            20480: 16777344,
            24576: 553648256,
            28672: 262272,
            32768: 16777216,
            36864: 537133056,
            40960: 536871040,
            45056: 553910400,
            49152: 553910272,
            53248: 0,
            57344: 17039488,
            61440: 553648128,
            2048: 17039488,
            6144: 553648256,
            10240: 128,
            14336: 17039360,
            18432: 262144,
            22528: 537133184,
            26624: 553910272,
            30720: 536870912,
            34816: 537133056,
            38912: 0,
            43008: 553910400,
            47104: 16777344,
            51200: 536871040,
            55296: 553648128,
            59392: 16777216,
            63488: 262272,
            65536: 262144,
            69632: 128,
            73728: 536870912,
            77824: 553648256,
            81920: 16777344,
            86016: 553910272,
            90112: 537133184,
            94208: 16777216,
            98304: 553910400,
            102400: 553648128,
            106496: 17039360,
            110592: 537133056,
            114688: 262272,
            118784: 536871040,
            122880: 0,
            126976: 17039488,
            67584: 553648256,
            71680: 16777216,
            75776: 17039360,
            79872: 537133184,
            83968: 536870912,
            88064: 17039488,
            92160: 128,
            96256: 553910272,
            100352: 262272,
            104448: 553910400,
            108544: 0,
            112640: 553648128,
            116736: 16777344,
            120832: 262144,
            124928: 537133056,
            129024: 536871040
          },
          {
            0: 268435464,
            256: 8192,
            512: 270532608,
            768: 270540808,
            1024: 268443648,
            1280: 2097152,
            1536: 2097160,
            1792: 268435456,
            2048: 0,
            2304: 268443656,
            2560: 2105344,
            2816: 8,
            3072: 270532616,
            3328: 2105352,
            3584: 8200,
            3840: 270540800,
            128: 270532608,
            384: 270540808,
            640: 8,
            896: 2097152,
            1152: 2105352,
            1408: 268435464,
            1664: 268443648,
            1920: 8200,
            2176: 2097160,
            2432: 8192,
            2688: 268443656,
            2944: 270532616,
            3200: 0,
            3456: 270540800,
            3712: 2105344,
            3968: 268435456,
            4096: 268443648,
            4352: 270532616,
            4608: 270540808,
            4864: 8200,
            5120: 2097152,
            5376: 268435456,
            5632: 268435464,
            5888: 2105344,
            6144: 2105352,
            6400: 0,
            6656: 8,
            6912: 270532608,
            7168: 8192,
            7424: 268443656,
            7680: 270540800,
            7936: 2097160,
            4224: 8,
            4480: 2105344,
            4736: 2097152,
            4992: 268435464,
            5248: 268443648,
            5504: 8200,
            5760: 270540808,
            6016: 270532608,
            6272: 270540800,
            6528: 270532616,
            6784: 8192,
            7040: 2105352,
            7296: 2097160,
            7552: 0,
            7808: 268435456,
            8064: 268443656
          },
          {
            0: 1048576,
            16: 33555457,
            32: 1024,
            48: 1049601,
            64: 34604033,
            80: 0,
            96: 1,
            112: 34603009,
            128: 33555456,
            144: 1048577,
            160: 33554433,
            176: 34604032,
            192: 34603008,
            208: 1025,
            224: 1049600,
            240: 33554432,
            8: 34603009,
            24: 0,
            40: 33555457,
            56: 34604032,
            72: 1048576,
            88: 33554433,
            104: 33554432,
            120: 1025,
            136: 1049601,
            152: 33555456,
            168: 34603008,
            184: 1048577,
            200: 1024,
            216: 34604033,
            232: 1,
            248: 1049600,
            256: 33554432,
            272: 1048576,
            288: 33555457,
            304: 34603009,
            320: 1048577,
            336: 33555456,
            352: 34604032,
            368: 1049601,
            384: 1025,
            400: 34604033,
            416: 1049600,
            432: 1,
            448: 0,
            464: 34603008,
            480: 33554433,
            496: 1024,
            264: 1049600,
            280: 33555457,
            296: 34603009,
            312: 1,
            328: 33554432,
            344: 1048576,
            360: 1025,
            376: 34604032,
            392: 33554433,
            408: 34603008,
            424: 0,
            440: 34604033,
            456: 1049601,
            472: 1024,
            488: 33555456,
            504: 1048577
          },
          {
            0: 134219808,
            1: 131072,
            2: 134217728,
            3: 32,
            4: 131104,
            5: 134350880,
            6: 134350848,
            7: 2048,
            8: 134348800,
            9: 134219776,
            10: 133120,
            11: 134348832,
            12: 2080,
            13: 0,
            14: 134217760,
            15: 133152,
            2147483648: 2048,
            2147483649: 134350880,
            2147483650: 134219808,
            2147483651: 134217728,
            2147483652: 134348800,
            2147483653: 133120,
            2147483654: 133152,
            2147483655: 32,
            2147483656: 134217760,
            2147483657: 2080,
            2147483658: 131104,
            2147483659: 134350848,
            2147483660: 0,
            2147483661: 134348832,
            2147483662: 134219776,
            2147483663: 131072,
            16: 133152,
            17: 134350848,
            18: 32,
            19: 2048,
            20: 134219776,
            21: 134217760,
            22: 134348832,
            23: 131072,
            24: 0,
            25: 131104,
            26: 134348800,
            27: 134219808,
            28: 134350880,
            29: 133120,
            30: 2080,
            31: 134217728,
            2147483664: 131072,
            2147483665: 2048,
            2147483666: 134348832,
            2147483667: 133152,
            2147483668: 32,
            2147483669: 134348800,
            2147483670: 134217728,
            2147483671: 134219808,
            2147483672: 134350880,
            2147483673: 134217760,
            2147483674: 134219776,
            2147483675: 0,
            2147483676: 133120,
            2147483677: 2080,
            2147483678: 131104,
            2147483679: 134350848
          }
        ];
        var SBOX_MASK = [
          4160749569,
          528482304,
          33030144,
          2064384,
          129024,
          8064,
          504,
          2147483679
        ];
        var DES = C_algo.DES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keyBits = [];
            for (var i = 0; i < 56; i++) {
              var keyBitPos = PC1[i] - 1;
              keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
            }
            var subKeys = this._subKeys = [];
            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
              var subKey = subKeys[nSubKey] = [];
              var bitShift = BIT_SHIFTS[nSubKey];
              for (var i = 0; i < 24; i++) {
                subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;
                subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
              }
              subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
              for (var i = 1; i < 7; i++) {
                subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
              }
              subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
            }
            var invSubKeys = this._invSubKeys = [];
            for (var i = 0; i < 16; i++) {
              invSubKeys[i] = subKeys[15 - i];
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._subKeys);
          },
          decryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._invSubKeys);
          },
          _doCryptBlock: function(M, offset, subKeys) {
            this._lBlock = M[offset];
            this._rBlock = M[offset + 1];
            exchangeLR.call(this, 4, 252645135);
            exchangeLR.call(this, 16, 65535);
            exchangeRL.call(this, 2, 858993459);
            exchangeRL.call(this, 8, 16711935);
            exchangeLR.call(this, 1, 1431655765);
            for (var round = 0; round < 16; round++) {
              var subKey = subKeys[round];
              var lBlock = this._lBlock;
              var rBlock = this._rBlock;
              var f = 0;
              for (var i = 0; i < 8; i++) {
                f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
              }
              this._lBlock = rBlock;
              this._rBlock = lBlock ^ f;
            }
            var t = this._lBlock;
            this._lBlock = this._rBlock;
            this._rBlock = t;
            exchangeLR.call(this, 1, 1431655765);
            exchangeRL.call(this, 8, 16711935);
            exchangeRL.call(this, 2, 858993459);
            exchangeLR.call(this, 16, 65535);
            exchangeLR.call(this, 4, 252645135);
            M[offset] = this._lBlock;
            M[offset + 1] = this._rBlock;
          },
          keySize: 64 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        function exchangeLR(offset, mask) {
          var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
          this._rBlock ^= t;
          this._lBlock ^= t << offset;
        }
        __name(exchangeLR, "exchangeLR");
        function exchangeRL(offset, mask) {
          var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
          this._lBlock ^= t;
          this._rBlock ^= t << offset;
        }
        __name(exchangeRL, "exchangeRL");
        C.DES = BlockCipher._createHelper(DES);
        var TripleDES = C_algo.TripleDES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
              throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
            }
            var key1 = keyWords.slice(0, 2);
            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);
            this._des1 = DES.createEncryptor(WordArray.create(key1));
            this._des2 = DES.createEncryptor(WordArray.create(key2));
            this._des3 = DES.createEncryptor(WordArray.create(key3));
          },
          encryptBlock: function(M, offset) {
            this._des1.encryptBlock(M, offset);
            this._des2.decryptBlock(M, offset);
            this._des3.encryptBlock(M, offset);
          },
          decryptBlock: function(M, offset) {
            this._des3.decryptBlock(M, offset);
            this._des2.encryptBlock(M, offset);
            this._des1.decryptBlock(M, offset);
          },
          keySize: 192 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        C.TripleDES = BlockCipher._createHelper(TripleDES);
      })();
      return CryptoJS2.TripleDES;
    });
  }
});

// node_modules/crypto-js/rc4.js
var require_rc4 = __commonJS({
  "node_modules/crypto-js/rc4.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var RC4 = C_algo.RC4 = StreamCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keySigBytes = key.sigBytes;
            var S = this._S = [];
            for (var i = 0; i < 256; i++) {
              S[i] = i;
            }
            for (var i = 0, j = 0; i < 256; i++) {
              var keyByteIndex = i % keySigBytes;
              var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
              j = (j + S[i] + keyByte) % 256;
              var t = S[i];
              S[i] = S[j];
              S[j] = t;
            }
            this._i = this._j = 0;
          },
          _doProcessBlock: function(M, offset) {
            M[offset] ^= generateKeystreamWord.call(this);
          },
          keySize: 256 / 32,
          ivSize: 0
        });
        function generateKeystreamWord() {
          var S = this._S;
          var i = this._i;
          var j = this._j;
          var keystreamWord = 0;
          for (var n = 0; n < 4; n++) {
            i = (i + 1) % 256;
            j = (j + S[i]) % 256;
            var t = S[i];
            S[i] = S[j];
            S[j] = t;
            keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
          }
          this._i = i;
          this._j = j;
          return keystreamWord;
        }
        __name(generateKeystreamWord, "generateKeystreamWord");
        C.RC4 = StreamCipher._createHelper(RC4);
        var RC4Drop = C_algo.RC4Drop = RC4.extend({
          /**
           * Configuration options.
           *
           * @property {number} drop The number of keystream words to drop. Default 192
           */
          cfg: RC4.cfg.extend({
            drop: 192
          }),
          _doReset: function() {
            RC4._doReset.call(this);
            for (var i = this.cfg.drop; i > 0; i--) {
              generateKeystreamWord.call(this);
            }
          }
        });
        C.RC4Drop = StreamCipher._createHelper(RC4Drop);
      })();
      return CryptoJS2.RC4;
    });
  }
});

// node_modules/crypto-js/rabbit.js
var require_rabbit = __commonJS({
  "node_modules/crypto-js/rabbit.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var Rabbit = C_algo.Rabbit = StreamCipher.extend({
          _doReset: function() {
            var K = this._key.words;
            var iv = this.cfg.iv;
            for (var i = 0; i < 4; i++) {
              K[i] = (K[i] << 8 | K[i] >>> 24) & 16711935 | (K[i] << 24 | K[i] >>> 8) & 4278255360;
            }
            var X = this._X = [
              K[0],
              K[3] << 16 | K[2] >>> 16,
              K[1],
              K[0] << 16 | K[3] >>> 16,
              K[2],
              K[1] << 16 | K[0] >>> 16,
              K[3],
              K[2] << 16 | K[1] >>> 16
            ];
            var C2 = this._C = [
              K[2] << 16 | K[2] >>> 16,
              K[0] & 4294901760 | K[1] & 65535,
              K[3] << 16 | K[3] >>> 16,
              K[1] & 4294901760 | K[2] & 65535,
              K[0] << 16 | K[0] >>> 16,
              K[2] & 4294901760 | K[3] & 65535,
              K[1] << 16 | K[1] >>> 16,
              K[3] & 4294901760 | K[0] & 65535
            ];
            this._b = 0;
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }
            for (var i = 0; i < 8; i++) {
              C2[i] ^= X[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i2 & 4294901760;
              var i3 = i2 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i2;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i2;
              C2[7] ^= i3;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i = 0; i < 4; i++) {
              S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
              M[offset + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i = 0; i < 8; i++) {
            C_[i] = C2[i];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i = 0; i < 8; i++) {
            var gx = X[i] + C2[i];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        __name(nextState, "nextState");
        C.Rabbit = StreamCipher._createHelper(Rabbit);
      })();
      return CryptoJS2.Rabbit;
    });
  }
});

// node_modules/crypto-js/rabbit-legacy.js
var require_rabbit_legacy = __commonJS({
  "node_modules/crypto-js/rabbit-legacy.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
          _doReset: function() {
            var K = this._key.words;
            var iv = this.cfg.iv;
            var X = this._X = [
              K[0],
              K[3] << 16 | K[2] >>> 16,
              K[1],
              K[0] << 16 | K[3] >>> 16,
              K[2],
              K[1] << 16 | K[0] >>> 16,
              K[3],
              K[2] << 16 | K[1] >>> 16
            ];
            var C2 = this._C = [
              K[2] << 16 | K[2] >>> 16,
              K[0] & 4294901760 | K[1] & 65535,
              K[3] << 16 | K[3] >>> 16,
              K[1] & 4294901760 | K[2] & 65535,
              K[0] << 16 | K[0] >>> 16,
              K[2] & 4294901760 | K[3] & 65535,
              K[1] << 16 | K[1] >>> 16,
              K[3] & 4294901760 | K[0] & 65535
            ];
            this._b = 0;
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }
            for (var i = 0; i < 8; i++) {
              C2[i] ^= X[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i2 & 4294901760;
              var i3 = i2 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i2;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i2;
              C2[7] ^= i3;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i = 0; i < 4; i++) {
              S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
              M[offset + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i = 0; i < 8; i++) {
            C_[i] = C2[i];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i = 0; i < 8; i++) {
            var gx = X[i] + C2[i];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        __name(nextState, "nextState");
        C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
      })();
      return CryptoJS2.RabbitLegacy;
    });
  }
});

// node_modules/crypto-js/blowfish.js
var require_blowfish = __commonJS({
  "node_modules/crypto-js/blowfish.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        const N = 16;
        const ORIG_P = [
          608135816,
          2242054355,
          320440878,
          57701188,
          2752067618,
          698298832,
          137296536,
          3964562569,
          1160258022,
          953160567,
          3193202383,
          887688300,
          3232508343,
          3380367581,
          1065670069,
          3041331479,
          2450970073,
          2306472731
        ];
        const ORIG_S = [
          [
            3509652390,
            2564797868,
            805139163,
            3491422135,
            3101798381,
            1780907670,
            3128725573,
            4046225305,
            614570311,
            3012652279,
            134345442,
            2240740374,
            1667834072,
            1901547113,
            2757295779,
            4103290238,
            227898511,
            1921955416,
            1904987480,
            2182433518,
            2069144605,
            3260701109,
            2620446009,
            720527379,
            3318853667,
            677414384,
            3393288472,
            3101374703,
            2390351024,
            1614419982,
            1822297739,
            2954791486,
            3608508353,
            3174124327,
            2024746970,
            1432378464,
            3864339955,
            2857741204,
            1464375394,
            1676153920,
            1439316330,
            715854006,
            3033291828,
            289532110,
            2706671279,
            2087905683,
            3018724369,
            1668267050,
            732546397,
            1947742710,
            3462151702,
            2609353502,
            2950085171,
            1814351708,
            2050118529,
            680887927,
            999245976,
            1800124847,
            3300911131,
            1713906067,
            1641548236,
            4213287313,
            1216130144,
            1575780402,
            4018429277,
            3917837745,
            3693486850,
            3949271944,
            596196993,
            3549867205,
            258830323,
            2213823033,
            772490370,
            2760122372,
            1774776394,
            2652871518,
            566650946,
            4142492826,
            1728879713,
            2882767088,
            1783734482,
            3629395816,
            2517608232,
            2874225571,
            1861159788,
            326777828,
            3124490320,
            2130389656,
            2716951837,
            967770486,
            1724537150,
            2185432712,
            2364442137,
            1164943284,
            2105845187,
            998989502,
            3765401048,
            2244026483,
            1075463327,
            1455516326,
            1322494562,
            910128902,
            469688178,
            1117454909,
            936433444,
            3490320968,
            3675253459,
            1240580251,
            122909385,
            2157517691,
            634681816,
            4142456567,
            3825094682,
            3061402683,
            2540495037,
            79693498,
            3249098678,
            1084186820,
            1583128258,
            426386531,
            1761308591,
            1047286709,
            322548459,
            995290223,
            1845252383,
            2603652396,
            3431023940,
            2942221577,
            3202600964,
            3727903485,
            1712269319,
            422464435,
            3234572375,
            1170764815,
            3523960633,
            3117677531,
            1434042557,
            442511882,
            3600875718,
            1076654713,
            1738483198,
            4213154764,
            2393238008,
            3677496056,
            1014306527,
            4251020053,
            793779912,
            2902807211,
            842905082,
            4246964064,
            1395751752,
            1040244610,
            2656851899,
            3396308128,
            445077038,
            3742853595,
            3577915638,
            679411651,
            2892444358,
            2354009459,
            1767581616,
            3150600392,
            3791627101,
            3102740896,
            284835224,
            4246832056,
            1258075500,
            768725851,
            2589189241,
            3069724005,
            3532540348,
            1274779536,
            3789419226,
            2764799539,
            1660621633,
            3471099624,
            4011903706,
            913787905,
            3497959166,
            737222580,
            2514213453,
            2928710040,
            3937242737,
            1804850592,
            3499020752,
            2949064160,
            2386320175,
            2390070455,
            2415321851,
            4061277028,
            2290661394,
            2416832540,
            1336762016,
            1754252060,
            3520065937,
            3014181293,
            791618072,
            3188594551,
            3933548030,
            2332172193,
            3852520463,
            3043980520,
            413987798,
            3465142937,
            3030929376,
            4245938359,
            2093235073,
            3534596313,
            375366246,
            2157278981,
            2479649556,
            555357303,
            3870105701,
            2008414854,
            3344188149,
            4221384143,
            3956125452,
            2067696032,
            3594591187,
            2921233993,
            2428461,
            544322398,
            577241275,
            1471733935,
            610547355,
            4027169054,
            1432588573,
            1507829418,
            2025931657,
            3646575487,
            545086370,
            48609733,
            2200306550,
            1653985193,
            298326376,
            1316178497,
            3007786442,
            2064951626,
            458293330,
            2589141269,
            3591329599,
            3164325604,
            727753846,
            2179363840,
            146436021,
            1461446943,
            4069977195,
            705550613,
            3059967265,
            3887724982,
            4281599278,
            3313849956,
            1404054877,
            2845806497,
            146425753,
            1854211946
          ],
          [
            1266315497,
            3048417604,
            3681880366,
            3289982499,
            290971e4,
            1235738493,
            2632868024,
            2414719590,
            3970600049,
            1771706367,
            1449415276,
            3266420449,
            422970021,
            1963543593,
            2690192192,
            3826793022,
            1062508698,
            1531092325,
            1804592342,
            2583117782,
            2714934279,
            4024971509,
            1294809318,
            4028980673,
            1289560198,
            2221992742,
            1669523910,
            35572830,
            157838143,
            1052438473,
            1016535060,
            1802137761,
            1753167236,
            1386275462,
            3080475397,
            2857371447,
            1040679964,
            2145300060,
            2390574316,
            1461121720,
            2956646967,
            4031777805,
            4028374788,
            33600511,
            2920084762,
            1018524850,
            629373528,
            3691585981,
            3515945977,
            2091462646,
            2486323059,
            586499841,
            988145025,
            935516892,
            3367335476,
            2599673255,
            2839830854,
            265290510,
            3972581182,
            2759138881,
            3795373465,
            1005194799,
            847297441,
            406762289,
            1314163512,
            1332590856,
            1866599683,
            4127851711,
            750260880,
            613907577,
            1450815602,
            3165620655,
            3734664991,
            3650291728,
            3012275730,
            3704569646,
            1427272223,
            778793252,
            1343938022,
            2676280711,
            2052605720,
            1946737175,
            3164576444,
            3914038668,
            3967478842,
            3682934266,
            1661551462,
            3294938066,
            4011595847,
            840292616,
            3712170807,
            616741398,
            312560963,
            711312465,
            1351876610,
            322626781,
            1910503582,
            271666773,
            2175563734,
            1594956187,
            70604529,
            3617834859,
            1007753275,
            1495573769,
            4069517037,
            2549218298,
            2663038764,
            504708206,
            2263041392,
            3941167025,
            2249088522,
            1514023603,
            1998579484,
            1312622330,
            694541497,
            2582060303,
            2151582166,
            1382467621,
            776784248,
            2618340202,
            3323268794,
            2497899128,
            2784771155,
            503983604,
            4076293799,
            907881277,
            423175695,
            432175456,
            1378068232,
            4145222326,
            3954048622,
            3938656102,
            3820766613,
            2793130115,
            2977904593,
            26017576,
            3274890735,
            3194772133,
            1700274565,
            1756076034,
            4006520079,
            3677328699,
            720338349,
            1533947780,
            354530856,
            688349552,
            3973924725,
            1637815568,
            332179504,
            3949051286,
            53804574,
            2852348879,
            3044236432,
            1282449977,
            3583942155,
            3416972820,
            4006381244,
            1617046695,
            2628476075,
            3002303598,
            1686838959,
            431878346,
            2686675385,
            1700445008,
            1080580658,
            1009431731,
            832498133,
            3223435511,
            2605976345,
            2271191193,
            2516031870,
            1648197032,
            4164389018,
            2548247927,
            300782431,
            375919233,
            238389289,
            3353747414,
            2531188641,
            2019080857,
            1475708069,
            455242339,
            2609103871,
            448939670,
            3451063019,
            1395535956,
            2413381860,
            1841049896,
            1491858159,
            885456874,
            4264095073,
            4001119347,
            1565136089,
            3898914787,
            1108368660,
            540939232,
            1173283510,
            2745871338,
            3681308437,
            4207628240,
            3343053890,
            4016749493,
            1699691293,
            1103962373,
            3625875870,
            2256883143,
            3830138730,
            1031889488,
            3479347698,
            1535977030,
            4236805024,
            3251091107,
            2132092099,
            1774941330,
            1199868427,
            1452454533,
            157007616,
            2904115357,
            342012276,
            595725824,
            1480756522,
            206960106,
            497939518,
            591360097,
            863170706,
            2375253569,
            3596610801,
            1814182875,
            2094937945,
            3421402208,
            1082520231,
            3463918190,
            2785509508,
            435703966,
            3908032597,
            1641649973,
            2842273706,
            3305899714,
            1510255612,
            2148256476,
            2655287854,
            3276092548,
            4258621189,
            236887753,
            3681803219,
            274041037,
            1734335097,
            3815195456,
            3317970021,
            1899903192,
            1026095262,
            4050517792,
            356393447,
            2410691914,
            3873677099,
            3682840055
          ],
          [
            3913112168,
            2491498743,
            4132185628,
            2489919796,
            1091903735,
            1979897079,
            3170134830,
            3567386728,
            3557303409,
            857797738,
            1136121015,
            1342202287,
            507115054,
            2535736646,
            337727348,
            3213592640,
            1301675037,
            2528481711,
            1895095763,
            1721773893,
            3216771564,
            62756741,
            2142006736,
            835421444,
            2531993523,
            1442658625,
            3659876326,
            2882144922,
            676362277,
            1392781812,
            170690266,
            3921047035,
            1759253602,
            3611846912,
            1745797284,
            664899054,
            1329594018,
            3901205900,
            3045908486,
            2062866102,
            2865634940,
            3543621612,
            3464012697,
            1080764994,
            553557557,
            3656615353,
            3996768171,
            991055499,
            499776247,
            1265440854,
            648242737,
            3940784050,
            980351604,
            3713745714,
            1749149687,
            3396870395,
            4211799374,
            3640570775,
            1161844396,
            3125318951,
            1431517754,
            545492359,
            4268468663,
            3499529547,
            1437099964,
            2702547544,
            3433638243,
            2581715763,
            2787789398,
            1060185593,
            1593081372,
            2418618748,
            4260947970,
            69676912,
            2159744348,
            86519011,
            2512459080,
            3838209314,
            1220612927,
            3339683548,
            133810670,
            1090789135,
            1078426020,
            1569222167,
            845107691,
            3583754449,
            4072456591,
            1091646820,
            628848692,
            1613405280,
            3757631651,
            526609435,
            236106946,
            48312990,
            2942717905,
            3402727701,
            1797494240,
            859738849,
            992217954,
            4005476642,
            2243076622,
            3870952857,
            3732016268,
            765654824,
            3490871365,
            2511836413,
            1685915746,
            3888969200,
            1414112111,
            2273134842,
            3281911079,
            4080962846,
            172450625,
            2569994100,
            980381355,
            4109958455,
            2819808352,
            2716589560,
            2568741196,
            3681446669,
            3329971472,
            1835478071,
            660984891,
            3704678404,
            4045999559,
            3422617507,
            3040415634,
            1762651403,
            1719377915,
            3470491036,
            2693910283,
            3642056355,
            3138596744,
            1364962596,
            2073328063,
            1983633131,
            926494387,
            3423689081,
            2150032023,
            4096667949,
            1749200295,
            3328846651,
            309677260,
            2016342300,
            1779581495,
            3079819751,
            111262694,
            1274766160,
            443224088,
            298511866,
            1025883608,
            3806446537,
            1145181785,
            168956806,
            3641502830,
            3584813610,
            1689216846,
            3666258015,
            3200248200,
            1692713982,
            2646376535,
            4042768518,
            1618508792,
            1610833997,
            3523052358,
            4130873264,
            2001055236,
            3610705100,
            2202168115,
            4028541809,
            2961195399,
            1006657119,
            2006996926,
            3186142756,
            1430667929,
            3210227297,
            1314452623,
            4074634658,
            4101304120,
            2273951170,
            1399257539,
            3367210612,
            3027628629,
            1190975929,
            2062231137,
            2333990788,
            2221543033,
            2438960610,
            1181637006,
            548689776,
            2362791313,
            3372408396,
            3104550113,
            3145860560,
            296247880,
            1970579870,
            3078560182,
            3769228297,
            1714227617,
            3291629107,
            3898220290,
            166772364,
            1251581989,
            493813264,
            448347421,
            195405023,
            2709975567,
            677966185,
            3703036547,
            1463355134,
            2715995803,
            1338867538,
            1343315457,
            2802222074,
            2684532164,
            233230375,
            2599980071,
            2000651841,
            3277868038,
            1638401717,
            4028070440,
            3237316320,
            6314154,
            819756386,
            300326615,
            590932579,
            1405279636,
            3267499572,
            3150704214,
            2428286686,
            3959192993,
            3461946742,
            1862657033,
            1266418056,
            963775037,
            2089974820,
            2263052895,
            1917689273,
            448879540,
            3550394620,
            3981727096,
            150775221,
            3627908307,
            1303187396,
            508620638,
            2975983352,
            2726630617,
            1817252668,
            1876281319,
            1457606340,
            908771278,
            3720792119,
            3617206836,
            2455994898,
            1729034894,
            1080033504
          ],
          [
            976866871,
            3556439503,
            2881648439,
            1522871579,
            1555064734,
            1336096578,
            3548522304,
            2579274686,
            3574697629,
            3205460757,
            3593280638,
            3338716283,
            3079412587,
            564236357,
            2993598910,
            1781952180,
            1464380207,
            3163844217,
            3332601554,
            1699332808,
            1393555694,
            1183702653,
            3581086237,
            1288719814,
            691649499,
            2847557200,
            2895455976,
            3193889540,
            2717570544,
            1781354906,
            1676643554,
            2592534050,
            3230253752,
            1126444790,
            2770207658,
            2633158820,
            2210423226,
            2615765581,
            2414155088,
            3127139286,
            673620729,
            2805611233,
            1269405062,
            4015350505,
            3341807571,
            4149409754,
            1057255273,
            2012875353,
            2162469141,
            2276492801,
            2601117357,
            993977747,
            3918593370,
            2654263191,
            753973209,
            36408145,
            2530585658,
            25011837,
            3520020182,
            2088578344,
            530523599,
            2918365339,
            1524020338,
            1518925132,
            3760827505,
            3759777254,
            1202760957,
            3985898139,
            3906192525,
            674977740,
            4174734889,
            2031300136,
            2019492241,
            3983892565,
            4153806404,
            3822280332,
            352677332,
            2297720250,
            60907813,
            90501309,
            3286998549,
            1016092578,
            2535922412,
            2839152426,
            457141659,
            509813237,
            4120667899,
            652014361,
            1966332200,
            2975202805,
            55981186,
            2327461051,
            676427537,
            3255491064,
            2882294119,
            3433927263,
            1307055953,
            942726286,
            933058658,
            2468411793,
            3933900994,
            4215176142,
            1361170020,
            2001714738,
            2830558078,
            3274259782,
            1222529897,
            1679025792,
            2729314320,
            3714953764,
            1770335741,
            151462246,
            3013232138,
            1682292957,
            1483529935,
            471910574,
            1539241949,
            458788160,
            3436315007,
            1807016891,
            3718408830,
            978976581,
            1043663428,
            3165965781,
            1927990952,
            4200891579,
            2372276910,
            3208408903,
            3533431907,
            1412390302,
            2931980059,
            4132332400,
            1947078029,
            3881505623,
            4168226417,
            2941484381,
            1077988104,
            1320477388,
            886195818,
            18198404,
            3786409e3,
            2509781533,
            112762804,
            3463356488,
            1866414978,
            891333506,
            18488651,
            661792760,
            1628790961,
            3885187036,
            3141171499,
            876946877,
            2693282273,
            1372485963,
            791857591,
            2686433993,
            3759982718,
            3167212022,
            3472953795,
            2716379847,
            445679433,
            3561995674,
            3504004811,
            3574258232,
            54117162,
            3331405415,
            2381918588,
            3769707343,
            4154350007,
            1140177722,
            4074052095,
            668550556,
            3214352940,
            367459370,
            261225585,
            2610173221,
            4209349473,
            3468074219,
            3265815641,
            314222801,
            3066103646,
            3808782860,
            282218597,
            3406013506,
            3773591054,
            379116347,
            1285071038,
            846784868,
            2669647154,
            3771962079,
            3550491691,
            2305946142,
            453669953,
            1268987020,
            3317592352,
            3279303384,
            3744833421,
            2610507566,
            3859509063,
            266596637,
            3847019092,
            517658769,
            3462560207,
            3443424879,
            370717030,
            4247526661,
            2224018117,
            4143653529,
            4112773975,
            2788324899,
            2477274417,
            1456262402,
            2901442914,
            1517677493,
            1846949527,
            2295493580,
            3734397586,
            2176403920,
            1280348187,
            1908823572,
            3871786941,
            846861322,
            1172426758,
            3287448474,
            3383383037,
            1655181056,
            3139813346,
            901632758,
            1897031941,
            2986607138,
            3066810236,
            3447102507,
            1393639104,
            373351379,
            950779232,
            625454576,
            3124240540,
            4148612726,
            2007998917,
            544563296,
            2244738638,
            2330496472,
            2058025392,
            1291430526,
            424198748,
            50039436,
            29584100,
            3605783033,
            2429876329,
            2791104160,
            1057563949,
            3255363231,
            3075367218,
            3463963227,
            1469046755,
            985887462
          ]
        ];
        var BLOWFISH_CTX = {
          pbox: [],
          sbox: []
        };
        function F(ctx, x) {
          let a = x >> 24 & 255;
          let b = x >> 16 & 255;
          let c = x >> 8 & 255;
          let d = x & 255;
          let y = ctx.sbox[0][a] + ctx.sbox[1][b];
          y = y ^ ctx.sbox[2][c];
          y = y + ctx.sbox[3][d];
          return y;
        }
        __name(F, "F");
        function BlowFish_Encrypt(ctx, left, right) {
          let Xl = left;
          let Xr = right;
          let temp;
          for (let i = 0; i < N; ++i) {
            Xl = Xl ^ ctx.pbox[i];
            Xr = F(ctx, Xl) ^ Xr;
            temp = Xl;
            Xl = Xr;
            Xr = temp;
          }
          temp = Xl;
          Xl = Xr;
          Xr = temp;
          Xr = Xr ^ ctx.pbox[N];
          Xl = Xl ^ ctx.pbox[N + 1];
          return { left: Xl, right: Xr };
        }
        __name(BlowFish_Encrypt, "BlowFish_Encrypt");
        function BlowFish_Decrypt(ctx, left, right) {
          let Xl = left;
          let Xr = right;
          let temp;
          for (let i = N + 1; i > 1; --i) {
            Xl = Xl ^ ctx.pbox[i];
            Xr = F(ctx, Xl) ^ Xr;
            temp = Xl;
            Xl = Xr;
            Xr = temp;
          }
          temp = Xl;
          Xl = Xr;
          Xr = temp;
          Xr = Xr ^ ctx.pbox[1];
          Xl = Xl ^ ctx.pbox[0];
          return { left: Xl, right: Xr };
        }
        __name(BlowFish_Decrypt, "BlowFish_Decrypt");
        function BlowFishInit(ctx, key, keysize) {
          for (let Row = 0; Row < 4; Row++) {
            ctx.sbox[Row] = [];
            for (let Col = 0; Col < 256; Col++) {
              ctx.sbox[Row][Col] = ORIG_S[Row][Col];
            }
          }
          let keyIndex = 0;
          for (let index = 0; index < N + 2; index++) {
            ctx.pbox[index] = ORIG_P[index] ^ key[keyIndex];
            keyIndex++;
            if (keyIndex >= keysize) {
              keyIndex = 0;
            }
          }
          let Data1 = 0;
          let Data2 = 0;
          let res = 0;
          for (let i = 0; i < N + 2; i += 2) {
            res = BlowFish_Encrypt(ctx, Data1, Data2);
            Data1 = res.left;
            Data2 = res.right;
            ctx.pbox[i] = Data1;
            ctx.pbox[i + 1] = Data2;
          }
          for (let i = 0; i < 4; i++) {
            for (let j = 0; j < 256; j += 2) {
              res = BlowFish_Encrypt(ctx, Data1, Data2);
              Data1 = res.left;
              Data2 = res.right;
              ctx.sbox[i][j] = Data1;
              ctx.sbox[i][j + 1] = Data2;
            }
          }
          return true;
        }
        __name(BlowFishInit, "BlowFishInit");
        var Blowfish = C_algo.Blowfish = BlockCipher.extend({
          _doReset: function() {
            if (this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            BlowFishInit(BLOWFISH_CTX, keyWords, keySize);
          },
          encryptBlock: function(M, offset) {
            var res = BlowFish_Encrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
            M[offset] = res.left;
            M[offset + 1] = res.right;
          },
          decryptBlock: function(M, offset) {
            var res = BlowFish_Decrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
            M[offset] = res.left;
            M[offset + 1] = res.right;
          },
          blockSize: 64 / 32,
          keySize: 128 / 32,
          ivSize: 64 / 32
        });
        C.Blowfish = BlockCipher._createHelper(Blowfish);
      })();
      return CryptoJS2.Blowfish;
    });
  }
});

// node_modules/crypto-js/index.js
var require_crypto_js = __commonJS({
  "node_modules/crypto-js/index.js"(exports, module) {
    init_strip_cf_connecting_ip_header();
    init_modules_watch_stub();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
    init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
    init_performance2();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_x64_core(), require_lib_typedarrays(), require_enc_utf16(), require_enc_base64(), require_enc_base64url(), require_md5(), require_sha1(), require_sha256(), require_sha224(), require_sha512(), require_sha384(), require_sha3(), require_ripemd160(), require_hmac(), require_pbkdf2(), require_evpkdf(), require_cipher_core(), require_mode_cfb(), require_mode_ctr(), require_mode_ctr_gladman(), require_mode_ofb(), require_mode_ecb(), require_pad_ansix923(), require_pad_iso10126(), require_pad_iso97971(), require_pad_zeropadding(), require_pad_nopadding(), require_format_hex(), require_aes(), require_tripledes(), require_rc4(), require_rabbit(), require_rabbit_legacy(), require_blowfish());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./enc-base64url", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy", "./blowfish"], factory);
      } else {
        root.CryptoJS = factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      return CryptoJS2;
    });
  }
});

// .wrangler/tmp/bundle-Pb8ldM/middleware-loader.entry.ts
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// .wrangler/tmp/bundle-Pb8ldM/middleware-insertion-facade.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// main.ts
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/hono/dist/index.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/hono/dist/hono.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/hono/dist/hono-base.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/hono/dist/compose.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var compose = /* @__PURE__ */ __name((middleware, onError, onNotFound) => {
  return (context2, next) => {
    let index = -1;
    return dispatch(0);
    async function dispatch(i) {
      if (i <= index) {
        throw new Error("next() called multiple times");
      }
      index = i;
      let res;
      let isError2 = false;
      let handler;
      if (middleware[i]) {
        handler = middleware[i][0][0];
        context2.req.routeIndex = i;
      } else {
        handler = i === middleware.length && next || void 0;
      }
      if (handler) {
        try {
          res = await handler(context2, () => dispatch(i + 1));
        } catch (err) {
          if (err instanceof Error && onError) {
            context2.error = err;
            res = await onError(err, context2);
            isError2 = true;
          } else {
            throw err;
          }
        }
      } else {
        if (context2.finalized === false && onNotFound) {
          res = await onNotFound(context2);
        }
      }
      if (res && (context2.finalized === false || isError2)) {
        context2.res = res;
      }
      return context2;
    }
    __name(dispatch, "dispatch");
  };
}, "compose");

// node_modules/hono/dist/context.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/hono/dist/request.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/hono/dist/http-exception.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/hono/dist/request/constants.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var GET_MATCH_RESULT = Symbol();

// node_modules/hono/dist/utils/body.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var parseBody = /* @__PURE__ */ __name(async (request, options = /* @__PURE__ */ Object.create(null)) => {
  const { all = false, dot = false } = options;
  const headers = request instanceof HonoRequest ? request.raw.headers : request.headers;
  const contentType = headers.get("Content-Type");
  if (contentType?.startsWith("multipart/form-data") || contentType?.startsWith("application/x-www-form-urlencoded")) {
    return parseFormData(request, { all, dot });
  }
  return {};
}, "parseBody");
async function parseFormData(request, options) {
  const formData = await request.formData();
  if (formData) {
    return convertFormDataToBodyData(formData, options);
  }
  return {};
}
__name(parseFormData, "parseFormData");
function convertFormDataToBodyData(formData, options) {
  const form = /* @__PURE__ */ Object.create(null);
  formData.forEach((value, key) => {
    const shouldParseAllValues = options.all || key.endsWith("[]");
    if (!shouldParseAllValues) {
      form[key] = value;
    } else {
      handleParsingAllValues(form, key, value);
    }
  });
  if (options.dot) {
    Object.entries(form).forEach(([key, value]) => {
      const shouldParseDotValues = key.includes(".");
      if (shouldParseDotValues) {
        handleParsingNestedValues(form, key, value);
        delete form[key];
      }
    });
  }
  return form;
}
__name(convertFormDataToBodyData, "convertFormDataToBodyData");
var handleParsingAllValues = /* @__PURE__ */ __name((form, key, value) => {
  if (form[key] !== void 0) {
    if (Array.isArray(form[key])) {
      ;
      form[key].push(value);
    } else {
      form[key] = [form[key], value];
    }
  } else {
    if (!key.endsWith("[]")) {
      form[key] = value;
    } else {
      form[key] = [value];
    }
  }
}, "handleParsingAllValues");
var handleParsingNestedValues = /* @__PURE__ */ __name((form, key, value) => {
  let nestedForm = form;
  const keys = key.split(".");
  keys.forEach((key2, index) => {
    if (index === keys.length - 1) {
      nestedForm[key2] = value;
    } else {
      if (!nestedForm[key2] || typeof nestedForm[key2] !== "object" || Array.isArray(nestedForm[key2]) || nestedForm[key2] instanceof File) {
        nestedForm[key2] = /* @__PURE__ */ Object.create(null);
      }
      nestedForm = nestedForm[key2];
    }
  });
}, "handleParsingNestedValues");

// node_modules/hono/dist/utils/url.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var splitPath = /* @__PURE__ */ __name((path) => {
  const paths = path.split("/");
  if (paths[0] === "") {
    paths.shift();
  }
  return paths;
}, "splitPath");
var splitRoutingPath = /* @__PURE__ */ __name((routePath) => {
  const { groups, path } = extractGroupsFromPath(routePath);
  const paths = splitPath(path);
  return replaceGroupMarks(paths, groups);
}, "splitRoutingPath");
var extractGroupsFromPath = /* @__PURE__ */ __name((path) => {
  const groups = [];
  path = path.replace(/\{[^}]+\}/g, (match2, index) => {
    const mark = `@${index}`;
    groups.push([mark, match2]);
    return mark;
  });
  return { groups, path };
}, "extractGroupsFromPath");
var replaceGroupMarks = /* @__PURE__ */ __name((paths, groups) => {
  for (let i = groups.length - 1; i >= 0; i--) {
    const [mark] = groups[i];
    for (let j = paths.length - 1; j >= 0; j--) {
      if (paths[j].includes(mark)) {
        paths[j] = paths[j].replace(mark, groups[i][1]);
        break;
      }
    }
  }
  return paths;
}, "replaceGroupMarks");
var patternCache = {};
var getPattern = /* @__PURE__ */ __name((label, next) => {
  if (label === "*") {
    return "*";
  }
  const match2 = label.match(/^\:([^\{\}]+)(?:\{(.+)\})?$/);
  if (match2) {
    const cacheKey = `${label}#${next}`;
    if (!patternCache[cacheKey]) {
      if (match2[2]) {
        patternCache[cacheKey] = next && next[0] !== ":" && next[0] !== "*" ? [cacheKey, match2[1], new RegExp(`^${match2[2]}(?=/${next})`)] : [label, match2[1], new RegExp(`^${match2[2]}$`)];
      } else {
        patternCache[cacheKey] = [label, match2[1], true];
      }
    }
    return patternCache[cacheKey];
  }
  return null;
}, "getPattern");
var tryDecode = /* @__PURE__ */ __name((str, decoder) => {
  try {
    return decoder(str);
  } catch {
    return str.replace(/(?:%[0-9A-Fa-f]{2})+/g, (match2) => {
      try {
        return decoder(match2);
      } catch {
        return match2;
      }
    });
  }
}, "tryDecode");
var tryDecodeURI = /* @__PURE__ */ __name((str) => tryDecode(str, decodeURI), "tryDecodeURI");
var getPath = /* @__PURE__ */ __name((request) => {
  const url = request.url;
  const start = url.indexOf("/", url.indexOf(":") + 4);
  let i = start;
  for (; i < url.length; i++) {
    const charCode = url.charCodeAt(i);
    if (charCode === 37) {
      const queryIndex = url.indexOf("?", i);
      const path = url.slice(start, queryIndex === -1 ? void 0 : queryIndex);
      return tryDecodeURI(path.includes("%25") ? path.replace(/%25/g, "%2525") : path);
    } else if (charCode === 63) {
      break;
    }
  }
  return url.slice(start, i);
}, "getPath");
var getPathNoStrict = /* @__PURE__ */ __name((request) => {
  const result = getPath(request);
  return result.length > 1 && result.at(-1) === "/" ? result.slice(0, -1) : result;
}, "getPathNoStrict");
var mergePath = /* @__PURE__ */ __name((base, sub, ...rest) => {
  if (rest.length) {
    sub = mergePath(sub, ...rest);
  }
  return `${base?.[0] === "/" ? "" : "/"}${base}${sub === "/" ? "" : `${base?.at(-1) === "/" ? "" : "/"}${sub?.[0] === "/" ? sub.slice(1) : sub}`}`;
}, "mergePath");
var checkOptionalParameter = /* @__PURE__ */ __name((path) => {
  if (path.charCodeAt(path.length - 1) !== 63 || !path.includes(":")) {
    return null;
  }
  const segments = path.split("/");
  const results = [];
  let basePath = "";
  segments.forEach((segment) => {
    if (segment !== "" && !/\:/.test(segment)) {
      basePath += "/" + segment;
    } else if (/\:/.test(segment)) {
      if (/\?/.test(segment)) {
        if (results.length === 0 && basePath === "") {
          results.push("/");
        } else {
          results.push(basePath);
        }
        const optionalSegment = segment.replace("?", "");
        basePath += "/" + optionalSegment;
        results.push(basePath);
      } else {
        basePath += "/" + segment;
      }
    }
  });
  return results.filter((v2, i, a) => a.indexOf(v2) === i);
}, "checkOptionalParameter");
var _decodeURI = /* @__PURE__ */ __name((value) => {
  if (!/[%+]/.test(value)) {
    return value;
  }
  if (value.indexOf("+") !== -1) {
    value = value.replace(/\+/g, " ");
  }
  return value.indexOf("%") !== -1 ? tryDecode(value, decodeURIComponent_) : value;
}, "_decodeURI");
var _getQueryParam = /* @__PURE__ */ __name((url, key, multiple) => {
  let encoded;
  if (!multiple && key && !/[%+]/.test(key)) {
    let keyIndex2 = url.indexOf(`?${key}`, 8);
    if (keyIndex2 === -1) {
      keyIndex2 = url.indexOf(`&${key}`, 8);
    }
    while (keyIndex2 !== -1) {
      const trailingKeyCode = url.charCodeAt(keyIndex2 + key.length + 1);
      if (trailingKeyCode === 61) {
        const valueIndex = keyIndex2 + key.length + 2;
        const endIndex = url.indexOf("&", valueIndex);
        return _decodeURI(url.slice(valueIndex, endIndex === -1 ? void 0 : endIndex));
      } else if (trailingKeyCode == 38 || isNaN(trailingKeyCode)) {
        return "";
      }
      keyIndex2 = url.indexOf(`&${key}`, keyIndex2 + 1);
    }
    encoded = /[%+]/.test(url);
    if (!encoded) {
      return void 0;
    }
  }
  const results = {};
  encoded ??= /[%+]/.test(url);
  let keyIndex = url.indexOf("?", 8);
  while (keyIndex !== -1) {
    const nextKeyIndex = url.indexOf("&", keyIndex + 1);
    let valueIndex = url.indexOf("=", keyIndex);
    if (valueIndex > nextKeyIndex && nextKeyIndex !== -1) {
      valueIndex = -1;
    }
    let name = url.slice(
      keyIndex + 1,
      valueIndex === -1 ? nextKeyIndex === -1 ? void 0 : nextKeyIndex : valueIndex
    );
    if (encoded) {
      name = _decodeURI(name);
    }
    keyIndex = nextKeyIndex;
    if (name === "") {
      continue;
    }
    let value;
    if (valueIndex === -1) {
      value = "";
    } else {
      value = url.slice(valueIndex + 1, nextKeyIndex === -1 ? void 0 : nextKeyIndex);
      if (encoded) {
        value = _decodeURI(value);
      }
    }
    if (multiple) {
      if (!(results[name] && Array.isArray(results[name]))) {
        results[name] = [];
      }
      ;
      results[name].push(value);
    } else {
      results[name] ??= value;
    }
  }
  return key ? results[key] : results;
}, "_getQueryParam");
var getQueryParam = _getQueryParam;
var getQueryParams = /* @__PURE__ */ __name((url, key) => {
  return _getQueryParam(url, key, true);
}, "getQueryParams");
var decodeURIComponent_ = decodeURIComponent;

// node_modules/hono/dist/request.js
var tryDecodeURIComponent = /* @__PURE__ */ __name((str) => tryDecode(str, decodeURIComponent_), "tryDecodeURIComponent");
var HonoRequest = /* @__PURE__ */ __name(class {
  raw;
  #validatedData;
  #matchResult;
  routeIndex = 0;
  path;
  bodyCache = {};
  constructor(request, path = "/", matchResult = [[]]) {
    this.raw = request;
    this.path = path;
    this.#matchResult = matchResult;
    this.#validatedData = {};
  }
  param(key) {
    return key ? this.#getDecodedParam(key) : this.#getAllDecodedParams();
  }
  #getDecodedParam(key) {
    const paramKey = this.#matchResult[0][this.routeIndex][1][key];
    const param = this.#getParamValue(paramKey);
    return param && /\%/.test(param) ? tryDecodeURIComponent(param) : param;
  }
  #getAllDecodedParams() {
    const decoded = {};
    const keys = Object.keys(this.#matchResult[0][this.routeIndex][1]);
    for (const key of keys) {
      const value = this.#getParamValue(this.#matchResult[0][this.routeIndex][1][key]);
      if (value !== void 0) {
        decoded[key] = /\%/.test(value) ? tryDecodeURIComponent(value) : value;
      }
    }
    return decoded;
  }
  #getParamValue(paramKey) {
    return this.#matchResult[1] ? this.#matchResult[1][paramKey] : paramKey;
  }
  query(key) {
    return getQueryParam(this.url, key);
  }
  queries(key) {
    return getQueryParams(this.url, key);
  }
  header(name) {
    if (name) {
      return this.raw.headers.get(name) ?? void 0;
    }
    const headerData = {};
    this.raw.headers.forEach((value, key) => {
      headerData[key] = value;
    });
    return headerData;
  }
  async parseBody(options) {
    return this.bodyCache.parsedBody ??= await parseBody(this, options);
  }
  #cachedBody = (key) => {
    const { bodyCache, raw: raw2 } = this;
    const cachedBody = bodyCache[key];
    if (cachedBody) {
      return cachedBody;
    }
    const anyCachedKey = Object.keys(bodyCache)[0];
    if (anyCachedKey) {
      return bodyCache[anyCachedKey].then((body) => {
        if (anyCachedKey === "json") {
          body = JSON.stringify(body);
        }
        return new Response(body)[key]();
      });
    }
    return bodyCache[key] = raw2[key]();
  };
  json() {
    return this.#cachedBody("text").then((text) => JSON.parse(text));
  }
  text() {
    return this.#cachedBody("text");
  }
  arrayBuffer() {
    return this.#cachedBody("arrayBuffer");
  }
  blob() {
    return this.#cachedBody("blob");
  }
  formData() {
    return this.#cachedBody("formData");
  }
  addValidatedData(target, data) {
    this.#validatedData[target] = data;
  }
  valid(target) {
    return this.#validatedData[target];
  }
  get url() {
    return this.raw.url;
  }
  get method() {
    return this.raw.method;
  }
  get [GET_MATCH_RESULT]() {
    return this.#matchResult;
  }
  get matchedRoutes() {
    return this.#matchResult[0].map(([[, route]]) => route);
  }
  get routePath() {
    return this.#matchResult[0].map(([[, route]]) => route)[this.routeIndex].path;
  }
}, "HonoRequest");

// node_modules/hono/dist/utils/html.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var HtmlEscapedCallbackPhase = {
  Stringify: 1,
  BeforeStream: 2,
  Stream: 3
};
var raw = /* @__PURE__ */ __name((value, callbacks) => {
  const escapedString = new String(value);
  escapedString.isEscaped = true;
  escapedString.callbacks = callbacks;
  return escapedString;
}, "raw");
var resolveCallback = /* @__PURE__ */ __name(async (str, phase, preserveCallbacks, context2, buffer) => {
  if (typeof str === "object" && !(str instanceof String)) {
    if (!(str instanceof Promise)) {
      str = str.toString();
    }
    if (str instanceof Promise) {
      str = await str;
    }
  }
  const callbacks = str.callbacks;
  if (!callbacks?.length) {
    return Promise.resolve(str);
  }
  if (buffer) {
    buffer[0] += str;
  } else {
    buffer = [str];
  }
  const resStr = Promise.all(callbacks.map((c) => c({ phase, buffer, context: context2 }))).then(
    (res) => Promise.all(
      res.filter(Boolean).map((str2) => resolveCallback(str2, phase, false, context2, buffer))
    ).then(() => buffer[0])
  );
  if (preserveCallbacks) {
    return raw(await resStr, callbacks);
  } else {
    return resStr;
  }
}, "resolveCallback");

// node_modules/hono/dist/context.js
var TEXT_PLAIN = "text/plain; charset=UTF-8";
var setDefaultContentType = /* @__PURE__ */ __name((contentType, headers) => {
  return {
    "Content-Type": contentType,
    ...headers
  };
}, "setDefaultContentType");
var Context = /* @__PURE__ */ __name(class {
  #rawRequest;
  #req;
  env = {};
  #var;
  finalized = false;
  error;
  #status;
  #executionCtx;
  #res;
  #layout;
  #renderer;
  #notFoundHandler;
  #preparedHeaders;
  #matchResult;
  #path;
  constructor(req, options) {
    this.#rawRequest = req;
    if (options) {
      this.#executionCtx = options.executionCtx;
      this.env = options.env;
      this.#notFoundHandler = options.notFoundHandler;
      this.#path = options.path;
      this.#matchResult = options.matchResult;
    }
  }
  get req() {
    this.#req ??= new HonoRequest(this.#rawRequest, this.#path, this.#matchResult);
    return this.#req;
  }
  get event() {
    if (this.#executionCtx && "respondWith" in this.#executionCtx) {
      return this.#executionCtx;
    } else {
      throw Error("This context has no FetchEvent");
    }
  }
  get executionCtx() {
    if (this.#executionCtx) {
      return this.#executionCtx;
    } else {
      throw Error("This context has no ExecutionContext");
    }
  }
  get res() {
    return this.#res ||= new Response(null, {
      headers: this.#preparedHeaders ??= new Headers()
    });
  }
  set res(_res) {
    if (this.#res && _res) {
      _res = new Response(_res.body, _res);
      for (const [k, v2] of this.#res.headers.entries()) {
        if (k === "content-type") {
          continue;
        }
        if (k === "set-cookie") {
          const cookies = this.#res.headers.getSetCookie();
          _res.headers.delete("set-cookie");
          for (const cookie of cookies) {
            _res.headers.append("set-cookie", cookie);
          }
        } else {
          _res.headers.set(k, v2);
        }
      }
    }
    this.#res = _res;
    this.finalized = true;
  }
  render = (...args) => {
    this.#renderer ??= (content) => this.html(content);
    return this.#renderer(...args);
  };
  setLayout = (layout) => this.#layout = layout;
  getLayout = () => this.#layout;
  setRenderer = (renderer) => {
    this.#renderer = renderer;
  };
  header = (name, value, options) => {
    if (this.finalized) {
      this.#res = new Response(this.#res.body, this.#res);
    }
    const headers = this.#res ? this.#res.headers : this.#preparedHeaders ??= new Headers();
    if (value === void 0) {
      headers.delete(name);
    } else if (options?.append) {
      headers.append(name, value);
    } else {
      headers.set(name, value);
    }
  };
  status = (status) => {
    this.#status = status;
  };
  set = (key, value) => {
    this.#var ??= /* @__PURE__ */ new Map();
    this.#var.set(key, value);
  };
  get = (key) => {
    return this.#var ? this.#var.get(key) : void 0;
  };
  get var() {
    if (!this.#var) {
      return {};
    }
    return Object.fromEntries(this.#var);
  }
  #newResponse(data, arg, headers) {
    const responseHeaders = this.#res ? new Headers(this.#res.headers) : this.#preparedHeaders ?? new Headers();
    if (typeof arg === "object" && "headers" in arg) {
      const argHeaders = arg.headers instanceof Headers ? arg.headers : new Headers(arg.headers);
      for (const [key, value] of argHeaders) {
        if (key.toLowerCase() === "set-cookie") {
          responseHeaders.append(key, value);
        } else {
          responseHeaders.set(key, value);
        }
      }
    }
    if (headers) {
      for (const [k, v2] of Object.entries(headers)) {
        if (typeof v2 === "string") {
          responseHeaders.set(k, v2);
        } else {
          responseHeaders.delete(k);
          for (const v22 of v2) {
            responseHeaders.append(k, v22);
          }
        }
      }
    }
    const status = typeof arg === "number" ? arg : arg?.status ?? this.#status;
    return new Response(data, { status, headers: responseHeaders });
  }
  newResponse = (...args) => this.#newResponse(...args);
  body = (data, arg, headers) => this.#newResponse(data, arg, headers);
  text = (text, arg, headers) => {
    return !this.#preparedHeaders && !this.#status && !arg && !headers && !this.finalized ? new Response(text) : this.#newResponse(
      text,
      arg,
      setDefaultContentType(TEXT_PLAIN, headers)
    );
  };
  json = (object, arg, headers) => {
    return this.#newResponse(
      JSON.stringify(object),
      arg,
      setDefaultContentType("application/json", headers)
    );
  };
  html = (html, arg, headers) => {
    const res = /* @__PURE__ */ __name((html2) => this.#newResponse(html2, arg, setDefaultContentType("text/html; charset=UTF-8", headers)), "res");
    return typeof html === "object" ? resolveCallback(html, HtmlEscapedCallbackPhase.Stringify, false, {}).then(res) : res(html);
  };
  redirect = (location, status) => {
    const locationString = String(location);
    this.header(
      "Location",
      !/[^\x00-\xFF]/.test(locationString) ? locationString : encodeURI(locationString)
    );
    return this.newResponse(null, status ?? 302);
  };
  notFound = () => {
    this.#notFoundHandler ??= () => new Response();
    return this.#notFoundHandler(this);
  };
}, "Context");

// node_modules/hono/dist/router.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var METHOD_NAME_ALL = "ALL";
var METHOD_NAME_ALL_LOWERCASE = "all";
var METHODS = ["get", "post", "put", "delete", "options", "patch"];
var MESSAGE_MATCHER_IS_ALREADY_BUILT = "Can not add a route since the matcher is already built.";
var UnsupportedPathError = /* @__PURE__ */ __name(class extends Error {
}, "UnsupportedPathError");

// node_modules/hono/dist/utils/constants.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var COMPOSED_HANDLER = "__COMPOSED_HANDLER";

// node_modules/hono/dist/hono-base.js
var notFoundHandler = /* @__PURE__ */ __name((c) => {
  return c.text("404 Not Found", 404);
}, "notFoundHandler");
var errorHandler = /* @__PURE__ */ __name((err, c) => {
  if ("getResponse" in err) {
    const res = err.getResponse();
    return c.newResponse(res.body, res);
  }
  console.error(err);
  return c.text("Internal Server Error", 500);
}, "errorHandler");
var Hono = /* @__PURE__ */ __name(class {
  get;
  post;
  put;
  delete;
  options;
  patch;
  all;
  on;
  use;
  router;
  getPath;
  _basePath = "/";
  #path = "/";
  routes = [];
  constructor(options = {}) {
    const allMethods = [...METHODS, METHOD_NAME_ALL_LOWERCASE];
    allMethods.forEach((method) => {
      this[method] = (args1, ...args) => {
        if (typeof args1 === "string") {
          this.#path = args1;
        } else {
          this.#addRoute(method, this.#path, args1);
        }
        args.forEach((handler) => {
          this.#addRoute(method, this.#path, handler);
        });
        return this;
      };
    });
    this.on = (method, path, ...handlers) => {
      for (const p of [path].flat()) {
        this.#path = p;
        for (const m of [method].flat()) {
          handlers.map((handler) => {
            this.#addRoute(m.toUpperCase(), this.#path, handler);
          });
        }
      }
      return this;
    };
    this.use = (arg1, ...handlers) => {
      if (typeof arg1 === "string") {
        this.#path = arg1;
      } else {
        this.#path = "*";
        handlers.unshift(arg1);
      }
      handlers.forEach((handler) => {
        this.#addRoute(METHOD_NAME_ALL, this.#path, handler);
      });
      return this;
    };
    const { strict, ...optionsWithoutStrict } = options;
    Object.assign(this, optionsWithoutStrict);
    this.getPath = strict ?? true ? options.getPath ?? getPath : getPathNoStrict;
  }
  #clone() {
    const clone = new Hono({
      router: this.router,
      getPath: this.getPath
    });
    clone.errorHandler = this.errorHandler;
    clone.#notFoundHandler = this.#notFoundHandler;
    clone.routes = this.routes;
    return clone;
  }
  #notFoundHandler = notFoundHandler;
  errorHandler = errorHandler;
  route(path, app2) {
    const subApp = this.basePath(path);
    app2.routes.map((r) => {
      let handler;
      if (app2.errorHandler === errorHandler) {
        handler = r.handler;
      } else {
        handler = /* @__PURE__ */ __name(async (c, next) => (await compose([], app2.errorHandler)(c, () => r.handler(c, next))).res, "handler");
        handler[COMPOSED_HANDLER] = r.handler;
      }
      subApp.#addRoute(r.method, r.path, handler);
    });
    return this;
  }
  basePath(path) {
    const subApp = this.#clone();
    subApp._basePath = mergePath(this._basePath, path);
    return subApp;
  }
  onError = (handler) => {
    this.errorHandler = handler;
    return this;
  };
  notFound = (handler) => {
    this.#notFoundHandler = handler;
    return this;
  };
  mount(path, applicationHandler, options) {
    let replaceRequest;
    let optionHandler;
    if (options) {
      if (typeof options === "function") {
        optionHandler = options;
      } else {
        optionHandler = options.optionHandler;
        if (options.replaceRequest === false) {
          replaceRequest = /* @__PURE__ */ __name((request) => request, "replaceRequest");
        } else {
          replaceRequest = options.replaceRequest;
        }
      }
    }
    const getOptions = optionHandler ? (c) => {
      const options2 = optionHandler(c);
      return Array.isArray(options2) ? options2 : [options2];
    } : (c) => {
      let executionContext = void 0;
      try {
        executionContext = c.executionCtx;
      } catch {
      }
      return [c.env, executionContext];
    };
    replaceRequest ||= (() => {
      const mergedPath = mergePath(this._basePath, path);
      const pathPrefixLength = mergedPath === "/" ? 0 : mergedPath.length;
      return (request) => {
        const url = new URL(request.url);
        url.pathname = url.pathname.slice(pathPrefixLength) || "/";
        return new Request(url, request);
      };
    })();
    const handler = /* @__PURE__ */ __name(async (c, next) => {
      const res = await applicationHandler(replaceRequest(c.req.raw), ...getOptions(c));
      if (res) {
        return res;
      }
      await next();
    }, "handler");
    this.#addRoute(METHOD_NAME_ALL, mergePath(path, "*"), handler);
    return this;
  }
  #addRoute(method, path, handler) {
    method = method.toUpperCase();
    path = mergePath(this._basePath, path);
    const r = { basePath: this._basePath, path, method, handler };
    this.router.add(method, path, [handler, r]);
    this.routes.push(r);
  }
  #handleError(err, c) {
    if (err instanceof Error) {
      return this.errorHandler(err, c);
    }
    throw err;
  }
  #dispatch(request, executionCtx, env2, method) {
    if (method === "HEAD") {
      return (async () => new Response(null, await this.#dispatch(request, executionCtx, env2, "GET")))();
    }
    const path = this.getPath(request, { env: env2 });
    const matchResult = this.router.match(method, path);
    const c = new Context(request, {
      path,
      matchResult,
      env: env2,
      executionCtx,
      notFoundHandler: this.#notFoundHandler
    });
    if (matchResult[0].length === 1) {
      let res;
      try {
        res = matchResult[0][0][0][0](c, async () => {
          c.res = await this.#notFoundHandler(c);
        });
      } catch (err) {
        return this.#handleError(err, c);
      }
      return res instanceof Promise ? res.then(
        (resolved) => resolved || (c.finalized ? c.res : this.#notFoundHandler(c))
      ).catch((err) => this.#handleError(err, c)) : res ?? this.#notFoundHandler(c);
    }
    const composed = compose(matchResult[0], this.errorHandler, this.#notFoundHandler);
    return (async () => {
      try {
        const context2 = await composed(c);
        if (!context2.finalized) {
          throw new Error(
            "Context is not finalized. Did you forget to return a Response object or `await next()`?"
          );
        }
        return context2.res;
      } catch (err) {
        return this.#handleError(err, c);
      }
    })();
  }
  fetch = (request, ...rest) => {
    return this.#dispatch(request, rest[1], rest[0], request.method);
  };
  request = (input, requestInit, Env, executionCtx) => {
    if (input instanceof Request) {
      return this.fetch(requestInit ? new Request(input, requestInit) : input, Env, executionCtx);
    }
    input = input.toString();
    return this.fetch(
      new Request(
        /^https?:\/\//.test(input) ? input : `http://localhost${mergePath("/", input)}`,
        requestInit
      ),
      Env,
      executionCtx
    );
  };
  fire = () => {
    addEventListener("fetch", (event) => {
      event.respondWith(this.#dispatch(event.request, event, void 0, event.request.method));
    });
  };
}, "Hono");

// node_modules/hono/dist/router/reg-exp-router/index.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/hono/dist/router/reg-exp-router/router.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/hono/dist/router/reg-exp-router/matcher.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var emptyParam = [];
function match(method, path) {
  const matchers = this.buildAllMatchers();
  const match2 = /* @__PURE__ */ __name((method2, path2) => {
    const matcher = matchers[method2] || matchers[METHOD_NAME_ALL];
    const staticMatch = matcher[2][path2];
    if (staticMatch) {
      return staticMatch;
    }
    const match3 = path2.match(matcher[0]);
    if (!match3) {
      return [[], emptyParam];
    }
    const index = match3.indexOf("", 1);
    return [matcher[1][index], match3];
  }, "match2");
  this.match = match2;
  return match2(method, path);
}
__name(match, "match");

// node_modules/hono/dist/router/reg-exp-router/node.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var LABEL_REG_EXP_STR = "[^/]+";
var ONLY_WILDCARD_REG_EXP_STR = ".*";
var TAIL_WILDCARD_REG_EXP_STR = "(?:|/.*)";
var PATH_ERROR = Symbol();
var regExpMetaChars = new Set(".\\+*[^]$()");
function compareKey(a, b) {
  if (a.length === 1) {
    return b.length === 1 ? a < b ? -1 : 1 : -1;
  }
  if (b.length === 1) {
    return 1;
  }
  if (a === ONLY_WILDCARD_REG_EXP_STR || a === TAIL_WILDCARD_REG_EXP_STR) {
    return 1;
  } else if (b === ONLY_WILDCARD_REG_EXP_STR || b === TAIL_WILDCARD_REG_EXP_STR) {
    return -1;
  }
  if (a === LABEL_REG_EXP_STR) {
    return 1;
  } else if (b === LABEL_REG_EXP_STR) {
    return -1;
  }
  return a.length === b.length ? a < b ? -1 : 1 : b.length - a.length;
}
__name(compareKey, "compareKey");
var Node = /* @__PURE__ */ __name(class {
  #index;
  #varIndex;
  #children = /* @__PURE__ */ Object.create(null);
  insert(tokens, index, paramMap, context2, pathErrorCheckOnly) {
    if (tokens.length === 0) {
      if (this.#index !== void 0) {
        throw PATH_ERROR;
      }
      if (pathErrorCheckOnly) {
        return;
      }
      this.#index = index;
      return;
    }
    const [token, ...restTokens] = tokens;
    const pattern = token === "*" ? restTokens.length === 0 ? ["", "", ONLY_WILDCARD_REG_EXP_STR] : ["", "", LABEL_REG_EXP_STR] : token === "/*" ? ["", "", TAIL_WILDCARD_REG_EXP_STR] : token.match(/^\:([^\{\}]+)(?:\{(.+)\})?$/);
    let node;
    if (pattern) {
      const name = pattern[1];
      let regexpStr = pattern[2] || LABEL_REG_EXP_STR;
      if (name && pattern[2]) {
        if (regexpStr === ".*") {
          throw PATH_ERROR;
        }
        regexpStr = regexpStr.replace(/^\((?!\?:)(?=[^)]+\)$)/, "(?:");
        if (/\((?!\?:)/.test(regexpStr)) {
          throw PATH_ERROR;
        }
      }
      node = this.#children[regexpStr];
      if (!node) {
        if (Object.keys(this.#children).some(
          (k) => k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR
        )) {
          throw PATH_ERROR;
        }
        if (pathErrorCheckOnly) {
          return;
        }
        node = this.#children[regexpStr] = new Node();
        if (name !== "") {
          node.#varIndex = context2.varIndex++;
        }
      }
      if (!pathErrorCheckOnly && name !== "") {
        paramMap.push([name, node.#varIndex]);
      }
    } else {
      node = this.#children[token];
      if (!node) {
        if (Object.keys(this.#children).some(
          (k) => k.length > 1 && k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR
        )) {
          throw PATH_ERROR;
        }
        if (pathErrorCheckOnly) {
          return;
        }
        node = this.#children[token] = new Node();
      }
    }
    node.insert(restTokens, index, paramMap, context2, pathErrorCheckOnly);
  }
  buildRegExpStr() {
    const childKeys = Object.keys(this.#children).sort(compareKey);
    const strList = childKeys.map((k) => {
      const c = this.#children[k];
      return (typeof c.#varIndex === "number" ? `(${k})@${c.#varIndex}` : regExpMetaChars.has(k) ? `\\${k}` : k) + c.buildRegExpStr();
    });
    if (typeof this.#index === "number") {
      strList.unshift(`#${this.#index}`);
    }
    if (strList.length === 0) {
      return "";
    }
    if (strList.length === 1) {
      return strList[0];
    }
    return "(?:" + strList.join("|") + ")";
  }
}, "Node");

// node_modules/hono/dist/router/reg-exp-router/trie.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var Trie = /* @__PURE__ */ __name(class {
  #context = { varIndex: 0 };
  #root = new Node();
  insert(path, index, pathErrorCheckOnly) {
    const paramAssoc = [];
    const groups = [];
    for (let i = 0; ; ) {
      let replaced = false;
      path = path.replace(/\{[^}]+\}/g, (m) => {
        const mark = `@\\${i}`;
        groups[i] = [mark, m];
        i++;
        replaced = true;
        return mark;
      });
      if (!replaced) {
        break;
      }
    }
    const tokens = path.match(/(?::[^\/]+)|(?:\/\*$)|./g) || [];
    for (let i = groups.length - 1; i >= 0; i--) {
      const [mark] = groups[i];
      for (let j = tokens.length - 1; j >= 0; j--) {
        if (tokens[j].indexOf(mark) !== -1) {
          tokens[j] = tokens[j].replace(mark, groups[i][1]);
          break;
        }
      }
    }
    this.#root.insert(tokens, index, paramAssoc, this.#context, pathErrorCheckOnly);
    return paramAssoc;
  }
  buildRegExp() {
    let regexp = this.#root.buildRegExpStr();
    if (regexp === "") {
      return [/^$/, [], []];
    }
    let captureIndex = 0;
    const indexReplacementMap = [];
    const paramReplacementMap = [];
    regexp = regexp.replace(/#(\d+)|@(\d+)|\.\*\$/g, (_, handlerIndex, paramIndex) => {
      if (handlerIndex !== void 0) {
        indexReplacementMap[++captureIndex] = Number(handlerIndex);
        return "$()";
      }
      if (paramIndex !== void 0) {
        paramReplacementMap[Number(paramIndex)] = ++captureIndex;
        return "";
      }
      return "";
    });
    return [new RegExp(`^${regexp}`), indexReplacementMap, paramReplacementMap];
  }
}, "Trie");

// node_modules/hono/dist/router/reg-exp-router/router.js
var nullMatcher = [/^$/, [], /* @__PURE__ */ Object.create(null)];
var wildcardRegExpCache = /* @__PURE__ */ Object.create(null);
function buildWildcardRegExp(path) {
  return wildcardRegExpCache[path] ??= new RegExp(
    path === "*" ? "" : `^${path.replace(
      /\/\*$|([.\\+*[^\]$()])/g,
      (_, metaChar) => metaChar ? `\\${metaChar}` : "(?:|/.*)"
    )}$`
  );
}
__name(buildWildcardRegExp, "buildWildcardRegExp");
function clearWildcardRegExpCache() {
  wildcardRegExpCache = /* @__PURE__ */ Object.create(null);
}
__name(clearWildcardRegExpCache, "clearWildcardRegExpCache");
function buildMatcherFromPreprocessedRoutes(routes) {
  const trie = new Trie();
  const handlerData = [];
  if (routes.length === 0) {
    return nullMatcher;
  }
  const routesWithStaticPathFlag = routes.map(
    (route) => [!/\*|\/:/.test(route[0]), ...route]
  ).sort(
    ([isStaticA, pathA], [isStaticB, pathB]) => isStaticA ? 1 : isStaticB ? -1 : pathA.length - pathB.length
  );
  const staticMap = /* @__PURE__ */ Object.create(null);
  for (let i = 0, j = -1, len = routesWithStaticPathFlag.length; i < len; i++) {
    const [pathErrorCheckOnly, path, handlers] = routesWithStaticPathFlag[i];
    if (pathErrorCheckOnly) {
      staticMap[path] = [handlers.map(([h]) => [h, /* @__PURE__ */ Object.create(null)]), emptyParam];
    } else {
      j++;
    }
    let paramAssoc;
    try {
      paramAssoc = trie.insert(path, j, pathErrorCheckOnly);
    } catch (e) {
      throw e === PATH_ERROR ? new UnsupportedPathError(path) : e;
    }
    if (pathErrorCheckOnly) {
      continue;
    }
    handlerData[j] = handlers.map(([h, paramCount]) => {
      const paramIndexMap = /* @__PURE__ */ Object.create(null);
      paramCount -= 1;
      for (; paramCount >= 0; paramCount--) {
        const [key, value] = paramAssoc[paramCount];
        paramIndexMap[key] = value;
      }
      return [h, paramIndexMap];
    });
  }
  const [regexp, indexReplacementMap, paramReplacementMap] = trie.buildRegExp();
  for (let i = 0, len = handlerData.length; i < len; i++) {
    for (let j = 0, len2 = handlerData[i].length; j < len2; j++) {
      const map2 = handlerData[i][j]?.[1];
      if (!map2) {
        continue;
      }
      const keys = Object.keys(map2);
      for (let k = 0, len3 = keys.length; k < len3; k++) {
        map2[keys[k]] = paramReplacementMap[map2[keys[k]]];
      }
    }
  }
  const handlerMap = [];
  for (const i in indexReplacementMap) {
    handlerMap[i] = handlerData[indexReplacementMap[i]];
  }
  return [regexp, handlerMap, staticMap];
}
__name(buildMatcherFromPreprocessedRoutes, "buildMatcherFromPreprocessedRoutes");
function findMiddleware(middleware, path) {
  if (!middleware) {
    return void 0;
  }
  for (const k of Object.keys(middleware).sort((a, b) => b.length - a.length)) {
    if (buildWildcardRegExp(k).test(path)) {
      return [...middleware[k]];
    }
  }
  return void 0;
}
__name(findMiddleware, "findMiddleware");
var RegExpRouter = /* @__PURE__ */ __name(class {
  name = "RegExpRouter";
  #middleware;
  #routes;
  constructor() {
    this.#middleware = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };
    this.#routes = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };
  }
  add(method, path, handler) {
    const middleware = this.#middleware;
    const routes = this.#routes;
    if (!middleware || !routes) {
      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);
    }
    if (!middleware[method]) {
      ;
      [middleware, routes].forEach((handlerMap) => {
        handlerMap[method] = /* @__PURE__ */ Object.create(null);
        Object.keys(handlerMap[METHOD_NAME_ALL]).forEach((p) => {
          handlerMap[method][p] = [...handlerMap[METHOD_NAME_ALL][p]];
        });
      });
    }
    if (path === "/*") {
      path = "*";
    }
    const paramCount = (path.match(/\/:/g) || []).length;
    if (/\*$/.test(path)) {
      const re = buildWildcardRegExp(path);
      if (method === METHOD_NAME_ALL) {
        Object.keys(middleware).forEach((m) => {
          middleware[m][path] ||= findMiddleware(middleware[m], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];
        });
      } else {
        middleware[method][path] ||= findMiddleware(middleware[method], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];
      }
      Object.keys(middleware).forEach((m) => {
        if (method === METHOD_NAME_ALL || method === m) {
          Object.keys(middleware[m]).forEach((p) => {
            re.test(p) && middleware[m][p].push([handler, paramCount]);
          });
        }
      });
      Object.keys(routes).forEach((m) => {
        if (method === METHOD_NAME_ALL || method === m) {
          Object.keys(routes[m]).forEach(
            (p) => re.test(p) && routes[m][p].push([handler, paramCount])
          );
        }
      });
      return;
    }
    const paths = checkOptionalParameter(path) || [path];
    for (let i = 0, len = paths.length; i < len; i++) {
      const path2 = paths[i];
      Object.keys(routes).forEach((m) => {
        if (method === METHOD_NAME_ALL || method === m) {
          routes[m][path2] ||= [
            ...findMiddleware(middleware[m], path2) || findMiddleware(middleware[METHOD_NAME_ALL], path2) || []
          ];
          routes[m][path2].push([handler, paramCount - len + i + 1]);
        }
      });
    }
  }
  match = match;
  buildAllMatchers() {
    const matchers = /* @__PURE__ */ Object.create(null);
    Object.keys(this.#routes).concat(Object.keys(this.#middleware)).forEach((method) => {
      matchers[method] ||= this.#buildMatcher(method);
    });
    this.#middleware = this.#routes = void 0;
    clearWildcardRegExpCache();
    return matchers;
  }
  #buildMatcher(method) {
    const routes = [];
    let hasOwnRoute = method === METHOD_NAME_ALL;
    [this.#middleware, this.#routes].forEach((r) => {
      const ownRoute = r[method] ? Object.keys(r[method]).map((path) => [path, r[method][path]]) : [];
      if (ownRoute.length !== 0) {
        hasOwnRoute ||= true;
        routes.push(...ownRoute);
      } else if (method !== METHOD_NAME_ALL) {
        routes.push(
          ...Object.keys(r[METHOD_NAME_ALL]).map((path) => [path, r[METHOD_NAME_ALL][path]])
        );
      }
    });
    if (!hasOwnRoute) {
      return null;
    } else {
      return buildMatcherFromPreprocessedRoutes(routes);
    }
  }
}, "RegExpRouter");

// node_modules/hono/dist/router/reg-exp-router/prepared-router.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/hono/dist/router/smart-router/index.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/hono/dist/router/smart-router/router.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var SmartRouter = /* @__PURE__ */ __name(class {
  name = "SmartRouter";
  #routers = [];
  #routes = [];
  constructor(init) {
    this.#routers = init.routers;
  }
  add(method, path, handler) {
    if (!this.#routes) {
      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);
    }
    this.#routes.push([method, path, handler]);
  }
  match(method, path) {
    if (!this.#routes) {
      throw new Error("Fatal error");
    }
    const routers = this.#routers;
    const routes = this.#routes;
    const len = routers.length;
    let i = 0;
    let res;
    for (; i < len; i++) {
      const router = routers[i];
      try {
        for (let i2 = 0, len2 = routes.length; i2 < len2; i2++) {
          router.add(...routes[i2]);
        }
        res = router.match(method, path);
      } catch (e) {
        if (e instanceof UnsupportedPathError) {
          continue;
        }
        throw e;
      }
      this.match = router.match.bind(router);
      this.#routers = [router];
      this.#routes = void 0;
      break;
    }
    if (i === len) {
      throw new Error("Fatal error");
    }
    this.name = `SmartRouter + ${this.activeRouter.name}`;
    return res;
  }
  get activeRouter() {
    if (this.#routes || this.#routers.length !== 1) {
      throw new Error("No active router has been determined yet.");
    }
    return this.#routers[0];
  }
}, "SmartRouter");

// node_modules/hono/dist/router/trie-router/index.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/hono/dist/router/trie-router/router.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/hono/dist/router/trie-router/node.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var emptyParams = /* @__PURE__ */ Object.create(null);
var Node2 = /* @__PURE__ */ __name(class {
  #methods;
  #children;
  #patterns;
  #order = 0;
  #params = emptyParams;
  constructor(method, handler, children) {
    this.#children = children || /* @__PURE__ */ Object.create(null);
    this.#methods = [];
    if (method && handler) {
      const m = /* @__PURE__ */ Object.create(null);
      m[method] = { handler, possibleKeys: [], score: 0 };
      this.#methods = [m];
    }
    this.#patterns = [];
  }
  insert(method, path, handler) {
    this.#order = ++this.#order;
    let curNode = this;
    const parts = splitRoutingPath(path);
    const possibleKeys = [];
    for (let i = 0, len = parts.length; i < len; i++) {
      const p = parts[i];
      const nextP = parts[i + 1];
      const pattern = getPattern(p, nextP);
      const key = Array.isArray(pattern) ? pattern[0] : p;
      if (key in curNode.#children) {
        curNode = curNode.#children[key];
        if (pattern) {
          possibleKeys.push(pattern[1]);
        }
        continue;
      }
      curNode.#children[key] = new Node2();
      if (pattern) {
        curNode.#patterns.push(pattern);
        possibleKeys.push(pattern[1]);
      }
      curNode = curNode.#children[key];
    }
    curNode.#methods.push({
      [method]: {
        handler,
        possibleKeys: possibleKeys.filter((v2, i, a) => a.indexOf(v2) === i),
        score: this.#order
      }
    });
    return curNode;
  }
  #getHandlerSets(node, method, nodeParams, params) {
    const handlerSets = [];
    for (let i = 0, len = node.#methods.length; i < len; i++) {
      const m = node.#methods[i];
      const handlerSet = m[method] || m[METHOD_NAME_ALL];
      const processedSet = {};
      if (handlerSet !== void 0) {
        handlerSet.params = /* @__PURE__ */ Object.create(null);
        handlerSets.push(handlerSet);
        if (nodeParams !== emptyParams || params && params !== emptyParams) {
          for (let i2 = 0, len2 = handlerSet.possibleKeys.length; i2 < len2; i2++) {
            const key = handlerSet.possibleKeys[i2];
            const processed = processedSet[handlerSet.score];
            handlerSet.params[key] = params?.[key] && !processed ? params[key] : nodeParams[key] ?? params?.[key];
            processedSet[handlerSet.score] = true;
          }
        }
      }
    }
    return handlerSets;
  }
  search(method, path) {
    const handlerSets = [];
    this.#params = emptyParams;
    const curNode = this;
    let curNodes = [curNode];
    const parts = splitPath(path);
    const curNodesQueue = [];
    for (let i = 0, len = parts.length; i < len; i++) {
      const part = parts[i];
      const isLast = i === len - 1;
      const tempNodes = [];
      for (let j = 0, len2 = curNodes.length; j < len2; j++) {
        const node = curNodes[j];
        const nextNode = node.#children[part];
        if (nextNode) {
          nextNode.#params = node.#params;
          if (isLast) {
            if (nextNode.#children["*"]) {
              handlerSets.push(
                ...this.#getHandlerSets(nextNode.#children["*"], method, node.#params)
              );
            }
            handlerSets.push(...this.#getHandlerSets(nextNode, method, node.#params));
          } else {
            tempNodes.push(nextNode);
          }
        }
        for (let k = 0, len3 = node.#patterns.length; k < len3; k++) {
          const pattern = node.#patterns[k];
          const params = node.#params === emptyParams ? {} : { ...node.#params };
          if (pattern === "*") {
            const astNode = node.#children["*"];
            if (astNode) {
              handlerSets.push(...this.#getHandlerSets(astNode, method, node.#params));
              astNode.#params = params;
              tempNodes.push(astNode);
            }
            continue;
          }
          const [key, name, matcher] = pattern;
          if (!part && !(matcher instanceof RegExp)) {
            continue;
          }
          const child = node.#children[key];
          const restPathString = parts.slice(i).join("/");
          if (matcher instanceof RegExp) {
            const m = matcher.exec(restPathString);
            if (m) {
              params[name] = m[0];
              handlerSets.push(...this.#getHandlerSets(child, method, node.#params, params));
              if (Object.keys(child.#children).length) {
                child.#params = params;
                const componentCount = m[0].match(/\//)?.length ?? 0;
                const targetCurNodes = curNodesQueue[componentCount] ||= [];
                targetCurNodes.push(child);
              }
              continue;
            }
          }
          if (matcher === true || matcher.test(part)) {
            params[name] = part;
            if (isLast) {
              handlerSets.push(...this.#getHandlerSets(child, method, params, node.#params));
              if (child.#children["*"]) {
                handlerSets.push(
                  ...this.#getHandlerSets(child.#children["*"], method, params, node.#params)
                );
              }
            } else {
              child.#params = params;
              tempNodes.push(child);
            }
          }
        }
      }
      curNodes = tempNodes.concat(curNodesQueue.shift() ?? []);
    }
    if (handlerSets.length > 1) {
      handlerSets.sort((a, b) => {
        return a.score - b.score;
      });
    }
    return [handlerSets.map(({ handler, params }) => [handler, params])];
  }
}, "Node");

// node_modules/hono/dist/router/trie-router/router.js
var TrieRouter = /* @__PURE__ */ __name(class {
  name = "TrieRouter";
  #node;
  constructor() {
    this.#node = new Node2();
  }
  add(method, path, handler) {
    const results = checkOptionalParameter(path);
    if (results) {
      for (let i = 0, len = results.length; i < len; i++) {
        this.#node.insert(method, results[i], handler);
      }
      return;
    }
    this.#node.insert(method, path, handler);
  }
  match(method, path) {
    return this.#node.search(method, path);
  }
}, "TrieRouter");

// node_modules/hono/dist/hono.js
var Hono2 = /* @__PURE__ */ __name(class extends Hono {
  constructor(options = {}) {
    super(options);
    this.router = options.router ?? new SmartRouter({
      routers: [new RegExpRouter(), new TrieRouter()]
    });
  }
}, "Hono");

// node_modules/hono/dist/middleware/cors/index.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var cors = /* @__PURE__ */ __name((options) => {
  const defaults = {
    origin: "*",
    allowMethods: ["GET", "HEAD", "PUT", "POST", "DELETE", "PATCH"],
    allowHeaders: [],
    exposeHeaders: []
  };
  const opts = {
    ...defaults,
    ...options
  };
  const findAllowOrigin = ((optsOrigin) => {
    if (typeof optsOrigin === "string") {
      if (optsOrigin === "*") {
        return () => optsOrigin;
      } else {
        return (origin) => optsOrigin === origin ? origin : null;
      }
    } else if (typeof optsOrigin === "function") {
      return optsOrigin;
    } else {
      return (origin) => optsOrigin.includes(origin) ? origin : null;
    }
  })(opts.origin);
  const findAllowMethods = ((optsAllowMethods) => {
    if (typeof optsAllowMethods === "function") {
      return optsAllowMethods;
    } else if (Array.isArray(optsAllowMethods)) {
      return () => optsAllowMethods;
    } else {
      return () => [];
    }
  })(opts.allowMethods);
  return /* @__PURE__ */ __name(async function cors2(c, next) {
    function set(key, value) {
      c.res.headers.set(key, value);
    }
    __name(set, "set");
    const allowOrigin = await findAllowOrigin(c.req.header("origin") || "", c);
    if (allowOrigin) {
      set("Access-Control-Allow-Origin", allowOrigin);
    }
    if (opts.origin !== "*") {
      const existingVary = c.req.header("Vary");
      if (existingVary) {
        set("Vary", existingVary);
      } else {
        set("Vary", "Origin");
      }
    }
    if (opts.credentials) {
      set("Access-Control-Allow-Credentials", "true");
    }
    if (opts.exposeHeaders?.length) {
      set("Access-Control-Expose-Headers", opts.exposeHeaders.join(","));
    }
    if (c.req.method === "OPTIONS") {
      if (opts.maxAge != null) {
        set("Access-Control-Max-Age", opts.maxAge.toString());
      }
      const allowMethods = await findAllowMethods(c.req.header("origin") || "", c);
      if (allowMethods.length) {
        set("Access-Control-Allow-Methods", allowMethods.join(","));
      }
      let headers = opts.allowHeaders;
      if (!headers?.length) {
        const requestHeaders = c.req.header("Access-Control-Request-Headers");
        if (requestHeaders) {
          headers = requestHeaders.split(/\s*,\s*/);
        }
      }
      if (headers?.length) {
        set("Access-Control-Allow-Headers", headers.join(","));
        c.res.headers.append("Vary", "Access-Control-Request-Headers");
      }
      c.res.headers.delete("Content-Length");
      c.res.headers.delete("Content-Type");
      return new Response(null, {
        headers: c.res.headers,
        status: 204,
        statusText: "No Content"
      });
    }
    await next();
  }, "cors2");
}, "cors");

// node_modules/@evex/linejs/client/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/@evex/linejs/client/client.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/@evex/linejs/client/features/square/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/@evex/linejs/base/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/@evex/linejs/base/core/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/@evex/linejs/base/core/utils/devices.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
function isV3Support(device) {
  return [
    "DESKTOPWIN",
    "DESKTOPMAC"
  ].includes(device);
}
__name(isV3Support, "isV3Support");
function getDeviceDetails(device, version2) {
  let appVersion;
  let systemName;
  let systemVersion;
  systemVersion = "12.1.4";
  switch (device) {
    case "DESKTOPWIN":
      appVersion = version2 || "9.2.0.3403";
      systemName = "WINDOWS";
      systemVersion = "10.0.0-NT-x64";
      break;
    case "DESKTOPMAC":
      appVersion = version2 || "9.2.0.3402";
      systemName = "MAC";
      break;
    case "ANDROID":
      appVersion = version2 || "13.4.1";
      systemName = "Android OS";
      break;
    case "IOS":
      appVersion = version2 || "13.3.0";
      systemName = "iOS";
      break;
    case "IOSIPAD":
      appVersion = version2 || "13.3.0";
      systemName = "iOS";
      break;
    case "WATCHOS":
      appVersion = version2 || "13.3.0";
      systemName = "Watch OS";
      break;
    case "WEAROS":
      appVersion = version2 || "13.4.1";
      systemName = "Wear OS";
      break;
    default:
      return null;
  }
  return {
    device,
    appVersion,
    systemName,
    systemVersion
  };
}
__name(getDeviceDetails, "getDeviceDetails");

// node_modules/@evex/linejs/base/storage/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/@evex/linejs/base/storage/base.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var BaseStorage = class {
};
__name(BaseStorage, "BaseStorage");

// node_modules/@evex/linejs/base/storage/file.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/unenv/dist/runtime/node/fs.mjs
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/unenv/dist/runtime/node/fs/promises.mjs
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/@evex/linejs/base/storage/memory.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var MemoryStorage = class extends BaseStorage {
  /**
  * Create a new MemoryStorage instance, with initial data.
  *
  * @param {Record<Storage["Key"], Storage["Value"]>} [extendData] - Initial data to be stored in the memory storage.
  */
  constructor(extendData) {
    super();
    if (extendData) {
      this.data = new Map(Object.entries(extendData));
    }
  }
  data = /* @__PURE__ */ new Map();
  async set(key, value) {
    this.data.set(key, value);
  }
  async get(key) {
    return this.data.get(key);
  }
  async delete(key) {
    this.data.delete(key);
  }
  async clear() {
    this.data.clear();
  }
  getAll() {
    return Object.fromEntries(this.data);
  }
  async migrate(storage) {
    const kv = this.getAll();
    for (const key in kv) {
      if (Object.prototype.hasOwnProperty.call(kv, key)) {
        const value = kv[key];
        await storage.set(key, value);
      }
    }
  }
};
__name(MemoryStorage, "MemoryStorage");

// node_modules/@evex/linejs/base/core/typed-event-emitter/index.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var TypedEventEmitter = class {
  listeners = /* @__PURE__ */ new Map();
  on(event, ...listeners2) {
    if (!this.listeners.has(event)) {
      this.listeners.set(event, []);
    }
    for (const listener of listeners2) {
      this.listeners.get(event)?.push(listener);
    }
    return this;
  }
  off(event, ...listeners2) {
    if (this.listeners.has(event)) {
      for (const listener of listeners2) {
        if (!this.listeners.get(event)?.includes(listener))
          continue;
        this.listeners.get(event)?.splice(this.listeners.get(event)?.indexOf(listener) ?? 0, 1);
      }
    }
    return this;
  }
  emit(event, ...args) {
    if (this.listeners.has(event)) {
      this.listeners.get(event)?.forEach((listener) => listener(...args));
    }
    return this;
  }
  /**
  * This creates a promise that you can use for a single event.
  * @param event A event name
  */
  waitFor(event) {
    return new Promise((resolve) => {
      const listener = /* @__PURE__ */ __name((...args) => {
        this.off(event, listener);
        resolve(args);
      }, "listener");
      this.on(event, listener);
    });
  }
};
__name(TypedEventEmitter, "TypedEventEmitter");

// node_modules/@evex/linejs/base/core/utils/error.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var InternalError = class extends Error {
  type;
  message;
  data;
  constructor(type, message, data = {}) {
    super(message), this.type = type, this.message = message, this.data = data;
    this.name = type;
    this.data = data;
  }
};
__name(InternalError, "InternalError");

// node_modules/@evex/linejs/base/core/utils/continue.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
async function continueRequest(options) {
  function objectSum(base, add) {
    for (const key in add) {
      if (Object.prototype.hasOwnProperty.call(add, key)) {
        const value = add[key];
        if (typeof value === "object") {
          if (!base[key]) {
            base[key] = value;
          } else {
            if (Array.isArray(value)) {
              base[key] = [
                ...value,
                ...base[key]
              ];
            } else {
              base[key] = objectSum(base[key], value);
            }
          }
        } else {
          base[key] = value;
        }
      }
    }
    return base;
  }
  __name(objectSum, "objectSum");
  let responseSum;
  let continuationToken;
  while (true) {
    options.arg.continuationToken = continuationToken;
    const _response = await options.handler(options.arg);
    if (!responseSum) {
      responseSum = _response;
    } else {
      objectSum(responseSum, _response);
    }
    if (!_response.continuationToken) {
      return responseSum;
    }
    continuationToken = _response.continuationToken;
  }
}
__name(continueRequest, "continueRequest");

// node_modules/@evex/linejs/base/service/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/@evex/linejs/base/service/auth/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/@evex/linejs/base/thrift/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/@evex/linejs/base/thrift/readwrite/declares.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var thrift = __toESM(require_browser2(), 1);
import { Buffer as Buffer2 } from "node:buffer";
var genHeader = {
  3: (name) => {
    return Buffer2.from([
      128,
      1,
      0,
      1,
      0,
      0,
      0,
      name.length,
      ...Buffer2.from(name),
      0,
      0,
      0,
      0
    ]);
  },
  4: (name) => {
    return Buffer2.from([
      130,
      33,
      0,
      name.length,
      ...Buffer2.from(name)
    ]);
  }
};
var Protocols = {
  4: thrift.TCompactProtocol,
  3: thrift.TBinaryProtocol
};

// node_modules/@evex/linejs/base/thrift/readwrite/struct.js
var struct_exports = {};
__export(struct_exports, {
  AbuseMessage: () => AbuseMessage,
  AbuseReport: () => AbuseReport,
  AbuseReportLineMeeting: () => AbuseReportLineMeeting,
  AcceptChatInvitationByTicketRequest: () => AcceptChatInvitationByTicketRequest,
  AcceptChatInvitationRequest: () => AcceptChatInvitationRequest,
  AcceptSpeakersRequest: () => AcceptSpeakersRequest,
  AcceptToChangeRoleRequest: () => AcceptToChangeRoleRequest,
  AcceptToListenRequest: () => AcceptToListenRequest,
  AcceptToSpeakRequest: () => AcceptToSpeakRequest,
  AccountIdentifier: () => AccountIdentifier,
  AccountMigrationPincodeType: () => AccountMigrationPincodeType,
  AcquireLiveTalkRequest: () => AcquireLiveTalkRequest,
  AcquireOACallRouteRequest: () => AcquireOACallRouteRequest,
  ActivateSubscriptionRequest: () => ActivateSubscriptionRequest,
  AdRequest: () => AdRequest,
  AdScreen: () => AdScreen,
  AdTypeOptOutClickEventRequest: () => AdTypeOptOutClickEventRequest,
  AddFriendByMidRequest: () => AddFriendByMidRequest,
  AddFriendTracking: () => AddFriendTracking,
  AddItemToCollectionRequest: () => AddItemToCollectionRequest,
  AddMetaByPhone: () => AddMetaByPhone,
  AddMetaBySearchId: () => AddMetaBySearchId,
  AddMetaByUserTicket: () => AddMetaByUserTicket,
  AddMetaChatNote: () => AddMetaChatNote,
  AddMetaChatNoteMenu: () => AddMetaChatNoteMenu,
  AddMetaGroupMemberList: () => AddMetaGroupMemberList,
  AddMetaGroupVideoCall: () => AddMetaGroupVideoCall,
  AddMetaInvalid: () => AddMetaInvalid,
  AddMetaMentionInChat: () => AddMetaMentionInChat,
  AddMetaProfileUndefined: () => AddMetaProfileUndefined,
  AddMetaSearchIdInUnifiedSearch: () => AddMetaSearchIdInUnifiedSearch,
  AddMetaShareContact: () => AddMetaShareContact,
  AddMetaStrangerCall: () => AddMetaStrangerCall,
  AddMetaStrangerMessage: () => AddMetaStrangerMessage,
  AddProductToSubscriptionSlotRequest: () => AddProductToSubscriptionSlotRequest,
  AddThemeToSubscriptionSlotRequest: () => AddThemeToSubscriptionSlotRequest,
  AddToFollowBlacklistRequest: () => AddToFollowBlacklistRequest,
  AgreeToTermsRequest: () => AgreeToTermsRequest,
  AllNonMemberLiveTalkParticipants: () => AllNonMemberLiveTalkParticipants,
  ApplicationType: () => ApplicationType,
  ApprovalValue: () => ApprovalValue,
  ApproveSquareMembersRequest: () => ApproveSquareMembersRequest,
  AuthPublicKeyCredential: () => AuthPublicKeyCredential,
  AuthSessionRequest: () => AuthSessionRequest,
  AuthenticateWithPaakRequest: () => AuthenticateWithPaakRequest,
  AuthenticationExtensionsClientOutputs: () => AuthenticationExtensionsClientOutputs,
  AuthenticatorAssertionResponse: () => AuthenticatorAssertionResponse,
  AutoSuggestionShowcaseRequest: () => AutoSuggestionShowcaseRequest,
  AvatarProfile: () => AvatarProfile,
  BannerRequest: () => BannerRequest,
  Beacon: () => Beacon,
  BeaconData: () => BeaconData,
  BirthdayGiftAssociationVerifyRequest: () => BirthdayGiftAssociationVerifyRequest,
  BooleanState: () => BooleanState,
  BulkFollowRequest: () => BulkFollowRequest,
  BulkGetRequest: () => BulkGetRequest,
  BuyMustbuyRequest: () => BuyMustbuyRequest,
  CanCreateCombinationStickerRequest: () => CanCreateCombinationStickerRequest,
  CancelChatInvitationRequest: () => CancelChatInvitationRequest,
  CancelPaakAuthRequest: () => CancelPaakAuthRequest,
  CancelPaakAuthenticationRequest: () => CancelPaakAuthenticationRequest,
  CancelPinCodeRequest: () => CancelPinCodeRequest,
  CancelReactionRequest: () => CancelReactionRequest,
  CancelToSpeakRequest: () => CancelToSpeakRequest,
  CarrierCode: () => CarrierCode,
  ChannelIdWithLastUpdated: () => ChannelIdWithLastUpdated,
  ChannelNotificationSetting: () => ChannelNotificationSetting,
  ChannelSettings: () => ChannelSettings,
  Chat: () => Chat,
  ChatRoomAnnouncementContentMetadata: () => ChatRoomAnnouncementContentMetadata,
  ChatRoomAnnouncementContents: () => ChatRoomAnnouncementContents,
  CheckIfEncryptedE2EEKeyReceivedRequest: () => CheckIfEncryptedE2EEKeyReceivedRequest,
  CheckIfPhonePinCodeMsgVerifiedRequest: () => CheckIfPhonePinCodeMsgVerifiedRequest,
  CheckJoinCodeRequest: () => CheckJoinCodeRequest,
  CheckUserAgeAfterApprovalWithDocomoV2Request: () => CheckUserAgeAfterApprovalWithDocomoV2Request,
  CheckUserAgeWithDocomoV2Request: () => CheckUserAgeWithDocomoV2Request,
  ClientNetworkStatus: () => ClientNetworkStatus,
  CodeValue: () => CodeValue,
  CoinPurchaseReservation: () => CoinPurchaseReservation,
  ConfigurationsParams: () => ConfigurationsParams,
  ConnectEapAccountRequest: () => ConnectEapAccountRequest,
  ContactModification: () => ContactModification,
  ContactSetting: () => ContactSetting,
  ContentRequest: () => ContentRequest,
  ContentType: () => ContentType,
  CreateChatRequest: () => CreateChatRequest,
  CreateGroupCallUrlRequest: () => CreateGroupCallUrlRequest,
  CreateMultiProfileRequest: () => CreateMultiProfileRequest,
  CreateSquareChatAnnouncementRequest: () => CreateSquareChatAnnouncementRequest,
  CreateSquareChatRequest: () => CreateSquareChatRequest,
  CreateSquareRequest: () => CreateSquareRequest,
  DeleteGroupCallUrlRequest: () => DeleteGroupCallUrlRequest,
  DeleteMultiProfileRequest: () => DeleteMultiProfileRequest,
  DeleteOtherFromChatRequest: () => DeleteOtherFromChatRequest,
  DeleteSafetyStatusRequest: () => DeleteSafetyStatusRequest,
  DeleteSelfFromChatRequest: () => DeleteSelfFromChatRequest,
  DeleteSquareChatAnnouncementRequest: () => DeleteSquareChatAnnouncementRequest,
  DeleteSquareChatRequest: () => DeleteSquareChatRequest,
  DeleteSquareRequest: () => DeleteSquareRequest,
  DestinationLIFFRequest: () => DestinationLIFFRequest,
  DestroyMessageRequest: () => DestroyMessageRequest,
  DestroyMessagesRequest: () => DestroyMessagesRequest,
  DetermineMediaMessageFlowRequest: () => DetermineMediaMessageFlowRequest,
  Device: () => Device,
  DeviceInfo: () => DeviceInfo,
  DeviceLinkRequest: () => DeviceLinkRequest,
  DeviceUnlinkRequest: () => DeviceUnlinkRequest,
  DisconnectEapAccountRequest: () => DisconnectEapAccountRequest,
  E2EEMetadata: () => E2EEMetadata,
  EapLogin: () => EapLogin,
  Eg_C8928b: () => Eg_C8928b,
  Eh_C8933a: () => Eh_C8933a,
  Eh_C8935c: () => Eh_C8935c,
  EmailConfirmationStatus: () => EmailConfirmationStatus,
  EvidenceId: () => EvidenceId,
  ExtendedProfile: () => ExtendedProfile,
  ExtendedProfileBirthday: () => ExtendedProfileBirthday,
  FetchDirection: () => FetchDirection,
  FetchLiveTalkEventsRequest: () => FetchLiveTalkEventsRequest,
  FetchMyEventsRequest: () => FetchMyEventsRequest,
  FetchOperationsRequest: () => FetchOperationsRequest,
  FetchPhonePinCodeMsgRequest: () => FetchPhonePinCodeMsgRequest,
  FetchSquareChatEventsRequest: () => FetchSquareChatEventsRequest,
  FetchType: () => FetchType,
  FindChatByTicketRequest: () => FindChatByTicketRequest,
  FindLiveTalkByInvitationTicketRequest: () => FindLiveTalkByInvitationTicketRequest,
  FindSquareByEmidRequest: () => FindSquareByEmidRequest,
  FindSquareByInvitationTicketRequest: () => FindSquareByInvitationTicketRequest,
  FindSquareByInvitationTicketV2Request: () => FindSquareByInvitationTicketV2Request,
  FollowRequest: () => FollowRequest,
  ForceEndLiveTalkRequest: () => ForceEndLiveTalkRequest,
  Geolocation: () => Geolocation,
  GeolocationAccuracy: () => GeolocationAccuracy,
  GetAccessTokenRequest: () => GetAccessTokenRequest,
  GetAllChatMidsRequest: () => GetAllChatMidsRequest,
  GetBleDeviceRequest: () => GetBleDeviceRequest,
  GetBuddyChatBarRequest: () => GetBuddyChatBarRequest,
  GetBuddyLiveRequest: () => GetBuddyLiveRequest,
  GetBuddyStatusBarV2Request: () => GetBuddyStatusBarV2Request,
  GetCallStatusRequest: () => GetCallStatusRequest,
  GetCampaignRequest: () => GetCampaignRequest,
  GetChallengeForPaakAuthRequest: () => GetChallengeForPaakAuthRequest,
  GetChallengeForPrimaryRegRequest: () => GetChallengeForPrimaryRegRequest,
  GetChannelContextRequest: () => GetChannelContextRequest,
  GetChatappRequest: () => GetChatappRequest,
  GetChatsRequest: () => GetChatsRequest,
  GetCoinHistoryRequest: () => GetCoinHistoryRequest,
  GetCoinProductsRequest: () => GetCoinProductsRequest,
  GetContactCalendarEventTarget: () => GetContactCalendarEventTarget,
  GetContactCalendarEventsRequest: () => GetContactCalendarEventsRequest,
  GetContactV3Target: () => GetContactV3Target,
  GetContactsV3Request: () => GetContactsV3Request,
  GetExchangeKeyRequest: () => GetExchangeKeyRequest,
  GetFollowBlacklistRequest: () => GetFollowBlacklistRequest,
  GetFollowersRequest: () => GetFollowersRequest,
  GetFollowingsRequest: () => GetFollowingsRequest,
  GetFontMetasRequest: () => GetFontMetasRequest,
  GetFriendDetailTarget: () => GetFriendDetailTarget,
  GetFriendDetailsRequest: () => GetFriendDetailsRequest,
  GetGnbBadgeStatusRequest: () => GetGnbBadgeStatusRequest,
  GetGoogleAdOptionsRequest: () => GetGoogleAdOptionsRequest,
  GetGroupCallUrlInfoRequest: () => GetGroupCallUrlInfoRequest,
  GetHomeFlexContentRequest: () => GetHomeFlexContentRequest,
  GetHomeServicesRequest: () => GetHomeServicesRequest,
  GetInvitationTicketUrlRequest: () => GetInvitationTicketUrlRequest,
  GetJoinableSquareChatsRequest: () => GetJoinableSquareChatsRequest,
  GetJoinedMembershipByBotMidRequest: () => GetJoinedMembershipByBotMidRequest,
  GetJoinedMembershipRequest: () => GetJoinedMembershipRequest,
  GetJoinedSquareChatsRequest: () => GetJoinedSquareChatsRequest,
  GetJoinedSquaresRequest: () => GetJoinedSquaresRequest,
  GetLiveTalkInfoForNonMemberRequest: () => GetLiveTalkInfoForNonMemberRequest,
  GetLiveTalkInvitationUrlRequest: () => GetLiveTalkInvitationUrlRequest,
  GetLiveTalkSpeakersForNonMemberRequest: () => GetLiveTalkSpeakersForNonMemberRequest,
  GetLoginActorContextRequest: () => GetLoginActorContextRequest,
  GetMappedProfileIdsRequest: () => GetMappedProfileIdsRequest,
  GetMessageReactionsRequest: () => GetMessageReactionsRequest,
  GetModuleLayoutV4Request: () => GetModuleLayoutV4Request,
  GetModulesRequestV2: () => GetModulesRequestV2,
  GetModulesRequestV3: () => GetModulesRequestV3,
  GetModulesV4WithStatusRequest: () => GetModulesV4WithStatusRequest,
  GetMyAssetInformationV2Request: () => GetMyAssetInformationV2Request,
  GetMyChatappsRequest: () => GetMyChatappsRequest,
  GetMyDashboardRequest: () => GetMyDashboardRequest,
  GetNoteStatusRequest: () => GetNoteStatusRequest,
  GetNotificationSettingsRequest: () => GetNotificationSettingsRequest,
  GetPasswordHashingParametersForPwdRegRequest: () => GetPasswordHashingParametersForPwdRegRequest,
  GetPasswordHashingParametersForPwdVerifRequest: () => GetPasswordHashingParametersForPwdVerifRequest,
  GetPasswordHashingParametersRequest: () => GetPasswordHashingParametersRequest,
  GetPhoneVerifMethodForRegistrationRequest: () => GetPhoneVerifMethodForRegistrationRequest,
  GetPhoneVerifMethodV2Request: () => GetPhoneVerifMethodV2Request,
  GetPopularKeywordsRequest: () => GetPopularKeywordsRequest,
  GetPredefinedScenarioSetsRequest: () => GetPredefinedScenarioSetsRequest,
  GetPreviousMessagesV2Request: () => GetPreviousMessagesV2Request,
  GetPublishedMembershipsRequest: () => GetPublishedMembershipsRequest,
  GetRecommendationDetailTarget: () => GetRecommendationDetailTarget,
  GetRecommendationDetailsRequest: () => GetRecommendationDetailsRequest,
  GetRepairElementsRequest: () => GetRepairElementsRequest,
  GetRequest: () => GetRequest,
  GetResponseStatusRequest: () => GetResponseStatusRequest,
  GetSCCRequest: () => GetSCCRequest,
  GetSmartChannelRecommendationsRequest: () => GetSmartChannelRecommendationsRequest,
  GetSquareAuthoritiesRequest: () => GetSquareAuthoritiesRequest,
  GetSquareAuthorityRequest: () => GetSquareAuthorityRequest,
  GetSquareBotRequest: () => GetSquareBotRequest,
  GetSquareCategoriesRequest: () => GetSquareCategoriesRequest,
  GetSquareChatAnnouncementsRequest: () => GetSquareChatAnnouncementsRequest,
  GetSquareChatEmidRequest: () => GetSquareChatEmidRequest,
  GetSquareChatFeatureSetRequest: () => GetSquareChatFeatureSetRequest,
  GetSquareChatMemberRequest: () => GetSquareChatMemberRequest,
  GetSquareChatMembersRequest: () => GetSquareChatMembersRequest,
  GetSquareChatRequest: () => GetSquareChatRequest,
  GetSquareChatStatusRequest: () => GetSquareChatStatusRequest,
  GetSquareEmidRequest: () => GetSquareEmidRequest,
  GetSquareFeatureSetRequest: () => GetSquareFeatureSetRequest,
  GetSquareInfoByChatMidRequest: () => GetSquareInfoByChatMidRequest,
  GetSquareMemberRelationRequest: () => GetSquareMemberRelationRequest,
  GetSquareMemberRelationsRequest: () => GetSquareMemberRelationsRequest,
  GetSquareMemberRequest: () => GetSquareMemberRequest,
  GetSquareMembersBySquareRequest: () => GetSquareMembersBySquareRequest,
  GetSquareMembersRequest: () => GetSquareMembersRequest,
  GetSquareRequest: () => GetSquareRequest,
  GetSquareStatusRequest: () => GetSquareStatusRequest,
  GetSquareThreadMidRequest: () => GetSquareThreadMidRequest,
  GetSquareThreadRequest: () => GetSquareThreadRequest,
  GetSubscriptionPlansRequest: () => GetSubscriptionPlansRequest,
  GetSubscriptionStatusRequest: () => GetSubscriptionStatusRequest,
  GetSuggestResourcesV2Request: () => GetSuggestResourcesV2Request,
  GetTaiwanBankBalanceRequest: () => GetTaiwanBankBalanceRequest,
  GetTargetProfileTarget: () => GetTargetProfileTarget,
  GetTargetProfilesRequest: () => GetTargetProfilesRequest,
  GetThaiBankBalanceRequest: () => GetThaiBankBalanceRequest,
  GetTotalCoinBalanceRequest: () => GetTotalCoinBalanceRequest,
  GetUserCollectionsRequest: () => GetUserCollectionsRequest,
  GetUserSettingsRequest: () => GetUserSettingsRequest,
  GetUserVectorRequest: () => GetUserVectorRequest,
  GetUsersMappedByProfileRequest: () => GetUsersMappedByProfileRequest,
  GroupExtra: () => GroupExtra,
  HideSquareMemberContentsRequest: () => HideSquareMemberContentsRequest,
  IdentifierConfirmationRequest: () => IdentifierConfirmationRequest,
  IdentityCredentialRequest: () => IdentityCredentialRequest,
  IdentityProvider: () => IdentityProvider,
  InviteFriendsRequest: () => InviteFriendsRequest,
  InviteIntoChatRequest: () => InviteIntoChatRequest,
  InviteIntoSquareChatRequest: () => InviteIntoSquareChatRequest,
  InviteToChangeRoleRequest: () => InviteToChangeRoleRequest,
  InviteToListenRequest: () => InviteToListenRequest,
  InviteToLiveTalkRequest: () => InviteToLiveTalkRequest,
  InviteToSpeakRequest: () => InviteToSpeakRequest,
  InviteToSquareRequest: () => InviteToSquareRequest,
  IsProductForCollectionsRequest: () => IsProductForCollectionsRequest,
  IsStickerAvailableForCombinationStickerRequest: () => IsStickerAvailableForCombinationStickerRequest,
  IssueBirthdayGiftTokenRequest: () => IssueBirthdayGiftTokenRequest,
  IssueV3TokenForPrimaryRequest: () => IssueV3TokenForPrimaryRequest,
  JoinChatByCallUrlRequest: () => JoinChatByCallUrlRequest,
  JoinLiveTalkRequest: () => JoinLiveTalkRequest,
  JoinSquareChatRequest: () => JoinSquareChatRequest,
  JoinSquareRequest: () => JoinSquareRequest,
  JoinSquareThreadRequest: () => JoinSquareThreadRequest,
  KickOutLiveTalkParticipantsRequest: () => KickOutLiveTalkParticipantsRequest,
  KickoutFromGroupCallRequest: () => KickoutFromGroupCallRequest,
  LN0_A: () => LN0_A,
  LN0_B: () => LN0_B,
  LN0_C11274d: () => LN0_C11274d,
  LN0_C11276e: () => LN0_C11276e,
  LN0_C11278f: () => LN0_C11278f,
  LN0_C11280g: () => LN0_C11280g,
  LN0_C11282h: () => LN0_C11282h,
  LN0_C11290l: () => LN0_C11290l,
  LN0_C11292m: () => LN0_C11292m,
  LN0_C11294n: () => LN0_C11294n,
  LN0_C11300q: () => LN0_C11300q,
  LN0_C11307u: () => LN0_C11307u,
  LN0_C11309v: () => LN0_C11309v,
  LN0_C11313x: () => LN0_C11313x,
  LN0_C11315y: () => LN0_C11315y,
  LN0_C11316z: () => LN0_C11316z,
  LN0_D: () => LN0_D,
  LN0_E: () => LN0_E,
  LN0_F: () => LN0_F,
  LN0_G: () => LN0_G,
  LN0_H: () => LN0_H,
  LN0_L: () => LN0_L,
  LN0_O: () => LN0_O,
  LN0_P: () => LN0_P,
  LN0_Q: () => LN0_Q,
  LN0_S: () => LN0_S,
  LN0_T: () => LN0_T,
  LN0_U: () => LN0_U,
  LN0_r: () => LN0_r,
  LatestProductsByAuthorRequest: () => LatestProductsByAuthorRequest,
  LeaveSquareChatRequest: () => LeaveSquareChatRequest,
  LeaveSquareRequest: () => LeaveSquareRequest,
  LeaveSquareThreadRequest: () => LeaveSquareThreadRequest,
  LiffAdvertisingId: () => LiffAdvertisingId,
  LiffChatContext: () => LiffChatContext,
  LiffDeviceSetting: () => LiffDeviceSetting,
  LiffSquareChatContext: () => LiffSquareChatContext,
  LiffViewRequest: () => LiffViewRequest,
  LiffViewWithoutUserContextRequest: () => LiffViewWithoutUserContextRequest,
  LiffWebLoginRequest: () => LiffWebLoginRequest,
  LiveTalk: () => LiveTalk,
  LiveTalkAttribute: () => LiveTalkAttribute,
  LiveTalkKickOutTarget: () => LiveTalkKickOutTarget,
  LiveTalkParticipant: () => LiveTalkParticipant,
  LiveTalkReportType: () => LiveTalkReportType,
  LiveTalkRole: () => LiveTalkRole,
  LiveTalkSpeakerSetting: () => LiveTalkSpeakerSetting,
  LiveTalkType: () => LiveTalkType,
  Locale: () => Locale,
  Location: () => Location,
  LocationDebugInfo: () => LocationDebugInfo,
  LookupAvailableEapRequest: () => LookupAvailableEapRequest,
  MIDType: () => MIDType,
  ManualRepairRequest: () => ManualRepairRequest,
  MapProfileToUsersRequest: () => MapProfileToUsersRequest,
  MarkAsReadRequest: () => MarkAsReadRequest,
  MarkChatsAsReadRequest: () => MarkChatsAsReadRequest,
  MarkThreadsAsReadRequest: () => MarkThreadsAsReadRequest,
  Message: () => Message,
  MessageBoxListRequest: () => MessageBoxListRequest,
  MessageBoxV2MessageId: () => MessageBoxV2MessageId,
  MessageReactionType: () => MessageReactionType,
  MessageSummaryReportType: () => MessageSummaryReportType,
  MessageVisibility: () => MessageVisibility,
  MigratePrimaryUsingQrCodeRequest: () => MigratePrimaryUsingQrCodeRequest,
  NZ0_C12150a0: () => NZ0_C12150a0,
  NZ0_C12155c: () => NZ0_C12155c,
  NZ0_C12208u: () => NZ0_C12208u,
  NZ0_C12214w: () => NZ0_C12214w,
  NZ0_E: () => NZ0_E,
  NZ0_EnumC12169g1: () => NZ0_EnumC12169g1,
  NZ0_G: () => NZ0_G,
  NZ0_S: () => NZ0_S,
  NZ0_U: () => NZ0_U,
  NotificationType: () => NotificationType,
  NotifyChatAdEntryRequest: () => NotifyChatAdEntryRequest,
  NotifyDeviceConnectionRequest: () => NotifyDeviceConnectionRequest,
  NotifyDeviceDisconnectionRequest: () => NotifyDeviceDisconnectionRequest,
  NotifyOATalkroomEventsRequest: () => NotifyOATalkroomEventsRequest,
  NotifyScenarioExecutedRequest: () => NotifyScenarioExecutedRequest,
  OATalkroomEvent: () => OATalkroomEvent,
  OATalkroomEventContext: () => OATalkroomEventContext,
  Ob1_C12606a0: () => Ob1_C12606a0,
  Ob1_C12618e0: () => Ob1_C12618e0,
  Ob1_C12630i0: () => Ob1_C12630i0,
  Ob1_C12660s1: () => Ob1_C12660s1,
  Ob1_K1: () => Ob1_K1,
  Ob1_O0: () => Ob1_O0,
  Ob1_a2: () => Ob1_a2,
  OpenSessionRequest: () => OpenSessionRequest,
  PaidCallType: () => PaidCallType,
  Pb1_A3: () => Pb1_A3,
  Pb1_A4: () => Pb1_A4,
  Pb1_A6: () => Pb1_A6,
  Pb1_B: () => Pb1_B,
  Pb1_C12938c: () => Pb1_C12938c,
  Pb1_C13042j5: () => Pb1_C13042j5,
  Pb1_C13070l5: () => Pb1_C13070l5,
  Pb1_C13097n4: () => Pb1_C13097n4,
  Pb1_C13126p5: () => Pb1_C13126p5,
  Pb1_C13155r7: () => Pb1_C13155r7,
  Pb1_C13183t7: () => Pb1_C13183t7,
  Pb1_C13208v4: () => Pb1_C13208v4,
  Pb1_C13263z3: () => Pb1_C13263z3,
  Pb1_D0: () => Pb1_D0,
  Pb1_D4: () => Pb1_D4,
  Pb1_D6: () => Pb1_D6,
  Pb1_E3: () => Pb1_E3,
  Pb1_E7: () => Pb1_E7,
  Pb1_EnumC12917a6: () => Pb1_EnumC12917a6,
  Pb1_EnumC12998g3: () => Pb1_EnumC12998g3,
  Pb1_EnumC13009h0: () => Pb1_EnumC13009h0,
  Pb1_EnumC13015h6: () => Pb1_EnumC13015h6,
  Pb1_EnumC13029i6: () => Pb1_EnumC13029i6,
  Pb1_EnumC13050k: () => Pb1_EnumC13050k,
  Pb1_EnumC13128p7: () => Pb1_EnumC13128p7,
  Pb1_EnumC13221w3: () => Pb1_EnumC13221w3,
  Pb1_EnumC13222w4: () => Pb1_EnumC13222w4,
  Pb1_EnumC13237x5: () => Pb1_EnumC13237x5,
  Pb1_F0: () => Pb1_F0,
  Pb1_F4: () => Pb1_F4,
  Pb1_F6: () => Pb1_F6,
  Pb1_G4: () => Pb1_G4,
  Pb1_H3: () => Pb1_H3,
  Pb1_H6: () => Pb1_H6,
  Pb1_I6: () => Pb1_I6,
  Pb1_J4: () => Pb1_J4,
  Pb1_M6: () => Pb1_M6,
  Pb1_N6: () => Pb1_N6,
  Pb1_O2: () => Pb1_O2,
  Pb1_O6: () => Pb1_O6,
  Pb1_Q2: () => Pb1_Q2,
  Pb1_S7: () => Pb1_S7,
  Pb1_V7: () => Pb1_V7,
  Pb1_W4: () => Pb1_W4,
  Pb1_W5: () => Pb1_W5,
  Pb1_W6: () => Pb1_W6,
  Pb1_X2: () => Pb1_X2,
  Pb1_X5: () => Pb1_X5,
  Pb1_Y4: () => Pb1_Y4,
  Pb1_Z2: () => Pb1_Z2,
  Pb1_ad: () => Pb1_ad,
  Pb1_gd: () => Pb1_gd,
  Pb1_od: () => Pb1_od,
  PermitLoginRequest: () => PermitLoginRequest,
  PoiInfo: () => PoiInfo,
  Price: () => Price,
  Profile: () => Profile,
  ProfileContent: () => ProfileContent,
  PurchaseEnabledRequest: () => PurchaseEnabledRequest,
  PurchaseOrder: () => PurchaseOrder,
  PurchaseSubscriptionRequest: () => PurchaseSubscriptionRequest,
  PushRecvReport: () => PushRecvReport,
  PutE2eeKeyRequest: () => PutE2eeKeyRequest,
  Q70_q: () => Q70_q,
  Qj_C13595l: () => Qj_C13595l,
  Qj_EnumC13584a: () => Qj_EnumC13584a,
  Qj_e0: () => Qj_e0,
  R70_c: () => R70_c,
  RSAEncryptedPassword: () => RSAEncryptedPassword,
  ReactRequest: () => ReactRequest,
  ReactToMessageRequest: () => ReactToMessageRequest,
  Reaction: () => Reaction,
  ReactionType: () => ReactionType,
  RefreshAccessTokenRequest: () => RefreshAccessTokenRequest,
  RefreshSubscriptionsRequest: () => RefreshSubscriptionsRequest,
  RegisterCampaignRewardRequest: () => RegisterCampaignRewardRequest,
  RegisterPrimaryCredentialRequest: () => RegisterPrimaryCredentialRequest,
  ReissueChatTicketRequest: () => ReissueChatTicketRequest,
  RejectChatInvitationRequest: () => RejectChatInvitationRequest,
  RejectSpeakersRequest: () => RejectSpeakersRequest,
  RejectSquareMembersRequest: () => RejectSquareMembersRequest,
  RejectToSpeakRequest: () => RejectToSpeakRequest,
  RemoveFollowerRequest: () => RemoveFollowerRequest,
  RemoveFromFollowBlacklistRequest: () => RemoveFromFollowBlacklistRequest,
  RemoveItemFromCollectionRequest: () => RemoveItemFromCollectionRequest,
  RemoveLiveTalkSubscriptionRequest: () => RemoveLiveTalkSubscriptionRequest,
  RemoveProductFromSubscriptionSlotRequest: () => RemoveProductFromSubscriptionSlotRequest,
  RemoveSubscriptionsRequest: () => RemoveSubscriptionsRequest,
  RepairGroupMembers: () => RepairGroupMembers,
  ReportAbuseExRequest: () => ReportAbuseExRequest,
  ReportLiveTalkRequest: () => ReportLiveTalkRequest,
  ReportLiveTalkSpeakerRequest: () => ReportLiveTalkSpeakerRequest,
  ReportMessageSummaryRequest: () => ReportMessageSummaryRequest,
  ReportRefreshedAccessTokenRequest: () => ReportRefreshedAccessTokenRequest,
  ReportSquareChatRequest: () => ReportSquareChatRequest,
  ReportSquareMemberRequest: () => ReportSquareMemberRequest,
  ReportSquareMessageRequest: () => ReportSquareMessageRequest,
  ReportSquareRequest: () => ReportSquareRequest,
  ReportType: () => ReportType,
  ReqToSendPhonePinCodeRequest: () => ReqToSendPhonePinCodeRequest,
  RequestToListenRequest: () => RequestToListenRequest,
  RequestToSpeakRequest: () => RequestToSpeakRequest,
  ReserveRequest: () => ReserveRequest,
  ReserveSubscriptionPurchaseRequest: () => ReserveSubscriptionPurchaseRequest,
  RevokeTokensRequest: () => RevokeTokensRequest,
  RichmenuCoordinates: () => RichmenuCoordinates,
  RichmenuEvent: () => RichmenuEvent,
  S70_b: () => S70_b,
  SIMInfo: () => SIMInfo,
  SKAdNetwork: () => SKAdNetwork,
  SaveStudentInformationRequest: () => SaveStudentInformationRequest,
  SearchSquareChatMembersRequest: () => SearchSquareChatMembersRequest,
  SearchSquareChatMentionablesRequest: () => SearchSquareChatMentionablesRequest,
  SearchSquareMembersRequest: () => SearchSquareMembersRequest,
  SearchSquaresRequest: () => SearchSquaresRequest,
  SendEncryptedE2EEKeyRequest: () => SendEncryptedE2EEKeyRequest,
  SendMessageRequest: () => SendMessageRequest,
  SendPostbackRequest: () => SendPostbackRequest,
  SendSquareThreadMessageRequest: () => SendSquareThreadMessageRequest,
  SetChatHiddenStatusRequest: () => SetChatHiddenStatusRequest,
  SetHashedPasswordRequest: () => SetHashedPasswordRequest,
  SetPasswordRequest: () => SetPasswordRequest,
  Settings: () => Settings,
  SettingsAttributeEx: () => SettingsAttributeEx,
  ShareTargetPickerResultRequest: () => ShareTargetPickerResultRequest,
  SimCard: () => SimCard,
  SingleValueMetadata: () => SingleValueMetadata,
  SocialLogin: () => SocialLogin,
  Square: () => Square,
  SquareAttribute: () => SquareAttribute,
  SquareAuthority: () => SquareAuthority,
  SquareAuthorityAttribute: () => SquareAuthorityAttribute,
  SquareChat: () => SquareChat,
  SquareChatAnnouncement: () => SquareChatAnnouncement,
  SquareChatAnnouncementContents: () => SquareChatAnnouncementContents,
  SquareChatAttribute: () => SquareChatAttribute,
  SquareChatMember: () => SquareChatMember,
  SquareChatMemberAttribute: () => SquareChatMemberAttribute,
  SquareChatMemberSearchOption: () => SquareChatMemberSearchOption,
  SquareChatMembershipState: () => SquareChatMembershipState,
  SquareChatMentionableSearchOption: () => SquareChatMentionableSearchOption,
  SquareChatState: () => SquareChatState,
  SquareChatType: () => SquareChatType,
  SquareEmblem: () => SquareEmblem,
  SquareFeature: () => SquareFeature,
  SquareFeatureControlState: () => SquareFeatureControlState,
  SquareFeatureSet: () => SquareFeatureSet,
  SquareFeatureSetAttribute: () => SquareFeatureSetAttribute,
  SquareJoinMethod: () => SquareJoinMethod,
  SquareJoinMethodType: () => SquareJoinMethodType,
  SquareJoinMethodValue: () => SquareJoinMethodValue,
  SquareMember: () => SquareMember,
  SquareMemberAttribute: () => SquareMemberAttribute,
  SquareMemberRelation: () => SquareMemberRelation,
  SquareMemberRelationState: () => SquareMemberRelationState,
  SquareMemberRole: () => SquareMemberRole,
  SquareMemberSearchOption: () => SquareMemberSearchOption,
  SquareMembershipState: () => SquareMembershipState,
  SquareMessage: () => SquareMessage,
  SquareMessageState: () => SquareMessageState,
  SquareMessageThreadInfo: () => SquareMessageThreadInfo,
  SquarePreference: () => SquarePreference,
  SquarePreferenceAttribute: () => SquarePreferenceAttribute,
  SquareService_acceptSpeakers_args: () => SquareService_acceptSpeakers_args,
  SquareService_acceptToChangeRole_args: () => SquareService_acceptToChangeRole_args,
  SquareService_acceptToListen_args: () => SquareService_acceptToListen_args,
  SquareService_acceptToSpeak_args: () => SquareService_acceptToSpeak_args,
  SquareService_acquireLiveTalk_args: () => SquareService_acquireLiveTalk_args,
  SquareService_agreeToTerms_args: () => SquareService_agreeToTerms_args,
  SquareService_approveSquareMembers_args: () => SquareService_approveSquareMembers_args,
  SquareService_cancelToSpeak_args: () => SquareService_cancelToSpeak_args,
  SquareService_checkJoinCode_args: () => SquareService_checkJoinCode_args,
  SquareService_createSquareChatAnnouncement_args: () => SquareService_createSquareChatAnnouncement_args,
  SquareService_createSquareChat_args: () => SquareService_createSquareChat_args,
  SquareService_createSquare_args: () => SquareService_createSquare_args,
  SquareService_deleteSquareChatAnnouncement_args: () => SquareService_deleteSquareChatAnnouncement_args,
  SquareService_deleteSquareChat_args: () => SquareService_deleteSquareChat_args,
  SquareService_deleteSquare_args: () => SquareService_deleteSquare_args,
  SquareService_destroyMessage_args: () => SquareService_destroyMessage_args,
  SquareService_destroyMessages_args: () => SquareService_destroyMessages_args,
  SquareService_fetchLiveTalkEvents_args: () => SquareService_fetchLiveTalkEvents_args,
  SquareService_fetchMyEvents_args: () => SquareService_fetchMyEvents_args,
  SquareService_fetchSquareChatEvents_args: () => SquareService_fetchSquareChatEvents_args,
  SquareService_findLiveTalkByInvitationTicket_args: () => SquareService_findLiveTalkByInvitationTicket_args,
  SquareService_findSquareByEmid_args: () => SquareService_findSquareByEmid_args,
  SquareService_findSquareByInvitationTicketV2_args: () => SquareService_findSquareByInvitationTicketV2_args,
  SquareService_findSquareByInvitationTicket_args: () => SquareService_findSquareByInvitationTicket_args,
  SquareService_forceEndLiveTalk_args: () => SquareService_forceEndLiveTalk_args,
  SquareService_getCategories_args: () => SquareService_getCategories_args,
  SquareService_getGoogleAdOptions_args: () => SquareService_getGoogleAdOptions_args,
  SquareService_getInvitationTicketUrl_args: () => SquareService_getInvitationTicketUrl_args,
  SquareService_getJoinableSquareChats_args: () => SquareService_getJoinableSquareChats_args,
  SquareService_getJoinedSquareChats_args: () => SquareService_getJoinedSquareChats_args,
  SquareService_getJoinedSquares_args: () => SquareService_getJoinedSquares_args,
  SquareService_getLiveTalkInfoForNonMember_args: () => SquareService_getLiveTalkInfoForNonMember_args,
  SquareService_getLiveTalkInvitationUrl_args: () => SquareService_getLiveTalkInvitationUrl_args,
  SquareService_getLiveTalkSpeakersForNonMember_args: () => SquareService_getLiveTalkSpeakersForNonMember_args,
  SquareService_getMessageReactions_args: () => SquareService_getMessageReactions_args,
  SquareService_getNoteStatus_args: () => SquareService_getNoteStatus_args,
  SquareService_getPopularKeywords_args: () => SquareService_getPopularKeywords_args,
  SquareService_getSquareAuthorities_args: () => SquareService_getSquareAuthorities_args,
  SquareService_getSquareAuthority_args: () => SquareService_getSquareAuthority_args,
  SquareService_getSquareChatAnnouncements_args: () => SquareService_getSquareChatAnnouncements_args,
  SquareService_getSquareChatEmid_args: () => SquareService_getSquareChatEmid_args,
  SquareService_getSquareChatFeatureSet_args: () => SquareService_getSquareChatFeatureSet_args,
  SquareService_getSquareChatMember_args: () => SquareService_getSquareChatMember_args,
  SquareService_getSquareChatMembers_args: () => SquareService_getSquareChatMembers_args,
  SquareService_getSquareChatStatus_args: () => SquareService_getSquareChatStatus_args,
  SquareService_getSquareChat_args: () => SquareService_getSquareChat_args,
  SquareService_getSquareEmid_args: () => SquareService_getSquareEmid_args,
  SquareService_getSquareFeatureSet_args: () => SquareService_getSquareFeatureSet_args,
  SquareService_getSquareInfoByChatMid_args: () => SquareService_getSquareInfoByChatMid_args,
  SquareService_getSquareMemberRelation_args: () => SquareService_getSquareMemberRelation_args,
  SquareService_getSquareMemberRelations_args: () => SquareService_getSquareMemberRelations_args,
  SquareService_getSquareMember_args: () => SquareService_getSquareMember_args,
  SquareService_getSquareMembersBySquare_args: () => SquareService_getSquareMembersBySquare_args,
  SquareService_getSquareMembers_args: () => SquareService_getSquareMembers_args,
  SquareService_getSquareStatus_args: () => SquareService_getSquareStatus_args,
  SquareService_getSquareThreadMid_args: () => SquareService_getSquareThreadMid_args,
  SquareService_getSquareThread_args: () => SquareService_getSquareThread_args,
  SquareService_getSquare_args: () => SquareService_getSquare_args,
  SquareService_getUserSettings_args: () => SquareService_getUserSettings_args,
  SquareService_hideSquareMemberContents_args: () => SquareService_hideSquareMemberContents_args,
  SquareService_inviteIntoSquareChat_args: () => SquareService_inviteIntoSquareChat_args,
  SquareService_inviteToChangeRole_args: () => SquareService_inviteToChangeRole_args,
  SquareService_inviteToListen_args: () => SquareService_inviteToListen_args,
  SquareService_inviteToLiveTalk_args: () => SquareService_inviteToLiveTalk_args,
  SquareService_inviteToSpeak_args: () => SquareService_inviteToSpeak_args,
  SquareService_inviteToSquare_args: () => SquareService_inviteToSquare_args,
  SquareService_joinLiveTalk_args: () => SquareService_joinLiveTalk_args,
  SquareService_joinSquareChat_args: () => SquareService_joinSquareChat_args,
  SquareService_joinSquareThread_args: () => SquareService_joinSquareThread_args,
  SquareService_joinSquare_args: () => SquareService_joinSquare_args,
  SquareService_kickOutLiveTalkParticipants_args: () => SquareService_kickOutLiveTalkParticipants_args,
  SquareService_leaveSquareChat_args: () => SquareService_leaveSquareChat_args,
  SquareService_leaveSquareThread_args: () => SquareService_leaveSquareThread_args,
  SquareService_leaveSquare_args: () => SquareService_leaveSquare_args,
  SquareService_manualRepair_args: () => SquareService_manualRepair_args,
  SquareService_markAsRead_args: () => SquareService_markAsRead_args,
  SquareService_markChatsAsRead_args: () => SquareService_markChatsAsRead_args,
  SquareService_markThreadsAsRead_args: () => SquareService_markThreadsAsRead_args,
  SquareService_reactToMessage_args: () => SquareService_reactToMessage_args,
  SquareService_refreshSubscriptions_args: () => SquareService_refreshSubscriptions_args,
  SquareService_rejectSpeakers_args: () => SquareService_rejectSpeakers_args,
  SquareService_rejectSquareMembers_args: () => SquareService_rejectSquareMembers_args,
  SquareService_rejectToSpeak_args: () => SquareService_rejectToSpeak_args,
  SquareService_removeLiveTalkSubscription_args: () => SquareService_removeLiveTalkSubscription_args,
  SquareService_removeSubscriptions_args: () => SquareService_removeSubscriptions_args,
  SquareService_reportLiveTalkSpeaker_args: () => SquareService_reportLiveTalkSpeaker_args,
  SquareService_reportLiveTalk_args: () => SquareService_reportLiveTalk_args,
  SquareService_reportMessageSummary_args: () => SquareService_reportMessageSummary_args,
  SquareService_reportSquareChat_args: () => SquareService_reportSquareChat_args,
  SquareService_reportSquareMember_args: () => SquareService_reportSquareMember_args,
  SquareService_reportSquareMessage_args: () => SquareService_reportSquareMessage_args,
  SquareService_reportSquare_args: () => SquareService_reportSquare_args,
  SquareService_requestToListen_args: () => SquareService_requestToListen_args,
  SquareService_requestToSpeak_args: () => SquareService_requestToSpeak_args,
  SquareService_searchSquareChatMembers_args: () => SquareService_searchSquareChatMembers_args,
  SquareService_searchSquareChatMentionables_args: () => SquareService_searchSquareChatMentionables_args,
  SquareService_searchSquareMembers_args: () => SquareService_searchSquareMembers_args,
  SquareService_searchSquares_args: () => SquareService_searchSquares_args,
  SquareService_sendMessage_args: () => SquareService_sendMessage_args,
  SquareService_sendSquareThreadMessage_args: () => SquareService_sendSquareThreadMessage_args,
  SquareService_syncSquareMembers_args: () => SquareService_syncSquareMembers_args,
  SquareService_unhideSquareMemberContents_args: () => SquareService_unhideSquareMemberContents_args,
  SquareService_unsendMessage_args: () => SquareService_unsendMessage_args,
  SquareService_updateLiveTalkAttrs_args: () => SquareService_updateLiveTalkAttrs_args,
  SquareService_updateSquareAuthority_args: () => SquareService_updateSquareAuthority_args,
  SquareService_updateSquareChatMember_args: () => SquareService_updateSquareChatMember_args,
  SquareService_updateSquareChat_args: () => SquareService_updateSquareChat_args,
  SquareService_updateSquareFeatureSet_args: () => SquareService_updateSquareFeatureSet_args,
  SquareService_updateSquareMemberRelation_args: () => SquareService_updateSquareMemberRelation_args,
  SquareService_updateSquareMember_args: () => SquareService_updateSquareMember_args,
  SquareService_updateSquareMembers_args: () => SquareService_updateSquareMembers_args,
  SquareService_updateSquare_args: () => SquareService_updateSquare_args,
  SquareService_updateUserSettings_args: () => SquareService_updateUserSettings_args,
  SquareState: () => SquareState,
  SquareType: () => SquareType,
  SquareUserSettings: () => SquareUserSettings,
  StartPhotoboothRequest: () => StartPhotoboothRequest,
  StopBundleSubscriptionRequest: () => StopBundleSubscriptionRequest,
  StudentInformation: () => StudentInformation,
  SubWindowResultRequest: () => SubWindowResultRequest,
  SyncRequest: () => SyncRequest,
  SyncSquareMembersRequest: () => SyncSquareMembersRequest,
  T70_EnumC14390b: () => T70_EnumC14390b,
  T70_K: () => T70_K,
  T70_j1: () => T70_j1,
  TalkroomEnterReferer: () => TalkroomEnterReferer,
  TalkroomEvent: () => TalkroomEvent,
  TermsAgreement: () => TermsAgreement,
  TextMessageAnnouncementContents: () => TextMessageAnnouncementContents,
  UEN: () => UEN,
  Uf_C14856C: () => Uf_C14856C,
  Uf_EnumC14873o: () => Uf_EnumC14873o,
  UnfollowRequest: () => UnfollowRequest,
  UnhideSquareMemberContentsRequest: () => UnhideSquareMemberContentsRequest,
  UnsendMessageRequest: () => UnsendMessageRequest,
  UpdateChatRequest: () => UpdateChatRequest,
  UpdateGroupCallUrlRequest: () => UpdateGroupCallUrlRequest,
  UpdateLiveTalkAttrsRequest: () => UpdateLiveTalkAttrsRequest,
  UpdatePasswordRequest: () => UpdatePasswordRequest,
  UpdateProfileAttributesRequest: () => UpdateProfileAttributesRequest,
  UpdateSafetyStatusRequest: () => UpdateSafetyStatusRequest,
  UpdateSquareAuthorityRequest: () => UpdateSquareAuthorityRequest,
  UpdateSquareChatMemberRequest: () => UpdateSquareChatMemberRequest,
  UpdateSquareChatRequest: () => UpdateSquareChatRequest,
  UpdateSquareFeatureSetRequest: () => UpdateSquareFeatureSetRequest,
  UpdateSquareMemberRelationRequest: () => UpdateSquareMemberRelationRequest,
  UpdateSquareMemberRequest: () => UpdateSquareMemberRequest,
  UpdateSquareMembersRequest: () => UpdateSquareMembersRequest,
  UpdateSquareRequest: () => UpdateSquareRequest,
  UpdateUserSettingsRequest: () => UpdateUserSettingsRequest,
  UsePhotoboothTicketRequest: () => UsePhotoboothTicketRequest,
  UserPhoneNumber: () => UserPhoneNumber,
  VR0_l: () => VR0_l,
  VerificationMethod: () => VerificationMethod,
  VerifyAccountUsingHashedPwdRequest: () => VerifyAccountUsingHashedPwdRequest,
  VerifyAssertionRequest: () => VerifyAssertionRequest,
  VerifyAttestationRequest: () => VerifyAttestationRequest,
  VerifyEapLoginRequest: () => VerifyEapLoginRequest,
  VerifyPhonePinCodeRequest: () => VerifyPhonePinCodeRequest,
  VerifyPinCodeRequest: () => VerifyPinCodeRequest,
  VerifyQrCodeRequest: () => VerifyQrCodeRequest,
  WebLoginRequest: () => WebLoginRequest,
  WifiSignal: () => WifiSignal,
  ZQ0_b: () => ZQ0_b,
  a80_EnumC16644b: () => a80_EnumC16644b,
  acceptChatInvitationByTicket_args: () => acceptChatInvitationByTicket_args,
  acceptChatInvitation_args: () => acceptChatInvitation_args,
  acquireCallRoute_args: () => acquireCallRoute_args,
  acquireEncryptedAccessToken_args: () => acquireEncryptedAccessToken_args,
  acquireGroupCallRoute_args: () => acquireGroupCallRoute_args,
  acquireOACallRoute_args: () => acquireOACallRoute_args,
  acquirePaidCallRoute_args: () => acquirePaidCallRoute_args,
  activateSubscription_args: () => activateSubscription_args,
  adTypeOptOutClickEvent_args: () => adTypeOptOutClickEvent_args,
  addFriendByMid_args: () => addFriendByMid_args,
  addItemToCollection_args: () => addItemToCollection_args,
  addOaFriend_args: () => addOaFriend_args,
  addProductToSubscriptionSlot_args: () => addProductToSubscriptionSlot_args,
  addThemeToSubscriptionSlot_args: () => addThemeToSubscriptionSlot_args,
  addToFollowBlacklist_args: () => addToFollowBlacklist_args,
  approveChannelAndIssueChannelToken_args: () => approveChannelAndIssueChannelToken_args,
  authenticateUsingBankAccountEx_args: () => authenticateUsingBankAccountEx_args,
  authenticateWithPaak_args: () => authenticateWithPaak_args,
  blockContact_args: () => blockContact_args,
  blockRecommendation_args: () => blockRecommendation_args,
  bulkFollow_args: () => bulkFollow_args,
  bulkGetSetting_args: () => bulkGetSetting_args,
  bulkSetSetting_args: () => bulkSetSetting_args,
  buyMustbuyProduct_args: () => buyMustbuyProduct_args,
  canCreateCombinationSticker_args: () => canCreateCombinationSticker_args,
  canReceivePresent_args: () => canReceivePresent_args,
  cancelChatInvitation_args: () => cancelChatInvitation_args,
  cancelPaakAuth_args: () => cancelPaakAuth_args,
  cancelPaakAuthentication_args: () => cancelPaakAuthentication_args,
  cancelPinCode_args: () => cancelPinCode_args,
  cancelReaction_args: () => cancelReaction_args,
  changeSubscription_args: () => changeSubscription_args,
  changeVerificationMethod_args: () => changeVerificationMethod_args,
  checkCanUnregisterEx_args: () => checkCanUnregisterEx_args,
  checkEmailAssigned_args: () => checkEmailAssigned_args,
  checkIfEncryptedE2EEKeyReceived_args: () => checkIfEncryptedE2EEKeyReceived_args,
  checkIfPasswordSetVerificationEmailVerified_args: () => checkIfPasswordSetVerificationEmailVerified_args,
  checkIfPhonePinCodeMsgVerified_args: () => checkIfPhonePinCodeMsgVerified_args,
  checkOperationTimeEx_args: () => checkOperationTimeEx_args,
  checkUserAgeAfterApprovalWithDocomoV2_args: () => checkUserAgeAfterApprovalWithDocomoV2_args,
  checkUserAgeWithDocomoV2_args: () => checkUserAgeWithDocomoV2_args,
  checkUserAge_args: () => checkUserAge_args,
  clearRingtone_args: () => clearRingtone_args,
  confirmIdentifier_args: () => confirmIdentifier_args,
  connectEapAccount_args: () => connectEapAccount_args,
  createChatRoomAnnouncement_args: () => createChatRoomAnnouncement_args,
  createChat_args: () => createChat_args,
  createCollectionForUser_args: () => createCollectionForUser_args,
  createCombinationSticker_args: () => createCombinationSticker_args,
  createE2EEKeyBackupEnforced_args: () => createE2EEKeyBackupEnforced_args,
  createGroupCallUrl_args: () => createGroupCallUrl_args,
  createLifetimeKeyBackup_args: () => createLifetimeKeyBackup_args,
  createMultiProfile_args: () => createMultiProfile_args,
  createRoomV2_args: () => createRoomV2_args,
  createSession_args: () => createSession_args,
  decryptFollowEMid_args: () => decryptFollowEMid_args,
  deleteE2EEKeyBackup_args: () => deleteE2EEKeyBackup_args,
  deleteGroupCallUrl_args: () => deleteGroupCallUrl_args,
  deleteMultiProfile_args: () => deleteMultiProfile_args,
  deleteOtherFromChat_args: () => deleteOtherFromChat_args,
  deletePrimaryCredential_args: () => deletePrimaryCredential_args,
  deleteSafetyStatus_args: () => deleteSafetyStatus_args,
  deleteSelfFromChat_args: () => deleteSelfFromChat_args,
  determineMediaMessageFlow_args: () => determineMediaMessageFlow_args,
  disconnectEapAccount_args: () => disconnectEapAccount_args,
  do0_C23142E: () => do0_C23142E,
  do0_C23143a: () => do0_C23143a,
  do0_EnumC23147e: () => do0_EnumC23147e,
  do0_EnumC23148f: () => do0_EnumC23148f,
  do0_F: () => do0_F,
  do0_G: () => do0_G,
  do0_m0: () => do0_m0,
  editItemsInCollection_args: () => editItemsInCollection_args,
  enablePointForOneTimeKey_args: () => enablePointForOneTimeKey_args,
  establishE2EESession_args: () => establishE2EESession_args,
  existPinCode_args: () => existPinCode_args,
  fN0_C24471c: () => fN0_C24471c,
  fN0_C24473e: () => fN0_C24473e,
  fN0_C24475g: () => fN0_C24475g,
  fN0_C24476h: () => fN0_C24476h,
  fN0_G: () => fN0_G,
  fetchOperations_args: () => fetchOperations_args,
  fetchPhonePinCodeMsg_args: () => fetchPhonePinCodeMsg_args,
  findBuddyContactsByQuery_args: () => findBuddyContactsByQuery_args,
  findChatByTicket_args: () => findChatByTicket_args,
  findContactByUserTicket_args: () => findContactByUserTicket_args,
  findContactByUserid_args: () => findContactByUserid_args,
  findContactsByPhone_args: () => findContactsByPhone_args,
  finishUpdateVerification_args: () => finishUpdateVerification_args,
  follow_args: () => follow_args,
  generateUserTicket_args: () => generateUserTicket_args,
  getAccessToken_args: () => getAccessToken_args,
  getAccountBalanceAsync_args: () => getAccountBalanceAsync_args,
  getAcctVerifMethod_args: () => getAcctVerifMethod_args,
  getAllChatMids_args: () => getAllChatMids_args,
  getAllContactIds_args: () => getAllContactIds_args,
  getAllowedRegistrationMethod_args: () => getAllowedRegistrationMethod_args,
  getApprovedChannels_args: () => getApprovedChannels_args,
  getAssertionChallenge_args: () => getAssertionChallenge_args,
  getAttestationChallenge_args: () => getAttestationChallenge_args,
  getAuthRSAKey_args: () => getAuthRSAKey_args,
  getAuthorsLatestProducts_args: () => getAuthorsLatestProducts_args,
  getAutoSuggestionShowcase_args: () => getAutoSuggestionShowcase_args,
  getBalanceSummaryV2_args: () => getBalanceSummaryV2_args,
  getBalanceSummaryV4WithPayV3_args: () => getBalanceSummaryV4WithPayV3_args,
  getBalance_args: () => getBalance_args,
  getBankBranches_args: () => getBankBranches_args,
  getBanners_args: () => getBanners_args,
  getBirthdayEffect_args: () => getBirthdayEffect_args,
  getBleDevice_args: () => getBleDevice_args,
  getBlockedContactIds_args: () => getBlockedContactIds_args,
  getBlockedRecommendationIds_args: () => getBlockedRecommendationIds_args,
  getBrowsingHistory_args: () => getBrowsingHistory_args,
  getBuddyChatBarV2_args: () => getBuddyChatBarV2_args,
  getBuddyDetailWithPersonal_args: () => getBuddyDetailWithPersonal_args,
  getBuddyDetail_args: () => getBuddyDetail_args,
  getBuddyLive_args: () => getBuddyLive_args,
  getBuddyOnAir_args: () => getBuddyOnAir_args,
  getBuddyStatusBarV2_args: () => getBuddyStatusBarV2_args,
  getCallStatus_args: () => getCallStatus_args,
  getCampaign_args: () => getCampaign_args,
  getChallengeForPaakAuth_args: () => getChallengeForPaakAuth_args,
  getChallengeForPrimaryReg_args: () => getChallengeForPrimaryReg_args,
  getChannelContext_args: () => getChannelContext_args,
  getChannelInfo_args: () => getChannelInfo_args,
  getChannelNotificationSettings_args: () => getChannelNotificationSettings_args,
  getChatEffectMetaList_args: () => getChatEffectMetaList_args,
  getChatRoomAnnouncementsBulk_args: () => getChatRoomAnnouncementsBulk_args,
  getChatRoomAnnouncements_args: () => getChatRoomAnnouncements_args,
  getChatRoomBGMs_args: () => getChatRoomBGMs_args,
  getChatapp_args: () => getChatapp_args,
  getChats_args: () => getChats_args,
  getCoinProducts_args: () => getCoinProducts_args,
  getCoinPurchaseHistory_args: () => getCoinPurchaseHistory_args,
  getCoinUseAndRefundHistory_args: () => getCoinUseAndRefundHistory_args,
  getCommonDomains_args: () => getCommonDomains_args,
  getConfigurations_args: () => getConfigurations_args,
  getContactCalendarEvents_args: () => getContactCalendarEvents_args,
  getContactsV3_args: () => getContactsV3_args,
  getCountries_args: () => getCountries_args,
  getCountryInfo_args: () => getCountryInfo_args,
  getDataRetention_args: () => getDataRetention_args,
  getDestinationUrl_args: () => getDestinationUrl_args,
  getDisasterCases_args: () => getDisasterCases_args,
  getE2EEGroupSharedKey_args: () => getE2EEGroupSharedKey_args,
  getE2EEKeyBackupCertificates_args: () => getE2EEKeyBackupCertificates_args,
  getE2EEKeyBackupInfo_args: () => getE2EEKeyBackupInfo_args,
  getE2EEPublicKey_args: () => getE2EEPublicKey_args,
  getExchangeKey_args: () => getExchangeKey_args,
  getExtendedProfile_args: () => getExtendedProfile_args,
  getFollowBlacklist_args: () => getFollowBlacklist_args,
  getFollowers_args: () => getFollowers_args,
  getFollowings_args: () => getFollowings_args,
  getFontMetas_args: () => getFontMetas_args,
  getFriendDetails_args: () => getFriendDetails_args,
  getFriendRequests_args: () => getFriendRequests_args,
  getGnbBadgeStatus_args: () => getGnbBadgeStatus_args,
  getGroupCallUrlInfo_args: () => getGroupCallUrlInfo_args,
  getGroupCallUrls_args: () => getGroupCallUrls_args,
  getGroupCall_args: () => getGroupCall_args,
  getHomeFlexContent_args: () => getHomeFlexContent_args,
  getHomeServiceList_args: () => getHomeServiceList_args,
  getHomeServices_args: () => getHomeServices_args,
  getIncentiveStatus_args: () => getIncentiveStatus_args,
  getInstantNews_args: () => getInstantNews_args,
  getJoinedMembershipByBotMid_args: () => getJoinedMembershipByBotMid_args,
  getJoinedMembership_args: () => getJoinedMembership_args,
  getKeyBackupCertificatesV2_args: () => getKeyBackupCertificatesV2_args,
  getLFLSuggestion_args: () => getLFLSuggestion_args,
  getLastE2EEGroupSharedKey_args: () => getLastE2EEGroupSharedKey_args,
  getLastE2EEPublicKeys_args: () => getLastE2EEPublicKeys_args,
  getLiffViewWithoutUserContext_args: () => getLiffViewWithoutUserContext_args,
  getLineCardIssueForm_args: () => getLineCardIssueForm_args,
  getLoginActorContext_args: () => getLoginActorContext_args,
  getMappedProfileIds_args: () => getMappedProfileIds_args,
  getMaskedEmail_args: () => getMaskedEmail_args,
  getMessageBoxes_args: () => getMessageBoxes_args,
  getMessageReadRange_args: () => getMessageReadRange_args,
  getModuleLayoutV4_args: () => getModuleLayoutV4_args,
  getModuleWithStatus_args: () => getModuleWithStatus_args,
  getModule_args: () => getModule_args,
  getModulesV2_args: () => getModulesV2_args,
  getModulesV3_args: () => getModulesV3_args,
  getModulesV4WithStatus_args: () => getModulesV4WithStatus_args,
  getMusicSubscriptionStatus_args: () => getMusicSubscriptionStatus_args,
  getMyAssetInformationV2_args: () => getMyAssetInformationV2_args,
  getMyChatapps_args: () => getMyChatapps_args,
  getMyDashboard_args: () => getMyDashboard_args,
  getNewlyReleasedBuddyIds_args: () => getNewlyReleasedBuddyIds_args,
  getNotificationSettings_args: () => getNotificationSettings_args,
  getOwnedProductSummaries_args: () => getOwnedProductSummaries_args,
  getPasswordHashingParameter_args: () => getPasswordHashingParameter_args,
  getPasswordHashingParametersForPwdReg_args: () => getPasswordHashingParametersForPwdReg_args,
  getPasswordHashingParametersForPwdVerif_args: () => getPasswordHashingParametersForPwdVerif_args,
  getPaymentUrlByKey_args: () => getPaymentUrlByKey_args,
  getPhoneVerifMethodForRegistration_args: () => getPhoneVerifMethodForRegistration_args,
  getPhoneVerifMethodV2_args: () => getPhoneVerifMethodV2_args,
  getPhotoboothBalance_args: () => getPhotoboothBalance_args,
  getPredefinedScenarioSets_args: () => getPredefinedScenarioSets_args,
  getPrefetchableBanners_args: () => getPrefetchableBanners_args,
  getPremiumStatusForUpgrade_args: () => getPremiumStatusForUpgrade_args,
  getPremiumStatus_args: () => getPremiumStatus_args,
  getPreviousMessagesV2WithRequest_args: () => getPreviousMessagesV2WithRequest_args,
  getProductByVersion_args: () => getProductByVersion_args,
  getProductLatestVersionForUser_args: () => getProductLatestVersionForUser_args,
  getProductSummariesInSubscriptionSlots_args: () => getProductSummariesInSubscriptionSlots_args,
  getProductV2_args: () => getProductV2_args,
  getProductValidationScheme_args: () => getProductValidationScheme_args,
  getProductsByAuthor_args: () => getProductsByAuthor_args,
  getProfile_args: () => getProfile_args,
  getPromotedBuddyContacts_args: () => getPromotedBuddyContacts_args,
  getPublishedMemberships_args: () => getPublishedMemberships_args,
  getPurchaseEnabledStatus_args: () => getPurchaseEnabledStatus_args,
  getPurchasedProducts_args: () => getPurchasedProducts_args,
  getQuickMenu_args: () => getQuickMenu_args,
  getReceivedPresents_args: () => getReceivedPresents_args,
  getRecentFriendRequests_args: () => getRecentFriendRequests_args,
  getRecommendationDetails_args: () => getRecommendationDetails_args,
  getRecommendationIds_args: () => getRecommendationIds_args,
  getRecommendationList_args: () => getRecommendationList_args,
  getRepairElements_args: () => getRepairElements_args,
  getResourceFile_args: () => getResourceFile_args,
  getResponseStatus_args: () => getResponseStatus_args,
  getReturnUrlWithRequestTokenForAutoLogin_args: () => getReturnUrlWithRequestTokenForAutoLogin_args,
  getReturnUrlWithRequestTokenForMultiLiffLogin_args: () => getReturnUrlWithRequestTokenForMultiLiffLogin_args,
  getRoomsV2_args: () => getRoomsV2_args,
  getSCC_args: () => getSCC_args,
  getSeasonalEffects_args: () => getSeasonalEffects_args,
  getSecondAuthMethod_args: () => getSecondAuthMethod_args,
  getSentPresents_args: () => getSentPresents_args,
  getServiceShortcutMenu_args: () => getServiceShortcutMenu_args,
  getSessionContentBeforeMigCompletion_args: () => getSessionContentBeforeMigCompletion_args,
  getSettingsAttributes2_args: () => getSettingsAttributes2_args,
  getSettings_args: () => getSettings_args,
  getSmartChannelRecommendations_args: () => getSmartChannelRecommendations_args,
  getSquareBot_args: () => getSquareBot_args,
  getStudentInformation_args: () => getStudentInformation_args,
  getSubscriptionPlans_args: () => getSubscriptionPlans_args,
  getSubscriptionSlotHistory_args: () => getSubscriptionSlotHistory_args,
  getSubscriptionStatus_args: () => getSubscriptionStatus_args,
  getSuggestDictionarySetting_args: () => getSuggestDictionarySetting_args,
  getSuggestResourcesV2_args: () => getSuggestResourcesV2_args,
  getTaiwanBankBalance_args: () => getTaiwanBankBalance_args,
  getTargetProfiles_args: () => getTargetProfiles_args,
  getTargetingPopup_args: () => getTargetingPopup_args,
  getThaiBankBalance_args: () => getThaiBankBalance_args,
  getTotalCoinBalance_args: () => getTotalCoinBalance_args,
  getUpdatedChannelIds_args: () => getUpdatedChannelIds_args,
  getUserCollections_args: () => getUserCollections_args,
  getUserProfile_args: () => getUserProfile_args,
  getUserVector_args: () => getUserVector_args,
  getUsersMappedByProfile_args: () => getUsersMappedByProfile_args,
  getWebLoginDisallowedUrlForMultiLiffLogin_args: () => getWebLoginDisallowedUrlForMultiLiffLogin_args,
  getWebLoginDisallowedUrl_args: () => getWebLoginDisallowedUrl_args,
  h80_C25643c: () => h80_C25643c,
  h80_t: () => h80_t,
  inviteFriends_args: () => inviteFriends_args,
  inviteIntoChat_args: () => inviteIntoChat_args,
  inviteIntoGroupCall_args: () => inviteIntoGroupCall_args,
  inviteIntoRoom_args: () => inviteIntoRoom_args,
  isProductForCollections_args: () => isProductForCollections_args,
  isStickerAvailableForCombinationSticker_args: () => isStickerAvailableForCombinationSticker_args,
  isUseridAvailable_args: () => isUseridAvailable_args,
  issueChannelToken_args: () => issueChannelToken_args,
  issueLiffView_args: () => issueLiffView_args,
  issueRequestTokenWithAuthScheme_args: () => issueRequestTokenWithAuthScheme_args,
  issueSubLiffView_args: () => issueSubLiffView_args,
  issueTokenForAccountMigrationSettings_args: () => issueTokenForAccountMigrationSettings_args,
  issueToken_args: () => issueToken_args,
  issueV3TokenForPrimary_args: () => issueV3TokenForPrimary_args,
  issueWebAuthDetailsForSecondAuth_args: () => issueWebAuthDetailsForSecondAuth_args,
  jO0_EnumC27533B: () => jO0_EnumC27533B,
  jO0_EnumC27559z: () => jO0_EnumC27559z,
  joinChatByCallUrl_args: () => joinChatByCallUrl_args,
  kf_m: () => kf_m,
  kf_o: () => kf_o,
  kf_p: () => kf_p,
  kf_r: () => kf_r,
  kf_u: () => kf_u,
  kf_w: () => kf_w,
  kf_x: () => kf_x,
  kickoutFromGroupCall_args: () => kickoutFromGroupCall_args,
  leaveRoom_args: () => leaveRoom_args,
  linkDevice_args: () => linkDevice_args,
  lookupAvailableEap_args: () => lookupAvailableEap_args,
  lookupPaidCall_args: () => lookupPaidCall_args,
  m80_l: () => m80_l,
  m80_n: () => m80_n,
  mapProfileToUsers_args: () => mapProfileToUsers_args,
  migratePrimaryUsingEapAccountWithTokenV3_args: () => migratePrimaryUsingEapAccountWithTokenV3_args,
  migratePrimaryUsingPhoneWithTokenV3_args: () => migratePrimaryUsingPhoneWithTokenV3_args,
  migratePrimaryUsingQrCode_args: () => migratePrimaryUsingQrCode_args,
  negotiateE2EEPublicKey_args: () => negotiateE2EEPublicKey_args,
  notifyChatAdEntry_args: () => notifyChatAdEntry_args,
  notifyDeviceConnection_args: () => notifyDeviceConnection_args,
  notifyDeviceDisconnection_args: () => notifyDeviceDisconnection_args,
  notifyInstalled_args: () => notifyInstalled_args,
  notifyOATalkroomEvents_args: () => notifyOATalkroomEvents_args,
  notifyProductEvent_args: () => notifyProductEvent_args,
  notifyRegistrationComplete_args: () => notifyRegistrationComplete_args,
  notifyScenarioExecuted_args: () => notifyScenarioExecuted_args,
  notifyUpdated_args: () => notifyUpdated_args,
  og_EnumC32661b: () => og_EnumC32661b,
  openAuthSession_args: () => openAuthSession_args,
  openSession_args: () => openSession_args,
  permitLogin_args: () => permitLogin_args,
  placePurchaseOrderForFreeProduct_args: () => placePurchaseOrderForFreeProduct_args,
  placePurchaseOrderWithLineCoin_args: () => placePurchaseOrderWithLineCoin_args,
  postPopupButtonEvents_args: () => postPopupButtonEvents_args,
  purchaseSubscription_args: () => purchaseSubscription_args,
  putE2eeKey_args: () => putE2eeKey_args,
  r80_EnumC34361a: () => r80_EnumC34361a,
  r80_EnumC34362b: () => r80_EnumC34362b,
  r80_EnumC34368h: () => r80_EnumC34368h,
  r80_EnumC34371k: () => r80_EnumC34371k,
  r80_EnumC34372l: () => r80_EnumC34372l,
  r80_EnumC34376p: () => r80_EnumC34376p,
  r80_g0: () => r80_g0,
  r80_n0: () => r80_n0,
  react_args: () => react_args,
  refresh_args: () => refresh_args,
  registerBarcodeAsync_args: () => registerBarcodeAsync_args,
  registerCampaignReward_args: () => registerCampaignReward_args,
  registerE2EEGroupKey_args: () => registerE2EEGroupKey_args,
  registerE2EEPublicKeyV2_args: () => registerE2EEPublicKeyV2_args,
  registerE2EEPublicKey_args: () => registerE2EEPublicKey_args,
  registerPrimaryCredential_args: () => registerPrimaryCredential_args,
  registerPrimaryUsingEapAccount_args: () => registerPrimaryUsingEapAccount_args,
  registerPrimaryUsingPhoneWithTokenV3_args: () => registerPrimaryUsingPhoneWithTokenV3_args,
  registerUserid_args: () => registerUserid_args,
  reissueChatTicket_args: () => reissueChatTicket_args,
  rejectChatInvitation_args: () => rejectChatInvitation_args,
  removeChatRoomAnnouncement_args: () => removeChatRoomAnnouncement_args,
  removeFollower_args: () => removeFollower_args,
  removeFriendRequest_args: () => removeFriendRequest_args,
  removeFromFollowBlacklist_args: () => removeFromFollowBlacklist_args,
  removeIdentifier_args: () => removeIdentifier_args,
  removeItemFromCollection_args: () => removeItemFromCollection_args,
  removeLinePayAccount_args: () => removeLinePayAccount_args,
  removeProductFromSubscriptionSlot_args: () => removeProductFromSubscriptionSlot_args,
  reportAbuseEx_args: () => reportAbuseEx_args,
  reportDeviceState_args: () => reportDeviceState_args,
  reportLocation_args: () => reportLocation_args,
  reportNetworkStatus_args: () => reportNetworkStatus_args,
  reportProfile_args: () => reportProfile_args,
  reportPushRecvReports_args: () => reportPushRecvReports_args,
  reportRefreshedAccessToken_args: () => reportRefreshedAccessToken_args,
  reportSettings_args: () => reportSettings_args,
  requestCleanupUserProvidedData_args: () => requestCleanupUserProvidedData_args,
  requestToSendPasswordSetVerificationEmail_args: () => requestToSendPasswordSetVerificationEmail_args,
  requestToSendPhonePinCode_args: () => requestToSendPhonePinCode_args,
  requestTradeNumber_args: () => requestTradeNumber_args,
  resendIdentifierConfirmation_args: () => resendIdentifierConfirmation_args,
  resendPinCode_args: () => resendPinCode_args,
  reserveCoinPurchase_args: () => reserveCoinPurchase_args,
  reserveSubscriptionPurchase_args: () => reserveSubscriptionPurchase_args,
  reserve_args: () => reserve_args,
  restoreE2EEKeyBackup_args: () => restoreE2EEKeyBackup_args,
  retrieveRequestTokenWithDocomoV2_args: () => retrieveRequestTokenWithDocomoV2_args,
  retrieveRequestToken_args: () => retrieveRequestToken_args,
  revokeTokens_args: () => revokeTokens_args,
  saveStudentInformation_args: () => saveStudentInformation_args,
  sendChatChecked_args: () => sendChatChecked_args,
  sendChatRemoved_args: () => sendChatRemoved_args,
  sendEncryptedE2EEKey_args: () => sendEncryptedE2EEKey_args,
  sendMessage_args: () => sendMessage_args,
  sendPostback_args: () => sendPostback_args,
  setChatHiddenStatus_args: () => setChatHiddenStatus_args,
  setHashedPassword_args: () => setHashedPassword_args,
  setIdentifier_args: () => setIdentifier_args,
  setNotificationsEnabled_args: () => setNotificationsEnabled_args,
  setPassword_args: () => setPassword_args,
  shouldShowWelcomeStickerBanner_args: () => shouldShowWelcomeStickerBanner_args,
  startPhotobooth_args: () => startPhotobooth_args,
  startUpdateVerification_args: () => startUpdateVerification_args,
  stopBundleSubscription_args: () => stopBundleSubscription_args,
  storeShareTargetPickerResult_args: () => storeShareTargetPickerResult_args,
  storeSubWindowResult_args: () => storeSubWindowResult_args,
  syncContacts_args: () => syncContacts_args,
  sync_args: () => sync_args,
  t80_h: () => t80_h,
  tryFriendRequest_args: () => tryFriendRequest_args,
  unblockContact_args: () => unblockContact_args,
  unblockRecommendation_args: () => unblockRecommendation_args,
  unfollow_args: () => unfollow_args,
  unlinkDevice_args: () => unlinkDevice_args,
  unsendMessage_args: () => unsendMessage_args,
  updateAndGetNearby_args: () => updateAndGetNearby_args,
  updateChannelNotificationSetting_args: () => updateChannelNotificationSetting_args,
  updateChannelSettings_args: () => updateChannelSettings_args,
  updateChatRoomBGM_args: () => updateChatRoomBGM_args,
  updateChat_args: () => updateChat_args,
  updateContactSetting_args: () => updateContactSetting_args,
  updateExtendedProfileAttribute_args: () => updateExtendedProfileAttribute_args,
  updateGroupCallUrl_args: () => updateGroupCallUrl_args,
  updateIdentifier_args: () => updateIdentifier_args,
  updateNotificationToken_args: () => updateNotificationToken_args,
  updatePassword_args: () => updatePassword_args,
  updateProfileAttributes_args: () => updateProfileAttributes_args,
  updateSafetyStatus_args: () => updateSafetyStatus_args,
  updateSettingsAttributes2_args: () => updateSettingsAttributes2_args,
  updateUserGeneralSettings_args: () => updateUserGeneralSettings_args,
  usePhotoboothTicket_args: () => usePhotoboothTicket_args,
  validateEligibleFriends_args: () => validateEligibleFriends_args,
  validateProduct_args: () => validateProduct_args,
  validateProfile_args: () => validateProfile_args,
  verifyAccountUsingHashedPwd_args: () => verifyAccountUsingHashedPwd_args,
  verifyAssertion_args: () => verifyAssertion_args,
  verifyAttestation_args: () => verifyAttestation_args,
  verifyBirthdayGiftAssociationToken_args: () => verifyBirthdayGiftAssociationToken_args,
  verifyEapAccountForRegistration_args: () => verifyEapAccountForRegistration_args,
  verifyEapLogin_args: () => verifyEapLogin_args,
  verifyPhoneNumber_args: () => verifyPhoneNumber_args,
  verifyPhonePinCode_args: () => verifyPhonePinCode_args,
  verifyPinCode_args: () => verifyPinCode_args,
  verifyQrCode_args: () => verifyQrCode_args,
  verifyQrcode_args: () => verifyQrcode_args,
  verifySocialLogin_args: () => verifySocialLogin_args,
  vh_C37633d: () => vh_C37633d,
  vh_m: () => vh_m,
  wakeUpLongPolling_args: () => wakeUpLongPolling_args
});
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/@jsr/evex__linejs-types/line_types.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var enums = {
  "AR0_g": {
    "ILLEGAL_ARGUMENT": 16641,
    "MAJOR_VERSION_NOT_SUPPORTED": 16642,
    "AUTHENTICATION_FAILED": 16897,
    "INTERNAL_SERVER_ERROR": 20737,
    "SERVICE_UNAVAILABLE": 20739
  },
  "AR0_q": {
    "NOT_PURCHASED": 0,
    "SUBSCRIPTION": 1
  },
  "AccountMigrationPincodeType": {
    "NOT_APPLICABLE": 0,
    "NOT_SET": 1,
    "SET": 2,
    "NEED_ENFORCED_INPUT": 3
  },
  "ApplicationType": {
    "IOS": 16,
    "IOS_RC": 17,
    "IOS_BETA": 18,
    "IOS_ALPHA": 19,
    "ANDROID": 32,
    "ANDROID_RC": 33,
    "ANDROID_BETA": 34,
    "ANDROID_ALPHA": 35,
    "WAP": 48,
    "WAP_RC": 49,
    "WAP_BETA": 50,
    "WAP_ALPHA": 51,
    "BOT": 64,
    "BOT_RC": 65,
    "BOT_BETA": 66,
    "BOT_ALPHA": 67,
    "WEB": 80,
    "WEB_RC": 81,
    "WEB_BETA": 82,
    "WEB_ALPHA": 83,
    "DESKTOPWIN": 96,
    "DESKTOPWIN_RC": 97,
    "DESKTOPWIN_BETA": 98,
    "DESKTOPWIN_ALPHA": 99,
    "DESKTOPMAC": 112,
    "DESKTOPMAC_RC": 113,
    "DESKTOPMAC_BETA": 114,
    "DESKTOPMAC_ALPHA": 115,
    "CHANNELGW": 128,
    "CHANNELGW_RC": 129,
    "CHANNELGW_BETA": 130,
    "CHANNELGW_ALPHA": 131,
    "CHANNELCP": 144,
    "CHANNELCP_RC": 145,
    "CHANNELCP_BETA": 146,
    "CHANNELCP_ALPHA": 147,
    "WINPHONE": 160,
    "WINPHONE_RC": 161,
    "WINPHONE_BETA": 162,
    "WINPHONE_ALPHA": 163,
    "BLACKBERRY": 176,
    "BLACKBERRY_RC": 177,
    "BLACKBERRY_BETA": 178,
    "BLACKBERRY_ALPHA": 179,
    "WINMETRO": 192,
    "WINMETRO_RC": 193,
    "WINMETRO_BETA": 194,
    "WINMETRO_ALPHA": 195,
    "S40": 200,
    "S40_RC": 209,
    "S40_BETA": 210,
    "S40_ALPHA": 211,
    "CHRONO": 224,
    "CHRONO_RC": 225,
    "CHRONO_BETA": 226,
    "CHRONO_ALPHA": 227,
    "TIZEN": 256,
    "TIZEN_RC": 257,
    "TIZEN_BETA": 258,
    "TIZEN_ALPHA": 259,
    "VIRTUAL": 272,
    "FIREFOXOS": 288,
    "FIREFOXOS_RC": 289,
    "FIREFOXOS_BETA": 290,
    "FIREFOXOS_ALPHA": 291,
    "IOSIPAD": 304,
    "IOSIPAD_RC": 305,
    "IOSIPAD_BETA": 306,
    "IOSIPAD_ALPHA": 307,
    "BIZIOS": 320,
    "BIZIOS_RC": 321,
    "BIZIOS_BETA": 322,
    "BIZIOS_ALPHA": 323,
    "BIZANDROID": 336,
    "BIZANDROID_RC": 337,
    "BIZANDROID_BETA": 338,
    "BIZANDROID_ALPHA": 339,
    "BIZBOT": 352,
    "BIZBOT_RC": 353,
    "BIZBOT_BETA": 354,
    "BIZBOT_ALPHA": 355,
    "CHROMEOS": 368,
    "CHROMEOS_RC": 369,
    "CHROMEOS_BETA": 370,
    "CHROMEOS_ALPHA": 371,
    "ANDROIDLITE": 384,
    "ANDROIDLITE_RC": 385,
    "ANDROIDLITE_BETA": 386,
    "ANDROIDLITE_ALPHA": 387,
    "WIN10": 400,
    "WIN10_RC": 401,
    "WIN10_BETA": 402,
    "WIN10_ALPHA": 403,
    "BIZWEB": 416,
    "BIZWEB_RC": 417,
    "BIZWEB_BETA": 418,
    "BIZWEB_ALPHA": 419,
    "DUMMYPRIMARY": 432,
    "DUMMYPRIMARY_RC": 433,
    "DUMMYPRIMARY_BETA": 434,
    "DUMMYPRIMARY_ALPHA": 435,
    "SQUARE": 448,
    "SQUARE_RC": 449,
    "SQUARE_BETA": 450,
    "SQUARE_ALPHA": 451,
    "INTERNAL": 464,
    "INTERNAL_RC": 465,
    "INTERNAL_BETA": 466,
    "INTERNAL_ALPHA": 467,
    "CLOVAFRIENDS": 480,
    "CLOVAFRIENDS_RC": 481,
    "CLOVAFRIENDS_BETA": 482,
    "CLOVAFRIENDS_ALPHA": 483,
    "WATCHOS": 496,
    "WATCHOS_RC": 497,
    "WATCHOS_BETA": 498,
    "WATCHOS_ALPHA": 499,
    "OPENCHAT_PLUG": 512,
    "OPENCHAT_PLUG_RC": 513,
    "OPENCHAT_PLUG_BETA": 514,
    "OPENCHAT_PLUG_ALPHA": 515,
    "ANDROIDSECONDARY": 528,
    "ANDROIDSECONDARY_RC": 529,
    "ANDROIDSECONDARY_BETA": 530,
    "ANDROIDSECONDARY_ALPHA": 531,
    "WEAROS": 544,
    "WEAROS_RC": 545,
    "WEAROS_BETA": 546,
    "WEAROS_ALPHA": 547
  },
  "BotType": {
    "RESERVED": 0,
    "OFFICIAL": 1,
    "LINE_AT_0": 2,
    "LINE_AT": 3
  },
  "CarrierCode": {
    "NOT_SPECIFIED": 0,
    "JP_DOCOMO": 1,
    "JP_AU": 2,
    "JP_SOFTBANK": 3,
    "JP_DOCOMO_LINE": 4,
    "JP_SOFTBANK_LINE": 5,
    "JP_AU_LINE": 6,
    "JP_RAKUTEN": 7,
    "JP_MVNO": 8,
    "JP_USER_SELECTED_LINE": 9,
    "KR_SKT": 17,
    "KR_KT": 18,
    "KR_LGT": 19
  },
  "ChannelErrorCode": {
    "ILLEGAL_ARGUMENT": 0,
    "INTERNAL_ERROR": 1,
    "CONNECTION_ERROR": 2,
    "AUTHENTICATIONI_FAILED": 3,
    "NEED_PERMISSION_APPROVAL": 4,
    "COIN_NOT_USABLE": 5,
    "WEBVIEW_NOT_ALLOWED": 6,
    "NOT_AVAILABLE_API": 7
  },
  "ContactAttribute": {
    "CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL": 1,
    "CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL": 2,
    "CONTACT_ATTRIBUTE_CAPABLE_MY_HOME": 16,
    "CONTACT_ATTRIBUTE_CAPABLE_BUDDY": 32
  },
  "ContactSetting": {
    "CONTACT_SETTING_NOTIFICATION_DISABLE": 1,
    "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE": 2,
    "CONTACT_SETTING_CONTACT_HIDE": 4,
    "CONTACT_SETTING_FAVORITE": 8,
    "CONTACT_SETTING_DELETE": 16,
    "CONTACT_SETTING_FRIEND_RINGTONE": 32,
    "CONTACT_SETTING_FRIEND_RINGBACK_TONE": 64
  },
  "ContactStatus": {
    "UNSPECIFIED": 0,
    "FRIEND": 1,
    "FRIEND_BLOCKED": 2,
    "RECOMMEND": 3,
    "RECOMMEND_BLOCKED": 4,
    "DELETED": 5,
    "DELETED_BLOCKED": 6
  },
  "ContactType": {
    "MID": 0,
    "PHONE": 1,
    "EMAIL": 2,
    "USERID": 3,
    "PROXIMITY": 4,
    "GROUP": 5,
    "USER": 6,
    "QRCODE": 7,
    "PROMOTION_BOT": 8,
    "CONTACT_MESSAGE": 9,
    "FRIEND_REQUEST": 10,
    "BEACON": 11,
    "REPAIR": 128,
    "FACEBOOK": 2305,
    "SINA": 2306,
    "RENREN": 2307,
    "FEIXIN": 2308,
    "BBM": 2309
  },
  "ContentType": {
    "NONE": 0,
    "IMAGE": 1,
    "VIDEO": 2,
    "AUDIO": 3,
    "HTML": 4,
    "PDF": 5,
    "CALL": 6,
    "STICKER": 7,
    "PRESENCE": 8,
    "GIFT": 9,
    "GROUPBOARD": 10,
    "APPLINK": 11,
    "LINK": 12,
    "CONTACT": 13,
    "FILE": 14,
    "LOCATION": 15,
    "POSTNOTIFICATION": 16,
    "RICH": 17,
    "CHATEVENT": 18,
    "MUSIC": 19,
    "PAYMENT": 20,
    "EXTIMAGE": 21,
    "FLEX": 22
  },
  "Eg_EnumC8927a": {
    "NEW": 1,
    "UPDATE": 2,
    "EVENT": 3
  },
  "EmailConfirmationStatus": {
    "NOT_SPECIFIED": 0,
    "NOT_YET": 1,
    "DONE": 3,
    "NEED_ENFORCED_INPUT": 4
  },
  "ErrorCode": {
    "ILLEGAL_ARGUMENT": 0,
    "AUTHENTICATION_FAILED": 1,
    "DB_FAILED": 2,
    "INVALID_STATE": 3,
    "EXCESSIVE_ACCESS": 4,
    "NOT_FOUND": 5,
    "INVALID_LENGTH": 6,
    "NOT_AVAILABLE_USER": 7,
    "NOT_AUTHORIZED_DEVICE": 8,
    "INVALID_MID": 9,
    "NOT_A_MEMBER": 10,
    "INCOMPATIBLE_APP_VERSION": 11,
    "NOT_READY": 12,
    "NOT_AVAILABLE_SESSION": 13,
    "NOT_AUTHORIZED_SESSION": 14,
    "SYSTEM_ERROR": 15,
    "NO_AVAILABLE_VERIFICATION_METHOD": 16,
    "NOT_AUTHENTICATED": 17,
    "INVALID_IDENTITY_CREDENTIAL": 18,
    "NOT_AVAILABLE_IDENTITY_IDENTIFIER": 19,
    "INTERNAL_ERROR": 20,
    "NO_SUCH_IDENTITY_IDENFIER": 21,
    "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY": 22,
    "ILLEGAL_IDENTITY_CREDENTIAL": 23,
    "UNKNOWN_CHANNEL": 24,
    "NO_SUCH_MESSAGE_BOX": 25,
    "NOT_AVAILABLE_MESSAGE_BOX": 26,
    "CHANNEL_DOES_NOT_MATCH": 27,
    "NOT_YOUR_MESSAGE": 28,
    "MESSAGE_DEFINED_ERROR": 29,
    "USER_CANNOT_ACCEPT_PRESENTS": 30,
    "USER_NOT_STICKER_OWNER": 32,
    "MAINTENANCE_ERROR": 33,
    "ACCOUNT_NOT_MATCHED": 34,
    "ABUSE_BLOCK": 35,
    "NOT_FRIEND": 36,
    "NOT_ALLOWED_CALL": 37,
    "BLOCK_FRIEND": 38,
    "INCOMPATIBLE_VOIP_VERSION": 39,
    "INVALID_SNS_ACCESS_TOKEN": 40,
    "EXTERNAL_SERVICE_NOT_AVAILABLE": 41,
    "NOT_ALLOWED_ADD_CONTACT": 42,
    "NOT_CERTIFICATED": 43,
    "NOT_ALLOWED_SECONDARY_DEVICE": 44,
    "INVALID_PIN_CODE": 45,
    "EXCEED_FILE_MAX_SIZE": 47,
    "EXCEED_DAILY_QUOTA": 48,
    "NOT_SUPPORT_SEND_FILE": 49,
    "MUST_UPGRADE": 50,
    "NOT_AVAILABLE_PIN_CODE_SESSION": 51,
    "EXPIRED_REVISION": 52,
    "NOT_YET_PHONE_NUMBER": 54,
    "BAD_CALL_NUMBER": 55,
    "UNAVAILABLE_CALL_NUMBER": 56,
    "NOT_SUPPORT_CALL_SERVICE": 57,
    "CONGESTION_CONTROL": 58,
    "NO_BALANCE": 59,
    "NOT_PERMITTED_CALLER_ID": 60,
    "NO_CALLER_ID_LIMIT_EXCEEDED": 61,
    "CALLER_ID_VERIFICATION_REQUIRED": 62,
    "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED": 63,
    "MESSAGE_NOT_FOUND": 64,
    "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT": 65,
    "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED": 66,
    "ACCOUNT_MIGRATION_PINCODE_BLOCKED": 67,
    "INVALID_PASSWORD_FORMAT": 69,
    "FEATURE_RESTRICTED": 70,
    "MESSAGE_NOT_DESTRUCTIBLE": 71,
    "PAID_CALL_REDEEM_FAILED": 72,
    "PREVENTED_JOIN_BY_TICKET": 73,
    "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT": 75,
    "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY": 76,
    "SECURITY_CENTER_NOT_VERIFIED": 77,
    "SECURITY_CENTER_BLOCKED_BY_SETTING": 78,
    "SECURITY_CENTER_BLOCKED": 79,
    "TALK_PROXY_EXCEPTION": 80,
    "E2EE_INVALID_PROTOCOL": 81,
    "E2EE_RETRY_ENCRYPT": 82,
    "E2EE_UPDATE_SENDER_KEY": 83,
    "E2EE_UPDATE_RECEIVER_KEY": 84,
    "E2EE_INVALID_ARGUMENT": 85,
    "E2EE_INVALID_VERSION": 86,
    "E2EE_SENDER_DISABLED": 87,
    "E2EE_RECEIVER_DISABLED": 88,
    "E2EE_SENDER_NOT_ALLOWED": 89,
    "E2EE_RECEIVER_NOT_ALLOWED": 90,
    "E2EE_RESEND_FAIL": 91,
    "E2EE_RESEND_OK": 92,
    "HITOKOTO_BACKUP_NO_AVAILABLE_DATA": 93,
    "E2EE_UPDATE_PRIMARY_DEVICE": 94,
    "SUCCESS": 95,
    "CANCEL": 96,
    "E2EE_PRIMARY_NOT_SUPPORT": 97,
    "E2EE_RETRY_PLAIN": 98,
    "E2EE_RECREATE_GROUP_KEY": 99,
    "E2EE_GROUP_TOO_MANY_MEMBERS": 100,
    "SERVER_BUSY": 101,
    "NOT_ALLOWED_ADD_FOLLOW": 102,
    "INCOMING_FRIEND_REQUEST_LIMIT": 103,
    "OUTGOING_FRIEND_REQUEST_LIMIT": 104,
    "OUTGOING_FRIEND_REQUEST_QUOTA": 105,
    "DUPLICATED": 106,
    "BANNED": 107,
    "NOT_AN_INVITEE": 108,
    "NOT_AN_OUTSIDER": 109,
    "EMPTY_GROUP": 111,
    "EXCEED_FOLLOW_LIMIT": 112,
    "UNSUPPORTED_ACCOUNT_TYPE": 113,
    "AGREEMENT_REQUIRED": 114,
    "SHOULD_RETRY": 115,
    "OVER_MAX_CHATS_PER_USER": 116,
    "NOT_AVAILABLE_API": 117,
    "INVALID_OTP": 118,
    "MUST_REFRESH_V3_TOKEN": 119,
    "ALREADY_EXPIRED": 120,
    "USER_NOT_STICON_OWNER": 121,
    "REFRESH_MEDIA_FLOW": 122,
    "EXCEED_FOLLOWER_LIMIT": 123,
    "INCOMPATIBLE_APP_TYPE": 124,
    "NOT_PREMIUM": 125
  },
  "Fg_a": {
    "INTERNAL_ERROR": 0,
    "ILLEGAL_ARGUMENT": 1,
    "VERIFICATION_FAILED": 2,
    "NOT_FOUND": 3,
    "RETRY_LATER": 4,
    "HUMAN_VERIFICATION_REQUIRED": 5,
    "NOT_ENABLED": 6,
    "INVALID_CONTEXT": 100,
    "APP_UPGRADE_REQUIRED": 101,
    "NO_CONTENT": 102
  },
  "FriendRequestStatus": {
    "NONE": 0,
    "AVAILABLE": 1,
    "ALREADY_REQUESTED": 2,
    "UNAVAILABLE": 3
  },
  "IdentityProvider": {
    "UNKNOWN": 0,
    "LINE": 1,
    "NAVER_KR": 2,
    "LINE_PHONE": 3
  },
  "LN0_F0": {
    "UNKNOWN": 0,
    "INVALID_TARGET_USER": 1,
    "AGE_VALIDATION": 2,
    "TOO_MANY_FRIENDS": 3,
    "TOO_MANY_REQUESTS": 4,
    "MALFORMED_REQUEST": 5,
    "TRACKING_META_QRCODE_FAVORED": 6
  },
  "LN0_X0": {
    "USER": 1,
    "BOT": 2
  },
  "MIDType": {
    "USER": 0,
    "ROOM": 1,
    "GROUP": 2,
    "SQUARE": 3,
    "SQUARE_CHAT": 4,
    "SQUARE_MEMBER": 5,
    "BOT": 6,
    "SQUARE_THREAD": 7
  },
  "NZ0_B0": {
    "PAY": 0,
    "POI": 1,
    "FX": 2,
    "SEC": 3,
    "BIT": 4,
    "LIN": 5,
    "SCO": 6,
    "POC": 7
  },
  "NZ0_C0": {
    "OK": 0,
    "MAINTENANCE": 1,
    "TPS_EXCEEDED": 2,
    "NOT_FOUND": 3,
    "BLOCKED": 4,
    "INTERNAL_ERROR": 5,
    "WALLET_CMS_MAINTENANCE": 6
  },
  "NZ0_EnumC12154b1": {
    "NORMAL": 0,
    "CAMERA": 1
  },
  "NZ0_EnumC12169g1": {
    "WALLET": 101,
    "ASSET": 201,
    "SHOPPING": 301
  },
  "NZ0_EnumC12170h": {
    "HIDE_BADGE": 0,
    "SHOW_BADGE": 1
  },
  "NZ0_EnumC12188n": {
    "OK": 0,
    "UNAVAILABLE": 1,
    "DUPLICATAE_REGISTRATION": 2,
    "INTERNAL_ERROR": 3
  },
  "NZ0_EnumC12192o0": {
    "LV1": 0,
    "LV2": 1,
    "LV3": 2,
    "LV9": 3
  },
  "NZ0_EnumC12193o1": {
    "INVALID_PARAMETER": 400,
    "AUTHENTICATION_FAILED": 401,
    "INTERNAL_SERVER_ERROR": 500,
    "SERVICE_IN_MAINTENANCE_MODE": 503
  },
  "NZ0_EnumC12195p0": {
    "ALIVE": 1,
    "SUSPENDED": 2,
    "UNREGISTERED": 3
  },
  "NZ0_EnumC12197q": {
    "PREFIX": 0,
    "SUFFIX": 1
  },
  "NZ0_EnumC12218x0": {
    "NO_CONTENT": 0,
    "OK": 1,
    "ERROR": 2
  },
  "NZ0_I0": {
    "A": 0,
    "B": 1,
    "C": 2,
    "D": 3,
    "UNKNOWN": 4
  },
  "NZ0_K0": {
    "POCKET_MONEY": 0,
    "REFINANCE": 1
  },
  "NZ0_N0": {
    "COMPACT": 0,
    "EXPANDED": 1
  },
  "NZ0_S0": {
    "CARD": 0,
    "ACTION": 1
  },
  "NZ0_W0": {
    "OK": 0,
    "INTERNAL_ERROR": 1
  },
  "NotificationStatus": {
    "NOTIFICATION_ITEM_EXIST": 1,
    "TIMELINE_ITEM_EXIST": 2,
    "NOTE_GROUP_NEW_ITEM_EXIST": 4,
    "TIMELINE_BUDDYGROUP_CHANGED": 8,
    "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST": 16,
    "ALBUM_ITEM_EXIST": 32,
    "TIMELINE_ITEM_DELETED": 64,
    "OTOGROUP_ITEM_EXIST": 128,
    "GROUPHOME_NEW_ITEM_EXIST": 256,
    "GROUPHOME_HIDDEN_ITEM_CHANGED": 512,
    "NOTIFICATION_ITEM_CHANGED": 1024,
    "BEAD_ITEM_HIDE": 2048,
    "BEAD_ITEM_SHOW": 4096,
    "LINE_TICKET_UPDATED": 8192,
    "TIMELINE_STORY_UPDATED": 16384,
    "SMARTCH_UPDATED": 32768,
    "AVATAR_UPDATED": 65536,
    "HOME_NOTIFICATION_ITEM_EXIST": 131072,
    "TIMELINE_REBOOT_COMPLETED": 262144,
    "TIMELINE_GUIDE_STORY_UPDATED": 524288,
    "TIMELINE_F2F_COMPLETED": 1048576,
    "VOOM_LIVE_STATE_CHANGED": 2097152,
    "VOOM_ACTIVITY_REWARD_ITEM_EXIST": 4194304
  },
  "NotificationType": {
    "APPLE_APNS": 1,
    "GOOGLE_C2DM": 2,
    "NHN_NNI": 3,
    "SKT_AOM": 4,
    "MS_MPNS": 5,
    "RIM_BIS": 6,
    "GOOGLE_GCM": 7,
    "NOKIA_NNAPI": 8,
    "TIZEN": 9,
    "MOZILLA_SIMPLE": 10,
    "LINE_BOT": 17,
    "LINE_WAP": 18,
    "APPLE_APNS_VOIP": 19,
    "MS_WNS": 20,
    "GOOGLE_FCM": 21,
    "CLOVA": 22,
    "CLOVA_VOIP": 23,
    "HUAWEI_HCM": 24
  },
  "Ob1_B0": {
    "FOREGROUND": 0,
    "BACKGROUND": 1
  },
  "Ob1_C1": {
    "NORMAL": 0,
    "BIG": 1
  },
  "Ob1_D0": {
    "PURCHASE_ONLY": 0,
    "PURCHASE_OR_SUBSCRIPTION": 1,
    "SUBSCRIPTION_ONLY": 2
  },
  "Ob1_EnumC12607a1": {
    "DEFAULT": 1,
    "VIEW_VIDEO": 2
  },
  "Ob1_EnumC12610b1": {
    "NONE": 0,
    "BUDDY": 2,
    "INSTALL": 3,
    "MISSION": 4,
    "MUSTBUY": 5
  },
  "Ob1_EnumC12631i1": {
    "UNKNOWN": 0,
    "PRODUCT": 1,
    "USER": 2,
    "PREMIUM_USER": 3
  },
  "Ob1_EnumC12638l": {
    "VALID": 0,
    "INVALID": 1
  },
  "Ob1_EnumC12641m": {
    "PREMIUM": 1,
    "VERIFIED": 2,
    "UNVERIFIED": 3
  },
  "Ob1_EnumC12652p1": {
    "UNKNOWN": 0,
    "NONE": 1,
    "ILLEGAL_ARGUMENT": 16641,
    "NOT_FOUND": 16642,
    "NOT_AVAILABLE": 16643,
    "NOT_PAID_PRODUCT": 16644,
    "NOT_FREE_PRODUCT": 16645,
    "ALREADY_OWNED": 16646,
    "ERROR_WITH_CUSTOM_MESSAGE": 16647,
    "NOT_AVAILABLE_TO_RECIPIENT": 16648,
    "NOT_AVAILABLE_FOR_CHANNEL_ID": 16649,
    "NOT_SALE_FOR_COUNTRY": 16650,
    "NOT_SALES_PERIOD": 16651,
    "NOT_SALE_FOR_DEVICE": 16652,
    "NOT_SALE_FOR_VERSION": 16653,
    "ALREADY_EXPIRED": 16654,
    "LIMIT_EXCEEDED": 16655,
    "MISSING_CAPABILITY": 16656,
    "AUTHENTICATION_FAILED": 16897,
    "BALANCE_SHORTAGE": 17153,
    "INTERNAL_SERVER_ERROR": 20737,
    "SERVICE_IN_MAINTENANCE_MODE": 20738,
    "SERVICE_UNAVAILABLE": 20739
  },
  "Ob1_EnumC12656r0": {
    "OK": 0,
    "PRODUCT_UNSUPPORTED": 1,
    "TEXT_NOT_SPECIFIED": 2,
    "TEXT_STYLE_UNAVAILABLE": 3,
    "CHARACTER_COUNT_LIMIT_EXCEEDED": 4,
    "CONTAINS_INVALID_WORD": 5
  },
  "Ob1_EnumC12664u": {
    "UNKNOWN": 0,
    "NONE": 1,
    "ILLEGAL_ARGUMENT": 16641,
    "NOT_FOUND": 16642,
    "NOT_AVAILABLE": 16643,
    "MAX_AMOUNT_OF_PRODUCTS_REACHED": 16644,
    "PRODUCT_IS_NOT_PREMIUM": 16645,
    "PRODUCT_IS_NOT_AVAILABLE_FOR_USER": 16646,
    "AUTHENTICATION_FAILED": 16897,
    "INTERNAL_SERVER_ERROR": 20737,
    "SERVICE_UNAVAILABLE": 20739
  },
  "Ob1_EnumC12666u1": {
    "POPULAR": 0,
    "NEW_RELEASE": 1,
    "EVENT": 2,
    "RECOMMENDED": 3,
    "POPULAR_WEEKLY": 4,
    "POPULAR_MONTHLY": 5,
    "POPULAR_RECENTLY_PUBLISHED": 6,
    "BUDDY": 7,
    "EXTRA_EVENT": 8,
    "BROWSING_HISTORY": 9,
    "POPULAR_TOTAL_SALES": 10,
    "NEW_SUBSCRIPTION": 11,
    "POPULAR_SUBSCRIPTION_30D": 12,
    "CPD_STICKER": 13,
    "POPULAR_WITH_FREE": 14
  },
  "Ob1_F1": {
    "STATIC": 1,
    "ANIMATION": 2
  },
  "Ob1_I": {
    "STATIC": 0,
    "POPULAR": 1,
    "NEW_RELEASE": 2
  },
  "Ob1_J0": {
    "ON_SALE": 0,
    "OUTDATED_VERSION": 1,
    "NOT_ON_SALE": 2
  },
  "Ob1_J1": {
    "OK": 0,
    "INVALID_PARAMETER": 1,
    "NOT_FOUND": 2,
    "NOT_SUPPORTED": 3,
    "CONFLICT": 4,
    "NOT_ELIGIBLE": 5
  },
  "Ob1_K1": {
    "GOOGLE": 0,
    "APPLE": 1,
    "WEBSTORE": 2,
    "LINEMO": 3,
    "LINE_MUSIC": 4,
    "LYP": 5,
    "TW_CHT": 6,
    "FREEMIUM": 7
  },
  "Ob1_M1": {
    "OK": 0,
    "UNKNOWN": 1,
    "NOT_SUPPORTED": 2,
    "NO_SUBSCRIPTION": 3,
    "SUBSCRIPTION_EXISTS": 4,
    "NOT_AVAILABLE": 5,
    "CONFLICT": 6,
    "OUTDATED_VERSION": 7,
    "NO_STUDENT_INFORMATION": 8,
    "ACCOUNT_HOLD": 9,
    "RETRY_STATE": 10
  },
  "Ob1_O0": {
    "STICKER": 1,
    "THEME": 2,
    "STICON": 3
  },
  "Ob1_O1": {
    "AVAILABLE": 0,
    "DIFFERENT_STORE": 1,
    "NOT_STUDENT": 2,
    "ALREADY_PURCHASED": 3
  },
  "Ob1_P1": {
    "GENERAL": 1,
    "STUDENT": 2
  },
  "Ob1_Q1": {
    "BASIC": 1,
    "DELUXE": 2
  },
  "Ob1_R1": {
    "MONTHLY": 1,
    "YEARLY": 2
  },
  "Ob1_U1": {
    "OK": 0,
    "UNKNOWN": 1,
    "NO_SUBSCRIPTION": 2,
    "EXISTS": 3,
    "NOT_FOUND": 4,
    "EXCEEDS_LIMIT": 5,
    "NOT_AVAILABLE": 6
  },
  "Ob1_V1": {
    "DATE_ASC": 1,
    "DATE_DESC": 2
  },
  "Ob1_X1": {
    "GENERAL": 0,
    "CREATORS": 1,
    "STICON": 2
  },
  "Ob1_a2": {
    "NOT_PURCHASED": 0,
    "SUBSCRIPTION": 1,
    "NOT_SUBSCRIBED": 2,
    "NOT_ACCEPTED": 3,
    "NOT_PURCHASED_U2I": 4,
    "BUDDY": 5
  },
  "Ob1_c2": {
    "STATIC": 1,
    "ANIMATION": 2
  },
  "OpType": {
    "END_OF_OPERATION": 0,
    "UPDATE_PROFILE": 1,
    "NOTIFIED_UPDATE_PROFILE": 2,
    "REGISTER_USERID": 3,
    "ADD_CONTACT": 4,
    "NOTIFIED_ADD_CONTACT": 5,
    "BLOCK_CONTACT": 6,
    "UNBLOCK_CONTACT": 7,
    "NOTIFIED_RECOMMEND_CONTACT": 8,
    "CREATE_GROUP": 9,
    "UPDATE_GROUP": 10,
    "NOTIFIED_UPDATE_GROUP": 11,
    "INVITE_INTO_GROUP": 12,
    "NOTIFIED_INVITE_INTO_GROUP": 13,
    "LEAVE_GROUP": 14,
    "NOTIFIED_LEAVE_GROUP": 15,
    "ACCEPT_GROUP_INVITATION": 16,
    "NOTIFIED_ACCEPT_GROUP_INVITATION": 17,
    "KICKOUT_FROM_GROUP": 18,
    "NOTIFIED_KICKOUT_FROM_GROUP": 19,
    "CREATE_ROOM": 20,
    "INVITE_INTO_ROOM": 21,
    "NOTIFIED_INVITE_INTO_ROOM": 22,
    "LEAVE_ROOM": 23,
    "NOTIFIED_LEAVE_ROOM": 24,
    "SEND_MESSAGE": 25,
    "RECEIVE_MESSAGE": 26,
    "SEND_MESSAGE_RECEIPT": 27,
    "RECEIVE_MESSAGE_RECEIPT": 28,
    "SEND_CONTENT_RECEIPT": 29,
    "RECEIVE_ANNOUNCEMENT": 30,
    "CANCEL_INVITATION_GROUP": 31,
    "NOTIFIED_CANCEL_INVITATION_GROUP": 32,
    "NOTIFIED_UNREGISTER_USER": 33,
    "REJECT_GROUP_INVITATION": 34,
    "NOTIFIED_REJECT_GROUP_INVITATION": 35,
    "UPDATE_SETTINGS": 36,
    "NOTIFIED_REGISTER_USER": 37,
    "INVITE_VIA_EMAIL": 38,
    "NOTIFIED_REQUEST_RECOVERY": 39,
    "SEND_CHAT_CHECKED": 40,
    "SEND_CHAT_REMOVED": 41,
    "NOTIFIED_FORCE_SYNC": 42,
    "SEND_CONTENT": 43,
    "SEND_MESSAGE_MYHOME": 44,
    "NOTIFIED_UPDATE_CONTENT_PREVIEW": 45,
    "REMOVE_ALL_MESSAGES": 46,
    "NOTIFIED_UPDATE_PURCHASES": 47,
    "DUMMY": 48,
    "UPDATE_CONTACT": 49,
    "NOTIFIED_RECEIVED_CALL": 50,
    "CANCEL_CALL": 51,
    "NOTIFIED_REDIRECT": 52,
    "NOTIFIED_CHANNEL_SYNC": 53,
    "FAILED_SEND_MESSAGE": 54,
    "NOTIFIED_READ_MESSAGE": 55,
    "FAILED_EMAIL_CONFIRMATION": 56,
    "NOTIFIED_CHAT_CONTENT": 58,
    "NOTIFIED_PUSH_NOTICENTER_ITEM": 59,
    "NOTIFIED_JOIN_CHAT": 60,
    "NOTIFIED_LEAVE_CHAT": 61,
    "NOTIFIED_TYPING": 62,
    "FRIEND_REQUEST_ACCEPTED": 63,
    "DESTROY_MESSAGE": 64,
    "NOTIFIED_DESTROY_MESSAGE": 65,
    "UPDATE_PUBLICKEYCHAIN": 66,
    "NOTIFIED_UPDATE_PUBLICKEYCHAIN": 67,
    "NOTIFIED_BLOCK_CONTACT": 68,
    "NOTIFIED_UNBLOCK_CONTACT": 69,
    "UPDATE_GROUPPREFERENCE": 70,
    "NOTIFIED_PAYMENT_EVENT": 71,
    "REGISTER_E2EE_PUBLICKEY": 72,
    "NOTIFIED_E2EE_KEY_EXCHANGE_REQ": 73,
    "NOTIFIED_E2EE_KEY_EXCHANGE_RESP": 74,
    "NOTIFIED_E2EE_MESSAGE_RESEND_REQ": 75,
    "NOTIFIED_E2EE_MESSAGE_RESEND_RESP": 76,
    "NOTIFIED_E2EE_KEY_UPDATE": 77,
    "NOTIFIED_BUDDY_UPDATE_PROFILE": 78,
    "NOTIFIED_UPDATE_LINEAT_TABS": 79,
    "UPDATE_ROOM": 80,
    "NOTIFIED_BEACON_DETECTED": 81,
    "UPDATE_EXTENDED_PROFILE": 82,
    "ADD_FOLLOW": 83,
    "NOTIFIED_ADD_FOLLOW": 84,
    "DELETE_FOLLOW": 85,
    "NOTIFIED_DELETE_FOLLOW": 86,
    "UPDATE_TIMELINE_SETTINGS": 87,
    "NOTIFIED_FRIEND_REQUEST": 88,
    "UPDATE_RINGBACK_TONE": 89,
    "NOTIFIED_POSTBACK": 90,
    "RECEIVE_READ_WATERMARK": 91,
    "NOTIFIED_MESSAGE_DELIVERED": 92,
    "NOTIFIED_UPDATE_CHAT_BAR": 93,
    "NOTIFIED_CHATAPP_INSTALLED": 94,
    "NOTIFIED_CHATAPP_UPDATED": 95,
    "NOTIFIED_CHATAPP_NEW_MARK": 96,
    "NOTIFIED_CHATAPP_DELETED": 97,
    "NOTIFIED_CHATAPP_SYNC": 98,
    "NOTIFIED_UPDATE_MESSAGE": 99,
    "UPDATE_CHATROOMBGM": 100,
    "NOTIFIED_UPDATE_CHATROOMBGM": 101,
    "UPDATE_RINGTONE": 102,
    "UPDATE_USER_SETTINGS": 118,
    "NOTIFIED_UPDATE_STATUS_BAR": 119,
    "CREATE_CHAT": 120,
    "UPDATE_CHAT": 121,
    "NOTIFIED_UPDATE_CHAT": 122,
    "INVITE_INTO_CHAT": 123,
    "NOTIFIED_INVITE_INTO_CHAT": 124,
    "CANCEL_CHAT_INVITATION": 125,
    "NOTIFIED_CANCEL_CHAT_INVITATION": 126,
    "DELETE_SELF_FROM_CHAT": 127,
    "NOTIFIED_DELETE_SELF_FROM_CHAT": 128,
    "ACCEPT_CHAT_INVITATION": 129,
    "NOTIFIED_ACCEPT_CHAT_INVITATION": 130,
    "REJECT_CHAT_INVITATION": 131,
    "DELETE_OTHER_FROM_CHAT": 132,
    "NOTIFIED_DELETE_OTHER_FROM_CHAT": 133,
    "NOTIFIED_CONTACT_CALENDAR_EVENT": 134,
    "NOTIFIED_CONTACT_CALENDAR_EVENT_ALL": 135,
    "UPDATE_THINGS_OPERATIONS": 136,
    "SEND_CHAT_HIDDEN": 137,
    "CHAT_META_SYNC_ALL": 138,
    "SEND_REACTION": 139,
    "NOTIFIED_SEND_REACTION": 140,
    "NOTIFIED_UPDATE_PROFILE_CONTENT": 141,
    "FAILED_DELIVERY_MESSAGE": 142,
    "SEND_ENCRYPTED_E2EE_KEY_REQUESTED": 143,
    "CHANNEL_PAAK_AUTHENTICATION_REQUESTED": 144,
    "UPDATE_PIN_STATE": 145,
    "NOTIFIED_PREMIUMBACKUP_STATE_CHANGED": 146,
    "CREATE_MULTI_PROFILE": 147,
    "MULTI_PROFILE_STATUS_CHANGED": 148,
    "DELETE_MULTI_PROFILE": 149,
    "UPDATE_PROFILE_MAPPING": 150,
    "DELETE_PROFILE_MAPPING": 151,
    "NOTIFIED_DESTROY_NOTICENTER_PUSH": 152
  },
  "P70_g": {
    "INVALID_REQUEST": 1e3,
    "RETRY_REQUIRED": 1001
  },
  "PaidCallType": {
    "OUT": 0,
    "IN": 1,
    "TOLLFREE": 2,
    "RECORD": 3,
    "AD": 4,
    "CS": 5,
    "OA": 6,
    "OAM": 7
  },
  "PayloadType": {
    "PAYLOAD_BUY": 101,
    "PAYLOAD_CS": 111,
    "PAYLOAD_BONUS": 121,
    "PAYLOAD_EVENT": 131,
    "PAYLOAD_POINT_AUTO_EXCHANGED": 141,
    "PAYLOAD_POINT_MANUAL_EXCHANGED": 151
  },
  "Pb1_A0": {
    "NORMAL": 0,
    "VIDEOCAM": 1,
    "VOIP": 2,
    "RECORD": 3
  },
  "Pb1_A3": {
    "UNKNOWN": 0,
    "BACKGROUND_NEW_KEY_CREATED": 1,
    "BACKGROUND_PERIODICAL_VERIFICATION": 2,
    "FOREGROUND_NEW_PIN_REGISTERED": 3,
    "FOREGROUND_VERIFICATION": 4
  },
  "Pb1_B": {
    "SIRI": 1,
    "GOOGLE_ASSISTANT": 2,
    "OS_SHARE": 3
  },
  "Pb1_D0": {
    "RICH_MENU_ID": 0,
    "STATUS_BAR": 1,
    "BUDDY_CAUTION_NOTICE": 2
  },
  "Pb1_D4": {
    "AUDIO": 1,
    "VIDEO": 2,
    "FACEPLAY": 3
  },
  "Pb1_D6": {
    "GOOGLE": 0,
    "BAIDU": 1,
    "FOURSQUARE": 2,
    "YAHOOJAPAN": 3,
    "KINGWAY": 4
  },
  "Pb1_E7": {
    "UNKNOWN": 0,
    "TALK": 1,
    "SQUARE": 2
  },
  "Pb1_EnumC12917a6": {
    "UNKNOWN": 0,
    "APP_FOREGROUND": 1,
    "PERIODIC": 2,
    "MANUAL": 3
  },
  "Pb1_EnumC12926b1": {
    "NOT_A_FRIEND": 0,
    "ALWAYS": 1
  },
  "Pb1_EnumC12941c2": {
    "BLE_LCS_API_USABLE": 26,
    "PROHIBIT_MINIMIZE_CHANNEL_BROWSER": 27,
    "ALLOW_IOS_WEBKIT": 28,
    "PURCHASE_LCS_API_USABLE": 38,
    "ALLOW_ANDROID_ENABLE_ZOOM": 48
  },
  "Pb1_EnumC12945c6": {
    "V1": 1,
    "V2": 2
  },
  "Pb1_EnumC12970e3": {
    "USER_AGE_CHECKED": 1,
    "USER_APPROVAL_REQUIRED": 2
  },
  "Pb1_EnumC12997g2": {
    "PROFILE": 0,
    "FRIENDS": 1,
    "GROUP": 2
  },
  "Pb1_EnumC12998g3": {
    "UNKNOWN": 0,
    "WIFI": 1,
    "CELLULAR_NETWORK": 2
  },
  "Pb1_EnumC13009h0": {
    "NORMAL": 1,
    "LOW_BATTERY": 2
  },
  "Pb1_EnumC13010h1": {
    "NEW": 1,
    "PLANET": 2
  },
  "Pb1_EnumC13015h6": {
    "FORWARD": 0,
    "AUTO_REPLY": 1,
    "SUBORDINATE": 2,
    "REPLY": 3
  },
  "Pb1_EnumC13022i": {
    "SKIP": 0,
    "PINCODE": 1,
    "SECURITY_CENTER": 2
  },
  "Pb1_EnumC13029i6": {
    "ADD": 0,
    "REMOVE": 1,
    "MODIFY": 2
  },
  "Pb1_EnumC13037j0": {
    "UNSPECIFIED": 0,
    "INACTIVE": 1,
    "ACTIVE": 2,
    "DELETED": 3
  },
  "Pb1_EnumC13050k": {
    "UNKNOWN": 0,
    "IOS_REDUCED_ACCURACY": 1,
    "IOS_FULL_ACCURACY": 2,
    "AOS_PRECISE_LOCATION": 3,
    "AOS_APPROXIMATE_LOCATION": 4
  },
  "Pb1_EnumC13082m3": {
    "SHOW": 0,
    "HIDE": 1
  },
  "Pb1_EnumC13093n0": {
    "NONE": 0,
    "TOP": 1
  },
  "Pb1_EnumC13127p6": {
    "NORMAL": 0,
    "ALERT_DISABLED": 1,
    "ALWAYS": 2
  },
  "Pb1_EnumC13128p7": {
    "UNKNOWN": 0,
    "DIRECT_INVITATION": 1,
    "DIRECT_CHAT": 2,
    "GROUP_INVITATION": 3,
    "GROUP_CHAT": 4,
    "ROOM_INVITATION": 5,
    "ROOM_CHAT": 6,
    "FRIEND_PROFILE": 7,
    "DIRECT_CHAT_SELECTED": 8,
    "GROUP_CHAT_SELECTED": 9,
    "ROOM_CHAT_SELECTED": 10,
    "DEPRECATED": 11
  },
  "Pb1_EnumC13148r0": {
    "ALWAYS_HIDDEN": 1,
    "ALWAYS_SHOWN": 2,
    "SHOWN_BY_CONDITION": 3
  },
  "Pb1_EnumC13151r3": {
    "ONEWAY": 0,
    "BOTH": 1,
    "NOT_REGISTERED": 2
  },
  "Pb1_EnumC13162s0": {
    "NOT_SUSPICIOUS": 1,
    "SUSPICIOUS_00": 2,
    "SUSPICIOUS_01": 3
  },
  "Pb1_EnumC13196u6": {
    "COIN": 0,
    "CREDIT": 1,
    "MONTHLY": 2,
    "OAM": 3
  },
  "Pb1_EnumC13209v5": {
    "DUMMY": 0,
    "NOTICE": 1,
    "MORETAB": 2,
    "STICKERSHOP": 3,
    "CHANNEL": 4,
    "DENY_KEYWORD": 5,
    "CONNECTIONINFO": 6,
    "BUDDY": 7,
    "TIMELINEINFO": 8,
    "THEMESHOP": 9,
    "CALLRATE": 10,
    "CONFIGURATION": 11,
    "STICONSHOP": 12,
    "SUGGESTDICTIONARY": 13,
    "SUGGESTSETTINGS": 14,
    "USERSETTINGS": 15,
    "ANALYTICSINFO": 16,
    "SEARCHPOPULARKEYWORD": 17,
    "SEARCHNOTICE": 18,
    "TIMELINE": 19,
    "SEARCHPOPULARCATEGORY": 20,
    "EXTENDEDPROFILE": 21,
    "SEASONALMARKETING": 22,
    "NEWSTAB": 23,
    "SUGGESTDICTIONARYV2": 24,
    "CHATAPPSYNC": 25,
    "AGREEMENTS": 26,
    "INSTANTNEWS": 27,
    "EMOJI_MAPPING": 28,
    "SEARCHBARKEYWORDS": 29,
    "SHOPPING": 30,
    "CHAT_EFFECT_BACKGROUND": 31,
    "CHAT_EFFECT_KEYWORD": 32,
    "SEARCHINDEX": 33,
    "HUBTAB": 34,
    "PAY_RULE_UPDATED": 35,
    "SMARTCH": 36,
    "HOME_SERVICE_LIST": 37,
    "TIMELINESTORY": 38,
    "WALLET_TAB": 39,
    "POD_TAB": 40,
    "HOME_SAFETY_CHECK": 41,
    "HOME_SEASONAL_EFFECT": 42,
    "OPENCHAT_MAIN": 43,
    "CHAT_EFFECT_CONTENT_METADATA_TAG": 44,
    "VOOM_LIVE_STATE_CHANGED": 45,
    "PROFILE_STUDIO_N_BADGE": 46,
    "LYP_FONT": 47,
    "TIMELINESTORY_OA": 48,
    "TRAVEL": 49
  },
  "Pb1_EnumC13221w3": {
    "UNKNOWN": 0,
    "EUROPEAN_ECONOMIC_AREA": 1
  },
  "Pb1_EnumC13222w4": {
    "OBS_VIDEO": 1,
    "OBS_GENERAL": 2,
    "OBS_RINGBACK_TONE": 3
  },
  "Pb1_EnumC13237x5": {
    "AUDIO": 1,
    "VIDEO": 2,
    "LIVE": 3,
    "PHOTOBOOTH": 4
  },
  "Pb1_EnumC13238x6": {
    "NOT_SPECIFIED": 0,
    "VALID": 1,
    "VERIFICATION_REQUIRED": 2,
    "NOT_PERMITTED": 3,
    "LIMIT_EXCEEDED": 4,
    "LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED": 5
  },
  "Pb1_EnumC13251y5": {
    "STANDARD": 1,
    "CONSTELLA": 2
  },
  "Pb1_EnumC13252y6": {
    "ALL": 0,
    "PROFILE": 1,
    "SETTINGS": 2,
    "CONFIGURATIONS": 3,
    "CONTACT": 4,
    "GROUP": 5,
    "E2EE": 6,
    "MESSAGE": 7
  },
  "Pb1_EnumC13260z0": {
    "ON_AIR": 0,
    "LIVE": 1,
    "GLP": 2
  },
  "Pb1_EnumC13267z7": {
    "NOTIFICATION_SETTING": 1,
    "ALL": 255
  },
  "Pb1_F0": {
    "NA": 0,
    "FRIEND_VIEW": 1,
    "OFFICIAL_ACCOUNT_VIEW": 2
  },
  "Pb1_F4": {
    "INCOMING": 1,
    "OUTGOING": 2
  },
  "Pb1_F5": {
    "UNKNOWN": 0,
    "SUCCESS": 1,
    "REQUIRE_SERVER_SIDE_EMAIL": 2,
    "REQUIRE_CLIENT_SIDE_EMAIL": 3
  },
  "Pb1_F6": {
    "JBU": 0,
    "LIP": 1
  },
  "Pb1_G3": {
    "PROMOTION_FRIENDS_INVITE": 1,
    "CAPABILITY_SERVER_SIDE_SMS": 2,
    "LINE_CLIENT_ANALYTICS_CONFIGURATION": 3
  },
  "Pb1_G4": {
    "TIMELINE": 1,
    "NEARBY": 2,
    "SQUARE": 3
  },
  "Pb1_G6": {
    "NICE": 2,
    "LOVE": 3,
    "FUN": 4,
    "AMAZING": 5,
    "SAD": 6,
    "OMG": 7
  },
  "Pb1_H6": {
    "PUBLIC": 0,
    "PRIVATE": 1
  },
  "Pb1_I6": {
    "NEVER_SHOW": 0,
    "ONE_WAY": 1,
    "MUTUAL": 2
  },
  "Pb1_J4": {
    "OTHER": 0,
    "INITIALIZATION": 1,
    "PERIODIC_SYNC": 2,
    "MANUAL_SYNC": 3,
    "LOCAL_DB_CORRUPTED": 4
  },
  "Pb1_K2": {
    "CHANNEL_INFO": 1,
    "CHANNEL_TOKEN": 2,
    "COMMON_DOMAIN": 4,
    "ALL": 255
  },
  "Pb1_K6": {
    "EMAIL": 1,
    "DISPLAY_NAME": 2,
    "PHONETIC_NAME": 4,
    "PICTURE": 8,
    "STATUS_MESSAGE": 16,
    "ALLOW_SEARCH_BY_USERID": 32,
    "ALLOW_SEARCH_BY_EMAIL": 64,
    "BUDDY_STATUS": 128,
    "MUSIC_PROFILE": 256,
    "AVATAR_PROFILE": 512,
    "ALL": 2147483647
  },
  "Pb1_L2": {
    "SYNC": 0,
    "REMOVE": 1,
    "REMOVE_ALL": 2
  },
  "Pb1_L4": {
    "UNKNOWN": 0,
    "REVISION_GAP_TOO_LARGE_CLIENT": 1,
    "REVISION_GAP_TOO_LARGE_SERVER": 2,
    "OPERATION_EXPIRED": 3,
    "REVISION_HOLE": 4,
    "FORCE_TRIGGERED": 5
  },
  "Pb1_M6": {
    "OWNER": 0,
    "FRIEND": 1
  },
  "Pb1_N6": {
    "NFT": 1,
    "AVATAR": 2,
    "SNOW": 3,
    "ARCZ": 4,
    "FRENZ": 5
  },
  "Pb1_O2": {
    "NAME": 1,
    "PICTURE_STATUS": 2,
    "PREVENTED_JOIN_BY_TICKET": 4,
    "NOTIFICATION_SETTING": 8,
    "INVITATION_TICKET": 16,
    "FAVORITE_TIMESTAMP": 32,
    "CHAT_TYPE": 64
  },
  "Pb1_O6": {
    "DEFAULT": 1,
    "MULTI_PROFILE": 2
  },
  "Pb1_P6": {
    "HIDDEN": 0,
    "PUBLIC": 1e3
  },
  "Pb1_Q2": {
    "BACKGROUND": 0,
    "KEYWORD": 1,
    "CONTENT_METADATA_TAG_BASED": 2
  },
  "Pb1_R3": {
    "BEACON_AGREEMENT": 1,
    "BLUETOOTH": 2,
    "SHAKE_AGREEMENT": 3,
    "AUTO_SUGGEST": 4,
    "CHATROOM_CAPTURE": 5,
    "CHATROOM_MINIMIZEBROWSER": 6,
    "CHATROOM_MOBILESAFARI": 7,
    "VIDEO_HIGHTLIGHT_WIZARD": 8,
    "CHAT_FOLDER": 9,
    "BLUETOOTH_SCAN": 10,
    "AUTO_SUGGEST_FOLLOW_UP": 11
  },
  "Pb1_S7": {
    "NONE": 1,
    "ALL": 2
  },
  "Pb1_T3": {
    "LOCATION_OS": 1,
    "LOCATION_APP": 2,
    "VIDEO_AUTO_PLAY": 3,
    "HNI": 4,
    "AUTO_SUGGEST_LANG": 5,
    "CHAT_EFFECT_CACHED_CONTENT_LIST": 6,
    "IFA": 7,
    "ACCURACY_MODE": 8
  },
  "Pb1_T7": {
    "SYNC": 0,
    "REPORT": 1
  },
  "Pb1_V7": {
    "UNSPECIFIED": 0,
    "UNKNOWN": 1,
    "INITIALIZATION": 2,
    "OPERATION": 3,
    "FULL_SYNC": 4,
    "AUTO_REPAIR": 5,
    "MANUAL_REPAIR": 6,
    "INTERNAL": 7,
    "USER_INITIATED": 8
  },
  "Pb1_W2": {
    "ANYONE_IN_CHAT": 0,
    "CREATOR_ONLY": 1,
    "NO_ONE": 2
  },
  "Pb1_W3": {
    "ILLEGAL_ARGUMENT": 0,
    "AUTHENTICATION_FAILED": 1,
    "INTERNAL_ERROR": 2,
    "RESTORE_KEY_FIRST": 3,
    "NO_BACKUP": 4,
    "INVALID_PIN": 6,
    "PERMANENTLY_LOCKED": 7,
    "INVALID_PASSWORD": 8,
    "MASTER_KEY_CONFLICT": 9
  },
  "Pb1_X1": {
    "MESSAGE": 0,
    "MESSAGE_NOTIFICATION": 1,
    "NOTIFICATION_CENTER": 2
  },
  "Pb1_X2": {
    "MESSAGE": 0,
    "NOTE": 1,
    "CHANNEL": 2
  },
  "Pb1_Z2": {
    "GROUP": 0,
    "ROOM": 1,
    "PEER": 2
  },
  "Pb1_gd": {
    "OVER": 1,
    "UNDER": 2,
    "UNDEFINED": 3
  },
  "Pb1_od": {
    "UNKNOWN": 0,
    "LOCATION": 1
  },
  "PointErrorCode": {
    "REQUEST_DUPLICATION": 3001,
    "INVALID_PARAMETER": 3002,
    "NOT_ENOUGH_BALANCE": 3003,
    "AUTHENTICATION_FAIL": 3004,
    "API_ACCESS_FORBIDDEN": 3005,
    "MEMBER_ACCOUNT_NOT_FOUND": 3006,
    "SERVICE_ACCOUNT_NOT_FOUND": 3007,
    "TRANSACTION_NOT_FOUND": 3008,
    "ALREADY_REVERSED_TRANSACTION": 3009,
    "MESSAGE_NOT_READABLE": 3010,
    "HTTP_REQUEST_METHOD_NOT_SUPPORTED": 3011,
    "HTTP_MEDIA_TYPE_NOT_SUPPORTED": 3012,
    "NOT_ALLOWED_TO_DEPOSIT": 3013,
    "NOT_ALLOWED_TO_PAY": 3014,
    "TRANSACTION_ACCESS_FORBIDDEN": 3015,
    "INVALID_SERVICE_CONFIGURATION": 4001,
    "DCS_COMMUNICATION_FAIL": 5004,
    "UPDATE_BALANCE_FAIL": 5007,
    "SYSTEM_MAINTENANCE": 5888,
    "SYSTEM_ERROR": 5999
  },
  "Q70_q": {
    "UNKNOWN": 0,
    "FACEBOOK": 1,
    "APPLE": 2,
    "GOOGLE": 3
  },
  "Q70_r": {
    "INTERNAL_ERROR": 0,
    "ILLEGAL_ARGUMENT": 1,
    "VERIFICATION_FAILED": 2,
    "RETRY_LATER": 4,
    "HUMAN_VERIFICATION_REQUIRED": 5,
    "APP_UPGRADE_REQUIRED": 101
  },
  "Qj_EnumC13584a": {
    "NOT_DETERMINED": 0,
    "RESTRICTED": 1,
    "DENIED": 2,
    "AUTHORIZED": 3
  },
  "Qj_EnumC13585b": {
    "WHITE": 1,
    "BLACK": 2
  },
  "Qj_EnumC13588e": {
    "LIGHT": 1,
    "DARK": 2
  },
  "Qj_EnumC13592i": {
    "ILLEGAL_ARGUMENT": 0,
    "INTERNAL_ERROR": 1,
    "CONNECTION_ERROR": 2,
    "AUTHENTICATION_FAILED": 3,
    "NEED_PERMISSION_APPROVAL": 4,
    "COIN_NOT_USABLE": 5,
    "WEBVIEW_NOT_ALLOWED": 6
  },
  "Qj_EnumC13597n": {
    "INVALID_REQUEST": 1,
    "UNAUTHORIZED": 2,
    "CONSENT_REQUIRED": 3,
    "VERSION_UPDATE_REQUIRED": 4,
    "COMPREHENSIVE_AGREEMENT_REQUIRED": 5,
    "SPLASH_SCREEN_REQUIRED": 6,
    "PERMANENT_LINK_INVALID_REQUEST": 7,
    "NO_DESTINATION_URL": 8,
    "SERVICE_ALREADY_TERMINATED": 9,
    "SERVER_ERROR": 100
  },
  "Qj_EnumC13604v": {
    "GEOLOCATION": 1,
    "ADVERTISING_ID": 2,
    "BLUETOOTH_LE": 3,
    "QR_CODE": 4,
    "ADVERTISING_SDK": 5,
    "ADD_TO_HOME": 6,
    "SHARE_TARGET_MESSAGE": 7,
    "VIDEO_AUTO_PLAY": 8,
    "PROFILE_PLUS": 9,
    "SUBWINDOW_OPEN": 10,
    "SUBWINDOW_COMMON_MODULE": 11,
    "NO_LIFF_REFERRER": 12,
    "SKIP_CHANNEL_VERIFICATION_SCREEN": 13,
    "PROVIDER_PAGE": 14,
    "BASIC_AUTH": 15,
    "SIRI_DONATION": 16
  },
  "Qj_EnumC13605w": {
    "ALLOW_DIRECT_LINK": 1,
    "ALLOW_DIRECT_LINK_V2": 2
  },
  "Qj_EnumC13606x": {
    "LIGHT": 1,
    "LIGHT_TRANSLUCENT": 2,
    "DARK_TRANSLUCENT": 3,
    "LIGHT_ICON": 4,
    "DARK_ICON": 5
  },
  "Qj_a0": {
    "CONCAT": 1,
    "REPLACE": 2
  },
  "Qj_e0": {
    "SUCCESS": 0,
    "FAILURE": 1,
    "CANCEL": 2
  },
  "Qj_h0": {
    "RIGHT": 1,
    "LEFT": 2
  },
  "Qj_i0": {
    "FULL": 1,
    "TALL": 2,
    "COMPACT": 3
  },
  "R70_e": {
    "INTERNAL_ERROR": 0,
    "ILLEGAL_ARGUMENT": 1,
    "VERIFICATION_FAILED": 2,
    "EXTERNAL_SERVICE_UNAVAILABLE": 3,
    "RETRY_LATER": 4,
    "INVALID_CONTEXT": 100,
    "NOT_SUPPORTED": 101,
    "FORBIDDEN": 102,
    "FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR": 201
  },
  "RegistrationType": {
    "PHONE": 0,
    "EMAIL_WAP": 1,
    "FACEBOOK": 2305,
    "SINA": 2306,
    "RENREN": 2307,
    "FEIXIN": 2308,
    "APPLE": 2309,
    "YAHOOJAPAN": 2310,
    "GOOGLE": 2311
  },
  "ReportType": {
    "ADVERTISING": 1,
    "GENDER_HARASSMENT": 2,
    "HARASSMENT": 3,
    "OTHER": 4,
    "IRRELEVANT_CONTENT": 5,
    "IMPERSONATION": 6,
    "SCAM": 7
  },
  "S70_a": {
    "INTERNAL_ERROR": 0,
    "ILLEGAL_ARGUMENT": 1,
    "VERIFICATION_FAILED": 2,
    "RETRY_LATER": 3,
    "INVALID_CONTEXT": 100,
    "APP_UPGRADE_REQUIRED": 101
  },
  "SettingsAttributeEx": {
    "NOTIFICATION_ENABLE": 0,
    "NOTIFICATION_MUTE_EXPIRATION": 1,
    "NOTIFICATION_NEW_MESSAGE": 2,
    "NOTIFICATION_GROUP_INVITATION": 3,
    "NOTIFICATION_SHOW_MESSAGE": 4,
    "NOTIFICATION_INCOMING_CALL": 5,
    "PRIVACY_SYNC_CONTACTS": 6,
    "PRIVACY_SEARCH_BY_PHONE_NUMBER": 7,
    "NOTIFICATION_SOUND_MESSAGE": 8,
    "NOTIFICATION_SOUND_GROUP": 9,
    "CONTACT_MY_TICKET": 10,
    "IDENTITY_PROVIDER": 11,
    "IDENTITY_IDENTIFIER": 12,
    "PRIVACY_SEARCH_BY_USERID": 13,
    "PRIVACY_SEARCH_BY_EMAIL": 14,
    "PREFERENCE_LOCALE": 15,
    "NOTIFICATION_DISABLED_WITH_SUB": 16,
    "NOTIFICATION_PAYMENT": 17,
    "SECURITY_CENTER_SETTINGS": 18,
    "SNS_ACCOUNT": 19,
    "PHONE_REGISTRATION": 20,
    "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN": 21,
    "CUSTOM_MODE": 22,
    "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME": 23,
    "EMAIL_CONFIRMATION_STATUS": 24,
    "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND": 25,
    "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL": 26,
    "PRIVACY_AGREE_USE_PAIDCALL": 27,
    "ACCOUNT_MIGRATION_PINCODE": 28,
    "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE": 29,
    "PRIVACY_ALLOW_FRIEND_REQUEST": 30,
    "PWLESS_PRIMARY_CREDENTIAL_REGISTRATION": 31,
    "ALLOWED_TO_CONNECT_EAP_ACCOUNT": 32,
    "E2EE_ENABLE": 33,
    "HITOKOTO_BACKUP_REQUESTED": 34,
    "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME": 35,
    "CONTACT_ALLOW_FOLLOWING": 36,
    "PRIVACY_ALLOW_NEARBY": 37,
    "AGREEMENT_NEARBY": 38,
    "AGREEMENT_SQUARE": 39,
    "NOTIFICATION_MENTION": 40,
    "ALLOW_UNREGISTRATION_SECONDARY_DEVICE": 41,
    "AGREEMENT_BOT_USE": 42,
    "AGREEMENT_SHAKE_FUNCTION": 43,
    "AGREEMENT_MOBILE_CONTACT_NAME": 44,
    "NOTIFICATION_THUMBNAIL": 45,
    "AGREEMENT_SOUND_TO_TEXT": 46,
    "AGREEMENT_PRIVACY_POLICY_VERSION": 47,
    "AGREEMENT_AD_BY_WEB_ACCESS": 48,
    "AGREEMENT_PHONE_NUMBER_MATCHING": 49,
    "AGREEMENT_COMMUNICATION_INFO": 50,
    "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS": 51,
    "AGREEMENT_THINGS_WIRELESS_COMMUNICATION": 52,
    "AGREEMENT_GDPR": 53,
    "PRIVACY_STATUS_MESSAGE_HISTORY": 54,
    "AGREEMENT_PROVIDE_LOCATION": 55,
    "AGREEMENT_BEACON": 56,
    "PRIVACY_PROFILE_HISTORY": 57,
    "AGREEMENT_CONTENTS_SUGGEST": 58,
    "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION": 59,
    "PRIVACY_AGE_RESULT": 60,
    "PRIVACY_AGE_RESULT_RECEIVED": 61,
    "AGREEMENT_OCR_IMAGE_COLLECTION": 62,
    "PRIVACY_ALLOW_FOLLOW": 63,
    "PRIVACY_SHOW_FOLLOW_LIST": 64,
    "NOTIFICATION_BADGE_TALK_ONLY": 65,
    "AGREEMENT_ICNA": 66,
    "NOTIFICATION_REACTION": 67,
    "AGREEMENT_MID": 68,
    "HOME_NOTIFICATION_NEW_FRIEND": 69,
    "HOME_NOTIFICATION_FAVORITE_FRIEND_UPDATE": 70,
    "HOME_NOTIFICATION_GROUP_MEMBER_UPDATE": 71,
    "HOME_NOTIFICATION_BIRTHDAY": 72,
    "AGREEMENT_LINE_OUT_USE": 73,
    "AGREEMENT_LINE_OUT_PROVIDE_INFO": 74,
    "NOTIFICATION_SHOW_PROFILE_IMAGE": 75,
    "AGREEMENT_PDPA": 76,
    "AGREEMENT_LOCATION_VERSION": 77,
    "ALLOWED_TO_SHOW_ZHD_PAGE": 78,
    "AGREEMENT_SNOW_AI_AVATAR": 79,
    "EAP_ONLY_ACCOUNT_TARGET_COUNTRY": 80,
    "AGREEMENT_LYP_PREMIUM_ALBUM": 81,
    "AGREEMENT_LYP_PREMIUM_ALBUM_VERSION": 82,
    "AGREEMENT_ALBUM_USAGE_DATA": 83,
    "AGREEMENT_ALBUM_USAGE_DATA_VERSION": 84,
    "AGREEMENT_LYP_PREMIUM_BACKUP": 85,
    "AGREEMENT_LYP_PREMIUM_BACKUP_VERSION": 86,
    "AGREEMENT_OA_AI_ASSISTANT": 87,
    "AGREEMENT_OA_AI_ASSISTANT_VERSION": 88,
    "AGREEMENT_LYP_PREMIUM_MULTI_PROFILE": 89,
    "AGREEMENT_LYP_PREMIUM_MULTI_PROFILE_VERSION": 90
  },
  "SnsIdType": {
    "FACEBOOK": 1,
    "SINA": 2,
    "RENREN": 3,
    "FEIXIN": 4,
    "BBM": 5,
    "APPLE": 6,
    "YAHOOJAPAN": 7,
    "GOOGLE": 8
  },
  "SpammerReason": {
    "OTHER": 0,
    "ADVERTISING": 1,
    "GENDER_HARASSMENT": 2,
    "HARASSMENT": 3,
    "IMPERSONATION": 4,
    "SCAM": 5
  },
  "SpotCategory": {
    "UNKNOWN": 0,
    "GOURMET": 1,
    "BEAUTY": 2,
    "TRAVEL": 3,
    "SHOPPING": 4,
    "ENTERTAINMENT": 5,
    "SPORTS": 6,
    "TRANSPORT": 7,
    "LIFE": 8,
    "HOSPITAL": 9,
    "FINANCE": 10,
    "EDUCATION": 11,
    "OTHER": 12,
    "ALL": 1e4
  },
  "SquareAttribute": {
    "NAME": 1,
    "WELCOME_MESSAGE": 2,
    "PROFILE_IMAGE": 3,
    "DESCRIPTION": 4,
    "SEARCHABLE": 6,
    "CATEGORY": 7,
    "INVITATION_URL": 8,
    "ABLE_TO_USE_INVITATION_URL": 9,
    "STATE": 10,
    "EMBLEMS": 11,
    "JOIN_METHOD": 12,
    "CHANNEL_ID": 13,
    "SVC_TAGS": 14
  },
  "SquareAuthorityAttribute": {
    "UPDATE_SQUARE_PROFILE": 1,
    "INVITE_NEW_MEMBER": 2,
    "APPROVE_JOIN_REQUEST": 3,
    "CREATE_POST": 4,
    "CREATE_OPEN_SQUARE_CHAT": 5,
    "DELETE_SQUARE_CHAT_OR_POST": 6,
    "REMOVE_SQUARE_MEMBER": 7,
    "GRANT_ROLE": 8,
    "ENABLE_INVITATION_TICKET": 9,
    "CREATE_CHAT_ANNOUNCEMENT": 10,
    "UPDATE_MAX_CHAT_MEMBER_COUNT": 11,
    "USE_READONLY_DEFAULT_CHAT": 12,
    "SEND_ALL_MENTION": 13
  },
  "SquareChatType": {
    "OPEN": 1,
    "SECRET": 2,
    "ONE_ON_ONE": 3,
    "SQUARE_DEFAULT": 4
  },
  "SquareMemberAttribute": {
    "DISPLAY_NAME": 1,
    "PROFILE_IMAGE": 2,
    "ABLE_TO_RECEIVE_MESSAGE": 3,
    "MEMBERSHIP_STATE": 5,
    "ROLE": 6,
    "PREFERENCE": 7
  },
  "SquareMembershipState": {
    "JOIN_REQUESTED": 1,
    "JOINED": 2,
    "REJECTED": 3,
    "LEFT": 4,
    "KICK_OUT": 5,
    "BANNED": 6,
    "DELETED": 7,
    "JOIN_REQUEST_WITHDREW": 8
  },
  "StickerResourceType": {
    "STATIC": 1,
    "ANIMATION": 2,
    "SOUND": 3,
    "ANIMATION_SOUND": 4,
    "POPUP": 5,
    "POPUP_SOUND": 6,
    "NAME_TEXT": 7,
    "PER_STICKER_TEXT": 8
  },
  "SyncCategory": {
    "PROFILE": 0,
    "SETTINGS": 1,
    "OPS": 2,
    "CONTACT": 3,
    "RECOMMEND": 4,
    "BLOCK": 5,
    "GROUP": 6,
    "ROOM": 7,
    "NOTIFICATION": 8,
    "ADDRESS_BOOK": 9
  },
  "T70_C": {
    "INITIAL_BACKUP_STATE_UNSPECIFIED": 0,
    "INITIAL_BACKUP_STATE_READY": 1,
    "INITIAL_BACKUP_STATE_MESSAGE_ONGOING": 2,
    "INITIAL_BACKUP_STATE_FINISHED": 3,
    "INITIAL_BACKUP_STATE_ABORTED": 4,
    "INITIAL_BACKUP_STATE_MEDIA_ONGOING": 5
  },
  "T70_EnumC14390b": {
    "UNKNOWN": 0,
    "PHONE_NUMBER": 1,
    "EMAIL": 2
  },
  "T70_EnumC14392c": {
    "UNKNOWN": 0,
    "SKIP": 1,
    "PASSWORD": 2,
    "WEB_BASED": 3,
    "EMAIL_BASED": 4,
    "NONE": 11
  },
  "T70_EnumC14406j": {
    "INTERNAL_ERROR": 0,
    "ILLEGAL_ARGUMENT": 1,
    "VERIFICATION_FAILED": 2,
    "NOT_FOUND": 3,
    "RETRY_LATER": 4,
    "HUMAN_VERIFICATION_REQUIRED": 5,
    "INVALID_CONTEXT": 100,
    "APP_UPGRADE_REQUIRED": 101
  },
  "T70_K": {
    "UNKNOWN": 0,
    "SMS": 1,
    "IVR": 2,
    "SMSPULL": 3
  },
  "T70_L": {
    "PREMIUM_TYPE_UNSPECIFIED": 0,
    "PREMIUM_TYPE_LYP": 1,
    "PREMIUM_TYPE_LINE": 2
  },
  "T70_Z0": {
    "PHONE_VERIF": 1,
    "EAP_VERIF": 2
  },
  "T70_e1": {
    "UNKNOWN": 0,
    "SKIP": 1,
    "WEB_BASED": 2
  },
  "T70_j1": {
    "UNKNOWN": 0,
    "FACEBOOK": 1,
    "APPLE": 2,
    "GOOGLE": 3
  },
  "U70_c": {
    "INTERNAL_ERROR": 0,
    "FORBIDDEN": 1,
    "INVALID_CONTEXT": 100
  },
  "Uf_EnumC14873o": {
    "ANDROID": 1,
    "IOS": 2
  },
  "VR0_l": {
    "DEFAULT": 1,
    "UEN": 2
  },
  "VerificationMethod": {
    "NO_AVAILABLE": 0,
    "PIN_VIA_SMS": 1,
    "CALLERID_INDIGO": 2,
    "PIN_VIA_TTS": 4,
    "SKIP": 10
  },
  "VerificationResult": {
    "FAILED": 0,
    "OK_NOT_REGISTERED_YET": 1,
    "OK_REGISTERED_WITH_SAME_DEVICE": 2,
    "OK_REGISTERED_WITH_ANOTHER_DEVICE": 3
  },
  "WR0_a": {
    "FREE": 1,
    "PREMIUM": 2
  },
  "a80_EnumC16644b": {
    "UNKNOWN": 0,
    "FACEBOOK": 1,
    "APPLE": 2,
    "GOOGLE": 3
  },
  "FetchDirection": {
    "FORWARD": 1,
    "BACKWARD": 2
  },
  "LiveTalkEventType": {
    "NOTIFIED_UPDATE_LIVE_TALK_TITLE": 1,
    "NOTIFIED_UPDATE_LIVE_TALK_ANNOUNCEMENT": 2,
    "NOTIFIED_UPDATE_SQUARE_MEMBER_ROLE": 3,
    "NOTIFIED_UPDATE_LIVE_TALK_ALLOW_REQUEST_TO_SPEAK": 4,
    "NOTIFIED_UPDATE_SQUARE_MEMBER": 5
  },
  "LiveTalkReportType": {
    "ADVERTISING": 1,
    "GENDER_HARASSMENT": 2,
    "HARASSMENT": 3,
    "IRRELEVANT_CONTENT": 4,
    "OTHER": 5,
    "IMPERSONATION": 6,
    "SCAM": 7
  },
  "MessageSummaryReportType": {
    "LEGAL_VIOLATION": 1,
    "HARASSMENT": 2,
    "PERSONAL_IDENTIFIER": 3,
    "FALSE_INFORMATION": 4,
    "GENDER_HARASSMENT": 5,
    "OTHER": 6
  },
  "NotificationPostType": {
    "POST_MENTION": 2,
    "POST_LIKE": 3,
    "POST_COMMENT": 4,
    "POST_COMMENT_MENTION": 5,
    "POST_COMMENT_LIKE": 6,
    "POST_RELAY_JOIN": 7
  },
  "SquareEventStatus": {
    "NORMAL": 1,
    "ALERT_DISABLED": 2
  },
  "SquareEventType": {
    "RECEIVE_MESSAGE": 0,
    "SEND_MESSAGE": 1,
    "NOTIFIED_JOIN_SQUARE_CHAT": 2,
    "NOTIFIED_INVITE_INTO_SQUARE_CHAT": 3,
    "NOTIFIED_LEAVE_SQUARE_CHAT": 4,
    "NOTIFIED_DESTROY_MESSAGE": 5,
    "NOTIFIED_MARK_AS_READ": 6,
    "NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE": 7,
    "NOTIFIED_UPDATE_SQUARE": 8,
    "NOTIFIED_UPDATE_SQUARE_STATUS": 9,
    "NOTIFIED_UPDATE_SQUARE_AUTHORITY": 10,
    "NOTIFIED_UPDATE_SQUARE_MEMBER": 11,
    "NOTIFIED_UPDATE_SQUARE_CHAT": 12,
    "NOTIFIED_UPDATE_SQUARE_CHAT_STATUS": 13,
    "NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER": 14,
    "NOTIFIED_CREATE_SQUARE_MEMBER": 15,
    "NOTIFIED_CREATE_SQUARE_CHAT_MEMBER": 16,
    "NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION": 17,
    "NOTIFIED_SHUTDOWN_SQUARE": 18,
    "NOTIFIED_KICKOUT_FROM_SQUARE": 19,
    "NOTIFIED_DELETE_SQUARE_CHAT": 20,
    "NOTIFICATION_JOIN_REQUEST": 21,
    "NOTIFICATION_JOINED": 22,
    "NOTIFICATION_PROMOTED_COADMIN": 23,
    "NOTIFICATION_PROMOTED_ADMIN": 24,
    "NOTIFICATION_DEMOTED_MEMBER": 25,
    "NOTIFICATION_KICKED_OUT": 26,
    "NOTIFICATION_SQUARE_DELETE": 27,
    "NOTIFICATION_SQUARE_CHAT_DELETE": 28,
    "NOTIFICATION_MESSAGE": 29,
    "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME": 30,
    "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE": 31,
    "NOTIFIED_UPDATE_SQUARE_FEATURE_SET": 32,
    "NOTIFIED_ADD_BOT": 33,
    "NOTIFIED_REMOVE_BOT": 34,
    "NOTIFIED_UPDATE_SQUARE_NOTE_STATUS": 36,
    "NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT": 37,
    "NOTIFIED_UPDATE_SQUARE_CHAT_MAX_MEMBER_COUNT": 38,
    "NOTIFICATION_POST_ANNOUNCEMENT": 39,
    "NOTIFICATION_POST": 40,
    "MUTATE_MESSAGE": 41,
    "NOTIFICATION_NEW_CHAT_MEMBER": 42,
    "NOTIFIED_UPDATE_READONLY_CHAT": 43,
    "NOTIFIED_UPDATE_MESSAGE_STATUS": 46,
    "NOTIFICATION_MESSAGE_REACTION": 47,
    "NOTIFIED_CHAT_POPUP": 48,
    "NOTIFIED_SYSTEM_MESSAGE": 49,
    "NOTIFIED_UPDATE_SQUARE_CHAT_FEATURE_SET": 50,
    "NOTIFIED_UPDATE_LIVE_TALK": 51,
    "NOTIFICATION_LIVE_TALK": 52,
    "NOTIFIED_UPDATE_LIVE_TALK_INFO": 53,
    "NOTIFICATION_THREAD_MESSAGE": 54,
    "NOTIFICATION_THREAD_MESSAGE_REACTION": 55,
    "NOTIFIED_UPDATE_THREAD": 56,
    "NOTIFIED_UPDATE_THREAD_STATUS": 57,
    "NOTIFIED_UPDATE_THREAD_MEMBER": 58,
    "NOTIFIED_UPDATE_THREAD_ROOT_MESSAGE": 59,
    "NOTIFIED_UPDATE_THREAD_ROOT_MESSAGE_STATUS": 60
  },
  "AdScreen": {
    "CHATROOM": 1,
    "THREAD_SPACE": 2,
    "YOUR_THREADS": 3,
    "NOTE_LIST": 4,
    "NOTE_END": 5,
    "WEB_MAIN": 6,
    "WEB_SEARCH_RESULT": 7
  },
  "BooleanState": {
    "NONE": 0,
    "OFF": 1,
    "ON": 2
  },
  "ChatroomPopupType": {
    "IMG_TEXT": 1,
    "TEXT_ONLY": 2,
    "IMG_ONLY": 3
  },
  "ContentsAttribute": {
    "NONE": 1,
    "CONTENTS_HIDDEN": 2
  },
  "FetchType": {
    "DEFAULT": 1,
    "PREFETCH_BY_SERVER": 2,
    "PREFETCH_BY_CLIENT": 3
  },
  "LiveTalkAttribute": {
    "TITLE": 1,
    "ALLOW_REQUEST_TO_SPEAK": 2
  },
  "LiveTalkRole": {
    "HOST": 1,
    "CO_HOST": 2,
    "GUEST": 3
  },
  "LiveTalkSpeakerSetting": {
    "APPROVAL": 1,
    "ALL": 2
  },
  "LiveTalkType": {
    "PUBLIC": 1,
    "PRIVATE": 2
  },
  "MessageReactionType": {
    "ALL": 0,
    "UNDO": 1,
    "NICE": 2,
    "LOVE": 3,
    "FUN": 4,
    "AMAZING": 5,
    "SAD": 6,
    "OMG": 7
  },
  "NotifiedMessageType": {
    "MENTION": 1,
    "REPLY": 2
  },
  "PopupAttribute": {
    "NAME": 1,
    "ACTIVATED": 2,
    "STARTS_AT": 3,
    "ENDS_AT": 4,
    "CONTENT": 5
  },
  "PopupType": {
    "MAIN": 1,
    "CHATROOM": 2
  },
  "SquareChatAttribute": {
    "NAME": 2,
    "SQUARE_CHAT_IMAGE": 3,
    "STATE": 4,
    "TYPE": 5,
    "MAX_MEMBER_COUNT": 6,
    "MESSAGE_VISIBILITY": 7,
    "ABLE_TO_SEARCH_MESSAGE": 8
  },
  "SquareChatFeatureControlState": {
    "DISABLED": 1,
    "ENABLED": 2
  },
  "SquareChatMemberAttribute": {
    "MEMBERSHIP_STATE": 4,
    "NOTIFICATION_MESSAGE": 6,
    "NOTIFICATION_NEW_MEMBER": 7,
    "LEFT_BY_KICK_MESSAGE_LOCAL_ID": 8,
    "MESSAGE_LOCAL_ID_WHEN_BLOCK": 9
  },
  "SquareChatMembershipState": {
    "JOINED": 1,
    "LEFT": 2
  },
  "SquareChatState": {
    "ALIVE": 0,
    "DELETED": 1,
    "SUSPENDED": 2
  },
  "SquareEmblem": {
    "SUPER": 1,
    "OFFICIAL": 2
  },
  "SquareErrorCode": {
    "UNKNOWN": 0,
    "ILLEGAL_ARGUMENT": 400,
    "AUTHENTICATION_FAILURE": 401,
    "FORBIDDEN": 403,
    "NOT_FOUND": 404,
    "REVISION_MISMATCH": 409,
    "PRECONDITION_FAILED": 410,
    "INTERNAL_ERROR": 500,
    "NOT_IMPLEMENTED": 501,
    "TRY_AGAIN_LATER": 503,
    "MAINTENANCE": 505,
    "NO_PRESENCE_EXISTS": 506
  },
  "SquareFeatureControlState": {
    "DISABLED": 1,
    "ENABLED": 2
  },
  "SquareFeatureSetAttribute": {
    "CREATING_SECRET_SQUARE_CHAT": 1,
    "INVITING_INTO_OPEN_SQUARE_CHAT": 2,
    "CREATING_SQUARE_CHAT": 3,
    "READONLY_DEFAULT_CHAT": 4,
    "SHOWING_ADVERTISEMENT": 5,
    "DELEGATE_JOIN_TO_PLUG": 6,
    "DELEGATE_KICK_OUT_TO_PLUG": 7,
    "DISABLE_UPDATE_JOIN_METHOD": 8,
    "DISABLE_TRANSFER_ADMIN": 9,
    "CREATING_LIVE_TALK": 10,
    "DISABLE_UPDATE_SEARCHABLE": 11,
    "SUMMARIZING_MESSAGES": 12,
    "CREATING_SQUARE_THREAD": 13,
    "ENABLE_SQUARE_THREAD": 14,
    "DISABLE_CHANGE_ROLE_CO_ADMIN": 15
  },
  "SquareJoinMethodType": {
    "NONE": 0,
    "APPROVAL": 1,
    "CODE": 2
  },
  "SquareMemberRelationState": {
    "NONE": 1,
    "BLOCKED": 2
  },
  "SquareMemberRole": {
    "ADMIN": 1,
    "CO_ADMIN": 2,
    "MEMBER": 10
  },
  "SquareMessageState": {
    "SENT": 1,
    "DELETED": 2,
    "FORBIDDEN": 3,
    "UNSENT": 4
  },
  "SquareMetadataAttribute": {
    "EXCLUDED": 1,
    "NO_AD": 2
  },
  "SquarePreferenceAttribute": {
    "FAVORITE": 1,
    "NOTI_FOR_NEW_JOIN_REQUEST": 2
  },
  "SquareProviderType": {
    "UNKNOWN": 1,
    "YOUTUBE": 2,
    "OA_FANSPACE": 3
  },
  "SquareState": {
    "ALIVE": 0,
    "DELETED": 1,
    "SUSPENDED": 2
  },
  "SquareThreadAttribute": {
    "STATE": 1,
    "EXPIRES_AT": 2,
    "READ_ONLY_AT": 3
  },
  "SquareThreadMembershipState": {
    "JOINED": 1,
    "LEFT": 2
  },
  "SquareThreadState": {
    "ALIVE": 1,
    "DELETED": 2
  },
  "SquareType": {
    "CLOSED": 0,
    "OPEN": 1
  },
  "TargetChatType": {
    "ALL": 0,
    "MIDS": 1,
    "CATEGORIES": 2,
    "CHANNEL_ID": 3
  },
  "TargetUserType": {
    "ALL": 0,
    "MIDS": 1
  },
  "do0_EnumC23139B": {
    "CLOUD": 1,
    "BLE": 2,
    "BEACON": 3
  },
  "do0_EnumC23147e": {
    "SUCCESS": 0,
    "UNKNOWN_ERROR": 1,
    "BLUETOOTH_NOT_AVAILABLE": 2,
    "CONNECTION_TIMEOUT": 3,
    "CONNECTION_ERROR": 4,
    "CONNECTION_IN_PROGRESS": 5
  },
  "do0_EnumC23148f": {
    "ONETIME": 0,
    "AUTOMATIC": 1,
    "BEACON": 2
  },
  "do0_G": {
    "SUCCESS": 0,
    "UNKNOWN_ERROR": 1,
    "GATT_ERROR": 2,
    "GATT_OPERATION_NOT_SUPPORTED": 3,
    "GATT_SERVICE_NOT_FOUND": 4,
    "GATT_CHARACTERISTIC_NOT_FOUND": 5,
    "GATT_CONNECTION_CLOSED": 6,
    "CONNECTION_INVALID": 7
  },
  "do0_M": {
    "INTERNAL_SERVER_ERROR": 0,
    "UNAUTHORIZED": 1,
    "INVALID_REQUEST": 2,
    "INVALID_STATE": 3,
    "DEVICE_LIMIT_EXCEEDED": 4096,
    "UNSUPPORTED_REGION": 4097
  },
  "fN0_EnumC24466B": {
    "LINE_PREMIUM": 0,
    "LYP_PREMIUM": 1
  },
  "fN0_EnumC24467C": {
    "LINE": 1,
    "YAHOO_JAPAN": 2
  },
  "fN0_EnumC24469a": {
    "OK": 1,
    "NOT_SUPPORTED": 2,
    "UNDEFINED": 3,
    "NOT_ENOUGH_TICKETS": 4,
    "NOT_FRIENDS": 5,
    "NO_AGREEMENT": 6
  },
  "fN0_F": {
    "OK": 1,
    "NOT_SUPPORTED": 2,
    "UNDEFINED": 3,
    "CONFLICT": 4,
    "NOT_AVAILABLE": 5,
    "INVALID_INVITATION": 6,
    "IN_PAYMENT_FAILURE_STATE": 7
  },
  "fN0_G": {
    "APPLE": 1,
    "GOOGLE": 2
  },
  "fN0_H": {
    "INACTIVE": 1,
    "ACTIVE_FINITE": 2,
    "ACTIVE_INFINITE": 3
  },
  "fN0_o": {
    "AVAILABLE": 1,
    "ALREADY_SUBSCRIBED": 2
  },
  "fN0_p": {
    "UNKNOWN": 0,
    "SOFTBANK_BUNDLE": 1,
    "YBB_BUNDLE": 2,
    "YAHOO_MOBILE_BUNDLE": 3,
    "PPCG_BUNDLE": 4,
    "ENJOY_BUNDLE": 5,
    "YAHOO_TRIAL_BUNDLE": 6,
    "YAHOO_APPLE": 7,
    "YAHOO_GOOGLE": 8,
    "LINE_APPLE": 9,
    "LINE_GOOGLE": 10,
    "YAHOO_WALLET": 11
  },
  "fN0_q": {
    "UNKNOWN": 0,
    "NONE": 1,
    "ILLEGAL_ARGUMENT": 16641,
    "NOT_FOUND": 16642,
    "NOT_AVAILABLE": 16643,
    "INTERNAL_SERVER_ERROR": 16644,
    "AUTHENTICATION_FAILED": 16645
  },
  "g80_EnumC24993a": {
    "INTERNAL_ERROR": 0,
    "ILLEGAL_ARGUMENT": 1,
    "INVALID_CONTEXT": 2,
    "TOO_MANY_REQUESTS": 3
  },
  "h80_EnumC25645e": {
    "INTERNAL_ERROR": 0,
    "ILLEGAL_ARGUMENT": 1,
    "NOT_FOUND": 2,
    "RETRY_LATER": 3,
    "INVALID_CONTEXT": 100,
    "NOT_SUPPORTED": 101
  },
  "I80_EnumC26392b": {
    "UNKNOWN": 0,
    "SKIP": 1,
    "PASSWORD": 2,
    "EMAIL_BASED": 4,
    "NONE": 11
  },
  "I80_EnumC26394c": {
    "PHONE_NUMBER": 0,
    "APPLE": 1,
    "GOOGLE": 2
  },
  "I80_EnumC26408j": {
    "INTERNAL_ERROR": 0,
    "ILLEGAL_ARGUMENT": 1,
    "VERIFICATION_FAILED": 2,
    "NOT_FOUND": 3,
    "RETRY_LATER": 4,
    "HUMAN_VERIFICATION_REQUIRED": 5,
    "INVALID_CONTEXT": 100,
    "APP_UPGRADE_REQUIRED": 101
  },
  "I80_EnumC26425y": {
    "UNKNOWN": 0,
    "SMS": 1,
    "IVR": 2
  },
  "j80_EnumC27228a": {
    "AUTHENTICATION_FAILED": 1,
    "INVALID_STATE": 2,
    "NOT_AUTHORIZED_DEVICE": 3,
    "MUST_REFRESH_V3_TOKEN": 4
  },
  "jO0_EnumC27533B": {
    "PAYMENT_APPLE": 1,
    "PAYMENT_GOOGLE": 2
  },
  "jO0_EnumC27535b": {
    "ILLEGAL_ARGUMENT": 0,
    "AUTHENTICATION_FAILED": 1,
    "INTERNAL_ERROR": 20,
    "MESSAGE_DEFINED_ERROR": 29,
    "MAINTENANCE_ERROR": 33
  },
  "jO0_EnumC27559z": {
    "PAYMENT_PG_NONE": 0,
    "PAYMENT_PG_AU": 1,
    "PAYMENT_PG_AL": 2
  },
  "jf_EnumC27712a": {
    "NONE": 1,
    "DOES_NOT_RESPOND": 2,
    "RESPOND_MANUALLY": 3,
    "RESPOND_AUTOMATICALLY": 4
  },
  "jf_EnumC27717f": {
    "UNKNOWN": 0,
    "BAD_REQUEST": 1,
    "NOT_FOUND": 2,
    "FORBIDDEN": 3,
    "INTERNAL_SERVER_ERROR": 4
  },
  "kf_EnumC28766a": {
    "ILLEGAL_ARGUMENT": 0,
    "INTERNAL_ERROR": 1,
    "UNAUTHORIZED": 2
  },
  "kf_o": {
    "ANDROID": 0,
    "IOS": 1
  },
  "kf_p": {
    "RICHMENU": 0,
    "TALK_ROOM": 1
  },
  "kf_r": {
    "WEB": 0,
    "POSTBACK": 1,
    "SEND_MESSAGE": 2
  },
  "kf_u": {
    "CLICK": 0,
    "IMPRESSION": 1
  },
  "kf_x": {
    "UNKNOWN": 0,
    "PROFILE": 1,
    "TALK_LIST": 2,
    "OA_CALL": 3
  },
  "n80_o": {
    "INTERNAL_ERROR": 0,
    "INVALID_CONTEXT": 100,
    "FIDO_UNKNOWN_CREDENTIAL_ID": 200,
    "FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR": 201,
    "FIDO_UNACCEPTABLE_CONTENT": 202,
    "FIDO_INVALID_REQUEST": 203
  },
  "o80_e": {
    "INTERNAL_ERROR": 0,
    "VERIFICATION_FAILED": 1,
    "LOGIN_NOT_ALLOWED": 2,
    "EXTERNAL_SERVICE_UNAVAILABLE": 3,
    "RETRY_LATER": 4,
    "NOT_SUPPORTED": 100,
    "ILLEGAL_ARGUMENT": 101,
    "INVALID_CONTEXT": 102,
    "FORBIDDEN": 103,
    "FIDO_UNKNOWN_CREDENTIAL_ID": 200,
    "FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR": 201,
    "FIDO_UNACCEPTABLE_CONTENT": 202,
    "FIDO_INVALID_REQUEST": 203
  },
  "og_E": {
    "RUNNING": 1,
    "CLOSING": 2,
    "CLOSED": 3,
    "SUSPEND": 4
  },
  "og_EnumC32661b": {
    "INACTIVE": 0,
    "ACTIVE": 1
  },
  "og_EnumC32663d": {
    "PREMIUM": 0,
    "VERIFIED": 1,
    "UNVERIFIED": 2
  },
  "og_EnumC32671l": {
    "ILLEGAL_ARGUMENT": 0,
    "AUTHENTICATION_FAILED": 1,
    "INVALID_STATE": 3,
    "NOT_FOUND": 5,
    "INTERNAL_ERROR": 20,
    "MAINTENANCE_ERROR": 33
  },
  "og_G": {
    "FREE": 0,
    "MONTHLY": 1,
    "PER_PAYMENT": 2
  },
  "og_I": {
    "OK": 0,
    "REACHED_TIER_LIMIT": 1,
    "REACHED_MEMBER_LIMIT": 2,
    "ALREADY_JOINED": 3,
    "NOT_SUPPORTED_LINE_VERSION": 4,
    "BOT_USER_REGION_IS_NOT_MATCH": 5
  },
  "q80_EnumC33651c": {
    "INTERNAL_ERROR": 0,
    "ILLEGAL_ARGUMENT": 1,
    "VERIFICATION_FAILED": 2,
    "NOT_ALLOWED_QR_CODE_LOGIN": 3,
    "VERIFICATION_NOTICE_FAILED": 4,
    "RETRY_LATER": 5,
    "INVALID_CONTEXT": 100,
    "APP_UPGRADE_REQUIRED": 101
  },
  "qm_EnumC34112e": {
    "BUTTON": 1,
    "ENTRY_SELECTED": 2,
    "BROADCAST_ENTER": 3,
    "BROADCAST_LEAVE": 4,
    "BROADCAST_STAY": 5
  },
  "qm_s": {
    "ILLEGAL_ARGUMENT": 0,
    "NOT_FOUND": 5,
    "INTERNAL_ERROR": 20
  },
  "r80_EnumC34361a": {
    "PERSONAL_ACCOUNT": 1,
    "CURRENT_ACCOUNT": 2
  },
  "r80_EnumC34362b": {
    "BANK_ALL": 1,
    "BANK_DEPOSIT": 2,
    "BANK_WITHDRAWAL": 3
  },
  "r80_EnumC34365e": {
    "BANK": 1,
    "ATM": 2,
    "CONVENIENCE_STORE": 3,
    "DEBIT_CARD": 4,
    "E_CHANNEL": 5,
    "VIRTUAL_BANK_ACCOUNT": 6,
    "AUTO": 7,
    "CVS_LAWSON": 8,
    "SEVEN_BANK_DEPOSIT": 9,
    "CODE_DEPOSIT": 10
  },
  "r80_EnumC34367g": {
    "AVAILABLE": 0,
    "DIFFERENT_REGION": 1,
    "UNSUPPORTED_DEVICE": 2,
    "PHONE_NUMBER_UNREGISTERED": 3,
    "UNAVAILABLE_FROM_LINE_PAY": 4,
    "INVALID_USER": 5
  },
  "r80_EnumC34368h": {
    "CHARGE": 1,
    "WITHDRAW": 2
  },
  "r80_EnumC34370j": {
    "UNKNOWN": 0,
    "VISA": 1,
    "MASTER": 2,
    "AMEX": 3,
    "DINERS": 4,
    "JCB": 5
  },
  "r80_EnumC34371k": {
    "NULL": 0,
    "ATM": 1,
    "CONVENIENCE_STORE": 2
  },
  "r80_EnumC34372l": {
    "SCALE2": 1,
    "SCALE3": 2,
    "HDPI": 3,
    "XHDPI": 4
  },
  "r80_EnumC34374n": {
    "SUCCESS": 0,
    "GENERAL_USER_ERROR": 1e3,
    "ACCOUNT_NOT_EXISTS": 1101,
    "ACCOUNT_INVALID_STATUS": 1102,
    "ACCOUNT_ALREADY_EXISTS": 1103,
    "MERCHANT_NOT_EXISTS": 1104,
    "MERCHANT_INVALID_STATUS": 1105,
    "AGREEMENT_REQUIRED": 1107,
    "BLACKLISTED": 1108,
    "WRONG_PASSWORD": 1109,
    "INVALID_CREDIT_CARD": 1110,
    "LIMIT_EXCEEDED": 1111,
    "CANNOT_PROCEED": 1115,
    "TOO_WEAK_PASSWORD": 1120,
    "CANNOT_CREATE_ACCOUNT": 1125,
    "TEMPORARY_PASSWORD_ERROR": 1130,
    "MISSING_PARAMETERS": 1140,
    "NO_VALID_MYCODE_ACCOUNT": 1141,
    "INSUFFICIENT_BALANCE": 1142,
    "TRANSACTION_NOT_FOUND": 1150,
    "TRANSACTION_FINISHED": 1152,
    "PAYMENT_AMOUNT_WRONG": 1153,
    "BALANCE_ACCOUNT_NOT_EXISTS": 1157,
    "DUPLICATED_CITIZEN_ID": 1158,
    "PAYMENT_REQUEST_NOT_FOUND": 1159,
    "AUTH_FAILED": 1169,
    "PASSWORD_SETTING_REQUIRED": 1171,
    "TRANSACTION_ALREADY_PROCESSED": 1172,
    "CURRENCY_NOT_SUPPORTED": 1178,
    "PAYMENT_NOT_AVAILABLE": 1180,
    "TRANSFER_REQUEST_NOT_FOUND": 1181,
    "INVALID_PAYMENT_AMOUNT": 1183,
    "INSUFFICIENT_PAYMENT_AMOUNT": 1184,
    "EXTERNAL_SYSTEM_MAINTENANCE": 1185,
    "EXTERNAL_SYSTEM_INOPERATIONAL": 1186,
    "SESSION_EXPIRED": 1192,
    "UPGRADE_REQUIRED": 1195,
    "REQUEST_TOKEN_EXPIRED": 1196,
    "OPERATION_FINISHED": 1198,
    "EXTERNAL_SYSTEM_ERROR": 1199,
    "PARTIAL_AMOUNT_APPROVED": 1299,
    "PINCODE_AUTH_REQUIRED": 1600,
    "ADDITIONAL_AUTH_REQUIRED": 1601,
    "NOT_BOUND": 1603,
    "OTP_USER_REGISTRATION_ERROR": 1610,
    "OTP_CARD_REGISTRATION_ERROR": 1611,
    "NO_AUTH_METHOD": 1612,
    "GENERAL_USER_ERROR_RESTART": 1696,
    "GENERAL_USER_ERROR_REFRESH": 1697,
    "GENERAL_USER_ERROR_CLOSE": 1698,
    "INTERNAL_SERVER_ERROR": 9e3,
    "INTERNAL_SYSTEM_MAINTENANCE": 9999,
    "UNKNOWN_ERROR": 1e4
  },
  "r80_EnumC34376p": {
    "TRANSFER": 1,
    "TRANSFER_REQUEST": 2,
    "DUTCH": 3,
    "INVITATION": 4
  },
  "r80_EnumC34377q": {
    "NULL": 0,
    "UNIDEN": 1,
    "WAIT": 2,
    "IDENTIFIED": 3,
    "CHECKING": 4
  },
  "r80_EnumC34378s": {
    "UNKNOWN": 0,
    "MORE_TAB": 1,
    "CHAT_ROOM_PLUS_MENU": 2,
    "TRANSFER": 3,
    "PAYMENT": 4,
    "LINECARD": 5,
    "INVITATION": 6
  },
  "r80_e0": {
    "NONE": 0,
    "ONE_TIME_PAYMENT_AGREEMENT": 1,
    "SIMPLE_JOINING_AGREEMENT": 2,
    "LINE_CARD_CASH_AGREEMENT": 3,
    "LINE_CARD_MONEY_AGREEMENT": 4,
    "JOINING_WITH_LINE_CARD_AGREEMENT": 5,
    "LINE_CARD_AGREEMENT": 6
  },
  "r80_g0": {
    "NULL": 0,
    "ATM": 1,
    "CONVENIENCE_STORE": 2,
    "ALL": 3
  },
  "r80_h0": {
    "READY": 1,
    "COMPLETE": 2,
    "WAIT": 3,
    "CANCEL": 4,
    "FAIL": 5,
    "EXPIRE": 6,
    "ALL": 7
  },
  "r80_i0": {
    "TRANSFER_ACCEPTABLE": 1,
    "REMOVE_INVOICE": 2,
    "INVOICE_CODE": 3,
    "SHOW_ALWAYS_INVOICE": 4
  },
  "r80_m0": {
    "OK": 1,
    "NOT_ALIVE_USER": 2,
    "NEED_BALANCE_DISCLAIMER": 3,
    "ECONTEXT_CHARGING_IN_PROGRESS": 4,
    "TRANSFER_IN_PROGRESS": 6,
    "OK_REMAINING_BALANCE": 7,
    "ADVERSE_BALANCE": 8,
    "CONFIRM_REQUIRED": 9
  },
  "r80_n0": {
    "LINE": 1,
    "LINEPAY": 2
  },
  "r80_r": {
    "CITIZEN_ID": 1,
    "PASSPORT": 2,
    "WORK_PERMIT": 3,
    "ALIEN_CARD": 4
  },
  "t80_h": {
    "CLIENT": 1,
    "SERVER": 2
  },
  "t80_i": {
    "APP_INSTANCE_LOCAL": 1,
    "APP_TYPE_LOCAL": 2,
    "GLOBAL": 3
  },
  "t80_n": {
    "UNKNOWN": 0,
    "NONE": 1,
    "ILLEGAL_ARGUMENT": 16641,
    "NOT_FOUND": 16642,
    "NOT_AVAILABLE": 16643,
    "TOO_LARGE_VALUE": 16644,
    "CLOCK_DRIFT_DETECTED": 16645,
    "UNSUPPORTED_APPLICATION_TYPE": 16646,
    "DUPLICATED_ENTRY": 16647,
    "AUTHENTICATION_FAILED": 16897,
    "INTERNAL_SERVER_ERROR": 20737,
    "SERVICE_IN_MAINTENANCE_MODE": 20738,
    "SERVICE_UNAVAILABLE": 20739
  },
  "t80_r": {
    "USER_ACTION": 1,
    "DATA_OUTDATED": 2,
    "APP_MIGRATION": 3,
    "OTHER": 100
  },
  "vh_EnumC37632c": {
    "ACTIVE": 1,
    "INACTIVE": 2
  },
  "vh_m": {
    "SAFE": 1,
    "NOT_SAFE": 2
  },
  "wm_EnumC38497a": {
    "UNKNOWN": 0,
    "BOT_NOT_FOUND": 1,
    "BOT_NOT_AVAILABLE": 2,
    "NOT_A_MEMBER": 3,
    "SQUARECHAT_NOT_FOUND": 4,
    "FORBIDDEN": 5,
    "ILLEGAL_ARGUMENT": 400,
    "AUTHENTICATION_FAILED": 401,
    "INTERNAL_ERROR": 500
  },
  "zR0_EnumC40578c": {
    "FOREGROUND": 0,
    "BACKGROUND": 1
  },
  "zR0_EnumC40579d": {
    "STICKER": 1,
    "THEME": 2,
    "STICON": 3
  },
  "zR0_h": {
    "NORMAL": 0,
    "BIG": 1
  },
  "zR0_j": {
    "UNKNOWN": 0,
    "NONE": 1,
    "ILLEGAL_ARGUMENT": 16641,
    "NOT_FOUND": 16642,
    "NOT_AVAILABLE": 16643,
    "AUTHENTICATION_FAILED": 16897,
    "INTERNAL_SERVER_ERROR": 20737,
    "SERVICE_UNAVAILABLE": 20739
  },
  "zf_EnumC40713a": {
    "PERSONAL": 1,
    "ROOM": 2,
    "GROUP": 3,
    "SQUARE_CHAT": 4
  },
  "zf_EnumC40715c": {
    "REGULAR": 1,
    "PRIORITY": 2,
    "MORE": 3
  },
  "zf_EnumC40716d": {
    "INVALID_REQUEST": 1,
    "UNAUTHORIZED": 2,
    "SERVER_ERROR": 100
  },
  "LoginResultType": {
    "SUCCESS": 1,
    "REQUIRE_QRCODE": 2,
    "REQUIRE_DEVICE_CONFIRM": 3,
    "REQUIRE_SMS_CONFIRM": 4
  }
};

// node_modules/@evex/linejs/base/thrift/readwrite/struct.js
function map(call, value) {
  const tMap = {};
  for (const key in value) {
    const e = value[key];
    tMap[key] = call(e);
  }
  return tMap;
}
__name(map, "map");
function AcceptChatInvitationByTicketRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.chatMid
    ],
    [
      11,
      3,
      param.ticketId
    ]
  ];
}
__name(AcceptChatInvitationByTicketRequest, "AcceptChatInvitationByTicketRequest");
function AcceptChatInvitationRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.chatMid
    ]
  ];
}
__name(AcceptChatInvitationRequest, "AcceptChatInvitationRequest");
function AcceptSpeakersRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ],
    [
      14,
      3,
      [
        11,
        param.targetMids
      ]
    ]
  ];
}
__name(AcceptSpeakersRequest, "AcceptSpeakersRequest");
function AcceptToChangeRoleRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ],
    [
      11,
      3,
      param.inviteRequestId
    ]
  ];
}
__name(AcceptToChangeRoleRequest, "AcceptToChangeRoleRequest");
function AcceptToListenRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ],
    [
      11,
      3,
      param.inviteRequestId
    ]
  ];
}
__name(AcceptToListenRequest, "AcceptToListenRequest");
function AcceptToSpeakRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ],
    [
      11,
      3,
      param.inviteRequestId
    ]
  ];
}
__name(AcceptToSpeakRequest, "AcceptToSpeakRequest");
function LiveTalkType(param) {
  return typeof param === "string" ? enums.LiveTalkType[param] : param;
}
__name(LiveTalkType, "LiveTalkType");
function LiveTalkSpeakerSetting(param) {
  return typeof param === "string" ? enums.LiveTalkSpeakerSetting[param] : param;
}
__name(LiveTalkSpeakerSetting, "LiveTalkSpeakerSetting");
function AcquireLiveTalkRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.title
    ],
    [
      8,
      3,
      LiveTalkType(param.type)
    ],
    [
      8,
      4,
      LiveTalkSpeakerSetting(param.speakerSetting)
    ]
  ];
}
__name(AcquireLiveTalkRequest, "AcquireLiveTalkRequest");
function CancelToSpeakRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ]
  ];
}
__name(CancelToSpeakRequest, "CancelToSpeakRequest");
function FetchLiveTalkEventsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ],
    [
      11,
      3,
      param.syncToken
    ],
    [
      8,
      4,
      param.limit
    ]
  ];
}
__name(FetchLiveTalkEventsRequest, "FetchLiveTalkEventsRequest");
function FindLiveTalkByInvitationTicketRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.invitationTicket
    ]
  ];
}
__name(FindLiveTalkByInvitationTicketRequest, "FindLiveTalkByInvitationTicketRequest");
function ForceEndLiveTalkRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ]
  ];
}
__name(ForceEndLiveTalkRequest, "ForceEndLiveTalkRequest");
function GetLiveTalkInfoForNonMemberRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ],
    [
      15,
      3,
      [
        11,
        param.speakers
      ]
    ]
  ];
}
__name(GetLiveTalkInfoForNonMemberRequest, "GetLiveTalkInfoForNonMemberRequest");
function GetLiveTalkInvitationUrlRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ]
  ];
}
__name(GetLiveTalkInvitationUrlRequest, "GetLiveTalkInvitationUrlRequest");
function GetLiveTalkSpeakersForNonMemberRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ],
    [
      15,
      3,
      [
        11,
        param.speakers
      ]
    ]
  ];
}
__name(GetLiveTalkSpeakersForNonMemberRequest, "GetLiveTalkSpeakersForNonMemberRequest");
function GetSquareInfoByChatMidRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ]
  ];
}
__name(GetSquareInfoByChatMidRequest, "GetSquareInfoByChatMidRequest");
function LiveTalkRole(param) {
  return typeof param === "string" ? enums.LiveTalkRole[param] : param;
}
__name(LiveTalkRole, "LiveTalkRole");
function InviteToChangeRoleRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ],
    [
      11,
      3,
      param.targetMid
    ],
    [
      8,
      4,
      LiveTalkRole(param.targetRole)
    ]
  ];
}
__name(InviteToChangeRoleRequest, "InviteToChangeRoleRequest");
function InviteToListenRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ],
    [
      11,
      3,
      param.targetMid
    ]
  ];
}
__name(InviteToListenRequest, "InviteToListenRequest");
function InviteToLiveTalkRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ],
    [
      15,
      3,
      [
        11,
        param.invitees
      ]
    ]
  ];
}
__name(InviteToLiveTalkRequest, "InviteToLiveTalkRequest");
function InviteToSpeakRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ],
    [
      11,
      3,
      param.targetMid
    ]
  ];
}
__name(InviteToSpeakRequest, "InviteToSpeakRequest");
function BooleanState(param) {
  return typeof param === "string" ? enums.BooleanState[param] : param;
}
__name(BooleanState, "BooleanState");
function JoinLiveTalkRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ],
    [
      2,
      3,
      param.wantToSpeak
    ],
    [
      8,
      4,
      BooleanState(param.claimAdult)
    ]
  ];
}
__name(JoinLiveTalkRequest, "JoinLiveTalkRequest");
function LiveTalkParticipant(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.mid
    ]
  ];
}
__name(LiveTalkParticipant, "LiveTalkParticipant");
function AllNonMemberLiveTalkParticipants(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(AllNonMemberLiveTalkParticipants, "AllNonMemberLiveTalkParticipants");
function LiveTalkKickOutTarget(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      LiveTalkParticipant(param.liveTalkParticipant)
    ],
    [
      12,
      2,
      AllNonMemberLiveTalkParticipants(param.allNonMemberLiveTalkParticipants)
    ]
  ];
}
__name(LiveTalkKickOutTarget, "LiveTalkKickOutTarget");
function KickOutLiveTalkParticipantsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ],
    [
      12,
      3,
      LiveTalkKickOutTarget(param.target)
    ]
  ];
}
__name(KickOutLiveTalkParticipantsRequest, "KickOutLiveTalkParticipantsRequest");
function RejectSpeakersRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ],
    [
      14,
      3,
      [
        11,
        param.targetMids
      ]
    ]
  ];
}
__name(RejectSpeakersRequest, "RejectSpeakersRequest");
function RejectToSpeakRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ],
    [
      11,
      3,
      param.inviteRequestId
    ]
  ];
}
__name(RejectToSpeakRequest, "RejectToSpeakRequest");
function RemoveLiveTalkSubscriptionRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ]
  ];
}
__name(RemoveLiveTalkSubscriptionRequest, "RemoveLiveTalkSubscriptionRequest");
function LiveTalkReportType(param) {
  return typeof param === "string" ? enums.LiveTalkReportType[param] : param;
}
__name(LiveTalkReportType, "LiveTalkReportType");
function ReportLiveTalkRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ],
    [
      8,
      3,
      LiveTalkReportType(param.reportType)
    ]
  ];
}
__name(ReportLiveTalkRequest, "ReportLiveTalkRequest");
function ReportLiveTalkSpeakerRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ],
    [
      11,
      3,
      param.speakerMemberMid
    ],
    [
      8,
      4,
      LiveTalkReportType(param.reportType)
    ]
  ];
}
__name(ReportLiveTalkSpeakerRequest, "ReportLiveTalkSpeakerRequest");
function RequestToListenRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ]
  ];
}
__name(RequestToListenRequest, "RequestToListenRequest");
function RequestToSpeakRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ]
  ];
}
__name(RequestToSpeakRequest, "RequestToSpeakRequest");
function LiveTalkAttribute(param) {
  return typeof param === "string" ? enums.LiveTalkAttribute[param] : param;
}
__name(LiveTalkAttribute, "LiveTalkAttribute");
function LiveTalk(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.sessionId
    ],
    [
      11,
      3,
      param.title
    ],
    [
      8,
      4,
      LiveTalkType(param.type)
    ],
    [
      8,
      5,
      LiveTalkSpeakerSetting(param.speakerSetting)
    ],
    [
      2,
      6,
      param.allowRequestToSpeak
    ],
    [
      11,
      7,
      param.hostMemberMid
    ],
    [
      11,
      8,
      param.announcement
    ],
    [
      8,
      9,
      param.participantCount
    ],
    [
      10,
      10,
      param.revision
    ],
    [
      10,
      11,
      param.startedAt
    ]
  ];
}
__name(LiveTalk, "LiveTalk");
function UpdateLiveTalkAttrsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      1,
      [
        8,
        param.updatedAttrs && param.updatedAttrs.map((e) => LiveTalkAttribute(e))
      ]
    ],
    [
      12,
      2,
      LiveTalk(param.liveTalk)
    ]
  ];
}
__name(UpdateLiveTalkAttrsRequest, "UpdateLiveTalkAttrsRequest");
function Pb1_D4(param) {
  return typeof param === "string" ? enums.Pb1_D4[param] : param;
}
__name(Pb1_D4, "Pb1_D4");
function Pb1_EnumC13222w4(param) {
  return typeof param === "string" ? enums.Pb1_EnumC13222w4[param] : param;
}
__name(Pb1_EnumC13222w4, "Pb1_EnumC13222w4");
function Pb1_EnumC13237x5(param) {
  return typeof param === "string" ? enums.Pb1_EnumC13237x5[param] : param;
}
__name(Pb1_EnumC13237x5, "Pb1_EnumC13237x5");
function AcquireOACallRouteRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.searchId
    ],
    [
      13,
      2,
      [
        11,
        11,
        param.fromEnvInfo
      ]
    ],
    [
      11,
      3,
      param.otp
    ]
  ];
}
__name(AcquireOACallRouteRequest, "AcquireOACallRouteRequest");
function PaidCallType(param) {
  return typeof param === "string" ? enums.PaidCallType[param] : param;
}
__name(PaidCallType, "PaidCallType");
function og_EnumC32661b(param) {
  return typeof param === "string" ? enums.og_EnumC32661b[param] : param;
}
__name(og_EnumC32661b, "og_EnumC32661b");
function ActivateSubscriptionRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.uniqueKey
    ],
    [
      8,
      2,
      og_EnumC32661b(param.activeStatus)
    ]
  ];
}
__name(ActivateSubscriptionRequest, "ActivateSubscriptionRequest");
function AdTypeOptOutClickEventRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.moduleAdId
    ],
    [
      11,
      2,
      param.targetId
    ]
  ];
}
__name(AdTypeOptOutClickEventRequest, "AdTypeOptOutClickEventRequest");
function AddMetaInvalid(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.hint
    ]
  ];
}
__name(AddMetaInvalid, "AddMetaInvalid");
function AddMetaByPhone(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.phone
    ]
  ];
}
__name(AddMetaByPhone, "AddMetaByPhone");
function AddMetaBySearchId(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.searchId
    ]
  ];
}
__name(AddMetaBySearchId, "AddMetaBySearchId");
function AddMetaByUserTicket(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.ticket
    ]
  ];
}
__name(AddMetaByUserTicket, "AddMetaByUserTicket");
function AddMetaGroupMemberList(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.chatMid
    ]
  ];
}
__name(AddMetaGroupMemberList, "AddMetaGroupMemberList");
function LN0_P(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_P, "LN0_P");
function LN0_L(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_L, "LN0_L");
function LN0_G(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_G, "LN0_G");
function LN0_C11282h(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_C11282h, "LN0_C11282h");
function LN0_C11300q(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_C11300q, "LN0_C11300q");
function LN0_C11307u(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_C11307u, "LN0_C11307u");
function AddMetaShareContact(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.messageId
    ],
    [
      11,
      2,
      param.chatMid
    ],
    [
      11,
      3,
      param.senderMid
    ]
  ];
}
__name(AddMetaShareContact, "AddMetaShareContact");
function AddMetaStrangerMessage(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.messageId
    ],
    [
      11,
      2,
      param.chatMid
    ]
  ];
}
__name(AddMetaStrangerMessage, "AddMetaStrangerMessage");
function AddMetaStrangerCall(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.messageId
    ]
  ];
}
__name(AddMetaStrangerCall, "AddMetaStrangerCall");
function AddMetaMentionInChat(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.chatMid
    ],
    [
      11,
      2,
      param.messageId
    ]
  ];
}
__name(AddMetaMentionInChat, "AddMetaMentionInChat");
function LN0_O(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_O, "LN0_O");
function LN0_Q(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_Q, "LN0_Q");
function LN0_C11313x(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_C11313x, "LN0_C11313x");
function LN0_A(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_A, "LN0_A");
function AddMetaGroupVideoCall(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.chatMid
    ]
  ];
}
__name(AddMetaGroupVideoCall, "AddMetaGroupVideoCall");
function LN0_r(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_r, "LN0_r");
function LN0_C11315y(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_C11315y, "LN0_C11315y");
function LN0_C11316z(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_C11316z, "LN0_C11316z");
function LN0_B(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_B, "LN0_B");
function LN0_C11280g(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_C11280g, "LN0_C11280g");
function LN0_T(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_T, "LN0_T");
function LN0_C11276e(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_C11276e, "LN0_C11276e");
function LN0_S(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_S, "LN0_S");
function AddMetaProfileUndefined(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.hint
    ]
  ];
}
__name(AddMetaProfileUndefined, "AddMetaProfileUndefined");
function LN0_F(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_F, "LN0_F");
function LN0_C11294n(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_C11294n, "LN0_C11294n");
function LN0_C11290l(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_C11290l, "LN0_C11290l");
function LN0_C11309v(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_C11309v, "LN0_C11309v");
function LN0_C11292m(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_C11292m, "LN0_C11292m");
function AddMetaChatNote(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.chatMid
    ]
  ];
}
__name(AddMetaChatNote, "AddMetaChatNote");
function AddMetaChatNoteMenu(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.chatMid
    ]
  ];
}
__name(AddMetaChatNoteMenu, "AddMetaChatNoteMenu");
function LN0_U(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_U, "LN0_U");
function LN0_E(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_E, "LN0_E");
function AddMetaSearchIdInUnifiedSearch(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.searchId
    ]
  ];
}
__name(AddMetaSearchIdInUnifiedSearch, "AddMetaSearchIdInUnifiedSearch");
function LN0_D(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_D, "LN0_D");
function LN0_C11278f(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_C11278f, "LN0_C11278f");
function LN0_H(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(LN0_H, "LN0_H");
function LN0_C11274d(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      AddMetaInvalid(param.invalid)
    ],
    [
      12,
      2,
      AddMetaByPhone(param.byPhone)
    ],
    [
      12,
      3,
      AddMetaBySearchId(param.bySearchId)
    ],
    [
      12,
      4,
      AddMetaByUserTicket(param.byUserTicket)
    ],
    [
      12,
      5,
      AddMetaGroupMemberList(param.groupMemberList)
    ],
    [
      12,
      6,
      LN0_P(param.timelineCPF)
    ],
    [
      12,
      7,
      LN0_L(param.smartChannelCPF)
    ],
    [
      12,
      8,
      LN0_G(param.openchatCPF)
    ],
    [
      12,
      9,
      LN0_C11282h(param.beaconBanner)
    ],
    [
      12,
      10,
      LN0_C11300q(param.friendRecommendation)
    ],
    [
      12,
      11,
      LN0_C11307u(param.homeRecommendation)
    ],
    [
      12,
      12,
      AddMetaShareContact(param.shareContact)
    ],
    [
      12,
      13,
      AddMetaStrangerMessage(param.strangerMessage)
    ],
    [
      12,
      14,
      AddMetaStrangerCall(param.strangerCall)
    ],
    [
      12,
      15,
      AddMetaMentionInChat(param.mentionInChat)
    ],
    [
      12,
      16,
      LN0_O(param.timeline)
    ],
    [
      12,
      17,
      LN0_Q(param.unifiedSearch)
    ],
    [
      12,
      18,
      LN0_C11313x(param.lineLab)
    ],
    [
      12,
      19,
      LN0_A(param.lineToCall)
    ],
    [
      12,
      20,
      AddMetaGroupVideoCall(param.groupVideo)
    ],
    [
      12,
      21,
      LN0_r(param.friendRequest)
    ],
    [
      12,
      22,
      LN0_C11315y(param.liveViewer)
    ],
    [
      12,
      23,
      LN0_C11316z(param.lineThings)
    ],
    [
      12,
      24,
      LN0_B(param.mediaCapture)
    ],
    [
      12,
      25,
      LN0_C11280g(param.avatarOASetting)
    ],
    [
      12,
      26,
      LN0_T(param.urlScheme)
    ],
    [
      12,
      27,
      LN0_C11276e(param.addressBook)
    ],
    [
      12,
      28,
      LN0_S(param.unifiedSearchOATab)
    ],
    [
      12,
      29,
      AddMetaProfileUndefined(param.profileUndefined)
    ],
    [
      12,
      30,
      LN0_F(param.DEPRECATED_oaChatHeader)
    ],
    [
      12,
      31,
      LN0_C11294n(param.chatMenu)
    ],
    [
      12,
      32,
      LN0_C11290l(param.chatHeader)
    ],
    [
      12,
      33,
      LN0_C11309v(param.homeTabCPF)
    ],
    [
      12,
      34,
      LN0_C11292m(param.chatList)
    ],
    [
      12,
      35,
      AddMetaChatNote(param.chatNote)
    ],
    [
      12,
      36,
      AddMetaChatNoteMenu(param.chatNoteMenu)
    ],
    [
      12,
      37,
      LN0_U(param.walletTabCPF)
    ],
    [
      12,
      38,
      LN0_E(param.oaCall)
    ],
    [
      12,
      39,
      AddMetaSearchIdInUnifiedSearch(param.searchIdInUnifiedSearch)
    ],
    [
      12,
      40,
      LN0_D(param.newsDigestADCPF)
    ],
    [
      12,
      41,
      LN0_C11278f(param.albumCPF)
    ],
    [
      12,
      42,
      LN0_H(param.premiumAgreement)
    ]
  ];
}
__name(LN0_C11274d, "LN0_C11274d");
function AddFriendTracking(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.reference
    ],
    [
      12,
      2,
      LN0_C11274d(param.trackingMeta)
    ]
  ];
}
__name(AddFriendTracking, "AddFriendTracking");
function AddFriendByMidRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.userMid
    ],
    [
      12,
      3,
      AddFriendTracking(param.tracking)
    ]
  ];
}
__name(AddFriendByMidRequest, "AddFriendByMidRequest");
function Ob1_O0(param) {
  return typeof param === "string" ? enums.Ob1_O0[param] : param;
}
__name(Ob1_O0, "Ob1_O0");
function AddItemToCollectionRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.collectionId
    ],
    [
      8,
      2,
      Ob1_O0(param.productType)
    ],
    [
      11,
      3,
      param.productId
    ],
    [
      11,
      4,
      param.itemId
    ]
  ];
}
__name(AddItemToCollectionRequest, "AddItemToCollectionRequest");
function NZ0_C12155c(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(NZ0_C12155c, "NZ0_C12155c");
function AddProductToSubscriptionSlotRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Ob1_O0(param.productType)
    ],
    [
      11,
      2,
      param.productId
    ],
    [
      11,
      3,
      param.oldProductId
    ]
  ];
}
__name(AddProductToSubscriptionSlotRequest, "AddProductToSubscriptionSlotRequest");
function AddThemeToSubscriptionSlotRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.productId
    ],
    [
      11,
      2,
      param.currentlyAppliedProductId
    ]
  ];
}
__name(AddThemeToSubscriptionSlotRequest, "AddThemeToSubscriptionSlotRequest");
function Pb1_A4(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.mid
    ],
    [
      11,
      2,
      param.eMid
    ]
  ];
}
__name(Pb1_A4, "Pb1_A4");
function AddToFollowBlacklistRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      Pb1_A4(param.followMid)
    ]
  ];
}
__name(AddToFollowBlacklistRequest, "AddToFollowBlacklistRequest");
function TermsAgreement(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(TermsAgreement, "TermsAgreement");
function AgreeToTermsRequest(param) {
  return typeof param === "undefined" ? [] : [
    ,
    [
      12,
      2,
      TermsAgreement(param.termsAgreement)
    ]
  ];
}
__name(AgreeToTermsRequest, "AgreeToTermsRequest");
function ApproveSquareMembersRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMid
    ],
    [
      15,
      3,
      [
        11,
        param.requestedMemberMids
      ]
    ]
  ];
}
__name(ApproveSquareMembersRequest, "ApproveSquareMembersRequest");
function CheckJoinCodeRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMid
    ],
    [
      11,
      3,
      param.joinCode
    ]
  ];
}
__name(CheckJoinCodeRequest, "CheckJoinCodeRequest");
function TextMessageAnnouncementContents(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.messageId
    ],
    [
      11,
      2,
      param.text
    ],
    [
      11,
      3,
      param.senderSquareMemberMid
    ],
    [
      10,
      4,
      param.createdAt
    ]
  ];
}
__name(TextMessageAnnouncementContents, "TextMessageAnnouncementContents");
function SquareChatAnnouncementContents(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      TextMessageAnnouncementContents(param.textMessageAnnouncementContents)
    ]
  ];
}
__name(SquareChatAnnouncementContents, "SquareChatAnnouncementContents");
function SquareChatAnnouncement(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      1,
      param.announcementSeq
    ],
    [
      8,
      2,
      param.type
    ],
    [
      12,
      3,
      SquareChatAnnouncementContents(param.contents)
    ],
    [
      10,
      4,
      param.createdAt
    ],
    [
      11,
      5,
      param.creator
    ]
  ];
}
__name(SquareChatAnnouncement, "SquareChatAnnouncement");
function CreateSquareChatAnnouncementRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.squareChatMid
    ],
    [
      12,
      3,
      SquareChatAnnouncement(param.squareChatAnnouncement)
    ]
  ];
}
__name(CreateSquareChatAnnouncementRequest, "CreateSquareChatAnnouncementRequest");
function SquareChatType(param) {
  return typeof param === "string" ? enums.SquareChatType[param] : param;
}
__name(SquareChatType, "SquareChatType");
function SquareChatState(param) {
  return typeof param === "string" ? enums.SquareChatState[param] : param;
}
__name(SquareChatState, "SquareChatState");
function MessageVisibility(param) {
  return typeof param === "undefined" ? [] : [
    [
      2,
      1,
      param.showJoinMessage
    ],
    [
      2,
      2,
      param.showLeaveMessage
    ],
    [
      2,
      3,
      param.showKickoutMessage
    ]
  ];
}
__name(MessageVisibility, "MessageVisibility");
function SquareChat(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.squareMid
    ],
    [
      8,
      3,
      SquareChatType(param.type)
    ],
    [
      11,
      4,
      param.name
    ],
    [
      11,
      5,
      param.chatImageObsHash
    ],
    [
      10,
      6,
      param.squareChatRevision
    ],
    [
      8,
      7,
      param.maxMemberCount
    ],
    [
      8,
      8,
      SquareChatState(param.state)
    ],
    [
      11,
      9,
      param.invitationUrl
    ],
    [
      12,
      10,
      MessageVisibility(param.messageVisibility)
    ],
    [
      8,
      11,
      BooleanState(param.ableToSearchMessage)
    ]
  ];
}
__name(SquareChat, "SquareChat");
function CreateSquareChatRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      12,
      2,
      SquareChat(param.squareChat)
    ],
    [
      15,
      3,
      [
        11,
        param.squareMemberMids
      ]
    ]
  ];
}
__name(CreateSquareChatRequest, "CreateSquareChatRequest");
function SquareType(param) {
  return typeof param === "string" ? enums.SquareType[param] : param;
}
__name(SquareType, "SquareType");
function SquareState(param) {
  return typeof param === "string" ? enums.SquareState[param] : param;
}
__name(SquareState, "SquareState");
function SquareEmblem(param) {
  return typeof param === "string" ? enums.SquareEmblem[param] : param;
}
__name(SquareEmblem, "SquareEmblem");
function SquareJoinMethodType(param) {
  return typeof param === "string" ? enums.SquareJoinMethodType[param] : param;
}
__name(SquareJoinMethodType, "SquareJoinMethodType");
function ApprovalValue(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.message
    ]
  ];
}
__name(ApprovalValue, "ApprovalValue");
function CodeValue(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.code
    ]
  ];
}
__name(CodeValue, "CodeValue");
function SquareJoinMethodValue(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ApprovalValue(param.approvalValue)
    ],
    [
      12,
      2,
      CodeValue(param.codeValue)
    ]
  ];
}
__name(SquareJoinMethodValue, "SquareJoinMethodValue");
function SquareJoinMethod(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      SquareJoinMethodType(param.type)
    ],
    [
      12,
      2,
      SquareJoinMethodValue(param.value)
    ]
  ];
}
__name(SquareJoinMethod, "SquareJoinMethod");
function Square(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.mid
    ],
    [
      11,
      2,
      param.name
    ],
    [
      11,
      3,
      param.welcomeMessage
    ],
    [
      11,
      4,
      param.profileImageObsHash
    ],
    [
      11,
      5,
      param.desc
    ],
    [
      2,
      6,
      param.searchable
    ],
    [
      8,
      7,
      SquareType(param.type)
    ],
    [
      8,
      8,
      param.categoryId
    ],
    [
      11,
      9,
      param.invitationURL
    ],
    [
      10,
      10,
      param.revision
    ],
    [
      2,
      11,
      param.ableToUseInvitationTicket
    ],
    [
      8,
      12,
      SquareState(param.state)
    ],
    [
      15,
      13,
      [
        8,
        param.emblems && param.emblems.map((e) => SquareEmblem(e))
      ]
    ],
    [
      12,
      14,
      SquareJoinMethod(param.joinMethod)
    ],
    [
      8,
      15,
      BooleanState(param.adultOnly)
    ],
    [
      15,
      16,
      [
        11,
        param.svcTags
      ]
    ],
    [
      10,
      17,
      param.createdAt
    ]
  ];
}
__name(Square, "Square");
function SquareMembershipState(param) {
  return typeof param === "string" ? enums.SquareMembershipState[param] : param;
}
__name(SquareMembershipState, "SquareMembershipState");
function SquareMemberRole(param) {
  return typeof param === "string" ? enums.SquareMemberRole[param] : param;
}
__name(SquareMemberRole, "SquareMemberRole");
function SquarePreference(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      1,
      param.favoriteTimestamp
    ],
    [
      2,
      2,
      param.notiForNewJoinRequest
    ]
  ];
}
__name(SquarePreference, "SquarePreference");
function SquareMember(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareMemberMid
    ],
    [
      11,
      2,
      param.squareMid
    ],
    [
      11,
      3,
      param.displayName
    ],
    [
      11,
      4,
      param.profileImageObsHash
    ],
    [
      2,
      5,
      param.ableToReceiveMessage
    ],
    [
      8,
      7,
      SquareMembershipState(param.membershipState)
    ],
    [
      8,
      8,
      SquareMemberRole(param.role)
    ],
    [
      10,
      9,
      param.revision
    ],
    [
      12,
      10,
      SquarePreference(param.preference)
    ],
    [
      11,
      11,
      param.joinMessage
    ],
    [
      10,
      12,
      param.createdAt
    ]
  ];
}
__name(SquareMember, "SquareMember");
function CreateSquareRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      12,
      2,
      Square(param.square)
    ],
    [
      12,
      3,
      SquareMember(param.creator)
    ]
  ];
}
__name(CreateSquareRequest, "CreateSquareRequest");
function DeleteSquareChatAnnouncementRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareChatMid
    ],
    [
      10,
      3,
      param.announcementSeq
    ]
  ];
}
__name(DeleteSquareChatAnnouncementRequest, "DeleteSquareChatAnnouncementRequest");
function DeleteSquareChatRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareChatMid
    ],
    [
      10,
      3,
      param.revision
    ]
  ];
}
__name(DeleteSquareChatRequest, "DeleteSquareChatRequest");
function DeleteSquareRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.mid
    ],
    [
      10,
      3,
      param.revision
    ]
  ];
}
__name(DeleteSquareRequest, "DeleteSquareRequest");
function DestroyMessageRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareChatMid
    ],
    [
      11,
      4,
      param.messageId
    ],
    [
      11,
      5,
      param.threadMid
    ]
  ];
}
__name(DestroyMessageRequest, "DestroyMessageRequest");
function DestroyMessagesRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareChatMid
    ],
    [
      14,
      4,
      [
        11,
        param.messageIds
      ]
    ],
    [
      11,
      5,
      param.threadMid
    ]
  ];
}
__name(DestroyMessagesRequest, "DestroyMessagesRequest");
function FetchMyEventsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      1,
      param.subscriptionId
    ],
    [
      11,
      2,
      param.syncToken
    ],
    [
      8,
      3,
      param.limit
    ],
    [
      11,
      4,
      param.continuationToken
    ]
  ];
}
__name(FetchMyEventsRequest, "FetchMyEventsRequest");
function FetchDirection(param) {
  return typeof param === "string" ? enums.FetchDirection[param] : param;
}
__name(FetchDirection, "FetchDirection");
function FetchType(param) {
  return typeof param === "string" ? enums.FetchType[param] : param;
}
__name(FetchType, "FetchType");
function FetchSquareChatEventsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      1,
      param.subscriptionId
    ],
    [
      11,
      2,
      param.squareChatMid
    ],
    [
      11,
      3,
      param.syncToken
    ],
    [
      8,
      4,
      param.limit
    ],
    [
      8,
      5,
      FetchDirection(param.direction)
    ],
    [
      8,
      6,
      BooleanState(param.inclusive)
    ],
    [
      11,
      7,
      param.continuationToken
    ],
    [
      8,
      8,
      FetchType(param.fetchType)
    ],
    [
      11,
      9,
      param.threadMid
    ]
  ];
}
__name(FetchSquareChatEventsRequest, "FetchSquareChatEventsRequest");
function FindSquareByEmidRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.emid
    ]
  ];
}
__name(FindSquareByEmidRequest, "FindSquareByEmidRequest");
function FindSquareByInvitationTicketRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.invitationTicket
    ]
  ];
}
__name(FindSquareByInvitationTicketRequest, "FindSquareByInvitationTicketRequest");
function FindSquareByInvitationTicketV2Request(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.invitationTicket
    ]
  ];
}
__name(FindSquareByInvitationTicketV2Request, "FindSquareByInvitationTicketV2Request");
function AdScreen(param) {
  return typeof param === "string" ? enums.AdScreen[param] : param;
}
__name(AdScreen, "AdScreen");
function GetGoogleAdOptionsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareMid
    ],
    [
      11,
      2,
      param.chatMid
    ],
    [
      8,
      3,
      AdScreen(param.adScreen)
    ]
  ];
}
__name(GetGoogleAdOptionsRequest, "GetGoogleAdOptionsRequest");
function GetInvitationTicketUrlRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.mid
    ]
  ];
}
__name(GetInvitationTicketUrlRequest, "GetInvitationTicketUrlRequest");
function GetJoinableSquareChatsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareMid
    ],
    [
      11,
      10,
      param.continuationToken
    ],
    [
      8,
      11,
      param.limit
    ]
  ];
}
__name(GetJoinableSquareChatsRequest, "GetJoinableSquareChatsRequest");
function GetJoinedSquareChatsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.continuationToken
    ],
    [
      8,
      3,
      param.limit
    ]
  ];
}
__name(GetJoinedSquareChatsRequest, "GetJoinedSquareChatsRequest");
function GetJoinedSquaresRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.continuationToken
    ],
    [
      8,
      3,
      param.limit
    ]
  ];
}
__name(GetJoinedSquaresRequest, "GetJoinedSquaresRequest");
function MessageReactionType(param) {
  return typeof param === "string" ? enums.MessageReactionType[param] : param;
}
__name(MessageReactionType, "MessageReactionType");
function GetMessageReactionsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.messageId
    ],
    [
      8,
      3,
      MessageReactionType(param.type)
    ],
    [
      11,
      4,
      param.continuationToken
    ],
    [
      8,
      5,
      param.limit
    ],
    [
      11,
      6,
      param.threadMid
    ]
  ];
}
__name(GetMessageReactionsRequest, "GetMessageReactionsRequest");
function GetNoteStatusRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMid
    ]
  ];
}
__name(GetNoteStatusRequest, "GetNoteStatusRequest");
function GetPopularKeywordsRequest(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(GetPopularKeywordsRequest, "GetPopularKeywordsRequest");
function GetSquareAuthoritiesRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      2,
      [
        11,
        param.squareMids
      ]
    ]
  ];
}
__name(GetSquareAuthoritiesRequest, "GetSquareAuthoritiesRequest");
function GetSquareAuthorityRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareMid
    ]
  ];
}
__name(GetSquareAuthorityRequest, "GetSquareAuthorityRequest");
function GetSquareCategoriesRequest(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(GetSquareCategoriesRequest, "GetSquareCategoriesRequest");
function GetSquareChatAnnouncementsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareChatMid
    ]
  ];
}
__name(GetSquareChatAnnouncementsRequest, "GetSquareChatAnnouncementsRequest");
function GetSquareChatEmidRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ]
  ];
}
__name(GetSquareChatEmidRequest, "GetSquareChatEmidRequest");
function GetSquareChatFeatureSetRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareChatMid
    ]
  ];
}
__name(GetSquareChatFeatureSetRequest, "GetSquareChatFeatureSetRequest");
function GetSquareChatMemberRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMemberMid
    ],
    [
      11,
      3,
      param.squareChatMid
    ]
  ];
}
__name(GetSquareChatMemberRequest, "GetSquareChatMemberRequest");
function GetSquareChatMembersRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      11,
      2,
      param.continuationToken
    ],
    [
      8,
      3,
      param.limit
    ]
  ];
}
__name(GetSquareChatMembersRequest, "GetSquareChatMembersRequest");
function GetSquareChatRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ]
  ];
}
__name(GetSquareChatRequest, "GetSquareChatRequest");
function GetSquareChatStatusRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareChatMid
    ]
  ];
}
__name(GetSquareChatStatusRequest, "GetSquareChatStatusRequest");
function GetSquareEmidRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareMid
    ]
  ];
}
__name(GetSquareEmidRequest, "GetSquareEmidRequest");
function GetSquareFeatureSetRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMid
    ]
  ];
}
__name(GetSquareFeatureSetRequest, "GetSquareFeatureSetRequest");
function GetSquareMemberRelationRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMid
    ],
    [
      11,
      3,
      param.targetSquareMemberMid
    ]
  ];
}
__name(GetSquareMemberRelationRequest, "GetSquareMemberRelationRequest");
function SquareMemberRelationState(param) {
  return typeof param === "string" ? enums.SquareMemberRelationState[param] : param;
}
__name(SquareMemberRelationState, "SquareMemberRelationState");
function GetSquareMemberRelationsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      2,
      SquareMemberRelationState(param.state)
    ],
    [
      11,
      3,
      param.continuationToken
    ],
    [
      8,
      4,
      param.limit
    ]
  ];
}
__name(GetSquareMemberRelationsRequest, "GetSquareMemberRelationsRequest");
function GetSquareMemberRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMemberMid
    ]
  ];
}
__name(GetSquareMemberRequest, "GetSquareMemberRequest");
function GetSquareMembersBySquareRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMid
    ],
    [
      14,
      3,
      [
        11,
        param.squareMemberMids
      ]
    ]
  ];
}
__name(GetSquareMembersBySquareRequest, "GetSquareMembersBySquareRequest");
function GetSquareMembersRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      2,
      [
        11,
        param.mids
      ]
    ]
  ];
}
__name(GetSquareMembersRequest, "GetSquareMembersRequest");
function GetSquareRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.mid
    ]
  ];
}
__name(GetSquareRequest, "GetSquareRequest");
function GetSquareStatusRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMid
    ]
  ];
}
__name(GetSquareStatusRequest, "GetSquareStatusRequest");
function GetSquareThreadMidRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.chatMid
    ],
    [
      11,
      2,
      param.messageId
    ]
  ];
}
__name(GetSquareThreadMidRequest, "GetSquareThreadMidRequest");
function GetSquareThreadRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.threadMid
    ],
    [
      2,
      2,
      param.includeRootMessage
    ]
  ];
}
__name(GetSquareThreadRequest, "GetSquareThreadRequest");
function GetUserSettingsRequest(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(GetUserSettingsRequest, "GetUserSettingsRequest");
function HideSquareMemberContentsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareMemberMid
    ]
  ];
}
__name(HideSquareMemberContentsRequest, "HideSquareMemberContentsRequest");
function InviteIntoSquareChatRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      1,
      [
        11,
        param.inviteeMids
      ]
    ],
    [
      11,
      2,
      param.squareChatMid
    ]
  ];
}
__name(InviteIntoSquareChatRequest, "InviteIntoSquareChatRequest");
function InviteToSquareRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMid
    ],
    [
      15,
      3,
      [
        11,
        param.invitees
      ]
    ],
    [
      11,
      4,
      param.squareChatMid
    ]
  ];
}
__name(InviteToSquareRequest, "InviteToSquareRequest");
function JoinSquareChatRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ]
  ];
}
__name(JoinSquareChatRequest, "JoinSquareChatRequest");
function JoinSquareRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMid
    ],
    [
      12,
      3,
      SquareMember(param.member)
    ],
    [
      11,
      4,
      param.squareChatMid
    ],
    [
      12,
      5,
      SquareJoinMethodValue(param.joinValue)
    ],
    [
      8,
      6,
      BooleanState(param.claimAdult)
    ]
  ];
}
__name(JoinSquareRequest, "JoinSquareRequest");
function JoinSquareThreadRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.chatMid
    ],
    [
      11,
      2,
      param.threadMid
    ]
  ];
}
__name(JoinSquareThreadRequest, "JoinSquareThreadRequest");
function LeaveSquareChatRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareChatMid
    ],
    [
      2,
      3,
      param.sayGoodbye
    ],
    [
      10,
      4,
      param.squareChatMemberRevision
    ]
  ];
}
__name(LeaveSquareChatRequest, "LeaveSquareChatRequest");
function LeaveSquareRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMid
    ]
  ];
}
__name(LeaveSquareRequest, "LeaveSquareRequest");
function LeaveSquareThreadRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.chatMid
    ],
    [
      11,
      2,
      param.threadMid
    ]
  ];
}
__name(LeaveSquareThreadRequest, "LeaveSquareThreadRequest");
function ManualRepairRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.syncToken
    ],
    [
      8,
      2,
      param.limit
    ],
    [
      11,
      3,
      param.continuationToken
    ]
  ];
}
__name(ManualRepairRequest, "ManualRepairRequest");
function MarkAsReadRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareChatMid
    ],
    [
      11,
      4,
      param.messageId
    ],
    [
      11,
      5,
      param.threadMid
    ]
  ];
}
__name(MarkAsReadRequest, "MarkAsReadRequest");
function MarkChatsAsReadRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      2,
      [
        11,
        param.chatMids
      ]
    ]
  ];
}
__name(MarkChatsAsReadRequest, "MarkChatsAsReadRequest");
function MarkThreadsAsReadRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.chatMid
    ]
  ];
}
__name(MarkThreadsAsReadRequest, "MarkThreadsAsReadRequest");
function ReactToMessageRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.squareChatMid
    ],
    [
      11,
      3,
      param.messageId
    ],
    [
      8,
      4,
      MessageReactionType(param.reactionType)
    ],
    [
      11,
      5,
      param.threadMid
    ]
  ];
}
__name(ReactToMessageRequest, "ReactToMessageRequest");
function RefreshSubscriptionsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      2,
      [
        10,
        param.subscriptions
      ]
    ]
  ];
}
__name(RefreshSubscriptionsRequest, "RefreshSubscriptionsRequest");
function RejectSquareMembersRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMid
    ],
    [
      15,
      3,
      [
        11,
        param.requestedMemberMids
      ]
    ]
  ];
}
__name(RejectSquareMembersRequest, "RejectSquareMembersRequest");
function RemoveSubscriptionsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      2,
      [
        10,
        param.unsubscriptions
      ]
    ]
  ];
}
__name(RemoveSubscriptionsRequest, "RemoveSubscriptionsRequest");
function MessageSummaryReportType(param) {
  return typeof param === "string" ? enums.MessageSummaryReportType[param] : param;
}
__name(MessageSummaryReportType, "MessageSummaryReportType");
function ReportMessageSummaryRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.chatEmid
    ],
    [
      10,
      2,
      param.messageSummaryRangeTo
    ],
    [
      8,
      3,
      MessageSummaryReportType(param.reportType)
    ]
  ];
}
__name(ReportMessageSummaryRequest, "ReportMessageSummaryRequest");
function ReportType(param) {
  return typeof param === "string" ? enums.ReportType[param] : param;
}
__name(ReportType, "ReportType");
function ReportSquareChatRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMid
    ],
    [
      11,
      3,
      param.squareChatMid
    ],
    [
      8,
      5,
      ReportType(param.reportType)
    ],
    [
      11,
      6,
      param.otherReason
    ]
  ];
}
__name(ReportSquareChatRequest, "ReportSquareChatRequest");
function ReportSquareMemberRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMemberMid
    ],
    [
      8,
      3,
      ReportType(param.reportType)
    ],
    [
      11,
      4,
      param.otherReason
    ],
    [
      11,
      5,
      param.squareChatMid
    ],
    [
      11,
      6,
      param.threadMid
    ]
  ];
}
__name(ReportSquareMemberRequest, "ReportSquareMemberRequest");
function ReportSquareMessageRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMid
    ],
    [
      11,
      3,
      param.squareChatMid
    ],
    [
      11,
      4,
      param.squareMessageId
    ],
    [
      8,
      5,
      ReportType(param.reportType)
    ],
    [
      11,
      6,
      param.otherReason
    ],
    [
      11,
      7,
      param.threadMid
    ]
  ];
}
__name(ReportSquareMessageRequest, "ReportSquareMessageRequest");
function ReportSquareRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMid
    ],
    [
      8,
      3,
      ReportType(param.reportType)
    ],
    [
      11,
      4,
      param.otherReason
    ]
  ];
}
__name(ReportSquareRequest, "ReportSquareRequest");
function SquareChatMemberSearchOption(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.displayName
    ],
    [
      2,
      2,
      param.includingMe
    ]
  ];
}
__name(SquareChatMemberSearchOption, "SquareChatMemberSearchOption");
function SearchSquareChatMembersRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      12,
      2,
      SquareChatMemberSearchOption(param.searchOption)
    ],
    [
      11,
      3,
      param.continuationToken
    ],
    [
      8,
      4,
      param.limit
    ]
  ];
}
__name(SearchSquareChatMembersRequest, "SearchSquareChatMembersRequest");
function SquareChatMentionableSearchOption(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.displayName
    ]
  ];
}
__name(SquareChatMentionableSearchOption, "SquareChatMentionableSearchOption");
function SearchSquareChatMentionablesRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ],
    [
      12,
      2,
      SquareChatMentionableSearchOption(param.searchOption)
    ],
    [
      11,
      3,
      param.continuationToken
    ],
    [
      8,
      4,
      param.limit
    ]
  ];
}
__name(SearchSquareChatMentionablesRequest, "SearchSquareChatMentionablesRequest");
function SquareMemberSearchOption(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      SquareMembershipState(param.membershipState)
    ],
    [
      14,
      2,
      [
        8,
        param.memberRoles && param.memberRoles.map((e) => SquareMemberRole(e))
      ]
    ],
    [
      11,
      3,
      param.displayName
    ],
    [
      8,
      4,
      BooleanState(param.ableToReceiveMessage)
    ],
    [
      8,
      5,
      BooleanState(param.ableToReceiveFriendRequest)
    ],
    [
      11,
      6,
      param.chatMidToExcludeMembers
    ],
    [
      2,
      7,
      param.includingMe
    ],
    [
      2,
      8,
      param.excludeBlockedMembers
    ],
    [
      2,
      9,
      param.includingMeOnlyMatch
    ]
  ];
}
__name(SquareMemberSearchOption, "SquareMemberSearchOption");
function SearchSquareMembersRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMid
    ],
    [
      12,
      3,
      SquareMemberSearchOption(param.searchOption)
    ],
    [
      11,
      4,
      param.continuationToken
    ],
    [
      8,
      5,
      param.limit
    ]
  ];
}
__name(SearchSquareMembersRequest, "SearchSquareMembersRequest");
function SearchSquaresRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.query
    ],
    [
      11,
      3,
      param.continuationToken
    ],
    [
      8,
      4,
      param.limit
    ]
  ];
}
__name(SearchSquaresRequest, "SearchSquaresRequest");
function MIDType(param) {
  return typeof param === "string" ? enums.MIDType[param] : param;
}
__name(MIDType, "MIDType");
function Pb1_D6(param) {
  return typeof param === "string" ? enums.Pb1_D6[param] : param;
}
__name(Pb1_D6, "Pb1_D6");
function Pb1_EnumC13050k(param) {
  return typeof param === "string" ? enums.Pb1_EnumC13050k[param] : param;
}
__name(Pb1_EnumC13050k, "Pb1_EnumC13050k");
function GeolocationAccuracy(param) {
  return typeof param === "undefined" ? [] : [
    [
      4,
      1,
      param.radiusMeters
    ],
    [
      4,
      2,
      param.radiusConfidence
    ],
    [
      4,
      3,
      param.altitudeAccuracy
    ],
    [
      4,
      4,
      param.velocityAccuracy
    ],
    [
      4,
      5,
      param.bearingAccuracy
    ],
    [
      8,
      6,
      Pb1_EnumC13050k(param.accuracyMode)
    ]
  ];
}
__name(GeolocationAccuracy, "GeolocationAccuracy");
function Location(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.title
    ],
    [
      11,
      2,
      param.address
    ],
    [
      4,
      3,
      param.latitude
    ],
    [
      4,
      4,
      param.longitude
    ],
    [
      11,
      5,
      param.phone
    ],
    [
      11,
      6,
      param.categoryId
    ],
    [
      8,
      7,
      Pb1_D6(param.provider)
    ],
    [
      12,
      8,
      GeolocationAccuracy(param.accuracy)
    ],
    [
      4,
      9,
      param.altitudeMeters
    ]
  ];
}
__name(Location, "Location");
function ContentType(param) {
  return typeof param === "string" ? enums.ContentType[param] : param;
}
__name(ContentType, "ContentType");
function Pb1_EnumC13015h6(param) {
  return typeof param === "string" ? enums.Pb1_EnumC13015h6[param] : param;
}
__name(Pb1_EnumC13015h6, "Pb1_EnumC13015h6");
function Pb1_E7(param) {
  return typeof param === "string" ? enums.Pb1_E7[param] : param;
}
__name(Pb1_E7, "Pb1_E7");
function Pb1_B(param) {
  return typeof param === "string" ? enums.Pb1_B[param] : param;
}
__name(Pb1_B, "Pb1_B");
function ReactionType(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      MessageReactionType(param.predefinedReactionType)
    ]
  ];
}
__name(ReactionType, "ReactionType");
function Reaction(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.fromUserMid
    ],
    [
      10,
      2,
      param.atMillis
    ],
    [
      12,
      3,
      ReactionType(param.reactionType)
    ]
  ];
}
__name(Reaction, "Reaction");
function Message(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.from
    ],
    [
      11,
      2,
      param.to
    ],
    [
      8,
      3,
      MIDType(param.toType)
    ],
    [
      11,
      4,
      param.id
    ],
    [
      10,
      5,
      param.createdTime
    ],
    [
      10,
      6,
      param.deliveredTime
    ],
    [
      11,
      10,
      param.text
    ],
    [
      12,
      11,
      Location(param.location)
    ],
    [
      2,
      14,
      param.hasContent
    ],
    [
      8,
      15,
      ContentType(param.contentType)
    ],
    [
      11,
      17,
      param.contentPreview
    ],
    [
      13,
      18,
      [
        11,
        11,
        param.contentMetadata
      ]
    ],
    [
      3,
      19,
      param.sessionId
    ],
    [
      15,
      20,
      [
        11,
        param.chunks
      ]
    ],
    [
      11,
      21,
      param.relatedMessageId
    ],
    [
      8,
      22,
      Pb1_EnumC13015h6(param.messageRelationType)
    ],
    [
      8,
      23,
      param.readCount
    ],
    [
      8,
      24,
      Pb1_E7(param.relatedMessageServiceCode)
    ],
    [
      8,
      25,
      Pb1_B(param.appExtensionType)
    ],
    [
      15,
      27,
      [
        12,
        param.reactions && param.reactions.map((e) => Reaction(e))
      ]
    ]
  ];
}
__name(Message, "Message");
function SquareMessageState(param) {
  return typeof param === "string" ? enums.SquareMessageState[param] : param;
}
__name(SquareMessageState, "SquareMessageState");
function SquareMessageThreadInfo(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.chatThreadMid
    ],
    [
      2,
      2,
      param.threadRoot
    ]
  ];
}
__name(SquareMessageThreadInfo, "SquareMessageThreadInfo");
function SquareMessage(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      Message(param.message)
    ],
    [
      8,
      3,
      MIDType(param.fromType)
    ],
    [
      10,
      4,
      param.squareMessageRevision
    ],
    [
      8,
      5,
      SquareMessageState(param.state)
    ],
    [
      12,
      6,
      SquareMessageThreadInfo(param.threadInfo)
    ]
  ];
}
__name(SquareMessage, "SquareMessage");
function SendMessageRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.squareChatMid
    ],
    [
      12,
      3,
      SquareMessage(param.squareMessage)
    ]
  ];
}
__name(SendMessageRequest, "SendMessageRequest");
function SendSquareThreadMessageRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.chatMid
    ],
    [
      11,
      3,
      param.threadMid
    ],
    [
      12,
      4,
      SquareMessage(param.threadMessage)
    ]
  ];
}
__name(SendSquareThreadMessageRequest, "SendSquareThreadMessageRequest");
function SyncSquareMembersRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareMid
    ],
    [
      13,
      2,
      [
        11,
        10,
        param.squareMembers
      ]
    ]
  ];
}
__name(SyncSquareMembersRequest, "SyncSquareMembersRequest");
function UnhideSquareMemberContentsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareMemberMid
    ]
  ];
}
__name(UnhideSquareMemberContentsRequest, "UnhideSquareMemberContentsRequest");
function UnsendMessageRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareChatMid
    ],
    [
      11,
      3,
      param.messageId
    ],
    [
      11,
      4,
      param.threadMid
    ]
  ];
}
__name(UnsendMessageRequest, "UnsendMessageRequest");
function SquareAuthorityAttribute(param) {
  return typeof param === "string" ? enums.SquareAuthorityAttribute[param] : param;
}
__name(SquareAuthorityAttribute, "SquareAuthorityAttribute");
function SquareAuthority(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareMid
    ],
    [
      8,
      2,
      SquareMemberRole(param.updateSquareProfile)
    ],
    [
      8,
      3,
      SquareMemberRole(param.inviteNewMember)
    ],
    [
      8,
      4,
      SquareMemberRole(param.approveJoinRequest)
    ],
    [
      8,
      5,
      SquareMemberRole(param.createPost)
    ],
    [
      8,
      6,
      SquareMemberRole(param.createOpenSquareChat)
    ],
    [
      8,
      7,
      SquareMemberRole(param.deleteSquareChatOrPost)
    ],
    [
      8,
      8,
      SquareMemberRole(param.removeSquareMember)
    ],
    [
      8,
      9,
      SquareMemberRole(param.grantRole)
    ],
    [
      8,
      10,
      SquareMemberRole(param.enableInvitationTicket)
    ],
    [
      10,
      11,
      param.revision
    ],
    [
      8,
      12,
      SquareMemberRole(param.createSquareChatAnnouncement)
    ],
    [
      8,
      13,
      SquareMemberRole(param.updateMaxChatMemberCount)
    ],
    [
      8,
      14,
      SquareMemberRole(param.useReadonlyDefaultChat)
    ],
    [
      8,
      15,
      SquareMemberRole(param.sendAllMention)
    ]
  ];
}
__name(SquareAuthority, "SquareAuthority");
function UpdateSquareAuthorityRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      2,
      [
        8,
        param.updateAttributes && param.updateAttributes.map((e) => SquareAuthorityAttribute(e))
      ]
    ],
    [
      12,
      3,
      SquareAuthority(param.authority)
    ]
  ];
}
__name(UpdateSquareAuthorityRequest, "UpdateSquareAuthorityRequest");
function SquareChatMemberAttribute(param) {
  return typeof param === "string" ? enums.SquareChatMemberAttribute[param] : param;
}
__name(SquareChatMemberAttribute, "SquareChatMemberAttribute");
function SquareChatMembershipState(param) {
  return typeof param === "string" ? enums.SquareChatMembershipState[param] : param;
}
__name(SquareChatMembershipState, "SquareChatMembershipState");
function SquareChatMember(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareMemberMid
    ],
    [
      11,
      2,
      param.squareChatMid
    ],
    [
      10,
      3,
      param.revision
    ],
    [
      8,
      4,
      SquareChatMembershipState(param.membershipState)
    ],
    [
      2,
      5,
      param.notificationForMessage
    ],
    [
      2,
      6,
      param.notificationForNewMember
    ]
  ];
}
__name(SquareChatMember, "SquareChatMember");
function UpdateSquareChatMemberRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      2,
      [
        8,
        param.updatedAttrs && param.updatedAttrs.map((e) => SquareChatMemberAttribute(e))
      ]
    ],
    [
      12,
      3,
      SquareChatMember(param.chatMember)
    ]
  ];
}
__name(UpdateSquareChatMemberRequest, "UpdateSquareChatMemberRequest");
function SquareChatAttribute(param) {
  return typeof param === "string" ? enums.SquareChatAttribute[param] : param;
}
__name(SquareChatAttribute, "SquareChatAttribute");
function UpdateSquareChatRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      2,
      [
        8,
        param.updatedAttrs && param.updatedAttrs.map((e) => SquareChatAttribute(e))
      ]
    ],
    [
      12,
      3,
      SquareChat(param.squareChat)
    ]
  ];
}
__name(UpdateSquareChatRequest, "UpdateSquareChatRequest");
function SquareFeatureSetAttribute(param) {
  return typeof param === "string" ? enums.SquareFeatureSetAttribute[param] : param;
}
__name(SquareFeatureSetAttribute, "SquareFeatureSetAttribute");
function SquareFeatureControlState(param) {
  return typeof param === "string" ? enums.SquareFeatureControlState[param] : param;
}
__name(SquareFeatureControlState, "SquareFeatureControlState");
function SquareFeature(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      SquareFeatureControlState(param.controlState)
    ],
    [
      8,
      2,
      BooleanState(param.booleanValue)
    ]
  ];
}
__name(SquareFeature, "SquareFeature");
function SquareFeatureSet(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareMid
    ],
    [
      10,
      2,
      param.revision
    ],
    [
      12,
      11,
      SquareFeature(param.creatingSecretSquareChat)
    ],
    [
      12,
      12,
      SquareFeature(param.invitingIntoOpenSquareChat)
    ],
    [
      12,
      13,
      SquareFeature(param.creatingSquareChat)
    ],
    [
      12,
      14,
      SquareFeature(param.readonlyDefaultChat)
    ],
    [
      12,
      15,
      SquareFeature(param.showingAdvertisement)
    ],
    [
      12,
      16,
      SquareFeature(param.delegateJoinToPlug)
    ],
    [
      12,
      17,
      SquareFeature(param.delegateKickOutToPlug)
    ],
    [
      12,
      18,
      SquareFeature(param.disableUpdateJoinMethod)
    ],
    [
      12,
      19,
      SquareFeature(param.disableTransferAdmin)
    ],
    [
      12,
      20,
      SquareFeature(param.creatingLiveTalk)
    ],
    [
      12,
      21,
      SquareFeature(param.disableUpdateSearchable)
    ],
    [
      12,
      22,
      SquareFeature(param.summarizingMessages)
    ],
    [
      12,
      23,
      SquareFeature(param.creatingSquareThread)
    ],
    [
      12,
      24,
      SquareFeature(param.enableSquareThread)
    ],
    [
      12,
      25,
      SquareFeature(param.disableChangeRoleCoAdmin)
    ]
  ];
}
__name(SquareFeatureSet, "SquareFeatureSet");
function UpdateSquareFeatureSetRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      2,
      [
        8,
        param.updateAttributes && param.updateAttributes.map((e) => SquareFeatureSetAttribute(e))
      ]
    ],
    [
      12,
      3,
      SquareFeatureSet(param.squareFeatureSet)
    ]
  ];
}
__name(UpdateSquareFeatureSetRequest, "UpdateSquareFeatureSetRequest");
function SquareMemberRelation(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      SquareMemberRelationState(param.state)
    ],
    [
      10,
      2,
      param.revision
    ]
  ];
}
__name(SquareMemberRelation, "SquareMemberRelation");
function UpdateSquareMemberRelationRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.squareMid
    ],
    [
      11,
      3,
      param.targetSquareMemberMid
    ],
    [
      14,
      4,
      [
        8,
        param.updatedAttrs
      ]
    ],
    [
      12,
      5,
      SquareMemberRelation(param.relation)
    ]
  ];
}
__name(UpdateSquareMemberRelationRequest, "UpdateSquareMemberRelationRequest");
function SquareMemberAttribute(param) {
  return typeof param === "string" ? enums.SquareMemberAttribute[param] : param;
}
__name(SquareMemberAttribute, "SquareMemberAttribute");
function SquarePreferenceAttribute(param) {
  return typeof param === "string" ? enums.SquarePreferenceAttribute[param] : param;
}
__name(SquarePreferenceAttribute, "SquarePreferenceAttribute");
function UpdateSquareMemberRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      2,
      [
        8,
        param.updatedAttrs && param.updatedAttrs.map((e) => SquareMemberAttribute(e))
      ]
    ],
    [
      14,
      3,
      [
        8,
        param.updatedPreferenceAttrs && param.updatedPreferenceAttrs.map((e) => SquarePreferenceAttribute(e))
      ]
    ],
    [
      12,
      4,
      SquareMember(param.squareMember)
    ]
  ];
}
__name(UpdateSquareMemberRequest, "UpdateSquareMemberRequest");
function UpdateSquareMembersRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      2,
      [
        8,
        param.updatedAttrs && param.updatedAttrs.map((e) => SquareMemberAttribute(e))
      ]
    ],
    [
      15,
      3,
      [
        12,
        param.members && param.members.map((e) => SquareMember(e))
      ]
    ]
  ];
}
__name(UpdateSquareMembersRequest, "UpdateSquareMembersRequest");
function SquareAttribute(param) {
  return typeof param === "string" ? enums.SquareAttribute[param] : param;
}
__name(SquareAttribute, "SquareAttribute");
function UpdateSquareRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      2,
      [
        8,
        param.updatedAttrs && param.updatedAttrs.map((e) => SquareAttribute(e))
      ]
    ],
    [
      12,
      3,
      Square(param.square)
    ]
  ];
}
__name(UpdateSquareRequest, "UpdateSquareRequest");
function SquareUserSettings(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      BooleanState(param.liveTalkNotification)
    ]
  ];
}
__name(SquareUserSettings, "SquareUserSettings");
function UpdateUserSettingsRequest(param) {
  return typeof param === "undefined" ? [] : [
    ,
    [
      12,
      2,
      SquareUserSettings(param.userSettings)
    ]
  ];
}
__name(UpdateUserSettingsRequest, "UpdateUserSettingsRequest");
function r80_EnumC34362b(param) {
  return typeof param === "string" ? enums.r80_EnumC34362b[param] : param;
}
__name(r80_EnumC34362b, "r80_EnumC34362b");
function r80_EnumC34361a(param) {
  return typeof param === "string" ? enums.r80_EnumC34361a[param] : param;
}
__name(r80_EnumC34361a, "r80_EnumC34361a");
function AuthenticatorAssertionResponse(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.clientDataJSON
    ],
    [
      11,
      2,
      param.authenticatorData
    ],
    [
      11,
      3,
      param.signature
    ],
    [
      11,
      4,
      param.userHandle
    ]
  ];
}
__name(AuthenticatorAssertionResponse, "AuthenticatorAssertionResponse");
function AuthenticationExtensionsClientOutputs(param) {
  return typeof param === "undefined" ? [] : [
    [
      2,
      91,
      param.lineAuthenSel
    ]
  ];
}
__name(AuthenticationExtensionsClientOutputs, "AuthenticationExtensionsClientOutputs");
function AuthPublicKeyCredential(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.id
    ],
    [
      11,
      2,
      param.type
    ],
    [
      12,
      3,
      AuthenticatorAssertionResponse(param.response)
    ],
    [
      12,
      4,
      AuthenticationExtensionsClientOutputs(param.extensionResults)
    ]
  ];
}
__name(AuthPublicKeyCredential, "AuthPublicKeyCredential");
function AuthenticateWithPaakRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.sessionId
    ],
    [
      12,
      2,
      AuthPublicKeyCredential(param.credential)
    ]
  ];
}
__name(AuthenticateWithPaakRequest, "AuthenticateWithPaakRequest");
function BulkFollowRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      1,
      [
        11,
        param.followTargetMids
      ]
    ],
    [
      14,
      2,
      [
        11,
        param.unfollowTargetMids
      ]
    ],
    [
      2,
      3,
      param.hasNext
    ]
  ];
}
__name(BulkFollowRequest, "BulkFollowRequest");
function t80_h(param) {
  return typeof param === "string" ? enums.t80_h[param] : param;
}
__name(t80_h, "t80_h");
function GetRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.keyName
    ],
    [
      8,
      2,
      t80_h(param.ns)
    ]
  ];
}
__name(GetRequest, "GetRequest");
function BulkGetRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      1,
      [
        12,
        param.requests && param.requests.map((e) => GetRequest(e))
      ]
    ]
  ];
}
__name(BulkGetRequest, "BulkGetRequest");
function BuyMustbuyRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Ob1_O0(param.productType)
    ],
    [
      11,
      2,
      param.productId
    ],
    [
      11,
      3,
      param.serialNumber
    ]
  ];
}
__name(BuyMustbuyRequest, "BuyMustbuyRequest");
function CanCreateCombinationStickerRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      1,
      [
        11,
        param.packageIds
      ]
    ]
  ];
}
__name(CanCreateCombinationStickerRequest, "CanCreateCombinationStickerRequest");
function Locale(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.language
    ],
    [
      11,
      2,
      param.country
    ]
  ];
}
__name(Locale, "Locale");
function CancelChatInvitationRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.chatMid
    ],
    [
      14,
      3,
      [
        11,
        param.targetUserMids
      ]
    ]
  ];
}
__name(CancelChatInvitationRequest, "CancelChatInvitationRequest");
function CancelPaakAuthRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.sessionId
    ]
  ];
}
__name(CancelPaakAuthRequest, "CancelPaakAuthRequest");
function CancelPaakAuthenticationRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ]
  ];
}
__name(CancelPaakAuthenticationRequest, "CancelPaakAuthenticationRequest");
function CancelPinCodeRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ]
  ];
}
__name(CancelPinCodeRequest, "CancelPinCodeRequest");
function CancelReactionRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      10,
      2,
      param.messageId
    ]
  ];
}
__name(CancelReactionRequest, "CancelReactionRequest");
function VerificationMethod(param) {
  return typeof param === "string" ? enums.VerificationMethod[param] : param;
}
__name(VerificationMethod, "VerificationMethod");
function r80_n0(param) {
  return typeof param === "string" ? enums.r80_n0[param] : param;
}
__name(r80_n0, "r80_n0");
function T70_EnumC14390b(param) {
  return typeof param === "string" ? enums.T70_EnumC14390b[param] : param;
}
__name(T70_EnumC14390b, "T70_EnumC14390b");
function AccountIdentifier(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      T70_EnumC14390b(param.type)
    ],
    [
      11,
      2,
      param.identifier
    ],
    [
      11,
      11,
      param.countryCode
    ]
  ];
}
__name(AccountIdentifier, "AccountIdentifier");
function h80_t(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.newDevicePublicKey
    ],
    [
      11,
      2,
      param.encryptedQrIdentifier
    ]
  ];
}
__name(h80_t, "h80_t");
function CheckIfEncryptedE2EEKeyReceivedRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.sessionId
    ],
    [
      12,
      2,
      h80_t(param.secureChannelData)
    ]
  ];
}
__name(CheckIfEncryptedE2EEKeyReceivedRequest, "CheckIfEncryptedE2EEKeyReceivedRequest");
function UserPhoneNumber(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.phoneNumber
    ],
    [
      11,
      2,
      param.countryCode
    ]
  ];
}
__name(UserPhoneNumber, "UserPhoneNumber");
function CheckIfPhonePinCodeMsgVerifiedRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      12,
      2,
      UserPhoneNumber(param.userPhoneNumber)
    ]
  ];
}
__name(CheckIfPhonePinCodeMsgVerifiedRequest, "CheckIfPhonePinCodeMsgVerifiedRequest");
function r80_EnumC34368h(param) {
  return typeof param === "string" ? enums.r80_EnumC34368h[param] : param;
}
__name(r80_EnumC34368h, "r80_EnumC34368h");
function r80_EnumC34371k(param) {
  return typeof param === "string" ? enums.r80_EnumC34371k[param] : param;
}
__name(r80_EnumC34371k, "r80_EnumC34371k");
function CheckUserAgeAfterApprovalWithDocomoV2Request(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.accessToken
    ],
    [
      11,
      2,
      param.agprm
    ]
  ];
}
__name(CheckUserAgeAfterApprovalWithDocomoV2Request, "CheckUserAgeAfterApprovalWithDocomoV2Request");
function CheckUserAgeWithDocomoV2Request(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authCode
    ]
  ];
}
__name(CheckUserAgeWithDocomoV2Request, "CheckUserAgeWithDocomoV2Request");
function CarrierCode(param) {
  return typeof param === "string" ? enums.CarrierCode[param] : param;
}
__name(CarrierCode, "CarrierCode");
function IdentityProvider(param) {
  return typeof param === "string" ? enums.IdentityProvider[param] : param;
}
__name(IdentityProvider, "IdentityProvider");
function IdentifierConfirmationRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      13,
      1,
      [
        11,
        11,
        param.metaData
      ]
    ],
    [
      2,
      2,
      param.forceRegistration
    ],
    [
      11,
      3,
      param.verificationCode
    ]
  ];
}
__name(IdentifierConfirmationRequest, "IdentifierConfirmationRequest");
function IdentityCredentialRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      13,
      1,
      [
        11,
        11,
        param.metaData
      ]
    ],
    [
      8,
      2,
      IdentityProvider(param.identityProvider)
    ],
    [
      11,
      3,
      param.cipherKeyId
    ],
    [
      11,
      4,
      param.cipherText
    ],
    [
      12,
      5,
      IdentifierConfirmationRequest(param.confirmationRequest)
    ]
  ];
}
__name(IdentityCredentialRequest, "IdentityCredentialRequest");
function ConnectEapAccountRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ]
  ];
}
__name(ConnectEapAccountRequest, "ConnectEapAccountRequest");
function Pb1_X2(param) {
  return typeof param === "string" ? enums.Pb1_X2[param] : param;
}
__name(Pb1_X2, "Pb1_X2");
function ChatRoomAnnouncementContentMetadata(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.replace
    ],
    [
      11,
      2,
      param.sticonOwnership
    ],
    [
      11,
      3,
      param.postNotificationMetadata
    ]
  ];
}
__name(ChatRoomAnnouncementContentMetadata, "ChatRoomAnnouncementContentMetadata");
function ChatRoomAnnouncementContents(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.displayFields
    ],
    [
      11,
      2,
      param.text
    ],
    [
      11,
      3,
      param.link
    ],
    [
      11,
      4,
      param.thumbnail
    ],
    [
      12,
      5,
      ChatRoomAnnouncementContentMetadata(param.contentMetadata)
    ]
  ];
}
__name(ChatRoomAnnouncementContents, "ChatRoomAnnouncementContents");
function Pb1_Z2(param) {
  return typeof param === "string" ? enums.Pb1_Z2[param] : param;
}
__name(Pb1_Z2, "Pb1_Z2");
function CreateChatRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      8,
      2,
      Pb1_Z2(param.type)
    ],
    [
      11,
      3,
      param.name
    ],
    [
      14,
      4,
      [
        11,
        param.targetUserMids
      ]
    ],
    [
      11,
      5,
      param.picturePath
    ]
  ];
}
__name(CreateChatRequest, "CreateChatRequest");
function Pb1_A3(param) {
  return typeof param === "string" ? enums.Pb1_A3[param] : param;
}
__name(Pb1_A3, "Pb1_A3");
function Pb1_C13263z3(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.blobHeader
    ],
    [
      11,
      2,
      param.blobPayload
    ],
    [
      8,
      3,
      Pb1_A3(param.reason)
    ]
  ];
}
__name(Pb1_C13263z3, "Pb1_C13263z3");
function CreateGroupCallUrlRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.title
    ]
  ];
}
__name(CreateGroupCallUrlRequest, "CreateGroupCallUrlRequest");
function E2EEMetadata(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      1,
      param.e2EEPublicKeyId
    ]
  ];
}
__name(E2EEMetadata, "E2EEMetadata");
function SingleValueMetadata(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(SingleValueMetadata, "SingleValueMetadata");
function Pb1_W5(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      E2EEMetadata(param.e2ee)
    ],
    [
      12,
      2,
      SingleValueMetadata(param.singleValue)
    ]
  ];
}
__name(Pb1_W5, "Pb1_W5");
function Pb1_X5(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      Pb1_W5(param.metadata)
    ],
    [
      11,
      2,
      param.blobPayload
    ]
  ];
}
__name(Pb1_X5, "Pb1_X5");
function Pb1_E3(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.blobHeader
    ],
    [
      15,
      2,
      [
        12,
        param.payloadDataList && param.payloadDataList.map((e) => Pb1_X5(e))
      ]
    ]
  ];
}
__name(Pb1_E3, "Pb1_E3");
function CreateMultiProfileRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.displayName
    ]
  ];
}
__name(CreateMultiProfileRequest, "CreateMultiProfileRequest");
function h80_C25643c(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(h80_C25643c, "h80_C25643c");
function Pb1_H3(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(Pb1_H3, "Pb1_H3");
function DeleteGroupCallUrlRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.urlId
    ]
  ];
}
__name(DeleteGroupCallUrlRequest, "DeleteGroupCallUrlRequest");
function DeleteMultiProfileRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.profileId
    ]
  ];
}
__name(DeleteMultiProfileRequest, "DeleteMultiProfileRequest");
function DeleteOtherFromChatRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.chatMid
    ],
    [
      14,
      3,
      [
        11,
        param.targetUserMids
      ]
    ]
  ];
}
__name(DeleteOtherFromChatRequest, "DeleteOtherFromChatRequest");
function R70_c(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(R70_c, "R70_c");
function DeleteSafetyStatusRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.disasterId
    ]
  ];
}
__name(DeleteSafetyStatusRequest, "DeleteSafetyStatusRequest");
function DeleteSelfFromChatRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.chatMid
    ],
    [
      10,
      3,
      param.lastSeenMessageDeliveredTime
    ],
    [
      11,
      4,
      param.lastSeenMessageId
    ],
    [
      10,
      5,
      param.lastMessageDeliveredTime
    ],
    [
      11,
      6,
      param.lastMessageId
    ]
  ];
}
__name(DeleteSelfFromChatRequest, "DeleteSelfFromChatRequest");
function DetermineMediaMessageFlowRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.chatMid
    ]
  ];
}
__name(DetermineMediaMessageFlowRequest, "DetermineMediaMessageFlowRequest");
function Q70_q(param) {
  return typeof param === "string" ? enums.Q70_q[param] : param;
}
__name(Q70_q, "Q70_q");
function DisconnectEapAccountRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Q70_q(param.eapType)
    ]
  ];
}
__name(DisconnectEapAccountRequest, "DisconnectEapAccountRequest");
function S70_b(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(S70_b, "S70_b");
function FetchOperationsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.deviceId
    ],
    [
      10,
      2,
      param.offsetFrom
    ]
  ];
}
__name(FetchOperationsRequest, "FetchOperationsRequest");
function FetchPhonePinCodeMsgRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      12,
      2,
      UserPhoneNumber(param.userPhoneNumber)
    ]
  ];
}
__name(FetchPhonePinCodeMsgRequest, "FetchPhonePinCodeMsgRequest");
function Pb1_F0(param) {
  return typeof param === "string" ? enums.Pb1_F0[param] : param;
}
__name(Pb1_F0, "Pb1_F0");
function FindChatByTicketRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.ticketId
    ]
  ];
}
__name(FindChatByTicketRequest, "FindChatByTicketRequest");
function FollowRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      Pb1_A4(param.followMid)
    ]
  ];
}
__name(FollowRequest, "FollowRequest");
function GetAccessTokenRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.fontId
    ]
  ];
}
__name(GetAccessTokenRequest, "GetAccessTokenRequest");
function GetAllChatMidsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      2,
      1,
      param.withMemberChats
    ],
    [
      2,
      2,
      param.withInvitedChats
    ]
  ];
}
__name(GetAllChatMidsRequest, "GetAllChatMidsRequest");
function Pb1_V7(param) {
  return typeof param === "string" ? enums.Pb1_V7[param] : param;
}
__name(Pb1_V7, "Pb1_V7");
function m80_l(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(m80_l, "m80_l");
function m80_n(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(m80_n, "m80_n");
function LatestProductsByAuthorRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Ob1_O0(param.productType)
    ],
    [
      10,
      2,
      param.authorId
    ],
    [
      8,
      3,
      param.limit
    ]
  ];
}
__name(LatestProductsByAuthorRequest, "LatestProductsByAuthorRequest");
function Ob1_a2(param) {
  return typeof param === "string" ? enums.Ob1_a2[param] : param;
}
__name(Ob1_a2, "Ob1_a2");
function AutoSuggestionShowcaseRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Ob1_O0(param.productType)
    ],
    [
      8,
      2,
      Ob1_a2(param.suggestionType)
    ]
  ];
}
__name(AutoSuggestionShowcaseRequest, "AutoSuggestionShowcaseRequest");
function NZ0_C12208u(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(NZ0_C12208u, "NZ0_C12208u");
function NZ0_C12214w(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(NZ0_C12214w, "NZ0_C12214w");
function ZQ0_b(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(ZQ0_b, "ZQ0_b");
function UEN(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      1,
      param.revision
    ]
  ];
}
__name(UEN, "UEN");
function Beacon(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.hardwareId
    ]
  ];
}
__name(Beacon, "Beacon");
function Uf_C14856C(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      UEN(param.uen)
    ],
    [
      12,
      2,
      Beacon(param.beacon)
    ]
  ];
}
__name(Uf_C14856C, "Uf_C14856C");
function AdRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      13,
      1,
      [
        11,
        11,
        param.headers
      ]
    ],
    [
      13,
      2,
      [
        11,
        11,
        param.queryParams
      ]
    ]
  ];
}
__name(AdRequest, "AdRequest");
function Uf_EnumC14873o(param) {
  return typeof param === "string" ? enums.Uf_EnumC14873o[param] : param;
}
__name(Uf_EnumC14873o, "Uf_EnumC14873o");
function ContentRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Uf_EnumC14873o(param.os)
    ],
    [
      11,
      2,
      param.appv
    ],
    [
      11,
      3,
      param.lineAcceptableLanguage
    ],
    [
      11,
      4,
      param.countryCode
    ]
  ];
}
__name(ContentRequest, "ContentRequest");
function BannerRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      2,
      1,
      param.test
    ],
    [
      12,
      2,
      Uf_C14856C(param.trigger)
    ],
    [
      12,
      3,
      AdRequest(param.ad)
    ],
    [
      12,
      4,
      ContentRequest(param.content)
    ]
  ];
}
__name(BannerRequest, "BannerRequest");
function Eh_C8933a(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(Eh_C8933a, "Eh_C8933a");
function GetBleDeviceRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.serviceUuid
    ],
    [
      11,
      2,
      param.psdi
    ]
  ];
}
__name(GetBleDeviceRequest, "GetBleDeviceRequest");
function GetBuddyChatBarRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.buddyMid
    ],
    [
      10,
      2,
      param.chatBarRevision
    ],
    [
      11,
      3,
      param.richMenuId
    ]
  ];
}
__name(GetBuddyChatBarRequest, "GetBuddyChatBarRequest");
function Pb1_D0(param) {
  return typeof param === "string" ? enums.Pb1_D0[param] : param;
}
__name(Pb1_D0, "Pb1_D0");
function GetBuddyLiveRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.mid
    ]
  ];
}
__name(GetBuddyLiveRequest, "GetBuddyLiveRequest");
function GetBuddyStatusBarV2Request(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.botMid
    ],
    [
      10,
      2,
      param.revision
    ]
  ];
}
__name(GetBuddyStatusBarV2Request, "GetBuddyStatusBarV2Request");
function GetCallStatusRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.basicSearchId
    ],
    [
      11,
      2,
      param.otp
    ]
  ];
}
__name(GetCallStatusRequest, "GetCallStatusRequest");
function GetCampaignRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.campaignType
    ]
  ];
}
__name(GetCampaignRequest, "GetCampaignRequest");
function GetChallengeForPaakAuthRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.sessionId
    ]
  ];
}
__name(GetChallengeForPaakAuthRequest, "GetChallengeForPaakAuthRequest");
function GetChallengeForPrimaryRegRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.sessionId
    ]
  ];
}
__name(GetChallengeForPrimaryRegRequest, "GetChallengeForPrimaryRegRequest");
function GetChannelContextRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ]
  ];
}
__name(GetChannelContextRequest, "GetChannelContextRequest");
function Pb1_Q2(param) {
  return typeof param === "string" ? enums.Pb1_Q2[param] : param;
}
__name(Pb1_Q2, "Pb1_Q2");
function GetChatappRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.chatappId
    ],
    [
      11,
      2,
      param.language
    ]
  ];
}
__name(GetChatappRequest, "GetChatappRequest");
function GetChatsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      1,
      [
        11,
        param.chatMids
      ]
    ],
    [
      2,
      2,
      param.withMembers
    ],
    [
      2,
      3,
      param.withInvitees
    ]
  ];
}
__name(GetChatsRequest, "GetChatsRequest");
function jO0_EnumC27533B(param) {
  return typeof param === "string" ? enums.jO0_EnumC27533B[param] : param;
}
__name(jO0_EnumC27533B, "jO0_EnumC27533B");
function jO0_EnumC27559z(param) {
  return typeof param === "string" ? enums.jO0_EnumC27559z[param] : param;
}
__name(jO0_EnumC27559z, "jO0_EnumC27559z");
function GetCoinProductsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      jO0_EnumC27533B(param.appStoreCode)
    ],
    [
      11,
      2,
      param.country
    ],
    [
      11,
      3,
      param.language
    ],
    [
      8,
      4,
      jO0_EnumC27559z(param.pgCode)
    ]
  ];
}
__name(GetCoinProductsRequest, "GetCoinProductsRequest");
function GetCoinHistoryRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      jO0_EnumC27533B(param.appStoreCode)
    ],
    [
      11,
      2,
      param.country
    ],
    [
      11,
      3,
      param.language
    ],
    [
      11,
      4,
      param.searchEndDate
    ],
    [
      8,
      5,
      param.offset
    ],
    [
      8,
      6,
      param.limit
    ]
  ];
}
__name(GetCoinHistoryRequest, "GetCoinHistoryRequest");
function GetContactCalendarEventTarget(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.targetUserMid
    ]
  ];
}
__name(GetContactCalendarEventTarget, "GetContactCalendarEventTarget");
function GetContactCalendarEventsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      1,
      [
        12,
        param.targetUsers && param.targetUsers.map((e) => GetContactCalendarEventTarget(e))
      ]
    ],
    [
      8,
      2,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(GetContactCalendarEventsRequest, "GetContactCalendarEventsRequest");
function GetContactV3Target(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.targetUserMid
    ]
  ];
}
__name(GetContactV3Target, "GetContactV3Target");
function GetContactsV3Request(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      1,
      [
        12,
        param.targetUsers && param.targetUsers.map((e) => GetContactV3Target(e))
      ]
    ],
    [
      8,
      2,
      Pb1_V7(param.syncReason)
    ],
    [
      2,
      3,
      param.checkUserStatusStrictly
    ]
  ];
}
__name(GetContactsV3Request, "GetContactsV3Request");
function Pb1_EnumC13221w3(param) {
  return typeof param === "string" ? enums.Pb1_EnumC13221w3[param] : param;
}
__name(Pb1_EnumC13221w3, "Pb1_EnumC13221w3");
function SimCard(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.countryCode
    ],
    [
      11,
      2,
      param.hni
    ],
    [
      11,
      3,
      param.carrierName
    ]
  ];
}
__name(SimCard, "SimCard");
function fN0_C24473e(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(fN0_C24473e, "fN0_C24473e");
function DestinationLIFFRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.originalUrl
    ]
  ];
}
__name(DestinationLIFFRequest, "DestinationLIFFRequest");
function vh_C37633d(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(vh_C37633d, "vh_C37633d");
function Pb1_W4(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(Pb1_W4, "Pb1_W4");
function Pb1_Y4(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(Pb1_Y4, "Pb1_Y4");
function GetExchangeKeyRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.sessionId
    ]
  ];
}
__name(GetExchangeKeyRequest, "GetExchangeKeyRequest");
function GetFollowBlacklistRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.cursor
    ]
  ];
}
__name(GetFollowBlacklistRequest, "GetFollowBlacklistRequest");
function GetFollowersRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      Pb1_A4(param.followMid)
    ],
    [
      11,
      2,
      param.cursor
    ]
  ];
}
__name(GetFollowersRequest, "GetFollowersRequest");
function GetFollowingsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      Pb1_A4(param.followMid)
    ],
    [
      11,
      2,
      param.cursor
    ]
  ];
}
__name(GetFollowingsRequest, "GetFollowingsRequest");
function VR0_l(param) {
  return typeof param === "string" ? enums.VR0_l[param] : param;
}
__name(VR0_l, "VR0_l");
function GetFontMetasRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      VR0_l(param.requestCause)
    ]
  ];
}
__name(GetFontMetasRequest, "GetFontMetasRequest");
function GetFriendDetailTarget(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.targetUserMid
    ]
  ];
}
__name(GetFriendDetailTarget, "GetFriendDetailTarget");
function GetFriendDetailsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      1,
      [
        12,
        param.targetUsers && param.targetUsers.map((e) => GetFriendDetailTarget(e))
      ]
    ],
    [
      8,
      2,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(GetFriendDetailsRequest, "GetFriendDetailsRequest");
function Pb1_F4(param) {
  return typeof param === "string" ? enums.Pb1_F4[param] : param;
}
__name(Pb1_F4, "Pb1_F4");
function GetGnbBadgeStatusRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.uenRevision
    ]
  ];
}
__name(GetGnbBadgeStatusRequest, "GetGnbBadgeStatusRequest");
function GetGroupCallUrlInfoRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.urlId
    ]
  ];
}
__name(GetGroupCallUrlInfoRequest, "GetGroupCallUrlInfoRequest");
function Pb1_C13042j5(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(Pb1_C13042j5, "Pb1_C13042j5");
function GetHomeFlexContentRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.supportedFlexVersion
    ]
  ];
}
__name(GetHomeFlexContentRequest, "GetHomeFlexContentRequest");
function Eg_C8928b(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(Eg_C8928b, "Eg_C8928b");
function GetHomeServicesRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      1,
      [
        8,
        param.ids
      ]
    ]
  ];
}
__name(GetHomeServicesRequest, "GetHomeServicesRequest");
function fN0_C24471c(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(fN0_C24471c, "fN0_C24471c");
function GetJoinedMembershipByBotMidRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.botMid
    ]
  ];
}
__name(GetJoinedMembershipByBotMidRequest, "GetJoinedMembershipByBotMidRequest");
function GetJoinedMembershipRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.uniqueKey
    ]
  ];
}
__name(GetJoinedMembershipRequest, "GetJoinedMembershipRequest");
function Pb1_C13070l5(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(Pb1_C13070l5, "Pb1_C13070l5");
function LiffViewWithoutUserContextRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.liffId
    ]
  ];
}
__name(LiffViewWithoutUserContextRequest, "LiffViewWithoutUserContextRequest");
function r80_EnumC34372l(param) {
  return typeof param === "string" ? enums.r80_EnumC34372l[param] : param;
}
__name(r80_EnumC34372l, "r80_EnumC34372l");
function GetLoginActorContextRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.sessionId
    ]
  ];
}
__name(GetLoginActorContextRequest, "GetLoginActorContextRequest");
function GetMappedProfileIdsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      1,
      [
        11,
        param.targetUserMids
      ]
    ]
  ];
}
__name(GetMappedProfileIdsRequest, "GetMappedProfileIdsRequest");
function MessageBoxListRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.minChatId
    ],
    [
      11,
      2,
      param.maxChatId
    ],
    [
      2,
      3,
      param.activeOnly
    ],
    [
      8,
      4,
      param.messageBoxCountLimit
    ],
    [
      2,
      5,
      param.withUnreadCount
    ],
    [
      8,
      6,
      param.lastMessagesPerMessageBoxCount
    ],
    [
      2,
      7,
      param.unreadOnly
    ]
  ];
}
__name(MessageBoxListRequest, "MessageBoxListRequest");
function GetModuleLayoutV4Request(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.etag
    ]
  ];
}
__name(GetModuleLayoutV4Request, "GetModuleLayoutV4Request");
function NZ0_G(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.id
    ],
    [
      11,
      2,
      param.etag
    ],
    [
      11,
      3,
      param.recommendedModelId
    ],
    [
      11,
      4,
      param.deviceAdId
    ],
    [
      2,
      5,
      param.agreedWithTargetingAdByMid
    ],
    [
      11,
      6,
      param.deviceId
    ]
  ];
}
__name(NZ0_G, "NZ0_G");
function NZ0_E(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.id
    ],
    [
      11,
      2,
      param.etag
    ],
    [
      11,
      3,
      param.recommendedModelId
    ],
    [
      11,
      4,
      param.deviceAdId
    ],
    [
      2,
      5,
      param.agreedWithTargetingAdByMid
    ],
    [
      11,
      6,
      param.deviceId
    ]
  ];
}
__name(NZ0_E, "NZ0_E");
function GetModulesRequestV2(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.etag
    ],
    [
      11,
      2,
      param.deviceAdId
    ]
  ];
}
__name(GetModulesRequestV2, "GetModulesRequestV2");
function NZ0_EnumC12169g1(param) {
  return typeof param === "string" ? enums.NZ0_EnumC12169g1[param] : param;
}
__name(NZ0_EnumC12169g1, "NZ0_EnumC12169g1");
function GetModulesRequestV3(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.etag
    ],
    [
      8,
      2,
      NZ0_EnumC12169g1(param.tabIdentifier)
    ],
    [
      11,
      3,
      param.deviceAdId
    ],
    [
      2,
      4,
      param.agreedWithTargetingAdByMid
    ]
  ];
}
__name(GetModulesRequestV3, "GetModulesRequestV3");
function GetModulesV4WithStatusRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.etag
    ],
    [
      11,
      2,
      param.subTabId
    ],
    [
      11,
      3,
      param.deviceAdId
    ],
    [
      2,
      4,
      param.agreedWithTargetingAdByMid
    ],
    [
      11,
      5,
      param.deviceId
    ]
  ];
}
__name(GetModulesV4WithStatusRequest, "GetModulesV4WithStatusRequest");
function GetMyAssetInformationV2Request(param) {
  return typeof param === "undefined" ? [] : [
    [
      2,
      1,
      param.refresh
    ]
  ];
}
__name(GetMyAssetInformationV2Request, "GetMyAssetInformationV2Request");
function GetMyChatappsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.language
    ],
    [
      11,
      2,
      param.continuationToken
    ]
  ];
}
__name(GetMyChatappsRequest, "GetMyChatappsRequest");
function GetMyDashboardRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      NZ0_EnumC12169g1(param.tabIdentifier)
    ]
  ];
}
__name(GetMyDashboardRequest, "GetMyDashboardRequest");
function GetNotificationSettingsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      1,
      [
        11,
        param.chatMids
      ]
    ],
    [
      8,
      2,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(GetNotificationSettingsRequest, "GetNotificationSettingsRequest");
function GetPasswordHashingParametersRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.sessionId
    ]
  ];
}
__name(GetPasswordHashingParametersRequest, "GetPasswordHashingParametersRequest");
function GetPasswordHashingParametersForPwdRegRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ]
  ];
}
__name(GetPasswordHashingParametersForPwdRegRequest, "GetPasswordHashingParametersForPwdRegRequest");
function GetPasswordHashingParametersForPwdVerifRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      12,
      2,
      AccountIdentifier(param.accountIdentifier)
    ]
  ];
}
__name(GetPasswordHashingParametersForPwdVerifRequest, "GetPasswordHashingParametersForPwdVerifRequest");
function Device(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.udid
    ],
    [
      11,
      2,
      param.deviceModel
    ]
  ];
}
__name(Device, "Device");
function GetPhoneVerifMethodForRegistrationRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      12,
      2,
      Device(param.device)
    ],
    [
      12,
      3,
      UserPhoneNumber(param.userPhoneNumber)
    ]
  ];
}
__name(GetPhoneVerifMethodForRegistrationRequest, "GetPhoneVerifMethodForRegistrationRequest");
function GetPhoneVerifMethodV2Request(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      12,
      2,
      Device(param.device)
    ],
    [
      12,
      3,
      UserPhoneNumber(param.userPhoneNumber)
    ]
  ];
}
__name(GetPhoneVerifMethodV2Request, "GetPhoneVerifMethodV2Request");
function Pb1_C13126p5(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(Pb1_C13126p5, "Pb1_C13126p5");
function GetPredefinedScenarioSetsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      1,
      [
        11,
        param.deviceIds
      ]
    ]
  ];
}
__name(GetPredefinedScenarioSetsRequest, "GetPredefinedScenarioSetsRequest");
function fN0_C24475g(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(fN0_C24475g, "fN0_C24475g");
function fN0_C24476h(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(fN0_C24476h, "fN0_C24476h");
function MessageBoxV2MessageId(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      1,
      param.deliveredTime
    ],
    [
      10,
      2,
      param.messageId
    ]
  ];
}
__name(MessageBoxV2MessageId, "MessageBoxV2MessageId");
function GetPreviousMessagesV2Request(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.messageBoxId
    ],
    [
      12,
      2,
      MessageBoxV2MessageId(param.endMessageId)
    ],
    [
      8,
      3,
      param.messagesCount
    ],
    [
      2,
      4,
      param.withReadCount
    ],
    [
      2,
      5,
      param.receivedOnly
    ]
  ];
}
__name(GetPreviousMessagesV2Request, "GetPreviousMessagesV2Request");
function GetPublishedMembershipsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.basicSearchId
    ]
  ];
}
__name(GetPublishedMembershipsRequest, "GetPublishedMembershipsRequest");
function PurchaseEnabledRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.uniqueKey
    ]
  ];
}
__name(PurchaseEnabledRequest, "PurchaseEnabledRequest");
function NZ0_S(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(NZ0_S, "NZ0_S");
function GetRecommendationDetailTarget(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.targetUserMid
    ]
  ];
}
__name(GetRecommendationDetailTarget, "GetRecommendationDetailTarget");
function GetRecommendationDetailsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      1,
      [
        12,
        param.targetUsers && param.targetUsers.map((e) => GetRecommendationDetailTarget(e))
      ]
    ],
    [
      8,
      2,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(GetRecommendationDetailsRequest, "GetRecommendationDetailsRequest");
function ConfigurationsParams(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.regionOfUsim
    ],
    [
      11,
      2,
      param.regionOfTelephone
    ],
    [
      11,
      3,
      param.regionOfLocale
    ],
    [
      11,
      4,
      param.carrier
    ]
  ];
}
__name(ConfigurationsParams, "ConfigurationsParams");
function RepairGroupMembers(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.numMembers
    ],
    [
      2,
      3,
      param.invalidGroup
    ]
  ];
}
__name(RepairGroupMembers, "RepairGroupMembers");
function GetRepairElementsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      2,
      1,
      param.profile
    ],
    [
      2,
      2,
      param.settings
    ],
    [
      12,
      3,
      ConfigurationsParams(param.configurations)
    ],
    [
      8,
      4,
      param.numLocalJoinedGroups
    ],
    [
      8,
      5,
      param.numLocalInvitedGroups
    ],
    [
      8,
      6,
      param.numLocalFriends
    ],
    [
      8,
      7,
      param.numLocalRecommendations
    ],
    [
      8,
      8,
      param.numLocalBlockedFriends
    ],
    [
      8,
      9,
      param.numLocalBlockedRecommendations
    ],
    [
      13,
      10,
      [
        11,
        12,
        map(RepairGroupMembers, param.localGroupMembers)
      ]
    ],
    [
      8,
      11,
      Pb1_V7(param.syncReason)
    ],
    [
      13,
      12,
      [
        11,
        8,
        param.localProfileMappings
      ]
    ]
  ];
}
__name(GetRepairElementsRequest, "GetRepairElementsRequest");
function GetResponseStatusRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.botMid
    ]
  ];
}
__name(GetResponseStatusRequest, "GetResponseStatusRequest");
function WebLoginRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.hookedFullUrl
    ],
    [
      11,
      2,
      param.sessionString
    ],
    [
      2,
      3,
      param.fromIAB
    ],
    [
      11,
      4,
      param.sourceApplication
    ]
  ];
}
__name(WebLoginRequest, "WebLoginRequest");
function LiffChatContext(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.chatMid
    ]
  ];
}
__name(LiffChatContext, "LiffChatContext");
function LiffSquareChatContext(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.squareChatMid
    ]
  ];
}
__name(LiffSquareChatContext, "LiffSquareChatContext");
function Qj_C13595l(param) {
  return typeof param === "undefined" ? [] : [
    ,
    [
      12,
      2,
      LiffChatContext(param.chat)
    ],
    [
      12,
      3,
      LiffSquareChatContext(param.squareChat)
    ]
  ];
}
__name(Qj_C13595l, "Qj_C13595l");
function Qj_EnumC13584a(param) {
  return typeof param === "string" ? enums.Qj_EnumC13584a[param] : param;
}
__name(Qj_EnumC13584a, "Qj_EnumC13584a");
function SKAdNetwork(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.identifiers
    ],
    [
      11,
      2,
      param.version
    ]
  ];
}
__name(SKAdNetwork, "SKAdNetwork");
function LiffAdvertisingId(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.advertisingId
    ],
    [
      2,
      2,
      param.tracking
    ],
    [
      8,
      3,
      Qj_EnumC13584a(param.att)
    ],
    [
      12,
      4,
      SKAdNetwork(param.skAdNetwork)
    ]
  ];
}
__name(LiffAdvertisingId, "LiffAdvertisingId");
function LiffDeviceSetting(param) {
  return typeof param === "undefined" ? [] : [
    [
      2,
      1,
      param.videoAutoPlayAllowed
    ],
    [
      12,
      2,
      LiffAdvertisingId(param.advertisingId)
    ]
  ];
}
__name(LiffDeviceSetting, "LiffDeviceSetting");
function LiffWebLoginRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.hookedFullUrl
    ],
    [
      11,
      2,
      param.sessionString
    ],
    [
      12,
      3,
      Qj_C13595l(param.context)
    ],
    [
      12,
      4,
      LiffDeviceSetting(param.deviceSetting)
    ]
  ];
}
__name(LiffWebLoginRequest, "LiffWebLoginRequest");
function GetSCCRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.basicSearchId
    ]
  ];
}
__name(GetSCCRequest, "GetSCCRequest");
function Eh_C8935c(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(Eh_C8935c, "Eh_C8935c");
function NZ0_U(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(NZ0_U, "NZ0_U");
function SettingsAttributeEx(param) {
  return typeof param === "string" ? enums.SettingsAttributeEx[param] : param;
}
__name(SettingsAttributeEx, "SettingsAttributeEx");
function GetSmartChannelRecommendationsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.maxResults
    ],
    [
      11,
      2,
      param.placement
    ],
    [
      2,
      3,
      param.testMode
    ]
  ];
}
__name(GetSmartChannelRecommendationsRequest, "GetSmartChannelRecommendationsRequest");
function GetSquareBotRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.botMid
    ]
  ];
}
__name(GetSquareBotRequest, "GetSquareBotRequest");
function Ob1_C12606a0(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(Ob1_C12606a0, "Ob1_C12606a0");
function Ob1_K1(param) {
  return typeof param === "string" ? enums.Ob1_K1[param] : param;
}
__name(Ob1_K1, "Ob1_K1");
function GetSubscriptionPlansRequest(param) {
  return typeof param === "undefined" ? [] : [
    ,
    [
      8,
      2,
      Ob1_K1(param.storeCode)
    ]
  ];
}
__name(GetSubscriptionPlansRequest, "GetSubscriptionPlansRequest");
function Ob1_C12618e0(param) {
  return typeof param === "undefined" ? [] : [
    ,
    [
      11,
      2,
      param.continuationToken
    ],
    [
      8,
      3,
      param.limit
    ],
    [
      8,
      4,
      Ob1_O0(param.productType)
    ]
  ];
}
__name(Ob1_C12618e0, "Ob1_C12618e0");
function GetSubscriptionStatusRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      2,
      1,
      param.includeOtherOwnedSubscriptions
    ]
  ];
}
__name(GetSubscriptionStatusRequest, "GetSubscriptionStatusRequest");
function Ob1_C12630i0(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(Ob1_C12630i0, "Ob1_C12630i0");
function GetSuggestResourcesV2Request(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Ob1_O0(param.productType)
    ],
    [
      15,
      2,
      [
        11,
        param.productIds
      ]
    ]
  ];
}
__name(GetSuggestResourcesV2Request, "GetSuggestResourcesV2Request");
function GetTaiwanBankBalanceRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.accessToken
    ],
    [
      11,
      2,
      param.authorizationCode
    ],
    [
      11,
      3,
      param.codeVerifier
    ]
  ];
}
__name(GetTaiwanBankBalanceRequest, "GetTaiwanBankBalanceRequest");
function GetTargetProfileTarget(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.targetUserMid
    ]
  ];
}
__name(GetTargetProfileTarget, "GetTargetProfileTarget");
function GetTargetProfilesRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      1,
      [
        12,
        param.targetUsers && param.targetUsers.map((e) => GetTargetProfileTarget(e))
      ]
    ],
    [
      8,
      2,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(GetTargetProfilesRequest, "GetTargetProfilesRequest");
function NZ0_C12150a0(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(NZ0_C12150a0, "NZ0_C12150a0");
function GetThaiBankBalanceRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.deviceId
    ]
  ];
}
__name(GetThaiBankBalanceRequest, "GetThaiBankBalanceRequest");
function GetTotalCoinBalanceRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      jO0_EnumC27533B(param.appStoreCode)
    ]
  ];
}
__name(GetTotalCoinBalanceRequest, "GetTotalCoinBalanceRequest");
function ChannelIdWithLastUpdated(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.channelId
    ],
    [
      10,
      2,
      param.lastUpdated
    ]
  ];
}
__name(ChannelIdWithLastUpdated, "ChannelIdWithLastUpdated");
function GetUserCollectionsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      1,
      param.lastUpdatedTimeMillis
    ],
    [
      2,
      2,
      param.includeSummary
    ],
    [
      8,
      3,
      Ob1_O0(param.productType)
    ]
  ];
}
__name(GetUserCollectionsRequest, "GetUserCollectionsRequest");
function GetUserVectorRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.majorVersion
    ]
  ];
}
__name(GetUserVectorRequest, "GetUserVectorRequest");
function GetUsersMappedByProfileRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.profileId
    ],
    [
      8,
      2,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(GetUsersMappedByProfileRequest, "GetUsersMappedByProfileRequest");
function InviteFriendsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.campaignId
    ],
    [
      15,
      2,
      [
        11,
        param.invitees
      ]
    ]
  ];
}
__name(InviteFriendsRequest, "InviteFriendsRequest");
function InviteIntoChatRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.chatMid
    ],
    [
      14,
      3,
      [
        11,
        param.targetUserMids
      ]
    ]
  ];
}
__name(InviteIntoChatRequest, "InviteIntoChatRequest");
function IsProductForCollectionsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Ob1_O0(param.productType)
    ],
    [
      11,
      2,
      param.productId
    ]
  ];
}
__name(IsProductForCollectionsRequest, "IsProductForCollectionsRequest");
function IsStickerAvailableForCombinationStickerRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.packageId
    ]
  ];
}
__name(IsStickerAvailableForCombinationStickerRequest, "IsStickerAvailableForCombinationStickerRequest");
function LiffViewRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.liffId
    ],
    [
      12,
      2,
      Qj_C13595l(param.context)
    ],
    [
      11,
      3,
      param.lang
    ],
    [
      12,
      4,
      LiffDeviceSetting(param.deviceSetting)
    ],
    [
      11,
      5,
      param.msit
    ],
    [
      2,
      6,
      param.subsequentLiff
    ],
    [
      11,
      7,
      param.domain
    ]
  ];
}
__name(LiffViewRequest, "LiffViewRequest");
function IssueBirthdayGiftTokenRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.recipientUserMid
    ]
  ];
}
__name(IssueBirthdayGiftTokenRequest, "IssueBirthdayGiftTokenRequest");
function IssueV3TokenForPrimaryRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.udid
    ],
    [
      11,
      2,
      param.systemDisplayName
    ],
    [
      11,
      3,
      param.modelName
    ]
  ];
}
__name(IssueV3TokenForPrimaryRequest, "IssueV3TokenForPrimaryRequest");
function JoinChatByCallUrlRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.urlId
    ],
    [
      8,
      2,
      param.reqSeq
    ]
  ];
}
__name(JoinChatByCallUrlRequest, "JoinChatByCallUrlRequest");
function KickoutFromGroupCallRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.chatMid
    ],
    [
      15,
      2,
      [
        11,
        param.targetMids
      ]
    ]
  ];
}
__name(KickoutFromGroupCallRequest, "KickoutFromGroupCallRequest");
function DeviceLinkRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.deviceId
    ]
  ];
}
__name(DeviceLinkRequest, "DeviceLinkRequest");
function LookupAvailableEapRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ]
  ];
}
__name(LookupAvailableEapRequest, "LookupAvailableEapRequest");
function MapProfileToUsersRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.profileId
    ],
    [
      15,
      2,
      [
        11,
        param.targetMids
      ]
    ]
  ];
}
__name(MapProfileToUsersRequest, "MapProfileToUsersRequest");
function MigratePrimaryUsingQrCodeRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.sessionId
    ],
    [
      11,
      2,
      param.nonce
    ]
  ];
}
__name(MigratePrimaryUsingQrCodeRequest, "MigratePrimaryUsingQrCodeRequest");
function NotifyChatAdEntryRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.chatMid
    ],
    [
      11,
      2,
      param.scenarioId
    ],
    [
      11,
      3,
      param.sdata
    ]
  ];
}
__name(NotifyChatAdEntryRequest, "NotifyChatAdEntryRequest");
function do0_EnumC23148f(param) {
  return typeof param === "string" ? enums.do0_EnumC23148f[param] : param;
}
__name(do0_EnumC23148f, "do0_EnumC23148f");
function do0_EnumC23147e(param) {
  return typeof param === "string" ? enums.do0_EnumC23147e[param] : param;
}
__name(do0_EnumC23147e, "do0_EnumC23147e");
function NotifyDeviceConnectionRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.deviceId
    ],
    [
      11,
      2,
      param.connectionId
    ],
    [
      8,
      3,
      do0_EnumC23148f(param.connectionType)
    ],
    [
      8,
      4,
      do0_EnumC23147e(param.code)
    ],
    [
      11,
      5,
      param.errorReason
    ],
    [
      10,
      6,
      param.startTime
    ],
    [
      10,
      7,
      param.endTime
    ]
  ];
}
__name(NotifyDeviceConnectionRequest, "NotifyDeviceConnectionRequest");
function NotifyDeviceDisconnectionRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.deviceId
    ],
    [
      11,
      2,
      param.connectionId
    ],
    [
      10,
      4,
      param.disconnectedTime
    ]
  ];
}
__name(NotifyDeviceDisconnectionRequest, "NotifyDeviceDisconnectionRequest");
function kf_p(param) {
  return typeof param === "string" ? enums.kf_p[param] : param;
}
__name(kf_p, "kf_p");
function kf_o(param) {
  return typeof param === "string" ? enums.kf_o[param] : param;
}
__name(kf_o, "kf_o");
function OATalkroomEventContext(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      1,
      param.timestampMillis
    ],
    [
      11,
      2,
      param.botMid
    ],
    [
      11,
      3,
      param.userMid
    ],
    [
      8,
      4,
      kf_o(param.os)
    ],
    [
      11,
      5,
      param.osVersion
    ],
    [
      11,
      6,
      param.appVersion
    ],
    [
      11,
      7,
      param.region
    ]
  ];
}
__name(OATalkroomEventContext, "OATalkroomEventContext");
function kf_u(param) {
  return typeof param === "string" ? enums.kf_u[param] : param;
}
__name(kf_u, "kf_u");
function RichmenuCoordinates(param) {
  return typeof param === "undefined" ? [] : [
    [
      4,
      1,
      param.x
    ],
    [
      4,
      2,
      param.y
    ]
  ];
}
__name(RichmenuCoordinates, "RichmenuCoordinates");
function kf_r(param) {
  return typeof param === "string" ? enums.kf_r[param] : param;
}
__name(kf_r, "kf_r");
function RichmenuEvent(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      kf_u(param.type)
    ],
    [
      11,
      2,
      param.richmenuId
    ],
    [
      12,
      3,
      RichmenuCoordinates(param.coordinates)
    ],
    [
      8,
      4,
      param.areaIndex
    ],
    [
      11,
      5,
      param.clickUrl
    ],
    [
      8,
      6,
      kf_r(param.clickAction)
    ]
  ];
}
__name(RichmenuEvent, "RichmenuEvent");
function kf_x(param) {
  return typeof param === "string" ? enums.kf_x[param] : param;
}
__name(kf_x, "kf_x");
function kf_w(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(kf_w, "kf_w");
function TalkroomEnterReferer(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.urlScheme
    ],
    [
      8,
      2,
      kf_x(param.type)
    ],
    [
      12,
      3,
      kf_w(param.content)
    ]
  ];
}
__name(TalkroomEnterReferer, "TalkroomEnterReferer");
function TalkroomEvent(param) {
  return typeof param === "undefined" ? [] : [
    ,
    [
      12,
      2,
      TalkroomEnterReferer(param.referer)
    ]
  ];
}
__name(TalkroomEvent, "TalkroomEvent");
function kf_m(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      RichmenuEvent(param.richmenu)
    ],
    [
      12,
      2,
      TalkroomEvent(param.talkroom)
    ]
  ];
}
__name(kf_m, "kf_m");
function OATalkroomEvent(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.eventId
    ],
    [
      8,
      2,
      kf_p(param.type)
    ],
    [
      12,
      3,
      OATalkroomEventContext(param.context)
    ],
    [
      12,
      4,
      kf_m(param.content)
    ]
  ];
}
__name(OATalkroomEvent, "OATalkroomEvent");
function NotifyOATalkroomEventsRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      1,
      [
        12,
        param.events && param.events.map((e) => OATalkroomEvent(e))
      ]
    ]
  ];
}
__name(NotifyOATalkroomEventsRequest, "NotifyOATalkroomEventsRequest");
function do0_G(param) {
  return typeof param === "string" ? enums.do0_G[param] : param;
}
__name(do0_G, "do0_G");
function do0_m0(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(do0_m0, "do0_m0");
function do0_C23143a(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.bytes
    ]
  ];
}
__name(do0_C23143a, "do0_C23143a");
function do0_C23142E(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      do0_m0(param.voidResult)
    ],
    [
      12,
      2,
      do0_C23143a(param.binaryResult)
    ]
  ];
}
__name(do0_C23142E, "do0_C23142E");
function do0_F(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.scenarioId
    ],
    [
      11,
      2,
      param.deviceId
    ],
    [
      10,
      3,
      param.revision
    ],
    [
      10,
      4,
      param.startTime
    ],
    [
      10,
      5,
      param.endTime
    ],
    [
      8,
      6,
      do0_G(param.code)
    ],
    [
      11,
      7,
      param.errorReason
    ],
    [
      11,
      8,
      param.bleNotificationPayload
    ],
    [
      15,
      9,
      [
        12,
        param.actionResults && param.actionResults.map((e) => do0_C23142E(e))
      ]
    ],
    [
      11,
      10,
      param.connectionId
    ]
  ];
}
__name(do0_F, "do0_F");
function NotifyScenarioExecutedRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      2,
      [
        12,
        param.scenarioResults && param.scenarioResults.map((e) => do0_F(e))
      ]
    ]
  ];
}
__name(NotifyScenarioExecutedRequest, "NotifyScenarioExecutedRequest");
function ApplicationType(param) {
  return typeof param === "string" ? enums.ApplicationType[param] : param;
}
__name(ApplicationType, "ApplicationType");
function DeviceInfo(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.deviceName
    ],
    [
      11,
      2,
      param.systemName
    ],
    [
      11,
      3,
      param.systemVersion
    ],
    [
      11,
      4,
      param.model
    ],
    [
      11,
      5,
      param.webViewVersion
    ],
    [
      8,
      10,
      CarrierCode(param.carrierCode)
    ],
    [
      11,
      11,
      param.carrierName
    ],
    [
      8,
      20,
      ApplicationType(param.applicationType)
    ]
  ];
}
__name(DeviceInfo, "DeviceInfo");
function AuthSessionRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      13,
      1,
      [
        11,
        11,
        param.metaData
      ]
    ]
  ];
}
__name(AuthSessionRequest, "AuthSessionRequest");
function OpenSessionRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      13,
      1,
      [
        11,
        11,
        param.metaData
      ]
    ]
  ];
}
__name(OpenSessionRequest, "OpenSessionRequest");
function PermitLoginRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.sessionId
    ],
    [
      13,
      2,
      [
        11,
        11,
        param.metaData
      ]
    ]
  ];
}
__name(PermitLoginRequest, "PermitLoginRequest");
function Price(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.currency
    ],
    [
      11,
      2,
      param.amount
    ],
    [
      11,
      3,
      param.priceString
    ]
  ];
}
__name(Price, "Price");
function PurchaseOrder(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.shopId
    ],
    [
      11,
      2,
      param.productId
    ],
    [
      11,
      5,
      param.recipientMid
    ],
    [
      12,
      11,
      Price(param.price)
    ],
    [
      2,
      12,
      param.enableLinePointAutoExchange
    ],
    [
      12,
      21,
      Locale(param.locale)
    ],
    [
      13,
      31,
      [
        11,
        11,
        param.presentAttributes
      ]
    ]
  ];
}
__name(PurchaseOrder, "PurchaseOrder");
function PurchaseSubscriptionRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.billingItemId
    ],
    ,
    [
      8,
      3,
      Ob1_K1(param.storeCode)
    ],
    [
      11,
      4,
      param.storeOrderId
    ],
    [
      2,
      5,
      param.outsideAppPurchase
    ],
    [
      2,
      6,
      param.unavailableItemPurchase
    ]
  ];
}
__name(PurchaseSubscriptionRequest, "PurchaseSubscriptionRequest");
function PutE2eeKeyRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.sessionId
    ],
    [
      13,
      2,
      [
        11,
        11,
        param.e2eeKey
      ]
    ]
  ];
}
__name(PutE2eeKeyRequest, "PutE2eeKeyRequest");
function ReactRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      10,
      2,
      param.messageId
    ],
    [
      12,
      3,
      ReactionType(param.reactionType)
    ]
  ];
}
__name(ReactRequest, "ReactRequest");
function RefreshAccessTokenRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.refreshToken
    ]
  ];
}
__name(RefreshAccessTokenRequest, "RefreshAccessTokenRequest");
function RSAEncryptedPassword(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.encrypted
    ],
    [
      11,
      2,
      param.keyName
    ]
  ];
}
__name(RSAEncryptedPassword, "RSAEncryptedPassword");
function RegisterCampaignRewardRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.campaignId
    ]
  ];
}
__name(RegisterCampaignRewardRequest, "RegisterCampaignRewardRequest");
function Pb1_C13097n4(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.version
    ],
    [
      8,
      2,
      param.keyId
    ],
    [
      11,
      4,
      param.keyData
    ],
    [
      10,
      5,
      param.createdTime
    ]
  ];
}
__name(Pb1_C13097n4, "Pb1_C13097n4");
function Pb1_W6(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      12,
      2,
      Pb1_C13097n4(param.publicKey)
    ],
    [
      11,
      3,
      param.blobPayload
    ]
  ];
}
__name(Pb1_W6, "Pb1_W6");
function RegisterPrimaryCredentialRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.sessionId
    ]
  ];
}
__name(RegisterPrimaryCredentialRequest, "RegisterPrimaryCredentialRequest");
function ReissueChatTicketRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.groupMid
    ]
  ];
}
__name(ReissueChatTicketRequest, "ReissueChatTicketRequest");
function RejectChatInvitationRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.chatMid
    ]
  ];
}
__name(RejectChatInvitationRequest, "RejectChatInvitationRequest");
function RemoveFollowerRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      Pb1_A4(param.followMid)
    ]
  ];
}
__name(RemoveFollowerRequest, "RemoveFollowerRequest");
function RemoveFromFollowBlacklistRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      Pb1_A4(param.followMid)
    ]
  ];
}
__name(RemoveFromFollowBlacklistRequest, "RemoveFromFollowBlacklistRequest");
function RemoveItemFromCollectionRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.collectionId
    ],
    [
      11,
      3,
      param.productId
    ],
    [
      11,
      4,
      param.itemId
    ]
  ];
}
__name(RemoveItemFromCollectionRequest, "RemoveItemFromCollectionRequest");
function RemoveProductFromSubscriptionSlotRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Ob1_O0(param.productType)
    ],
    [
      11,
      2,
      param.productId
    ],
    ,
    [
      14,
      4,
      [
        11,
        param.productIds
      ]
    ]
  ];
}
__name(RemoveProductFromSubscriptionSlotRequest, "RemoveProductFromSubscriptionSlotRequest");
function Pb1_EnumC13128p7(param) {
  return typeof param === "string" ? enums.Pb1_EnumC13128p7[param] : param;
}
__name(Pb1_EnumC13128p7, "Pb1_EnumC13128p7");
function AbuseMessage(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      1,
      param.messageId
    ],
    [
      11,
      2,
      param.message
    ],
    [
      11,
      3,
      param.senderMid
    ],
    [
      8,
      4,
      ContentType(param.contentType)
    ],
    [
      10,
      5,
      param.createdTime
    ],
    [
      13,
      6,
      [
        11,
        11,
        param.metadata
      ]
    ]
  ];
}
__name(AbuseMessage, "AbuseMessage");
function AbuseReport(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Pb1_EnumC13128p7(param.reportSource)
    ],
    [
      8,
      2,
      ApplicationType(param.applicationType)
    ],
    [
      15,
      3,
      [
        8,
        param.spammerReasons
      ]
    ],
    [
      15,
      4,
      [
        12,
        param.abuseMessages && param.abuseMessages.map((e) => AbuseMessage(e))
      ]
    ],
    [
      13,
      5,
      [
        11,
        11,
        param.metadata
      ]
    ]
  ];
}
__name(AbuseReport, "AbuseReport");
function EvidenceId(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.spaceId
    ],
    [
      11,
      2,
      param.objectId
    ]
  ];
}
__name(EvidenceId, "EvidenceId");
function AbuseReportLineMeeting(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.reporteeMid
    ],
    [
      15,
      2,
      [
        8,
        param.spammerReasons
      ]
    ],
    [
      15,
      3,
      [
        12,
        param.evidenceIds && param.evidenceIds.map((e) => EvidenceId(e))
      ]
    ],
    [
      11,
      4,
      param.chatMid
    ]
  ];
}
__name(AbuseReportLineMeeting, "AbuseReportLineMeeting");
function Pb1_C12938c(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      AbuseReport(param.message)
    ],
    [
      12,
      2,
      AbuseReportLineMeeting(param.lineMeeting)
    ]
  ];
}
__name(Pb1_C12938c, "Pb1_C12938c");
function ReportAbuseExRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      Pb1_C12938c(param.abuseReportEntry)
    ]
  ];
}
__name(ReportAbuseExRequest, "ReportAbuseExRequest");
function BeaconData(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.hwid
    ],
    [
      8,
      2,
      param.rssi
    ],
    [
      8,
      3,
      param.txPower
    ],
    [
      10,
      4,
      param.scannedTimestampMs
    ]
  ];
}
__name(BeaconData, "BeaconData");
function Geolocation(param) {
  return typeof param === "undefined" ? [] : [
    [
      4,
      1,
      param.longitude
    ],
    [
      4,
      2,
      param.latitude
    ],
    [
      12,
      3,
      GeolocationAccuracy(param.accuracy)
    ],
    [
      4,
      4,
      param.altitudeMeters
    ],
    [
      4,
      5,
      param.velocityMetersPerSecond
    ],
    [
      4,
      6,
      param.bearingDegrees
    ],
    [
      15,
      7,
      [
        12,
        param.beaconData && param.beaconData.map((e) => BeaconData(e))
      ]
    ]
  ];
}
__name(Geolocation, "Geolocation");
function Pb1_EnumC12917a6(param) {
  return typeof param === "string" ? enums.Pb1_EnumC12917a6[param] : param;
}
__name(Pb1_EnumC12917a6, "Pb1_EnumC12917a6");
function Pb1_EnumC12998g3(param) {
  return typeof param === "string" ? enums.Pb1_EnumC12998g3[param] : param;
}
__name(Pb1_EnumC12998g3, "Pb1_EnumC12998g3");
function WifiSignal(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.ssid
    ],
    [
      11,
      3,
      param.bssid
    ],
    [
      11,
      4,
      param.wifiStandard
    ],
    [
      4,
      5,
      param.frequency
    ],
    [
      10,
      10,
      param.lastSeenTimestamp
    ],
    [
      8,
      11,
      param.rssi
    ]
  ];
}
__name(WifiSignal, "WifiSignal");
function ClientNetworkStatus(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Pb1_EnumC12998g3(param.networkType)
    ],
    [
      15,
      2,
      [
        12,
        param.wifiSignals && param.wifiSignals.map((e) => WifiSignal(e))
      ]
    ]
  ];
}
__name(ClientNetworkStatus, "ClientNetworkStatus");
function Pb1_F6(param) {
  return typeof param === "string" ? enums.Pb1_F6[param] : param;
}
__name(Pb1_F6, "Pb1_F6");
function PoiInfo(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.poiId
    ],
    [
      8,
      2,
      Pb1_F6(param.poiRealm)
    ]
  ];
}
__name(PoiInfo, "PoiInfo");
function LocationDebugInfo(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      PoiInfo(param.poiInfo)
    ]
  ];
}
__name(LocationDebugInfo, "LocationDebugInfo");
function AvatarProfile(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.version
    ],
    [
      10,
      2,
      param.updatedMillis
    ],
    [
      11,
      3,
      param.thumbnail
    ],
    [
      2,
      4,
      param.usablePublicly
    ]
  ];
}
__name(AvatarProfile, "AvatarProfile");
function Pb1_N6(param) {
  return typeof param === "string" ? enums.Pb1_N6[param] : param;
}
__name(Pb1_N6, "Pb1_N6");
function Pb1_O6(param) {
  return typeof param === "string" ? enums.Pb1_O6[param] : param;
}
__name(Pb1_O6, "Pb1_O6");
function Profile(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.mid
    ],
    [
      11,
      3,
      param.userid
    ],
    [
      11,
      10,
      param.phone
    ],
    [
      11,
      11,
      param.email
    ],
    [
      11,
      12,
      param.regionCode
    ],
    [
      11,
      20,
      param.displayName
    ],
    [
      11,
      21,
      param.phoneticName
    ],
    [
      11,
      22,
      param.pictureStatus
    ],
    [
      11,
      23,
      param.thumbnailUrl
    ],
    [
      11,
      24,
      param.statusMessage
    ],
    [
      2,
      31,
      param.allowSearchByUserid
    ],
    [
      2,
      32,
      param.allowSearchByEmail
    ],
    [
      11,
      33,
      param.picturePath
    ],
    [
      11,
      34,
      param.musicProfile
    ],
    [
      11,
      35,
      param.videoProfile
    ],
    [
      13,
      36,
      [
        11,
        11,
        param.statusMessageContentMetadata
      ]
    ],
    [
      12,
      37,
      AvatarProfile(param.avatarProfile)
    ],
    [
      2,
      38,
      param.nftProfile
    ],
    [
      8,
      39,
      Pb1_N6(param.pictureSource)
    ],
    [
      11,
      40,
      param.profileId
    ],
    [
      8,
      41,
      Pb1_O6(param.profileType)
    ],
    [
      10,
      42,
      param.createdTimeMillis
    ]
  ];
}
__name(Profile, "Profile");
function Pb1_EnumC13009h0(param) {
  return typeof param === "string" ? enums.Pb1_EnumC13009h0[param] : param;
}
__name(Pb1_EnumC13009h0, "Pb1_EnumC13009h0");
function PushRecvReport(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.pushTrackingId
    ],
    [
      10,
      2,
      param.recvTimestamp
    ],
    [
      8,
      3,
      param.battery
    ],
    [
      8,
      4,
      Pb1_EnumC13009h0(param.batteryMode)
    ],
    [
      8,
      5,
      Pb1_EnumC12998g3(param.clientNetworkType)
    ],
    [
      11,
      6,
      param.carrierCode
    ],
    [
      10,
      7,
      param.displayTimestamp
    ]
  ];
}
__name(PushRecvReport, "PushRecvReport");
function ReportRefreshedAccessTokenRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.accessToken
    ]
  ];
}
__name(ReportRefreshedAccessTokenRequest, "ReportRefreshedAccessTokenRequest");
function EmailConfirmationStatus(param) {
  return typeof param === "string" ? enums.EmailConfirmationStatus[param] : param;
}
__name(EmailConfirmationStatus, "EmailConfirmationStatus");
function AccountMigrationPincodeType(param) {
  return typeof param === "string" ? enums.AccountMigrationPincodeType[param] : param;
}
__name(AccountMigrationPincodeType, "AccountMigrationPincodeType");
function Pb1_I6(param) {
  return typeof param === "string" ? enums.Pb1_I6[param] : param;
}
__name(Pb1_I6, "Pb1_I6");
function Pb1_S7(param) {
  return typeof param === "string" ? enums.Pb1_S7[param] : param;
}
__name(Pb1_S7, "Pb1_S7");
function Pb1_M6(param) {
  return typeof param === "string" ? enums.Pb1_M6[param] : param;
}
__name(Pb1_M6, "Pb1_M6");
function Pb1_gd(param) {
  return typeof param === "string" ? enums.Pb1_gd[param] : param;
}
__name(Pb1_gd, "Pb1_gd");
function Settings(param) {
  return typeof param === "undefined" ? [] : [
    [
      2,
      10,
      param.notificationEnable
    ],
    [
      10,
      11,
      param.notificationMuteExpiration
    ],
    [
      2,
      12,
      param.notificationNewMessage
    ],
    [
      2,
      13,
      param.notificationGroupInvitation
    ],
    [
      2,
      14,
      param.notificationShowMessage
    ],
    [
      2,
      15,
      param.notificationIncomingCall
    ],
    [
      11,
      16,
      param.notificationSoundMessage
    ],
    [
      11,
      17,
      param.notificationSoundGroup
    ],
    [
      2,
      18,
      param.notificationDisabledWithSub
    ],
    [
      2,
      19,
      param.notificationPayment
    ],
    [
      2,
      20,
      param.privacySyncContacts
    ],
    [
      2,
      21,
      param.privacySearchByPhoneNumber
    ],
    [
      2,
      22,
      param.privacySearchByUserid
    ],
    [
      2,
      23,
      param.privacySearchByEmail
    ],
    [
      2,
      24,
      param.privacyAllowSecondaryDeviceLogin
    ],
    [
      2,
      25,
      param.privacyProfileImagePostToMyhome
    ],
    [
      2,
      26,
      param.privacyReceiveMessagesFromNotFriend
    ],
    [
      2,
      27,
      param.privacyAgreeUseLineCoinToPaidCall
    ],
    [
      2,
      28,
      param.privacyAgreeUsePaidCall
    ],
    [
      2,
      29,
      param.privacyAllowFriendRequest
    ],
    [
      11,
      30,
      param.contactMyTicket
    ],
    [
      8,
      40,
      IdentityProvider(param.identityProvider)
    ],
    [
      11,
      41,
      param.identityIdentifier
    ],
    [
      13,
      42,
      [
        8,
        11,
        param.snsAccounts
      ]
    ],
    [
      2,
      43,
      param.phoneRegistration
    ],
    [
      8,
      44,
      EmailConfirmationStatus(param.emailConfirmationStatus)
    ],
    [
      8,
      45,
      AccountMigrationPincodeType(param.accountMigrationPincodeType)
    ],
    [
      2,
      46,
      param.enforcedInputAccountMigrationPincode
    ],
    [
      8,
      47,
      AccountMigrationPincodeType(param.securityCenterSettingsType)
    ],
    [
      2,
      48,
      param.allowUnregistrationSecondaryDevice
    ],
    [
      2,
      49,
      param.pwlessPrimaryCredentialRegistration
    ],
    [
      11,
      50,
      param.preferenceLocale
    ],
    [
      13,
      60,
      [
        8,
        11,
        param.customModes
      ]
    ],
    [
      2,
      61,
      param.e2eeEnable
    ],
    [
      2,
      62,
      param.hitokotoBackupRequested
    ],
    [
      2,
      63,
      param.privacyProfileMusicPostToMyhome
    ],
    [
      2,
      65,
      param.privacyAllowNearby
    ],
    [
      10,
      66,
      param.agreementNearbyTime
    ],
    [
      10,
      67,
      param.agreementSquareTime
    ],
    [
      2,
      68,
      param.notificationMention
    ],
    [
      10,
      69,
      param.botUseAgreementAcceptedAt
    ],
    [
      10,
      70,
      param.agreementShakeFunction
    ],
    [
      10,
      71,
      param.agreementMobileContactName
    ],
    [
      2,
      72,
      param.notificationThumbnail
    ],
    [
      10,
      73,
      param.agreementSoundToText
    ],
    [
      11,
      74,
      param.privacyPolicyVersion
    ],
    [
      10,
      75,
      param.agreementAdByWebAccess
    ],
    [
      10,
      76,
      param.agreementPhoneNumberMatching
    ],
    [
      10,
      77,
      param.agreementCommunicationInfo
    ],
    [
      8,
      78,
      Pb1_I6(param.privacySharePersonalInfoToFriends)
    ],
    [
      10,
      79,
      param.agreementThingsWirelessCommunication
    ],
    [
      10,
      80,
      param.agreementGdpr
    ],
    [
      8,
      81,
      Pb1_S7(param.privacyStatusMessageHistory)
    ],
    [
      10,
      82,
      param.agreementProvideLocation
    ],
    [
      10,
      83,
      param.agreementBeacon
    ],
    [
      8,
      85,
      Pb1_M6(param.privacyAllowProfileHistory)
    ],
    [
      10,
      86,
      param.agreementContentsSuggest
    ],
    [
      10,
      87,
      param.agreementContentsSuggestDataCollection
    ],
    [
      8,
      88,
      Pb1_gd(param.privacyAgeResult)
    ],
    [
      2,
      89,
      param.privacyAgeResultReceived
    ],
    [
      10,
      90,
      param.agreementOcrImageCollection
    ],
    [
      2,
      91,
      param.privacyAllowFollow
    ],
    [
      2,
      92,
      param.privacyShowFollowList
    ],
    [
      2,
      93,
      param.notificationBadgeTalkOnly
    ],
    [
      10,
      94,
      param.agreementIcna
    ],
    [
      2,
      95,
      param.notificationReaction
    ],
    [
      10,
      96,
      param.agreementMid
    ],
    [
      2,
      97,
      param.homeNotificationNewFriend
    ],
    [
      2,
      98,
      param.homeNotificationFavoriteFriendUpdate
    ],
    [
      2,
      99,
      param.homeNotificationGroupMemberUpdate
    ],
    [
      2,
      100,
      param.homeNotificationBirthday
    ],
    [
      13,
      101,
      [
        8,
        2,
        param.eapAllowedToConnect
      ]
    ],
    [
      10,
      102,
      param.agreementLineOutUse
    ],
    [
      10,
      103,
      param.agreementLineOutProvideInfo
    ],
    [
      2,
      104,
      param.notificationShowProfileImage
    ],
    [
      10,
      105,
      param.agreementPdpa
    ],
    [
      11,
      106,
      param.agreementLocationVersion
    ],
    [
      2,
      107,
      param.zhdPageAllowedToShow
    ],
    [
      10,
      108,
      param.agreementSnowAiAvatar
    ],
    [
      2,
      109,
      param.eapOnlyAccountTargetCountry
    ],
    [
      10,
      110,
      param.agreementLypPremiumAlbum
    ],
    [
      10,
      112,
      param.agreementLypPremiumAlbumVersion
    ],
    [
      10,
      113,
      param.agreementAlbumUsageData
    ],
    [
      10,
      114,
      param.agreementAlbumUsageDataVersion
    ],
    [
      10,
      115,
      param.agreementLypPremiumBackup
    ],
    [
      10,
      116,
      param.agreementLypPremiumBackupVersion
    ],
    [
      10,
      117,
      param.agreementOaAiAssistant
    ],
    [
      10,
      118,
      param.agreementOaAiAssistantVersion
    ],
    [
      10,
      119,
      param.agreementLypPremiumMultiProfile
    ],
    [
      10,
      120,
      param.agreementLypPremiumMultiProfileVersion
    ]
  ];
}
__name(Settings, "Settings");
function Pb1_od(param) {
  return typeof param === "string" ? enums.Pb1_od[param] : param;
}
__name(Pb1_od, "Pb1_od");
function T70_K(param) {
  return typeof param === "string" ? enums.T70_K[param] : param;
}
__name(T70_K, "T70_K");
function ReqToSendPhonePinCodeRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      12,
      2,
      UserPhoneNumber(param.userPhoneNumber)
    ],
    [
      8,
      3,
      T70_K(param.verifMethod)
    ]
  ];
}
__name(ReqToSendPhonePinCodeRequest, "ReqToSendPhonePinCodeRequest");
function r80_g0(param) {
  return typeof param === "string" ? enums.r80_g0[param] : param;
}
__name(r80_g0, "r80_g0");
function CoinPurchaseReservation(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.productId
    ],
    [
      11,
      2,
      param.country
    ],
    [
      11,
      3,
      param.currency
    ],
    [
      11,
      4,
      param.price
    ],
    [
      8,
      5,
      jO0_EnumC27533B(param.appStoreCode)
    ],
    [
      11,
      6,
      param.language
    ],
    [
      8,
      7,
      jO0_EnumC27559z(param.pgCode)
    ],
    [
      11,
      8,
      param.redirectUrl
    ]
  ];
}
__name(CoinPurchaseReservation, "CoinPurchaseReservation");
function fN0_G(param) {
  return typeof param === "string" ? enums.fN0_G[param] : param;
}
__name(fN0_G, "fN0_G");
function ReserveSubscriptionPurchaseRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.billingItemId
    ],
    [
      8,
      2,
      fN0_G(param.storeCode)
    ],
    [
      2,
      3,
      param.addOaFriend
    ],
    [
      11,
      4,
      param.entryPoint
    ],
    [
      11,
      5,
      param.campaignId
    ],
    [
      11,
      6,
      param.invitationId
    ]
  ];
}
__name(ReserveSubscriptionPurchaseRequest, "ReserveSubscriptionPurchaseRequest");
function ReserveRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.uniqueKey
    ]
  ];
}
__name(ReserveRequest, "ReserveRequest");
function Pb1_C13155r7(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.restoreClaim
    ]
  ];
}
__name(Pb1_C13155r7, "Pb1_C13155r7");
function Pb1_C13183t7(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(Pb1_C13183t7, "Pb1_C13183t7");
function RevokeTokensRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      1,
      [
        11,
        param.accessTokens
      ]
    ]
  ];
}
__name(RevokeTokensRequest, "RevokeTokensRequest");
function StudentInformation(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.schoolName
    ],
    [
      11,
      2,
      param.graduationDate
    ]
  ];
}
__name(StudentInformation, "StudentInformation");
function SaveStudentInformationRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      StudentInformation(param.studentInformation)
    ]
  ];
}
__name(SaveStudentInformationRequest, "SaveStudentInformationRequest");
function SendEncryptedE2EEKeyRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.sessionId
    ]
  ];
}
__name(SendEncryptedE2EEKeyRequest, "SendEncryptedE2EEKeyRequest");
function SendPostbackRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.messageId
    ],
    [
      11,
      2,
      param.url
    ],
    [
      11,
      3,
      param.chatMID
    ],
    [
      11,
      4,
      param.originMID
    ]
  ];
}
__name(SendPostbackRequest, "SendPostbackRequest");
function SetChatHiddenStatusRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.chatMid
    ],
    [
      10,
      3,
      param.lastMessageId
    ],
    [
      2,
      4,
      param.hidden
    ]
  ];
}
__name(SetChatHiddenStatusRequest, "SetChatHiddenStatusRequest");
function SetHashedPasswordRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      11,
      2,
      param.password
    ]
  ];
}
__name(SetHashedPasswordRequest, "SetHashedPasswordRequest");
function SetPasswordRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.sessionId
    ],
    [
      11,
      2,
      param.hashedPassword
    ]
  ];
}
__name(SetPasswordRequest, "SetPasswordRequest");
function Ob1_C12660s1(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(Ob1_C12660s1, "Ob1_C12660s1");
function StartPhotoboothRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.chatMid
    ]
  ];
}
__name(StartPhotoboothRequest, "StartPhotoboothRequest");
function SIMInfo(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.phoneNumber
    ],
    [
      11,
      2,
      param.countryCode
    ]
  ];
}
__name(SIMInfo, "SIMInfo");
function StopBundleSubscriptionRequest(param) {
  return typeof param === "undefined" ? [] : [
    ,
    [
      8,
      2,
      Ob1_K1(param.storeCode)
    ]
  ];
}
__name(StopBundleSubscriptionRequest, "StopBundleSubscriptionRequest");
function Qj_e0(param) {
  return typeof param === "string" ? enums.Qj_e0[param] : param;
}
__name(Qj_e0, "Qj_e0");
function ShareTargetPickerResultRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.ott
    ],
    [
      11,
      2,
      param.liffId
    ],
    [
      8,
      3,
      Qj_e0(param.resultCode)
    ],
    [
      11,
      4,
      param.resultDescription
    ]
  ];
}
__name(ShareTargetPickerResultRequest, "ShareTargetPickerResultRequest");
function SubWindowResultRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.msit
    ],
    [
      11,
      2,
      param.mstVerifier
    ]
  ];
}
__name(SubWindowResultRequest, "SubWindowResultRequest");
function Pb1_EnumC13029i6(param) {
  return typeof param === "string" ? enums.Pb1_EnumC13029i6[param] : param;
}
__name(Pb1_EnumC13029i6, "Pb1_EnumC13029i6");
function ContactModification(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Pb1_EnumC13029i6(param.type)
    ],
    [
      11,
      2,
      param.luid
    ],
    [
      15,
      11,
      [
        11,
        param.phones
      ]
    ],
    [
      15,
      12,
      [
        11,
        param.emails
      ]
    ],
    [
      15,
      13,
      [
        11,
        param.userids
      ]
    ],
    [
      11,
      14,
      param.mobileContactName
    ],
    [
      11,
      15,
      param.phoneticName
    ]
  ];
}
__name(ContactModification, "ContactModification");
function Pb1_J4(param) {
  return typeof param === "string" ? enums.Pb1_J4[param] : param;
}
__name(Pb1_J4, "Pb1_J4");
function SyncRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      1,
      param.lastRevision
    ],
    [
      8,
      2,
      param.count
    ],
    [
      10,
      3,
      param.lastGlobalRevision
    ],
    [
      10,
      4,
      param.lastIndividualRevision
    ],
    [
      8,
      5,
      Pb1_J4(param.fullSyncRequestReason)
    ],
    [
      13,
      6,
      [
        8,
        10,
        param.lastPartialFullSyncs
      ]
    ]
  ];
}
__name(SyncRequest, "SyncRequest");
function Pb1_G4(param) {
  return typeof param === "string" ? enums.Pb1_G4[param] : param;
}
__name(Pb1_G4, "Pb1_G4");
function UnfollowRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      Pb1_A4(param.followMid)
    ]
  ];
}
__name(UnfollowRequest, "UnfollowRequest");
function DeviceUnlinkRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.deviceId
    ]
  ];
}
__name(DeviceUnlinkRequest, "DeviceUnlinkRequest");
function ChannelNotificationSetting(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.channelId
    ],
    [
      11,
      2,
      param.name
    ],
    [
      2,
      3,
      param.notificationReceivable
    ],
    [
      2,
      4,
      param.messageReceivable
    ],
    [
      2,
      5,
      param.showDefault
    ]
  ];
}
__name(ChannelNotificationSetting, "ChannelNotificationSetting");
function ChannelSettings(param) {
  return typeof param === "undefined" ? [] : [
    [
      2,
      1,
      param.unapprovedMessageReceivable
    ]
  ];
}
__name(ChannelSettings, "ChannelSettings");
function GroupExtra(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.creator
    ],
    [
      2,
      2,
      param.preventedJoinByTicket
    ],
    [
      11,
      3,
      param.invitationTicket
    ],
    [
      13,
      4,
      [
        11,
        10,
        param.memberMids
      ]
    ],
    [
      13,
      5,
      [
        11,
        10,
        param.inviteeMids
      ]
    ],
    [
      2,
      6,
      param.addFriendDisabled
    ],
    [
      2,
      7,
      param.ticketDisabled
    ],
    [
      2,
      8,
      param.autoName
    ]
  ];
}
__name(GroupExtra, "GroupExtra");
function Pb1_A6(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(Pb1_A6, "Pb1_A6");
function Pb1_C13208v4(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GroupExtra(param.groupExtra)
    ],
    [
      12,
      2,
      Pb1_A6(param.peerExtra)
    ]
  ];
}
__name(Pb1_C13208v4, "Pb1_C13208v4");
function Chat(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Pb1_Z2(param.type)
    ],
    [
      11,
      2,
      param.chatMid
    ],
    [
      10,
      3,
      param.createdTime
    ],
    [
      2,
      4,
      param.notificationDisabled
    ],
    [
      10,
      5,
      param.favoriteTimestamp
    ],
    [
      11,
      6,
      param.chatName
    ],
    [
      11,
      7,
      param.picturePath
    ],
    [
      12,
      8,
      Pb1_C13208v4(param.extra)
    ]
  ];
}
__name(Chat, "Chat");
function Pb1_O2(param) {
  return typeof param === "string" ? enums.Pb1_O2[param] : param;
}
__name(Pb1_O2, "Pb1_O2");
function UpdateChatRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      12,
      2,
      Chat(param.chat)
    ],
    [
      8,
      3,
      Pb1_O2(param.updatedAttribute)
    ]
  ];
}
__name(UpdateChatRequest, "UpdateChatRequest");
function ContactSetting(param) {
  return typeof param === "string" ? enums.ContactSetting[param] : param;
}
__name(ContactSetting, "ContactSetting");
function Pb1_H6(param) {
  return typeof param === "string" ? enums.Pb1_H6[param] : param;
}
__name(Pb1_H6, "Pb1_H6");
function ExtendedProfileBirthday(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.year
    ],
    [
      8,
      2,
      Pb1_H6(param.yearPrivacyLevelType)
    ],
    [
      2,
      3,
      param.yearEnabled
    ],
    [
      11,
      5,
      param.day
    ],
    [
      8,
      6,
      Pb1_H6(param.dayPrivacyLevelType)
    ],
    [
      2,
      7,
      param.dayEnabled
    ]
  ];
}
__name(ExtendedProfileBirthday, "ExtendedProfileBirthday");
function ExtendedProfile(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ExtendedProfileBirthday(param.birthday)
    ]
  ];
}
__name(ExtendedProfile, "ExtendedProfile");
function Pb1_ad(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.title
    ]
  ];
}
__name(Pb1_ad, "Pb1_ad");
function UpdateGroupCallUrlRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.urlId
    ],
    [
      12,
      2,
      Pb1_ad(param.targetAttribute)
    ]
  ];
}
__name(UpdateGroupCallUrlRequest, "UpdateGroupCallUrlRequest");
function NotificationType(param) {
  return typeof param === "string" ? enums.NotificationType[param] : param;
}
__name(NotificationType, "NotificationType");
function UpdatePasswordRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.sessionId
    ],
    [
      11,
      2,
      param.hashedPassword
    ]
  ];
}
__name(UpdatePasswordRequest, "UpdatePasswordRequest");
function ProfileContent(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.value
    ],
    [
      13,
      2,
      [
        11,
        11,
        param.meta
      ]
    ]
  ];
}
__name(ProfileContent, "ProfileContent");
function UpdateProfileAttributesRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      13,
      1,
      [
        8,
        12,
        map(ProfileContent, param.profileAttributes)
      ]
    ]
  ];
}
__name(UpdateProfileAttributesRequest, "UpdateProfileAttributesRequest");
function vh_m(param) {
  return typeof param === "string" ? enums.vh_m[param] : param;
}
__name(vh_m, "vh_m");
function UpdateSafetyStatusRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.disasterId
    ],
    [
      8,
      2,
      vh_m(param.safetyStatus)
    ],
    [
      11,
      3,
      param.message
    ]
  ];
}
__name(UpdateSafetyStatusRequest, "UpdateSafetyStatusRequest");
function UsePhotoboothTicketRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.chatMid
    ],
    [
      11,
      2,
      param.photoboothSessionId
    ]
  ];
}
__name(UsePhotoboothTicketRequest, "UsePhotoboothTicketRequest");
function r80_EnumC34376p(param) {
  return typeof param === "string" ? enums.r80_EnumC34376p[param] : param;
}
__name(r80_EnumC34376p, "r80_EnumC34376p");
function VerifyAccountUsingHashedPwdRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      12,
      2,
      AccountIdentifier(param.accountIdentifier)
    ],
    [
      11,
      3,
      param.v1HashedPassword
    ],
    [
      11,
      4,
      param.clientHashedPassword
    ]
  ];
}
__name(VerifyAccountUsingHashedPwdRequest, "VerifyAccountUsingHashedPwdRequest");
function VerifyAssertionRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.sessionId
    ],
    [
      11,
      2,
      param.credentialId
    ],
    [
      11,
      3,
      param.assertionObject
    ],
    [
      11,
      4,
      param.clientDataJSON
    ]
  ];
}
__name(VerifyAssertionRequest, "VerifyAssertionRequest");
function VerifyAttestationRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.sessionId
    ],
    [
      11,
      2,
      param.attestationObject
    ],
    [
      11,
      3,
      param.clientDataJSON
    ]
  ];
}
__name(VerifyAttestationRequest, "VerifyAttestationRequest");
function BirthdayGiftAssociationVerifyRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.associationToken
    ]
  ];
}
__name(BirthdayGiftAssociationVerifyRequest, "BirthdayGiftAssociationVerifyRequest");
function T70_j1(param) {
  return typeof param === "string" ? enums.T70_j1[param] : param;
}
__name(T70_j1, "T70_j1");
function SocialLogin(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      T70_j1(param.type)
    ],
    [
      11,
      2,
      param.accessToken
    ],
    [
      11,
      3,
      param.countryCode
    ]
  ];
}
__name(SocialLogin, "SocialLogin");
function a80_EnumC16644b(param) {
  return typeof param === "string" ? enums.a80_EnumC16644b[param] : param;
}
__name(a80_EnumC16644b, "a80_EnumC16644b");
function EapLogin(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      a80_EnumC16644b(param.type)
    ],
    [
      11,
      2,
      param.accessToken
    ],
    [
      11,
      3,
      param.countryCode
    ]
  ];
}
__name(EapLogin, "EapLogin");
function VerifyEapLoginRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      12,
      2,
      EapLogin(param.eapLogin)
    ]
  ];
}
__name(VerifyEapLoginRequest, "VerifyEapLoginRequest");
function VerifyPhonePinCodeRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      12,
      2,
      UserPhoneNumber(param.userPhoneNumber)
    ],
    [
      11,
      3,
      param.pinCode
    ]
  ];
}
__name(VerifyPhonePinCodeRequest, "VerifyPhonePinCodeRequest");
function VerifyPinCodeRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.pinCode
    ]
  ];
}
__name(VerifyPinCodeRequest, "VerifyPinCodeRequest");
function VerifyQrCodeRequest(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      13,
      2,
      [
        11,
        11,
        param.metaData
      ]
    ]
  ];
}
__name(VerifyQrCodeRequest, "VerifyQrCodeRequest");
function acceptChatInvitationByTicket_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      AcceptChatInvitationByTicketRequest(param.request)
    ]
  ];
}
__name(acceptChatInvitationByTicket_args, "acceptChatInvitationByTicket_args");
function acceptChatInvitation_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      AcceptChatInvitationRequest(param.request)
    ]
  ];
}
__name(acceptChatInvitation_args, "acceptChatInvitation_args");
function SquareService_acceptSpeakers_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      AcceptSpeakersRequest(param.request)
    ]
  ];
}
__name(SquareService_acceptSpeakers_args, "SquareService_acceptSpeakers_args");
function SquareService_acceptToChangeRole_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      AcceptToChangeRoleRequest(param.request)
    ]
  ];
}
__name(SquareService_acceptToChangeRole_args, "SquareService_acceptToChangeRole_args");
function SquareService_acceptToListen_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      AcceptToListenRequest(param.request)
    ]
  ];
}
__name(SquareService_acceptToListen_args, "SquareService_acceptToListen_args");
function SquareService_acceptToSpeak_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      AcceptToSpeakRequest(param.request)
    ]
  ];
}
__name(SquareService_acceptToSpeak_args, "SquareService_acceptToSpeak_args");
function SquareService_acquireLiveTalk_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      AcquireLiveTalkRequest(param.request)
    ]
  ];
}
__name(SquareService_acquireLiveTalk_args, "SquareService_acquireLiveTalk_args");
function SquareService_cancelToSpeak_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      CancelToSpeakRequest(param.request)
    ]
  ];
}
__name(SquareService_cancelToSpeak_args, "SquareService_cancelToSpeak_args");
function SquareService_fetchLiveTalkEvents_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      FetchLiveTalkEventsRequest(param.request)
    ]
  ];
}
__name(SquareService_fetchLiveTalkEvents_args, "SquareService_fetchLiveTalkEvents_args");
function SquareService_findLiveTalkByInvitationTicket_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      FindLiveTalkByInvitationTicketRequest(param.request)
    ]
  ];
}
__name(SquareService_findLiveTalkByInvitationTicket_args, "SquareService_findLiveTalkByInvitationTicket_args");
function SquareService_forceEndLiveTalk_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ForceEndLiveTalkRequest(param.request)
    ]
  ];
}
__name(SquareService_forceEndLiveTalk_args, "SquareService_forceEndLiveTalk_args");
function SquareService_getLiveTalkInfoForNonMember_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetLiveTalkInfoForNonMemberRequest(param.request)
    ]
  ];
}
__name(SquareService_getLiveTalkInfoForNonMember_args, "SquareService_getLiveTalkInfoForNonMember_args");
function SquareService_getLiveTalkInvitationUrl_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetLiveTalkInvitationUrlRequest(param.request)
    ]
  ];
}
__name(SquareService_getLiveTalkInvitationUrl_args, "SquareService_getLiveTalkInvitationUrl_args");
function SquareService_getLiveTalkSpeakersForNonMember_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetLiveTalkSpeakersForNonMemberRequest(param.request)
    ]
  ];
}
__name(SquareService_getLiveTalkSpeakersForNonMember_args, "SquareService_getLiveTalkSpeakersForNonMember_args");
function SquareService_getSquareInfoByChatMid_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareInfoByChatMidRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareInfoByChatMid_args, "SquareService_getSquareInfoByChatMid_args");
function SquareService_inviteToChangeRole_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      InviteToChangeRoleRequest(param.request)
    ]
  ];
}
__name(SquareService_inviteToChangeRole_args, "SquareService_inviteToChangeRole_args");
function SquareService_inviteToListen_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      InviteToListenRequest(param.request)
    ]
  ];
}
__name(SquareService_inviteToListen_args, "SquareService_inviteToListen_args");
function SquareService_inviteToLiveTalk_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      InviteToLiveTalkRequest(param.request)
    ]
  ];
}
__name(SquareService_inviteToLiveTalk_args, "SquareService_inviteToLiveTalk_args");
function SquareService_inviteToSpeak_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      InviteToSpeakRequest(param.request)
    ]
  ];
}
__name(SquareService_inviteToSpeak_args, "SquareService_inviteToSpeak_args");
function SquareService_joinLiveTalk_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      JoinLiveTalkRequest(param.request)
    ]
  ];
}
__name(SquareService_joinLiveTalk_args, "SquareService_joinLiveTalk_args");
function SquareService_kickOutLiveTalkParticipants_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      KickOutLiveTalkParticipantsRequest(param.request)
    ]
  ];
}
__name(SquareService_kickOutLiveTalkParticipants_args, "SquareService_kickOutLiveTalkParticipants_args");
function SquareService_rejectSpeakers_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      RejectSpeakersRequest(param.request)
    ]
  ];
}
__name(SquareService_rejectSpeakers_args, "SquareService_rejectSpeakers_args");
function SquareService_rejectToSpeak_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      RejectToSpeakRequest(param.request)
    ]
  ];
}
__name(SquareService_rejectToSpeak_args, "SquareService_rejectToSpeak_args");
function SquareService_removeLiveTalkSubscription_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      RemoveLiveTalkSubscriptionRequest(param.request)
    ]
  ];
}
__name(SquareService_removeLiveTalkSubscription_args, "SquareService_removeLiveTalkSubscription_args");
function SquareService_reportLiveTalk_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ReportLiveTalkRequest(param.request)
    ]
  ];
}
__name(SquareService_reportLiveTalk_args, "SquareService_reportLiveTalk_args");
function SquareService_reportLiveTalkSpeaker_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ReportLiveTalkSpeakerRequest(param.request)
    ]
  ];
}
__name(SquareService_reportLiveTalkSpeaker_args, "SquareService_reportLiveTalkSpeaker_args");
function SquareService_requestToListen_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      RequestToListenRequest(param.request)
    ]
  ];
}
__name(SquareService_requestToListen_args, "SquareService_requestToListen_args");
function SquareService_requestToSpeak_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      RequestToSpeakRequest(param.request)
    ]
  ];
}
__name(SquareService_requestToSpeak_args, "SquareService_requestToSpeak_args");
function SquareService_updateLiveTalkAttrs_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      UpdateLiveTalkAttrsRequest(param.request)
    ]
  ];
}
__name(SquareService_updateLiveTalkAttrs_args, "SquareService_updateLiveTalkAttrs_args");
function acquireCallRoute_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.to
    ],
    [
      8,
      3,
      Pb1_D4(param.callType)
    ],
    [
      13,
      4,
      [
        11,
        11,
        param.fromEnvInfo
      ]
    ]
  ];
}
__name(acquireCallRoute_args, "acquireCallRoute_args");
function acquireEncryptedAccessToken_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      2,
      Pb1_EnumC13222w4(param.featureType)
    ]
  ];
}
__name(acquireEncryptedAccessToken_args, "acquireEncryptedAccessToken_args");
function acquireGroupCallRoute_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.chatMid
    ],
    [
      8,
      3,
      Pb1_EnumC13237x5(param.mediaType)
    ],
    [
      2,
      4,
      param.isInitialHost
    ],
    [
      15,
      5,
      [
        11,
        param.capabilities
      ]
    ]
  ];
}
__name(acquireGroupCallRoute_args, "acquireGroupCallRoute_args");
function acquireOACallRoute_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      AcquireOACallRouteRequest(param.request)
    ]
  ];
}
__name(acquireOACallRoute_args, "acquireOACallRoute_args");
function acquirePaidCallRoute_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      2,
      PaidCallType(param.paidCallType)
    ],
    [
      11,
      3,
      param.dialedNumber
    ],
    [
      11,
      4,
      param.language
    ],
    [
      11,
      5,
      param.networkCode
    ],
    [
      2,
      6,
      param.disableCallerId
    ],
    [
      11,
      7,
      param.referer
    ],
    [
      11,
      8,
      param.adSessionId
    ]
  ];
}
__name(acquirePaidCallRoute_args, "acquirePaidCallRoute_args");
function activateSubscription_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ActivateSubscriptionRequest(param.request)
    ]
  ];
}
__name(activateSubscription_args, "activateSubscription_args");
function adTypeOptOutClickEvent_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      AdTypeOptOutClickEventRequest(param.request)
    ]
  ];
}
__name(adTypeOptOutClickEvent_args, "adTypeOptOutClickEvent_args");
function addFriendByMid_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      AddFriendByMidRequest(param.request)
    ]
  ];
}
__name(addFriendByMid_args, "addFriendByMid_args");
function addItemToCollection_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      AddItemToCollectionRequest(param.request)
    ]
  ];
}
__name(addItemToCollection_args, "addItemToCollection_args");
function addOaFriend_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      NZ0_C12155c(param.request)
    ]
  ];
}
__name(addOaFriend_args, "addOaFriend_args");
function addProductToSubscriptionSlot_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      AddProductToSubscriptionSlotRequest(param.req)
    ]
  ];
}
__name(addProductToSubscriptionSlot_args, "addProductToSubscriptionSlot_args");
function addThemeToSubscriptionSlot_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      AddThemeToSubscriptionSlotRequest(param.req)
    ]
  ];
}
__name(addThemeToSubscriptionSlot_args, "addThemeToSubscriptionSlot_args");
function addToFollowBlacklist_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      AddToFollowBlacklistRequest(param.addToFollowBlacklistRequest)
    ]
  ];
}
__name(addToFollowBlacklist_args, "addToFollowBlacklist_args");
function SquareService_agreeToTerms_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      AgreeToTermsRequest(param.request)
    ]
  ];
}
__name(SquareService_agreeToTerms_args, "SquareService_agreeToTerms_args");
function SquareService_approveSquareMembers_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ApproveSquareMembersRequest(param.request)
    ]
  ];
}
__name(SquareService_approveSquareMembers_args, "SquareService_approveSquareMembers_args");
function SquareService_checkJoinCode_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      CheckJoinCodeRequest(param.request)
    ]
  ];
}
__name(SquareService_checkJoinCode_args, "SquareService_checkJoinCode_args");
function SquareService_createSquareChatAnnouncement_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      CreateSquareChatAnnouncementRequest(param.createSquareChatAnnouncementRequest)
    ]
  ];
}
__name(SquareService_createSquareChatAnnouncement_args, "SquareService_createSquareChatAnnouncement_args");
function SquareService_createSquareChat_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      CreateSquareChatRequest(param.request)
    ]
  ];
}
__name(SquareService_createSquareChat_args, "SquareService_createSquareChat_args");
function SquareService_createSquare_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      CreateSquareRequest(param.request)
    ]
  ];
}
__name(SquareService_createSquare_args, "SquareService_createSquare_args");
function SquareService_deleteSquareChatAnnouncement_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      DeleteSquareChatAnnouncementRequest(param.deleteSquareChatAnnouncementRequest)
    ]
  ];
}
__name(SquareService_deleteSquareChatAnnouncement_args, "SquareService_deleteSquareChatAnnouncement_args");
function SquareService_deleteSquareChat_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      DeleteSquareChatRequest(param.request)
    ]
  ];
}
__name(SquareService_deleteSquareChat_args, "SquareService_deleteSquareChat_args");
function SquareService_deleteSquare_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      DeleteSquareRequest(param.request)
    ]
  ];
}
__name(SquareService_deleteSquare_args, "SquareService_deleteSquare_args");
function SquareService_destroyMessage_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      DestroyMessageRequest(param.request)
    ]
  ];
}
__name(SquareService_destroyMessage_args, "SquareService_destroyMessage_args");
function SquareService_destroyMessages_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      DestroyMessagesRequest(param.request)
    ]
  ];
}
__name(SquareService_destroyMessages_args, "SquareService_destroyMessages_args");
function SquareService_fetchMyEvents_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      FetchMyEventsRequest(param.request)
    ]
  ];
}
__name(SquareService_fetchMyEvents_args, "SquareService_fetchMyEvents_args");
function SquareService_fetchSquareChatEvents_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      FetchSquareChatEventsRequest(param.request)
    ]
  ];
}
__name(SquareService_fetchSquareChatEvents_args, "SquareService_fetchSquareChatEvents_args");
function SquareService_findSquareByEmid_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      FindSquareByEmidRequest(param.findSquareByEmidRequest)
    ]
  ];
}
__name(SquareService_findSquareByEmid_args, "SquareService_findSquareByEmid_args");
function SquareService_findSquareByInvitationTicket_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      FindSquareByInvitationTicketRequest(param.request)
    ]
  ];
}
__name(SquareService_findSquareByInvitationTicket_args, "SquareService_findSquareByInvitationTicket_args");
function SquareService_findSquareByInvitationTicketV2_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      FindSquareByInvitationTicketV2Request(param.request)
    ]
  ];
}
__name(SquareService_findSquareByInvitationTicketV2_args, "SquareService_findSquareByInvitationTicketV2_args");
function SquareService_getGoogleAdOptions_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetGoogleAdOptionsRequest(param.request)
    ]
  ];
}
__name(SquareService_getGoogleAdOptions_args, "SquareService_getGoogleAdOptions_args");
function SquareService_getInvitationTicketUrl_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetInvitationTicketUrlRequest(param.request)
    ]
  ];
}
__name(SquareService_getInvitationTicketUrl_args, "SquareService_getInvitationTicketUrl_args");
function SquareService_getJoinableSquareChats_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetJoinableSquareChatsRequest(param.request)
    ]
  ];
}
__name(SquareService_getJoinableSquareChats_args, "SquareService_getJoinableSquareChats_args");
function SquareService_getJoinedSquareChats_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetJoinedSquareChatsRequest(param.request)
    ]
  ];
}
__name(SquareService_getJoinedSquareChats_args, "SquareService_getJoinedSquareChats_args");
function SquareService_getJoinedSquares_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetJoinedSquaresRequest(param.request)
    ]
  ];
}
__name(SquareService_getJoinedSquares_args, "SquareService_getJoinedSquares_args");
function SquareService_getMessageReactions_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetMessageReactionsRequest(param.request)
    ]
  ];
}
__name(SquareService_getMessageReactions_args, "SquareService_getMessageReactions_args");
function SquareService_getNoteStatus_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetNoteStatusRequest(param.request)
    ]
  ];
}
__name(SquareService_getNoteStatus_args, "SquareService_getNoteStatus_args");
function SquareService_getPopularKeywords_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetPopularKeywordsRequest(param.request)
    ]
  ];
}
__name(SquareService_getPopularKeywords_args, "SquareService_getPopularKeywords_args");
function SquareService_getSquareAuthorities_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareAuthoritiesRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareAuthorities_args, "SquareService_getSquareAuthorities_args");
function SquareService_getSquareAuthority_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareAuthorityRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareAuthority_args, "SquareService_getSquareAuthority_args");
function SquareService_getCategories_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareCategoriesRequest(param.request)
    ]
  ];
}
__name(SquareService_getCategories_args, "SquareService_getCategories_args");
function SquareService_getSquareChatAnnouncements_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareChatAnnouncementsRequest(param.getSquareChatAnnouncementsRequest)
    ]
  ];
}
__name(SquareService_getSquareChatAnnouncements_args, "SquareService_getSquareChatAnnouncements_args");
function SquareService_getSquareChatEmid_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareChatEmidRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareChatEmid_args, "SquareService_getSquareChatEmid_args");
function SquareService_getSquareChatFeatureSet_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareChatFeatureSetRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareChatFeatureSet_args, "SquareService_getSquareChatFeatureSet_args");
function SquareService_getSquareChatMember_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareChatMemberRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareChatMember_args, "SquareService_getSquareChatMember_args");
function SquareService_getSquareChatMembers_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareChatMembersRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareChatMembers_args, "SquareService_getSquareChatMembers_args");
function SquareService_getSquareChat_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareChatRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareChat_args, "SquareService_getSquareChat_args");
function SquareService_getSquareChatStatus_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareChatStatusRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareChatStatus_args, "SquareService_getSquareChatStatus_args");
function SquareService_getSquareEmid_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareEmidRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareEmid_args, "SquareService_getSquareEmid_args");
function SquareService_getSquareFeatureSet_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareFeatureSetRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareFeatureSet_args, "SquareService_getSquareFeatureSet_args");
function SquareService_getSquareMemberRelation_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareMemberRelationRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareMemberRelation_args, "SquareService_getSquareMemberRelation_args");
function SquareService_getSquareMemberRelations_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareMemberRelationsRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareMemberRelations_args, "SquareService_getSquareMemberRelations_args");
function SquareService_getSquareMember_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareMemberRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareMember_args, "SquareService_getSquareMember_args");
function SquareService_getSquareMembersBySquare_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareMembersBySquareRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareMembersBySquare_args, "SquareService_getSquareMembersBySquare_args");
function SquareService_getSquareMembers_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareMembersRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareMembers_args, "SquareService_getSquareMembers_args");
function SquareService_getSquare_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquare_args, "SquareService_getSquare_args");
function SquareService_getSquareStatus_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareStatusRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareStatus_args, "SquareService_getSquareStatus_args");
function SquareService_getSquareThreadMid_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareThreadMidRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareThreadMid_args, "SquareService_getSquareThreadMid_args");
function SquareService_getSquareThread_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareThreadRequest(param.request)
    ]
  ];
}
__name(SquareService_getSquareThread_args, "SquareService_getSquareThread_args");
function SquareService_getUserSettings_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetUserSettingsRequest(param.request)
    ]
  ];
}
__name(SquareService_getUserSettings_args, "SquareService_getUserSettings_args");
function SquareService_hideSquareMemberContents_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      HideSquareMemberContentsRequest(param.request)
    ]
  ];
}
__name(SquareService_hideSquareMemberContents_args, "SquareService_hideSquareMemberContents_args");
function SquareService_inviteIntoSquareChat_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      InviteIntoSquareChatRequest(param.request)
    ]
  ];
}
__name(SquareService_inviteIntoSquareChat_args, "SquareService_inviteIntoSquareChat_args");
function SquareService_inviteToSquare_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      InviteToSquareRequest(param.request)
    ]
  ];
}
__name(SquareService_inviteToSquare_args, "SquareService_inviteToSquare_args");
function SquareService_joinSquareChat_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      JoinSquareChatRequest(param.request)
    ]
  ];
}
__name(SquareService_joinSquareChat_args, "SquareService_joinSquareChat_args");
function SquareService_joinSquare_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      JoinSquareRequest(param.request)
    ]
  ];
}
__name(SquareService_joinSquare_args, "SquareService_joinSquare_args");
function SquareService_joinSquareThread_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      JoinSquareThreadRequest(param.request)
    ]
  ];
}
__name(SquareService_joinSquareThread_args, "SquareService_joinSquareThread_args");
function SquareService_leaveSquareChat_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      LeaveSquareChatRequest(param.request)
    ]
  ];
}
__name(SquareService_leaveSquareChat_args, "SquareService_leaveSquareChat_args");
function SquareService_leaveSquare_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      LeaveSquareRequest(param.request)
    ]
  ];
}
__name(SquareService_leaveSquare_args, "SquareService_leaveSquare_args");
function SquareService_leaveSquareThread_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      LeaveSquareThreadRequest(param.request)
    ]
  ];
}
__name(SquareService_leaveSquareThread_args, "SquareService_leaveSquareThread_args");
function SquareService_manualRepair_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ManualRepairRequest(param.request)
    ]
  ];
}
__name(SquareService_manualRepair_args, "SquareService_manualRepair_args");
function SquareService_markAsRead_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      MarkAsReadRequest(param.request)
    ]
  ];
}
__name(SquareService_markAsRead_args, "SquareService_markAsRead_args");
function SquareService_markChatsAsRead_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      MarkChatsAsReadRequest(param.request)
    ]
  ];
}
__name(SquareService_markChatsAsRead_args, "SquareService_markChatsAsRead_args");
function SquareService_markThreadsAsRead_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      MarkThreadsAsReadRequest(param.request)
    ]
  ];
}
__name(SquareService_markThreadsAsRead_args, "SquareService_markThreadsAsRead_args");
function SquareService_reactToMessage_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ReactToMessageRequest(param.request)
    ]
  ];
}
__name(SquareService_reactToMessage_args, "SquareService_reactToMessage_args");
function SquareService_refreshSubscriptions_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      RefreshSubscriptionsRequest(param.request)
    ]
  ];
}
__name(SquareService_refreshSubscriptions_args, "SquareService_refreshSubscriptions_args");
function SquareService_rejectSquareMembers_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      RejectSquareMembersRequest(param.request)
    ]
  ];
}
__name(SquareService_rejectSquareMembers_args, "SquareService_rejectSquareMembers_args");
function SquareService_removeSubscriptions_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      RemoveSubscriptionsRequest(param.request)
    ]
  ];
}
__name(SquareService_removeSubscriptions_args, "SquareService_removeSubscriptions_args");
function SquareService_reportMessageSummary_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ReportMessageSummaryRequest(param.request)
    ]
  ];
}
__name(SquareService_reportMessageSummary_args, "SquareService_reportMessageSummary_args");
function SquareService_reportSquareChat_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ReportSquareChatRequest(param.request)
    ]
  ];
}
__name(SquareService_reportSquareChat_args, "SquareService_reportSquareChat_args");
function SquareService_reportSquareMember_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ReportSquareMemberRequest(param.request)
    ]
  ];
}
__name(SquareService_reportSquareMember_args, "SquareService_reportSquareMember_args");
function SquareService_reportSquareMessage_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ReportSquareMessageRequest(param.request)
    ]
  ];
}
__name(SquareService_reportSquareMessage_args, "SquareService_reportSquareMessage_args");
function SquareService_reportSquare_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ReportSquareRequest(param.request)
    ]
  ];
}
__name(SquareService_reportSquare_args, "SquareService_reportSquare_args");
function SquareService_searchSquareChatMembers_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      SearchSquareChatMembersRequest(param.request)
    ]
  ];
}
__name(SquareService_searchSquareChatMembers_args, "SquareService_searchSquareChatMembers_args");
function SquareService_searchSquareChatMentionables_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      SearchSquareChatMentionablesRequest(param.request)
    ]
  ];
}
__name(SquareService_searchSquareChatMentionables_args, "SquareService_searchSquareChatMentionables_args");
function SquareService_searchSquareMembers_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      SearchSquareMembersRequest(param.request)
    ]
  ];
}
__name(SquareService_searchSquareMembers_args, "SquareService_searchSquareMembers_args");
function SquareService_searchSquares_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      SearchSquaresRequest(param.request)
    ]
  ];
}
__name(SquareService_searchSquares_args, "SquareService_searchSquares_args");
function SquareService_sendMessage_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      SendMessageRequest(param.request)
    ]
  ];
}
__name(SquareService_sendMessage_args, "SquareService_sendMessage_args");
function SquareService_sendSquareThreadMessage_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      SendSquareThreadMessageRequest(param.request)
    ]
  ];
}
__name(SquareService_sendSquareThreadMessage_args, "SquareService_sendSquareThreadMessage_args");
function SquareService_syncSquareMembers_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      SyncSquareMembersRequest(param.request)
    ]
  ];
}
__name(SquareService_syncSquareMembers_args, "SquareService_syncSquareMembers_args");
function SquareService_unhideSquareMemberContents_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      UnhideSquareMemberContentsRequest(param.request)
    ]
  ];
}
__name(SquareService_unhideSquareMemberContents_args, "SquareService_unhideSquareMemberContents_args");
function SquareService_unsendMessage_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      UnsendMessageRequest(param.request)
    ]
  ];
}
__name(SquareService_unsendMessage_args, "SquareService_unsendMessage_args");
function SquareService_updateSquareAuthority_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      UpdateSquareAuthorityRequest(param.request)
    ]
  ];
}
__name(SquareService_updateSquareAuthority_args, "SquareService_updateSquareAuthority_args");
function SquareService_updateSquareChatMember_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      UpdateSquareChatMemberRequest(param.request)
    ]
  ];
}
__name(SquareService_updateSquareChatMember_args, "SquareService_updateSquareChatMember_args");
function SquareService_updateSquareChat_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      UpdateSquareChatRequest(param.request)
    ]
  ];
}
__name(SquareService_updateSquareChat_args, "SquareService_updateSquareChat_args");
function SquareService_updateSquareFeatureSet_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      UpdateSquareFeatureSetRequest(param.request)
    ]
  ];
}
__name(SquareService_updateSquareFeatureSet_args, "SquareService_updateSquareFeatureSet_args");
function SquareService_updateSquareMemberRelation_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      UpdateSquareMemberRelationRequest(param.request)
    ]
  ];
}
__name(SquareService_updateSquareMemberRelation_args, "SquareService_updateSquareMemberRelation_args");
function SquareService_updateSquareMember_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      UpdateSquareMemberRequest(param.request)
    ]
  ];
}
__name(SquareService_updateSquareMember_args, "SquareService_updateSquareMember_args");
function SquareService_updateSquareMembers_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      UpdateSquareMembersRequest(param.request)
    ]
  ];
}
__name(SquareService_updateSquareMembers_args, "SquareService_updateSquareMembers_args");
function SquareService_updateSquare_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      UpdateSquareRequest(param.request)
    ]
  ];
}
__name(SquareService_updateSquare_args, "SquareService_updateSquare_args");
function SquareService_updateUserSettings_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      UpdateUserSettingsRequest(param.request)
    ]
  ];
}
__name(SquareService_updateUserSettings_args, "SquareService_updateUserSettings_args");
function approveChannelAndIssueChannelToken_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.channelId
    ]
  ];
}
__name(approveChannelAndIssueChannelToken_args, "approveChannelAndIssueChannelToken_args");
function authenticateUsingBankAccountEx_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      r80_EnumC34362b(param.type)
    ],
    [
      11,
      2,
      param.bankId
    ],
    [
      11,
      3,
      param.bankBranchId
    ],
    [
      11,
      4,
      param.realAccountNo
    ],
    [
      8,
      5,
      r80_EnumC34361a(param.accountProductCode)
    ],
    [
      11,
      6,
      param.authToken
    ]
  ];
}
__name(authenticateUsingBankAccountEx_args, "authenticateUsingBankAccountEx_args");
function authenticateWithPaak_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      AuthenticateWithPaakRequest(param.request)
    ]
  ];
}
__name(authenticateWithPaak_args, "authenticateWithPaak_args");
function blockContact_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.id
    ]
  ];
}
__name(blockContact_args, "blockContact_args");
function blockRecommendation_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.targetMid
    ]
  ];
}
__name(blockRecommendation_args, "blockRecommendation_args");
function bulkFollow_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      BulkFollowRequest(param.bulkFollowRequest)
    ]
  ];
}
__name(bulkFollow_args, "bulkFollow_args");
function bulkGetSetting_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      BulkGetRequest(param.request)
    ]
  ];
}
__name(bulkGetSetting_args, "bulkGetSetting_args");
function bulkSetSetting_args(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(bulkSetSetting_args, "bulkSetSetting_args");
function buyMustbuyProduct_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      BuyMustbuyRequest(param.request)
    ]
  ];
}
__name(buyMustbuyProduct_args, "buyMustbuyProduct_args");
function canCreateCombinationSticker_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      CanCreateCombinationStickerRequest(param.request)
    ]
  ];
}
__name(canCreateCombinationSticker_args, "canCreateCombinationSticker_args");
function canReceivePresent_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.shopId
    ],
    [
      11,
      3,
      param.productId
    ],
    [
      12,
      4,
      Locale(param.locale)
    ],
    [
      11,
      5,
      param.recipientMid
    ]
  ];
}
__name(canReceivePresent_args, "canReceivePresent_args");
function cancelChatInvitation_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      CancelChatInvitationRequest(param.request)
    ]
  ];
}
__name(cancelChatInvitation_args, "cancelChatInvitation_args");
function cancelPaakAuth_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      CancelPaakAuthRequest(param.request)
    ]
  ];
}
__name(cancelPaakAuth_args, "cancelPaakAuth_args");
function cancelPaakAuthentication_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      CancelPaakAuthenticationRequest(param.request)
    ]
  ];
}
__name(cancelPaakAuthentication_args, "cancelPaakAuthentication_args");
function cancelPinCode_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      CancelPinCodeRequest(param.request)
    ]
  ];
}
__name(cancelPinCode_args, "cancelPinCode_args");
function cancelReaction_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      CancelReactionRequest(param.cancelReactionRequest)
    ]
  ];
}
__name(cancelReaction_args, "cancelReaction_args");
function changeSubscription_args(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(changeSubscription_args, "changeSubscription_args");
function changeVerificationMethod_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.sessionId
    ],
    [
      8,
      3,
      VerificationMethod(param.method)
    ]
  ];
}
__name(changeVerificationMethod_args, "changeVerificationMethod_args");
function checkCanUnregisterEx_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      r80_n0(param.type)
    ]
  ];
}
__name(checkCanUnregisterEx_args, "checkCanUnregisterEx_args");
function checkEmailAssigned_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      12,
      2,
      AccountIdentifier(param.accountIdentifier)
    ]
  ];
}
__name(checkEmailAssigned_args, "checkEmailAssigned_args");
function checkIfEncryptedE2EEKeyReceived_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      CheckIfEncryptedE2EEKeyReceivedRequest(param.request)
    ]
  ];
}
__name(checkIfEncryptedE2EEKeyReceived_args, "checkIfEncryptedE2EEKeyReceived_args");
function checkIfPasswordSetVerificationEmailVerified_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ]
  ];
}
__name(checkIfPasswordSetVerificationEmailVerified_args, "checkIfPasswordSetVerificationEmailVerified_args");
function checkIfPhonePinCodeMsgVerified_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      CheckIfPhonePinCodeMsgVerifiedRequest(param.request)
    ]
  ];
}
__name(checkIfPhonePinCodeMsgVerified_args, "checkIfPhonePinCodeMsgVerified_args");
function checkOperationTimeEx_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      r80_EnumC34368h(param.type)
    ],
    [
      11,
      2,
      param.lpAccountNo
    ],
    [
      8,
      3,
      r80_EnumC34371k(param.channelType)
    ]
  ];
}
__name(checkOperationTimeEx_args, "checkOperationTimeEx_args");
function checkUserAgeAfterApprovalWithDocomoV2_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      CheckUserAgeAfterApprovalWithDocomoV2Request(param.request)
    ]
  ];
}
__name(checkUserAgeAfterApprovalWithDocomoV2_args, "checkUserAgeAfterApprovalWithDocomoV2_args");
function checkUserAgeWithDocomoV2_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      CheckUserAgeWithDocomoV2Request(param.request)
    ]
  ];
}
__name(checkUserAgeWithDocomoV2_args, "checkUserAgeWithDocomoV2_args");
function checkUserAge_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      2,
      CarrierCode(param.carrier)
    ],
    [
      11,
      3,
      param.sessionId
    ],
    [
      11,
      4,
      param.verifier
    ],
    [
      8,
      5,
      param.standardAge
    ]
  ];
}
__name(checkUserAge_args, "checkUserAge_args");
function clearRingtone_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.oid
    ]
  ];
}
__name(clearRingtone_args, "clearRingtone_args");
function confirmIdentifier_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.authSessionId
    ],
    [
      12,
      3,
      IdentityCredentialRequest(param.request)
    ]
  ];
}
__name(confirmIdentifier_args, "confirmIdentifier_args");
function connectEapAccount_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ConnectEapAccountRequest(param.request)
    ]
  ];
}
__name(connectEapAccount_args, "connectEapAccount_args");
function createChatRoomAnnouncement_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.chatRoomMid
    ],
    [
      8,
      3,
      Pb1_X2(param.type)
    ],
    [
      12,
      4,
      ChatRoomAnnouncementContents(param.contents)
    ]
  ];
}
__name(createChatRoomAnnouncement_args, "createChatRoomAnnouncement_args");
function createChat_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      CreateChatRequest(param.request)
    ]
  ];
}
__name(createChat_args, "createChat_args");
function createCollectionForUser_args(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(createCollectionForUser_args, "createCollectionForUser_args");
function createCombinationSticker_args(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(createCombinationSticker_args, "createCombinationSticker_args");
function createE2EEKeyBackupEnforced_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      Pb1_C13263z3(param.request)
    ]
  ];
}
__name(createE2EEKeyBackupEnforced_args, "createE2EEKeyBackupEnforced_args");
function createGroupCallUrl_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      CreateGroupCallUrlRequest(param.request)
    ]
  ];
}
__name(createGroupCallUrl_args, "createGroupCallUrl_args");
function createLifetimeKeyBackup_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      Pb1_E3(param.request)
    ]
  ];
}
__name(createLifetimeKeyBackup_args, "createLifetimeKeyBackup_args");
function createMultiProfile_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      CreateMultiProfileRequest(param.request)
    ]
  ];
}
__name(createMultiProfile_args, "createMultiProfile_args");
function createRoomV2_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      15,
      2,
      [
        11,
        param.contactIds
      ]
    ]
  ];
}
__name(createRoomV2_args, "createRoomV2_args");
function createSession_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      h80_C25643c(param.request)
    ]
  ];
}
__name(createSession_args, "createSession_args");
function decryptFollowEMid_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.eMid
    ]
  ];
}
__name(decryptFollowEMid_args, "decryptFollowEMid_args");
function deleteE2EEKeyBackup_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      Pb1_H3(param.request)
    ]
  ];
}
__name(deleteE2EEKeyBackup_args, "deleteE2EEKeyBackup_args");
function deleteGroupCallUrl_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      DeleteGroupCallUrlRequest(param.request)
    ]
  ];
}
__name(deleteGroupCallUrl_args, "deleteGroupCallUrl_args");
function deleteMultiProfile_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      DeleteMultiProfileRequest(param.request)
    ]
  ];
}
__name(deleteMultiProfile_args, "deleteMultiProfile_args");
function deleteOtherFromChat_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      DeleteOtherFromChatRequest(param.request)
    ]
  ];
}
__name(deleteOtherFromChat_args, "deleteOtherFromChat_args");
function deletePrimaryCredential_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      R70_c(param.request)
    ]
  ];
}
__name(deletePrimaryCredential_args, "deletePrimaryCredential_args");
function deleteSafetyStatus_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      DeleteSafetyStatusRequest(param.req)
    ]
  ];
}
__name(deleteSafetyStatus_args, "deleteSafetyStatus_args");
function deleteSelfFromChat_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      DeleteSelfFromChatRequest(param.request)
    ]
  ];
}
__name(deleteSelfFromChat_args, "deleteSelfFromChat_args");
function determineMediaMessageFlow_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      DetermineMediaMessageFlowRequest(param.request)
    ]
  ];
}
__name(determineMediaMessageFlow_args, "determineMediaMessageFlow_args");
function disconnectEapAccount_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      DisconnectEapAccountRequest(param.request)
    ]
  ];
}
__name(disconnectEapAccount_args, "disconnectEapAccount_args");
function editItemsInCollection_args(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(editItemsInCollection_args, "editItemsInCollection_args");
function enablePointForOneTimeKey_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      2,
      1,
      param.usePoint
    ]
  ];
}
__name(enablePointForOneTimeKey_args, "enablePointForOneTimeKey_args");
function establishE2EESession_args(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(establishE2EESession_args, "establishE2EESession_args");
function existPinCode_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      S70_b(param.request)
    ]
  ];
}
__name(existPinCode_args, "existPinCode_args");
function fetchOperations_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      FetchOperationsRequest(param.request)
    ]
  ];
}
__name(fetchOperations_args, "fetchOperations_args");
function fetchPhonePinCodeMsg_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      FetchPhonePinCodeMsgRequest(param.request)
    ]
  ];
}
__name(fetchPhonePinCodeMsg_args, "fetchPhonePinCodeMsg_args");
function findBuddyContactsByQuery_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.language
    ],
    [
      11,
      3,
      param.country
    ],
    [
      11,
      4,
      param.query
    ],
    [
      8,
      5,
      param.fromIndex
    ],
    [
      8,
      6,
      param.count
    ],
    [
      8,
      7,
      Pb1_F0(param.requestSource)
    ]
  ];
}
__name(findBuddyContactsByQuery_args, "findBuddyContactsByQuery_args");
function findChatByTicket_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      FindChatByTicketRequest(param.request)
    ]
  ];
}
__name(findChatByTicket_args, "findChatByTicket_args");
function findContactByUserTicket_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.ticketIdWithTag
    ]
  ];
}
__name(findContactByUserTicket_args, "findContactByUserTicket_args");
function findContactByUserid_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.searchId
    ]
  ];
}
__name(findContactByUserid_args, "findContactByUserid_args");
function findContactsByPhone_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      2,
      [
        11,
        param.phones
      ]
    ]
  ];
}
__name(findContactsByPhone_args, "findContactsByPhone_args");
function finishUpdateVerification_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.sessionId
    ]
  ];
}
__name(finishUpdateVerification_args, "finishUpdateVerification_args");
function follow_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      FollowRequest(param.followRequest)
    ]
  ];
}
__name(follow_args, "follow_args");
function generateUserTicket_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      3,
      param.expirationTime
    ],
    [
      8,
      4,
      param.maxUseCount
    ]
  ];
}
__name(generateUserTicket_args, "generateUserTicket_args");
function getAccessToken_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetAccessTokenRequest(param.request)
    ]
  ];
}
__name(getAccessToken_args, "getAccessToken_args");
function getAccountBalanceAsync_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.requestToken
    ],
    [
      11,
      2,
      param.accountId
    ]
  ];
}
__name(getAccountBalanceAsync_args, "getAccountBalanceAsync_args");
function getAcctVerifMethod_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      12,
      2,
      AccountIdentifier(param.accountIdentifier)
    ]
  ];
}
__name(getAcctVerifMethod_args, "getAcctVerifMethod_args");
function getAllChatMids_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetAllChatMidsRequest(param.request)
    ],
    [
      8,
      2,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(getAllChatMids_args, "getAllChatMids_args");
function getAllContactIds_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(getAllContactIds_args, "getAllContactIds_args");
function getAllowedRegistrationMethod_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      11,
      2,
      param.countryCode
    ]
  ];
}
__name(getAllowedRegistrationMethod_args, "getAllowedRegistrationMethod_args");
function getApprovedChannels_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      2,
      param.lastSynced
    ],
    [
      11,
      3,
      param.locale
    ]
  ];
}
__name(getApprovedChannels_args, "getApprovedChannels_args");
function getAssertionChallenge_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      m80_l(param.request)
    ]
  ];
}
__name(getAssertionChallenge_args, "getAssertionChallenge_args");
function getAttestationChallenge_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      m80_n(param.request)
    ]
  ];
}
__name(getAttestationChallenge_args, "getAttestationChallenge_args");
function getAuthRSAKey_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.authSessionId
    ],
    [
      8,
      3,
      IdentityProvider(param.identityProvider)
    ]
  ];
}
__name(getAuthRSAKey_args, "getAuthRSAKey_args");
function getAuthorsLatestProducts_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      LatestProductsByAuthorRequest(param.latestProductsByAuthorRequest)
    ]
  ];
}
__name(getAuthorsLatestProducts_args, "getAuthorsLatestProducts_args");
function getAutoSuggestionShowcase_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      AutoSuggestionShowcaseRequest(param.autoSuggestionShowcaseRequest)
    ]
  ];
}
__name(getAutoSuggestionShowcase_args, "getAutoSuggestionShowcase_args");
function getBalanceSummaryV2_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      NZ0_C12208u(param.request)
    ]
  ];
}
__name(getBalanceSummaryV2_args, "getBalanceSummaryV2_args");
function getBalanceSummaryV4WithPayV3_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      NZ0_C12214w(param.request)
    ]
  ];
}
__name(getBalanceSummaryV4WithPayV3_args, "getBalanceSummaryV4WithPayV3_args");
function getBalance_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ZQ0_b(param.request)
    ]
  ];
}
__name(getBalance_args, "getBalance_args");
function getBankBranches_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.financialCorpId
    ],
    [
      11,
      2,
      param.query
    ],
    [
      8,
      3,
      param.startNum
    ],
    [
      8,
      4,
      param.count
    ]
  ];
}
__name(getBankBranches_args, "getBankBranches_args");
function getBanners_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      BannerRequest(param.request)
    ]
  ];
}
__name(getBanners_args, "getBanners_args");
function getBirthdayEffect_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      Eh_C8933a(param.req)
    ]
  ];
}
__name(getBirthdayEffect_args, "getBirthdayEffect_args");
function getBleDevice_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetBleDeviceRequest(param.request)
    ]
  ];
}
__name(getBleDevice_args, "getBleDevice_args");
function getBlockedContactIds_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(getBlockedContactIds_args, "getBlockedContactIds_args");
function getBlockedRecommendationIds_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(getBlockedRecommendationIds_args, "getBlockedRecommendationIds_args");
function getBrowsingHistory_args(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(getBrowsingHistory_args, "getBrowsingHistory_args");
function getBuddyChatBarV2_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetBuddyChatBarRequest(param.request)
    ]
  ];
}
__name(getBuddyChatBarV2_args, "getBuddyChatBarV2_args");
function getBuddyDetailWithPersonal_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.buddyMid
    ],
    [
      14,
      2,
      [
        8,
        param.attributeSet && param.attributeSet.map((e) => Pb1_D0(e))
      ]
    ]
  ];
}
__name(getBuddyDetailWithPersonal_args, "getBuddyDetailWithPersonal_args");
function getBuddyDetail_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      4,
      param.buddyMid
    ]
  ];
}
__name(getBuddyDetail_args, "getBuddyDetail_args");
function getBuddyLive_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetBuddyLiveRequest(param.request)
    ]
  ];
}
__name(getBuddyLive_args, "getBuddyLive_args");
function getBuddyOnAir_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      4,
      param.buddyMid
    ]
  ];
}
__name(getBuddyOnAir_args, "getBuddyOnAir_args");
function getBuddyStatusBarV2_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetBuddyStatusBarV2Request(param.request)
    ]
  ];
}
__name(getBuddyStatusBarV2_args, "getBuddyStatusBarV2_args");
function getCallStatus_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetCallStatusRequest(param.request)
    ]
  ];
}
__name(getCallStatus_args, "getCallStatus_args");
function getCampaign_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetCampaignRequest(param.request)
    ]
  ];
}
__name(getCampaign_args, "getCampaign_args");
function getChallengeForPaakAuth_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetChallengeForPaakAuthRequest(param.request)
    ]
  ];
}
__name(getChallengeForPaakAuth_args, "getChallengeForPaakAuth_args");
function getChallengeForPrimaryReg_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetChallengeForPrimaryRegRequest(param.request)
    ]
  ];
}
__name(getChallengeForPrimaryReg_args, "getChallengeForPrimaryReg_args");
function getChannelContext_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetChannelContextRequest(param.request)
    ]
  ];
}
__name(getChannelContext_args, "getChannelContext_args");
function getChannelInfo_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.channelId
    ],
    [
      11,
      3,
      param.locale
    ]
  ];
}
__name(getChannelInfo_args, "getChannelInfo_args");
function getChannelNotificationSettings_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.locale
    ]
  ];
}
__name(getChannelNotificationSettings_args, "getChannelNotificationSettings_args");
function getChatEffectMetaList_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      1,
      [
        8,
        param.categories && param.categories.map((e) => Pb1_Q2(e))
      ]
    ]
  ];
}
__name(getChatEffectMetaList_args, "getChatEffectMetaList_args");
function getChatRoomAnnouncementsBulk_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      2,
      [
        11,
        param.chatRoomMids
      ]
    ],
    [
      8,
      3,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(getChatRoomAnnouncementsBulk_args, "getChatRoomAnnouncementsBulk_args");
function getChatRoomAnnouncements_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.chatRoomMid
    ]
  ];
}
__name(getChatRoomAnnouncements_args, "getChatRoomAnnouncements_args");
function getChatRoomBGMs_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      2,
      [
        11,
        param.chatRoomMids
      ]
    ],
    [
      8,
      3,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(getChatRoomBGMs_args, "getChatRoomBGMs_args");
function getChatapp_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetChatappRequest(param.request)
    ]
  ];
}
__name(getChatapp_args, "getChatapp_args");
function getChats_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetChatsRequest(param.request)
    ],
    [
      8,
      2,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(getChats_args, "getChats_args");
function getCoinProducts_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetCoinProductsRequest(param.request)
    ]
  ];
}
__name(getCoinProducts_args, "getCoinProducts_args");
function getCoinPurchaseHistory_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetCoinHistoryRequest(param.request)
    ]
  ];
}
__name(getCoinPurchaseHistory_args, "getCoinPurchaseHistory_args");
function getCoinUseAndRefundHistory_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetCoinHistoryRequest(param.request)
    ]
  ];
}
__name(getCoinUseAndRefundHistory_args, "getCoinUseAndRefundHistory_args");
function getCommonDomains_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      1,
      param.lastSynced
    ]
  ];
}
__name(getCommonDomains_args, "getCommonDomains_args");
function getConfigurations_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      2,
      param.revision
    ],
    [
      11,
      3,
      param.regionOfUsim
    ],
    [
      11,
      4,
      param.regionOfTelephone
    ],
    [
      11,
      5,
      param.regionOfLocale
    ],
    [
      11,
      6,
      param.carrier
    ],
    [
      8,
      7,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(getConfigurations_args, "getConfigurations_args");
function getContactCalendarEvents_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetContactCalendarEventsRequest(param.request)
    ]
  ];
}
__name(getContactCalendarEvents_args, "getContactCalendarEvents_args");
function getContactsV3_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetContactsV3Request(param.request)
    ]
  ];
}
__name(getContactsV3_args, "getContactsV3_args");
function getCountries_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      2,
      Pb1_EnumC13221w3(param.countryGroup)
    ]
  ];
}
__name(getCountries_args, "getCountries_args");
function getCountryInfo_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      12,
      11,
      SimCard(param.simCard)
    ]
  ];
}
__name(getCountryInfo_args, "getCountryInfo_args");
function getDataRetention_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      fN0_C24473e(param.req)
    ]
  ];
}
__name(getDataRetention_args, "getDataRetention_args");
function getDestinationUrl_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      DestinationLIFFRequest(param.request)
    ]
  ];
}
__name(getDestinationUrl_args, "getDestinationUrl_args");
function getDisasterCases_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      vh_C37633d(param.req)
    ]
  ];
}
__name(getDisasterCases_args, "getDisasterCases_args");
function getE2EEGroupSharedKey_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      2,
      param.keyVersion
    ],
    [
      11,
      3,
      param.chatMid
    ],
    [
      8,
      4,
      param.groupKeyId
    ]
  ];
}
__name(getE2EEGroupSharedKey_args, "getE2EEGroupSharedKey_args");
function getE2EEKeyBackupCertificates_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      Pb1_W4(param.request)
    ]
  ];
}
__name(getE2EEKeyBackupCertificates_args, "getE2EEKeyBackupCertificates_args");
function getE2EEKeyBackupInfo_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      Pb1_Y4(param.request)
    ]
  ];
}
__name(getE2EEKeyBackupInfo_args, "getE2EEKeyBackupInfo_args");
function getE2EEPublicKey_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.mid
    ],
    [
      8,
      3,
      param.keyVersion
    ],
    [
      8,
      4,
      param.keyId
    ]
  ];
}
__name(getE2EEPublicKey_args, "getE2EEPublicKey_args");
function getExchangeKey_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetExchangeKeyRequest(param.request)
    ]
  ];
}
__name(getExchangeKey_args, "getExchangeKey_args");
function getExtendedProfile_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(getExtendedProfile_args, "getExtendedProfile_args");
function getFollowBlacklist_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      GetFollowBlacklistRequest(param.getFollowBlacklistRequest)
    ]
  ];
}
__name(getFollowBlacklist_args, "getFollowBlacklist_args");
function getFollowers_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      GetFollowersRequest(param.getFollowersRequest)
    ]
  ];
}
__name(getFollowers_args, "getFollowers_args");
function getFollowings_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      GetFollowingsRequest(param.getFollowingsRequest)
    ]
  ];
}
__name(getFollowings_args, "getFollowings_args");
function getFontMetas_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetFontMetasRequest(param.request)
    ]
  ];
}
__name(getFontMetas_args, "getFontMetas_args");
function getFriendDetails_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetFriendDetailsRequest(param.request)
    ]
  ];
}
__name(getFriendDetails_args, "getFriendDetails_args");
function getFriendRequests_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Pb1_F4(param.direction)
    ],
    [
      10,
      2,
      param.lastSeenSeqId
    ]
  ];
}
__name(getFriendRequests_args, "getFriendRequests_args");
function getGnbBadgeStatus_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetGnbBadgeStatusRequest(param.request)
    ]
  ];
}
__name(getGnbBadgeStatus_args, "getGnbBadgeStatus_args");
function getGroupCallUrlInfo_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      GetGroupCallUrlInfoRequest(param.request)
    ]
  ];
}
__name(getGroupCallUrlInfo_args, "getGroupCallUrlInfo_args");
function getGroupCallUrls_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      Pb1_C13042j5(param.request)
    ]
  ];
}
__name(getGroupCallUrls_args, "getGroupCallUrls_args");
function getGroupCall_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.chatMid
    ]
  ];
}
__name(getGroupCall_args, "getGroupCall_args");
function getHomeFlexContent_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetHomeFlexContentRequest(param.request)
    ]
  ];
}
__name(getHomeFlexContent_args, "getHomeFlexContent_args");
function getHomeServiceList_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      Eg_C8928b(param.request)
    ]
  ];
}
__name(getHomeServiceList_args, "getHomeServiceList_args");
function getHomeServices_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetHomeServicesRequest(param.request)
    ]
  ];
}
__name(getHomeServices_args, "getHomeServices_args");
function getIncentiveStatus_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      fN0_C24471c(param.req)
    ]
  ];
}
__name(getIncentiveStatus_args, "getIncentiveStatus_args");
function getInstantNews_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.region
    ],
    [
      12,
      2,
      Location(param.location)
    ]
  ];
}
__name(getInstantNews_args, "getInstantNews_args");
function getJoinedMembershipByBotMid_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetJoinedMembershipByBotMidRequest(param.request)
    ]
  ];
}
__name(getJoinedMembershipByBotMid_args, "getJoinedMembershipByBotMid_args");
function getJoinedMembership_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetJoinedMembershipRequest(param.request)
    ]
  ];
}
__name(getJoinedMembership_args, "getJoinedMembership_args");
function getKeyBackupCertificatesV2_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      Pb1_C13070l5(param.request)
    ]
  ];
}
__name(getKeyBackupCertificatesV2_args, "getKeyBackupCertificatesV2_args");
function getLFLSuggestion_args(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(getLFLSuggestion_args, "getLFLSuggestion_args");
function getLastE2EEGroupSharedKey_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      2,
      param.keyVersion
    ],
    [
      11,
      3,
      param.chatMid
    ]
  ];
}
__name(getLastE2EEGroupSharedKey_args, "getLastE2EEGroupSharedKey_args");
function getLastE2EEPublicKeys_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.chatMid
    ]
  ];
}
__name(getLastE2EEPublicKeys_args, "getLastE2EEPublicKeys_args");
function getLiffViewWithoutUserContext_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      LiffViewWithoutUserContextRequest(param.request)
    ]
  ];
}
__name(getLiffViewWithoutUserContext_args, "getLiffViewWithoutUserContext_args");
function getLineCardIssueForm_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      r80_EnumC34372l(param.resolutionType)
    ]
  ];
}
__name(getLineCardIssueForm_args, "getLineCardIssueForm_args");
function getLoginActorContext_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetLoginActorContextRequest(param.request)
    ]
  ];
}
__name(getLoginActorContext_args, "getLoginActorContext_args");
function getMappedProfileIds_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetMappedProfileIdsRequest(param.request)
    ]
  ];
}
__name(getMappedProfileIds_args, "getMappedProfileIds_args");
function getMaskedEmail_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      12,
      2,
      AccountIdentifier(param.accountIdentifier)
    ]
  ];
}
__name(getMaskedEmail_args, "getMaskedEmail_args");
function getMessageBoxes_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      MessageBoxListRequest(param.messageBoxListRequest)
    ],
    [
      8,
      3,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(getMessageBoxes_args, "getMessageBoxes_args");
function getMessageReadRange_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      2,
      [
        11,
        param.chatIds
      ]
    ],
    [
      8,
      3,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(getMessageReadRange_args, "getMessageReadRange_args");
function getModuleLayoutV4_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetModuleLayoutV4Request(param.request)
    ]
  ];
}
__name(getModuleLayoutV4_args, "getModuleLayoutV4_args");
function getModuleWithStatus_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      NZ0_G(param.request)
    ]
  ];
}
__name(getModuleWithStatus_args, "getModuleWithStatus_args");
function getModule_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      NZ0_E(param.request)
    ]
  ];
}
__name(getModule_args, "getModule_args");
function getModulesV2_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetModulesRequestV2(param.request)
    ]
  ];
}
__name(getModulesV2_args, "getModulesV2_args");
function getModulesV3_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetModulesRequestV3(param.request)
    ]
  ];
}
__name(getModulesV3_args, "getModulesV3_args");
function getModulesV4WithStatus_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetModulesV4WithStatusRequest(param.request)
    ]
  ];
}
__name(getModulesV4WithStatus_args, "getModulesV4WithStatus_args");
function getMusicSubscriptionStatus_args(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(getMusicSubscriptionStatus_args, "getMusicSubscriptionStatus_args");
function getMyAssetInformationV2_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetMyAssetInformationV2Request(param.request)
    ]
  ];
}
__name(getMyAssetInformationV2_args, "getMyAssetInformationV2_args");
function getMyChatapps_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetMyChatappsRequest(param.request)
    ]
  ];
}
__name(getMyChatapps_args, "getMyChatapps_args");
function getMyDashboard_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetMyDashboardRequest(param.request)
    ]
  ];
}
__name(getMyDashboard_args, "getMyDashboard_args");
function getNewlyReleasedBuddyIds_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      3,
      param.country
    ]
  ];
}
__name(getNewlyReleasedBuddyIds_args, "getNewlyReleasedBuddyIds_args");
function getNotificationSettings_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetNotificationSettingsRequest(param.request)
    ]
  ];
}
__name(getNotificationSettings_args, "getNotificationSettings_args");
function getOwnedProductSummaries_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.shopId
    ],
    [
      8,
      3,
      param.offset
    ],
    [
      8,
      4,
      param.limit
    ],
    [
      12,
      5,
      Locale(param.locale)
    ]
  ];
}
__name(getOwnedProductSummaries_args, "getOwnedProductSummaries_args");
function getPasswordHashingParameter_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetPasswordHashingParametersRequest(param.request)
    ]
  ];
}
__name(getPasswordHashingParameter_args, "getPasswordHashingParameter_args");
function getPasswordHashingParametersForPwdReg_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetPasswordHashingParametersForPwdRegRequest(param.request)
    ]
  ];
}
__name(getPasswordHashingParametersForPwdReg_args, "getPasswordHashingParametersForPwdReg_args");
function getPasswordHashingParametersForPwdVerif_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetPasswordHashingParametersForPwdVerifRequest(param.request)
    ]
  ];
}
__name(getPasswordHashingParametersForPwdVerif_args, "getPasswordHashingParametersForPwdVerif_args");
function getPaymentUrlByKey_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.key
    ]
  ];
}
__name(getPaymentUrlByKey_args, "getPaymentUrlByKey_args");
function getPhoneVerifMethodForRegistration_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetPhoneVerifMethodForRegistrationRequest(param.request)
    ]
  ];
}
__name(getPhoneVerifMethodForRegistration_args, "getPhoneVerifMethodForRegistration_args");
function getPhoneVerifMethodV2_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetPhoneVerifMethodV2Request(param.request)
    ]
  ];
}
__name(getPhoneVerifMethodV2_args, "getPhoneVerifMethodV2_args");
function getPhotoboothBalance_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      Pb1_C13126p5(param.request)
    ]
  ];
}
__name(getPhotoboothBalance_args, "getPhotoboothBalance_args");
function getPredefinedScenarioSets_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetPredefinedScenarioSetsRequest(param.request)
    ]
  ];
}
__name(getPredefinedScenarioSets_args, "getPredefinedScenarioSets_args");
function getPrefetchableBanners_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      BannerRequest(param.request)
    ]
  ];
}
__name(getPrefetchableBanners_args, "getPrefetchableBanners_args");
function getPremiumStatusForUpgrade_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      fN0_C24475g(param.req)
    ]
  ];
}
__name(getPremiumStatusForUpgrade_args, "getPremiumStatusForUpgrade_args");
function getPremiumStatus_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      fN0_C24476h(param.req)
    ]
  ];
}
__name(getPremiumStatus_args, "getPremiumStatus_args");
function getPreviousMessagesV2WithRequest_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      GetPreviousMessagesV2Request(param.request)
    ],
    [
      8,
      3,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(getPreviousMessagesV2WithRequest_args, "getPreviousMessagesV2WithRequest_args");
function getProductByVersion_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.shopId
    ],
    [
      11,
      3,
      param.productId
    ],
    [
      10,
      4,
      param.productVersion
    ],
    [
      12,
      5,
      Locale(param.locale)
    ]
  ];
}
__name(getProductByVersion_args, "getProductByVersion_args");
function getProductLatestVersionForUser_args(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(getProductLatestVersionForUser_args, "getProductLatestVersionForUser_args");
function getProductSummariesInSubscriptionSlots_args(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(getProductSummariesInSubscriptionSlots_args, "getProductSummariesInSubscriptionSlots_args");
function getProductV2_args(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(getProductV2_args, "getProductV2_args");
function getProductValidationScheme_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.shopId
    ],
    [
      11,
      3,
      param.productId
    ],
    [
      10,
      4,
      param.productVersion
    ]
  ];
}
__name(getProductValidationScheme_args, "getProductValidationScheme_args");
function getProductsByAuthor_args(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(getProductsByAuthor_args, "getProductsByAuthor_args");
function getProfile_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(getProfile_args, "getProfile_args");
function getPromotedBuddyContacts_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.language
    ],
    [
      11,
      3,
      param.country
    ]
  ];
}
__name(getPromotedBuddyContacts_args, "getPromotedBuddyContacts_args");
function getPublishedMemberships_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetPublishedMembershipsRequest(param.request)
    ]
  ];
}
__name(getPublishedMemberships_args, "getPublishedMemberships_args");
function getPurchaseEnabledStatus_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      PurchaseEnabledRequest(param.request)
    ]
  ];
}
__name(getPurchaseEnabledStatus_args, "getPurchaseEnabledStatus_args");
function getPurchasedProducts_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.shopId
    ],
    [
      8,
      3,
      param.offset
    ],
    [
      8,
      4,
      param.limit
    ],
    [
      12,
      5,
      Locale(param.locale)
    ]
  ];
}
__name(getPurchasedProducts_args, "getPurchasedProducts_args");
function getQuickMenu_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      NZ0_S(param.request)
    ]
  ];
}
__name(getQuickMenu_args, "getQuickMenu_args");
function getReceivedPresents_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.shopId
    ],
    [
      8,
      3,
      param.offset
    ],
    [
      8,
      4,
      param.limit
    ],
    [
      12,
      5,
      Locale(param.locale)
    ]
  ];
}
__name(getReceivedPresents_args, "getReceivedPresents_args");
function getRecentFriendRequests_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(getRecentFriendRequests_args, "getRecentFriendRequests_args");
function getRecommendationDetails_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetRecommendationDetailsRequest(param.request)
    ]
  ];
}
__name(getRecommendationDetails_args, "getRecommendationDetails_args");
function getRecommendationIds_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(getRecommendationIds_args, "getRecommendationIds_args");
function getRecommendationList_args(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(getRecommendationList_args, "getRecommendationList_args");
function getRepairElements_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetRepairElementsRequest(param.request)
    ]
  ];
}
__name(getRepairElements_args, "getRepairElements_args");
function getResourceFile_args(param) {
  return typeof param === "undefined" ? [] : [];
}
__name(getResourceFile_args, "getResourceFile_args");
function getResponseStatus_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetResponseStatusRequest(param.request)
    ]
  ];
}
__name(getResponseStatus_args, "getResponseStatus_args");
function getReturnUrlWithRequestTokenForAutoLogin_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      WebLoginRequest(param.webLoginRequest)
    ]
  ];
}
__name(getReturnUrlWithRequestTokenForAutoLogin_args, "getReturnUrlWithRequestTokenForAutoLogin_args");
function getReturnUrlWithRequestTokenForMultiLiffLogin_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      LiffWebLoginRequest(param.request)
    ]
  ];
}
__name(getReturnUrlWithRequestTokenForMultiLiffLogin_args, "getReturnUrlWithRequestTokenForMultiLiffLogin_args");
function getRoomsV2_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      2,
      [
        11,
        param.roomIds
      ]
    ]
  ];
}
__name(getRoomsV2_args, "getRoomsV2_args");
function getSCC_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSCCRequest(param.request)
    ]
  ];
}
__name(getSCC_args, "getSCC_args");
function getSeasonalEffects_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      Eh_C8935c(param.req)
    ]
  ];
}
__name(getSeasonalEffects_args, "getSeasonalEffects_args");
function getSecondAuthMethod_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ]
  ];
}
__name(getSecondAuthMethod_args, "getSecondAuthMethod_args");
function getSentPresents_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.shopId
    ],
    [
      8,
      3,
      param.offset
    ],
    [
      8,
      4,
      param.limit
    ],
    [
      12,
      5,
      Locale(param.locale)
    ]
  ];
}
__name(getSentPresents_args, "getSentPresents_args");
function getServiceShortcutMenu_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      NZ0_U(param.request)
    ]
  ];
}
__name(getServiceShortcutMenu_args, "getServiceShortcutMenu_args");
function getSessionContentBeforeMigCompletion_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ]
  ];
}
__name(getSessionContentBeforeMigCompletion_args, "getSessionContentBeforeMigCompletion_args");
function getSettingsAttributes2_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      2,
      [
        8,
        param.attributesToRetrieve && param.attributesToRetrieve.map((e) => SettingsAttributeEx(e))
      ]
    ]
  ];
}
__name(getSettingsAttributes2_args, "getSettingsAttributes2_args");
function getSettings_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Pb1_V7(param.syncReason)
    ]
  ];
}
__name(getSettings_args, "getSettings_args");
function getSmartChannelRecommendations_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSmartChannelRecommendationsRequest(param.request)
    ]
  ];
}
__name(getSmartChannelRecommendations_args, "getSmartChannelRecommendations_args");
function getSquareBot_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetSquareBotRequest(param.req)
    ]
  ];
}
__name(getSquareBot_args, "getSquareBot_args");
function getStudentInformation_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      Ob1_C12606a0(param.req)
    ]
  ];
}
__name(getStudentInformation_args, "getStudentInformation_args");
function getSubscriptionPlans_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      GetSubscriptionPlansRequest(param.req)
    ]
  ];
}
__name(getSubscriptionPlans_args, "getSubscriptionPlans_args");
function getSubscriptionSlotHistory_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      Ob1_C12618e0(param.req)
    ]
  ];
}
__name(getSubscriptionSlotHistory_args, "getSubscriptionSlotHistory_args");
function getSubscriptionStatus_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      GetSubscriptionStatusRequest(param.req)
    ]
  ];
}
__name(getSubscriptionStatus_args, "getSubscriptionStatus_args");
function getSuggestDictionarySetting_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      Ob1_C12630i0(param.req)
    ]
  ];
}
__name(getSuggestDictionarySetting_args, "getSuggestDictionarySetting_args");
function getSuggestResourcesV2_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      GetSuggestResourcesV2Request(param.req)
    ]
  ];
}
__name(getSuggestResourcesV2_args, "getSuggestResourcesV2_args");
function getTaiwanBankBalance_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetTaiwanBankBalanceRequest(param.request)
    ]
  ];
}
__name(getTaiwanBankBalance_args, "getTaiwanBankBalance_args");
function getTargetProfiles_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetTargetProfilesRequest(param.request)
    ]
  ];
}
__name(getTargetProfiles_args, "getTargetProfiles_args");
function getTargetingPopup_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      NZ0_C12150a0(param.request)
    ]
  ];
}
__name(getTargetingPopup_args, "getTargetingPopup_args");
function getThaiBankBalance_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetThaiBankBalanceRequest(param.request)
    ]
  ];
}
__name(getThaiBankBalance_args, "getThaiBankBalance_args");
function getTotalCoinBalance_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetTotalCoinBalanceRequest(param.request)
    ]
  ];
}
__name(getTotalCoinBalance_args, "getTotalCoinBalance_args");
function getUpdatedChannelIds_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      1,
      [
        12,
        param.channelIds && param.channelIds.map((e) => ChannelIdWithLastUpdated(e))
      ]
    ]
  ];
}
__name(getUpdatedChannelIds_args, "getUpdatedChannelIds_args");
function getUserCollections_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetUserCollectionsRequest(param.request)
    ]
  ];
}
__name(getUserCollections_args, "getUserCollections_args");
function getUserProfile_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      12,
      2,
      AccountIdentifier(param.accountIdentifier)
    ]
  ];
}
__name(getUserProfile_args, "getUserProfile_args");
function getUserVector_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetUserVectorRequest(param.request)
    ]
  ];
}
__name(getUserVector_args, "getUserVector_args");
function getUsersMappedByProfile_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      GetUsersMappedByProfileRequest(param.request)
    ]
  ];
}
__name(getUsersMappedByProfile_args, "getUsersMappedByProfile_args");
function getWebLoginDisallowedUrlForMultiLiffLogin_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      LiffWebLoginRequest(param.request)
    ]
  ];
}
__name(getWebLoginDisallowedUrlForMultiLiffLogin_args, "getWebLoginDisallowedUrlForMultiLiffLogin_args");
function getWebLoginDisallowedUrl_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      WebLoginRequest(param.webLoginRequest)
    ]
  ];
}
__name(getWebLoginDisallowedUrl_args, "getWebLoginDisallowedUrl_args");
function inviteFriends_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      InviteFriendsRequest(param.request)
    ]
  ];
}
__name(inviteFriends_args, "inviteFriends_args");
function inviteIntoChat_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      InviteIntoChatRequest(param.request)
    ]
  ];
}
__name(inviteIntoChat_args, "inviteIntoChat_args");
function inviteIntoGroupCall_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.chatMid
    ],
    [
      15,
      3,
      [
        11,
        param.memberMids
      ]
    ],
    [
      8,
      4,
      Pb1_EnumC13237x5(param.mediaType)
    ]
  ];
}
__name(inviteIntoGroupCall_args, "inviteIntoGroupCall_args");
function inviteIntoRoom_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.roomId
    ],
    [
      15,
      3,
      [
        11,
        param.contactIds
      ]
    ]
  ];
}
__name(inviteIntoRoom_args, "inviteIntoRoom_args");
function isProductForCollections_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      IsProductForCollectionsRequest(param.request)
    ]
  ];
}
__name(isProductForCollections_args, "isProductForCollections_args");
function isStickerAvailableForCombinationSticker_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      IsStickerAvailableForCombinationStickerRequest(param.request)
    ]
  ];
}
__name(isStickerAvailableForCombinationSticker_args, "isStickerAvailableForCombinationSticker_args");
function isUseridAvailable_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.searchId
    ]
  ];
}
__name(isUseridAvailable_args, "isUseridAvailable_args");
function issueChannelToken_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.channelId
    ]
  ];
}
__name(issueChannelToken_args, "issueChannelToken_args");
function issueLiffView_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      LiffViewRequest(param.request)
    ]
  ];
}
__name(issueLiffView_args, "issueLiffView_args");
function issueRequestTokenWithAuthScheme_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.channelId
    ],
    [
      11,
      2,
      param.otpId
    ],
    [
      15,
      3,
      [
        11,
        param.authScheme
      ]
    ],
    [
      11,
      4,
      param.returnUrl
    ]
  ];
}
__name(issueRequestTokenWithAuthScheme_args, "issueRequestTokenWithAuthScheme_args");
function issueSubLiffView_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      LiffViewRequest(param.request)
    ]
  ];
}
__name(issueSubLiffView_args, "issueSubLiffView_args");
function issueTokenForAccountMigrationSettings_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      2,
      2,
      param.enforce
    ]
  ];
}
__name(issueTokenForAccountMigrationSettings_args, "issueTokenForAccountMigrationSettings_args");
function issueToken_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      IssueBirthdayGiftTokenRequest(param.request)
    ]
  ];
}
__name(issueToken_args, "issueToken_args");
function issueV3TokenForPrimary_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      IssueV3TokenForPrimaryRequest(param.request)
    ]
  ];
}
__name(issueV3TokenForPrimary_args, "issueV3TokenForPrimary_args");
function issueWebAuthDetailsForSecondAuth_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ]
  ];
}
__name(issueWebAuthDetailsForSecondAuth_args, "issueWebAuthDetailsForSecondAuth_args");
function joinChatByCallUrl_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      JoinChatByCallUrlRequest(param.request)
    ]
  ];
}
__name(joinChatByCallUrl_args, "joinChatByCallUrl_args");
function kickoutFromGroupCall_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      KickoutFromGroupCallRequest(param.kickoutFromGroupCallRequest)
    ]
  ];
}
__name(kickoutFromGroupCall_args, "kickoutFromGroupCall_args");
function leaveRoom_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.roomId
    ]
  ];
}
__name(leaveRoom_args, "leaveRoom_args");
function linkDevice_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      DeviceLinkRequest(param.request)
    ]
  ];
}
__name(linkDevice_args, "linkDevice_args");
function lookupAvailableEap_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      LookupAvailableEapRequest(param.request)
    ]
  ];
}
__name(lookupAvailableEap_args, "lookupAvailableEap_args");
function lookupPaidCall_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.dialedNumber
    ],
    [
      11,
      3,
      param.language
    ],
    [
      11,
      4,
      param.referer
    ]
  ];
}
__name(lookupPaidCall_args, "lookupPaidCall_args");
function mapProfileToUsers_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      MapProfileToUsersRequest(param.request)
    ]
  ];
}
__name(mapProfileToUsers_args, "mapProfileToUsers_args");
function migratePrimaryUsingEapAccountWithTokenV3_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ]
  ];
}
__name(migratePrimaryUsingEapAccountWithTokenV3_args, "migratePrimaryUsingEapAccountWithTokenV3_args");
function migratePrimaryUsingPhoneWithTokenV3_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ]
  ];
}
__name(migratePrimaryUsingPhoneWithTokenV3_args, "migratePrimaryUsingPhoneWithTokenV3_args");
function migratePrimaryUsingQrCode_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      MigratePrimaryUsingQrCodeRequest(param.request)
    ]
  ];
}
__name(migratePrimaryUsingQrCode_args, "migratePrimaryUsingQrCode_args");
function negotiateE2EEPublicKey_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.mid
    ]
  ];
}
__name(negotiateE2EEPublicKey_args, "negotiateE2EEPublicKey_args");
function notifyChatAdEntry_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      NotifyChatAdEntryRequest(param.request)
    ]
  ];
}
__name(notifyChatAdEntry_args, "notifyChatAdEntry_args");
function notifyDeviceConnection_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      NotifyDeviceConnectionRequest(param.request)
    ]
  ];
}
__name(notifyDeviceConnection_args, "notifyDeviceConnection_args");
function notifyDeviceDisconnection_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      NotifyDeviceDisconnectionRequest(param.request)
    ]
  ];
}
__name(notifyDeviceDisconnection_args, "notifyDeviceDisconnection_args");
function notifyInstalled_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.udidHash
    ],
    [
      11,
      3,
      param.applicationTypeWithExtensions
    ]
  ];
}
__name(notifyInstalled_args, "notifyInstalled_args");
function notifyOATalkroomEvents_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      NotifyOATalkroomEventsRequest(param.request)
    ]
  ];
}
__name(notifyOATalkroomEvents_args, "notifyOATalkroomEvents_args");
function notifyProductEvent_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.shopId
    ],
    [
      11,
      3,
      param.productId
    ],
    [
      10,
      4,
      param.productVersion
    ],
    [
      10,
      5,
      param.productEvent
    ]
  ];
}
__name(notifyProductEvent_args, "notifyProductEvent_args");
function notifyRegistrationComplete_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.udidHash
    ],
    [
      11,
      3,
      param.applicationTypeWithExtensions
    ]
  ];
}
__name(notifyRegistrationComplete_args, "notifyRegistrationComplete_args");
function notifyScenarioExecuted_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      NotifyScenarioExecutedRequest(param.request)
    ]
  ];
}
__name(notifyScenarioExecuted_args, "notifyScenarioExecuted_args");
function notifyUpdated_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      2,
      param.lastRev
    ],
    [
      12,
      3,
      DeviceInfo(param.deviceInfo)
    ],
    [
      11,
      4,
      param.udidHash
    ],
    [
      11,
      5,
      param.oldUdidHash
    ]
  ];
}
__name(notifyUpdated_args, "notifyUpdated_args");
function openAuthSession_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      AuthSessionRequest(param.request)
    ]
  ];
}
__name(openAuthSession_args, "openAuthSession_args");
function openSession_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      OpenSessionRequest(param.request)
    ]
  ];
}
__name(openSession_args, "openSession_args");
function permitLogin_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      PermitLoginRequest(param.request)
    ]
  ];
}
__name(permitLogin_args, "permitLogin_args");
function placePurchaseOrderForFreeProduct_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      PurchaseOrder(param.purchaseOrder)
    ]
  ];
}
__name(placePurchaseOrderForFreeProduct_args, "placePurchaseOrderForFreeProduct_args");
function placePurchaseOrderWithLineCoin_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      PurchaseOrder(param.purchaseOrder)
    ]
  ];
}
__name(placePurchaseOrderWithLineCoin_args, "placePurchaseOrderWithLineCoin_args");
function postPopupButtonEvents_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.buttonId
    ],
    [
      13,
      2,
      [
        11,
        2,
        param.checkboxes
      ]
    ]
  ];
}
__name(postPopupButtonEvents_args, "postPopupButtonEvents_args");
function purchaseSubscription_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      PurchaseSubscriptionRequest(param.req)
    ]
  ];
}
__name(purchaseSubscription_args, "purchaseSubscription_args");
function putE2eeKey_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      PutE2eeKeyRequest(param.request)
    ]
  ];
}
__name(putE2eeKey_args, "putE2eeKey_args");
function react_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ReactRequest(param.reactRequest)
    ]
  ];
}
__name(react_args, "react_args");
function refresh_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      RefreshAccessTokenRequest(param.request)
    ]
  ];
}
__name(refresh_args, "refresh_args");
function registerBarcodeAsync_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.requestToken
    ],
    [
      11,
      2,
      param.barcodeRequestId
    ],
    [
      11,
      3,
      param.barcode
    ],
    [
      12,
      4,
      RSAEncryptedPassword(param.password)
    ]
  ];
}
__name(registerBarcodeAsync_args, "registerBarcodeAsync_args");
function registerCampaignReward_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      RegisterCampaignRewardRequest(param.request)
    ]
  ];
}
__name(registerCampaignReward_args, "registerCampaignReward_args");
function registerE2EEGroupKey_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      2,
      param.keyVersion
    ],
    [
      11,
      3,
      param.chatMid
    ],
    [
      15,
      4,
      [
        11,
        param.members
      ]
    ],
    [
      15,
      5,
      [
        8,
        param.keyIds
      ]
    ],
    [
      15,
      6,
      [
        11,
        param.encryptedSharedKeys
      ]
    ]
  ];
}
__name(registerE2EEGroupKey_args, "registerE2EEGroupKey_args");
function registerE2EEPublicKeyV2_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      Pb1_W6(param.request)
    ]
  ];
}
__name(registerE2EEPublicKeyV2_args, "registerE2EEPublicKeyV2_args");
function registerE2EEPublicKey_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      12,
      2,
      Pb1_C13097n4(param.publicKey)
    ]
  ];
}
__name(registerE2EEPublicKey_args, "registerE2EEPublicKey_args");
function registerPrimaryCredential_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      RegisterPrimaryCredentialRequest(param.request)
    ]
  ];
}
__name(registerPrimaryCredential_args, "registerPrimaryCredential_args");
function registerPrimaryUsingEapAccount_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ]
  ];
}
__name(registerPrimaryUsingEapAccount_args, "registerPrimaryUsingEapAccount_args");
function registerPrimaryUsingPhoneWithTokenV3_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.authSessionId
    ]
  ];
}
__name(registerPrimaryUsingPhoneWithTokenV3_args, "registerPrimaryUsingPhoneWithTokenV3_args");
function registerUserid_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.searchId
    ]
  ];
}
__name(registerUserid_args, "registerUserid_args");
function reissueChatTicket_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ReissueChatTicketRequest(param.request)
    ]
  ];
}
__name(reissueChatTicket_args, "reissueChatTicket_args");
function rejectChatInvitation_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      RejectChatInvitationRequest(param.request)
    ]
  ];
}
__name(rejectChatInvitation_args, "rejectChatInvitation_args");
function removeChatRoomAnnouncement_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.chatRoomMid
    ],
    [
      10,
      3,
      param.announcementSeq
    ]
  ];
}
__name(removeChatRoomAnnouncement_args, "removeChatRoomAnnouncement_args");
function removeFollower_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      RemoveFollowerRequest(param.removeFollowerRequest)
    ]
  ];
}
__name(removeFollower_args, "removeFollower_args");
function removeFriendRequest_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Pb1_F4(param.direction)
    ],
    [
      11,
      2,
      param.midOrEMid
    ]
  ];
}
__name(removeFriendRequest_args, "removeFriendRequest_args");
function removeFromFollowBlacklist_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      RemoveFromFollowBlacklistRequest(param.removeFromFollowBlacklistRequest)
    ]
  ];
}
__name(removeFromFollowBlacklist_args, "removeFromFollowBlacklist_args");
function removeIdentifier_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.authSessionId
    ],
    [
      12,
      3,
      IdentityCredentialRequest(param.request)
    ]
  ];
}
__name(removeIdentifier_args, "removeIdentifier_args");
function removeItemFromCollection_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      RemoveItemFromCollectionRequest(param.request)
    ]
  ];
}
__name(removeItemFromCollection_args, "removeItemFromCollection_args");
function removeLinePayAccount_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.accountId
    ]
  ];
}
__name(removeLinePayAccount_args, "removeLinePayAccount_args");
function removeProductFromSubscriptionSlot_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      RemoveProductFromSubscriptionSlotRequest(param.req)
    ]
  ];
}
__name(removeProductFromSubscriptionSlot_args, "removeProductFromSubscriptionSlot_args");
function reportAbuseEx_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      ReportAbuseExRequest(param.request)
    ]
  ];
}
__name(reportAbuseEx_args, "reportAbuseEx_args");
function reportDeviceState_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      13,
      2,
      [
        8,
        2,
        param.booleanState
      ]
    ],
    [
      13,
      3,
      [
        8,
        11,
        param.stringState
      ]
    ]
  ];
}
__name(reportDeviceState_args, "reportDeviceState_args");
function reportLocation_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      Geolocation(param.location)
    ],
    [
      8,
      2,
      Pb1_EnumC12917a6(param.trigger)
    ],
    [
      12,
      3,
      ClientNetworkStatus(param.networkStatus)
    ],
    [
      10,
      4,
      param.measuredAt
    ],
    [
      10,
      6,
      param.clientCurrentTimestamp
    ],
    [
      12,
      7,
      LocationDebugInfo(param.debugInfo)
    ]
  ];
}
__name(reportLocation_args, "reportLocation_args");
function reportNetworkStatus_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      Pb1_EnumC12917a6(param.trigger)
    ],
    [
      12,
      2,
      ClientNetworkStatus(param.networkStatus)
    ],
    [
      10,
      3,
      param.measuredAt
    ],
    [
      10,
      4,
      param.scanCompletionTimestamp
    ]
  ];
}
__name(reportNetworkStatus_args, "reportNetworkStatus_args");
function reportProfile_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      2,
      param.syncOpRevision
    ],
    [
      12,
      3,
      Profile(param.profile)
    ]
  ];
}
__name(reportProfile_args, "reportProfile_args");
function reportPushRecvReports_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      15,
      2,
      [
        12,
        param.pushRecvReports && param.pushRecvReports.map((e) => PushRecvReport(e))
      ]
    ]
  ];
}
__name(reportPushRecvReports_args, "reportPushRecvReports_args");
function reportRefreshedAccessToken_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ReportRefreshedAccessTokenRequest(param.request)
    ]
  ];
}
__name(reportRefreshedAccessToken_args, "reportRefreshedAccessToken_args");
function reportSettings_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      2,
      param.syncOpRevision
    ],
    [
      12,
      3,
      Settings(param.settings)
    ]
  ];
}
__name(reportSettings_args, "reportSettings_args");
function requestCleanupUserProvidedData_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      14,
      1,
      [
        8,
        param.dataTypes && param.dataTypes.map((e) => Pb1_od(e))
      ]
    ]
  ];
}
__name(requestCleanupUserProvidedData_args, "requestCleanupUserProvidedData_args");
function requestToSendPasswordSetVerificationEmail_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      11,
      2,
      param.email
    ],
    [
      12,
      3,
      AccountIdentifier(param.accountIdentifier)
    ]
  ];
}
__name(requestToSendPasswordSetVerificationEmail_args, "requestToSendPasswordSetVerificationEmail_args");
function requestToSendPhonePinCode_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ReqToSendPhonePinCodeRequest(param.request)
    ]
  ];
}
__name(requestToSendPhonePinCode_args, "requestToSendPhonePinCode_args");
function requestTradeNumber_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.requestToken
    ],
    [
      8,
      2,
      r80_g0(param.requestType)
    ],
    [
      11,
      3,
      param.amount
    ],
    [
      11,
      4,
      param.name
    ]
  ];
}
__name(requestTradeNumber_args, "requestTradeNumber_args");
function resendIdentifierConfirmation_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.authSessionId
    ],
    [
      12,
      3,
      IdentityCredentialRequest(param.request)
    ]
  ];
}
__name(resendIdentifierConfirmation_args, "resendIdentifierConfirmation_args");
function resendPinCode_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.sessionId
    ]
  ];
}
__name(resendPinCode_args, "resendPinCode_args");
function reserveCoinPurchase_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      CoinPurchaseReservation(param.request)
    ]
  ];
}
__name(reserveCoinPurchase_args, "reserveCoinPurchase_args");
function reserveSubscriptionPurchase_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ReserveSubscriptionPurchaseRequest(param.request)
    ]
  ];
}
__name(reserveSubscriptionPurchase_args, "reserveSubscriptionPurchase_args");
function reserve_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ReserveRequest(param.request)
    ]
  ];
}
__name(reserve_args, "reserve_args");
function restoreE2EEKeyBackup_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      Pb1_C13155r7(param.request)
    ]
  ];
}
__name(restoreE2EEKeyBackup_args, "restoreE2EEKeyBackup_args");
function retrieveRequestTokenWithDocomoV2_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      Pb1_C13183t7(param.request)
    ]
  ];
}
__name(retrieveRequestTokenWithDocomoV2_args, "retrieveRequestTokenWithDocomoV2_args");
function retrieveRequestToken_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      2,
      CarrierCode(param.carrier)
    ]
  ];
}
__name(retrieveRequestToken_args, "retrieveRequestToken_args");
function revokeTokens_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      RevokeTokensRequest(param.request)
    ]
  ];
}
__name(revokeTokens_args, "revokeTokens_args");
function saveStudentInformation_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      SaveStudentInformationRequest(param.req)
    ]
  ];
}
__name(saveStudentInformation_args, "saveStudentInformation_args");
function sendChatChecked_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.seq
    ],
    [
      11,
      2,
      param.chatMid
    ],
    [
      11,
      3,
      param.lastMessageId
    ],
    [
      3,
      4,
      param.sessionId
    ]
  ];
}
__name(sendChatChecked_args, "sendChatChecked_args");
function sendChatRemoved_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.seq
    ],
    [
      11,
      2,
      param.chatMid
    ],
    [
      11,
      3,
      param.lastMessageId
    ],
    [
      3,
      4,
      param.sessionId
    ]
  ];
}
__name(sendChatRemoved_args, "sendChatRemoved_args");
function sendEncryptedE2EEKey_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      SendEncryptedE2EEKeyRequest(param.request)
    ]
  ];
}
__name(sendEncryptedE2EEKey_args, "sendEncryptedE2EEKey_args");
function sendMessage_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.seq
    ],
    [
      12,
      2,
      Message(param.message)
    ]
  ];
}
__name(sendMessage_args, "sendMessage_args");
function sendPostback_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      SendPostbackRequest(param.request)
    ]
  ];
}
__name(sendPostback_args, "sendPostback_args");
function setChatHiddenStatus_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      SetChatHiddenStatusRequest(param.setChatHiddenStatusRequest)
    ]
  ];
}
__name(setChatHiddenStatus_args, "setChatHiddenStatus_args");
function setHashedPassword_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      SetHashedPasswordRequest(param.request)
    ]
  ];
}
__name(setHashedPassword_args, "setHashedPassword_args");
function setIdentifier_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.authSessionId
    ],
    [
      12,
      3,
      IdentityCredentialRequest(param.request)
    ]
  ];
}
__name(setIdentifier_args, "setIdentifier_args");
function setNotificationsEnabled_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      8,
      2,
      MIDType(param.type)
    ],
    [
      11,
      3,
      param.target
    ],
    [
      2,
      4,
      param.enablement
    ]
  ];
}
__name(setNotificationsEnabled_args, "setNotificationsEnabled_args");
function setPassword_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      SetPasswordRequest(param.request)
    ]
  ];
}
__name(setPassword_args, "setPassword_args");
function shouldShowWelcomeStickerBanner_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      Ob1_C12660s1(param.request)
    ]
  ];
}
__name(shouldShowWelcomeStickerBanner_args, "shouldShowWelcomeStickerBanner_args");
function startPhotobooth_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      StartPhotoboothRequest(param.request)
    ]
  ];
}
__name(startPhotobooth_args, "startPhotobooth_args");
function startUpdateVerification_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.region
    ],
    [
      8,
      3,
      CarrierCode(param.carrier)
    ],
    [
      11,
      4,
      param.phone
    ],
    [
      11,
      5,
      param.udidHash
    ],
    [
      12,
      6,
      DeviceInfo(param.deviceInfo)
    ],
    [
      11,
      7,
      param.networkCode
    ],
    [
      11,
      8,
      param.locale
    ],
    [
      12,
      9,
      SIMInfo(param.simInfo)
    ]
  ];
}
__name(startUpdateVerification_args, "startUpdateVerification_args");
function stopBundleSubscription_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      StopBundleSubscriptionRequest(param.request)
    ]
  ];
}
__name(stopBundleSubscription_args, "stopBundleSubscription_args");
function storeShareTargetPickerResult_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ShareTargetPickerResultRequest(param.request)
    ]
  ];
}
__name(storeShareTargetPickerResult_args, "storeShareTargetPickerResult_args");
function storeSubWindowResult_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      SubWindowResultRequest(param.request)
    ]
  ];
}
__name(storeSubWindowResult_args, "storeSubWindowResult_args");
function syncContacts_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      15,
      2,
      [
        12,
        param.localContacts && param.localContacts.map((e) => ContactModification(e))
      ]
    ]
  ];
}
__name(syncContacts_args, "syncContacts_args");
function sync_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      SyncRequest(param.request)
    ]
  ];
}
__name(sync_args, "sync_args");
function tryFriendRequest_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.midOrEMid
    ],
    [
      8,
      2,
      Pb1_G4(param.method)
    ],
    [
      11,
      3,
      param.friendRequestParams
    ]
  ];
}
__name(tryFriendRequest_args, "tryFriendRequest_args");
function unblockContact_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.id
    ],
    [
      11,
      3,
      param.reference
    ]
  ];
}
__name(unblockContact_args, "unblockContact_args");
function unblockRecommendation_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.targetMid
    ]
  ];
}
__name(unblockRecommendation_args, "unblockRecommendation_args");
function unfollow_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      UnfollowRequest(param.unfollowRequest)
    ]
  ];
}
__name(unfollow_args, "unfollow_args");
function unlinkDevice_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      DeviceUnlinkRequest(param.request)
    ]
  ];
}
__name(unlinkDevice_args, "unlinkDevice_args");
function unsendMessage_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.seq
    ],
    [
      11,
      2,
      param.messageId
    ]
  ];
}
__name(unsendMessage_args, "unsendMessage_args");
function updateAndGetNearby_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      4,
      2,
      param.latitude
    ],
    [
      4,
      3,
      param.longitude
    ],
    [
      12,
      4,
      GeolocationAccuracy(param.accuracy)
    ],
    [
      12,
      5,
      ClientNetworkStatus(param.networkStatus)
    ],
    [
      4,
      6,
      param.altitudeMeters
    ],
    [
      4,
      7,
      param.velocityMetersPerSecond
    ],
    [
      4,
      8,
      param.bearingDegrees
    ],
    [
      10,
      9,
      param.measuredAtTimestamp
    ],
    [
      10,
      10,
      param.clientCurrentTimestamp
    ]
  ];
}
__name(updateAndGetNearby_args, "updateAndGetNearby_args");
function updateChannelNotificationSetting_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      1,
      [
        12,
        param.setting && param.setting.map((e) => ChannelNotificationSetting(e))
      ]
    ]
  ];
}
__name(updateChannelNotificationSetting_args, "updateChannelNotificationSetting_args");
function updateChannelSettings_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      ChannelSettings(param.channelSettings)
    ]
  ];
}
__name(updateChannelSettings_args, "updateChannelSettings_args");
function updateChatRoomBGM_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.chatRoomMid
    ],
    [
      11,
      3,
      param.chatRoomBGMInfo
    ]
  ];
}
__name(updateChatRoomBGM_args, "updateChatRoomBGM_args");
function updateChat_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      UpdateChatRequest(param.request)
    ]
  ];
}
__name(updateChat_args, "updateChat_args");
function updateContactSetting_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      11,
      2,
      param.mid
    ],
    [
      8,
      3,
      ContactSetting(param.flag)
    ],
    [
      11,
      4,
      param.value
    ]
  ];
}
__name(updateContactSetting_args, "updateContactSetting_args");
function updateExtendedProfileAttribute_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    ,
    [
      12,
      3,
      ExtendedProfile(param.extendedProfile)
    ]
  ];
}
__name(updateExtendedProfileAttribute_args, "updateExtendedProfileAttribute_args");
function updateGroupCallUrl_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      UpdateGroupCallUrlRequest(param.request)
    ]
  ];
}
__name(updateGroupCallUrl_args, "updateGroupCallUrl_args");
function updateIdentifier_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.authSessionId
    ],
    [
      12,
      3,
      IdentityCredentialRequest(param.request)
    ]
  ];
}
__name(updateIdentifier_args, "updateIdentifier_args");
function updateNotificationToken_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.token
    ],
    [
      8,
      3,
      NotificationType(param.type)
    ]
  ];
}
__name(updateNotificationToken_args, "updateNotificationToken_args");
function updatePassword_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      UpdatePasswordRequest(param.request)
    ]
  ];
}
__name(updatePassword_args, "updatePassword_args");
function updateProfileAttributes_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      12,
      2,
      UpdateProfileAttributesRequest(param.request)
    ]
  ];
}
__name(updateProfileAttributes_args, "updateProfileAttributes_args");
function updateSafetyStatus_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      UpdateSafetyStatusRequest(param.req)
    ]
  ];
}
__name(updateSafetyStatus_args, "updateSafetyStatus_args");
function updateSettingsAttributes2_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      8,
      1,
      param.reqSeq
    ],
    [
      12,
      3,
      Settings(param.settings)
    ],
    [
      14,
      4,
      [
        8,
        param.attributesToUpdate && param.attributesToUpdate.map((e) => SettingsAttributeEx(e))
      ]
    ]
  ];
}
__name(updateSettingsAttributes2_args, "updateSettingsAttributes2_args");
function updateUserGeneralSettings_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      13,
      1,
      [
        8,
        11,
        param.settings
      ]
    ]
  ];
}
__name(updateUserGeneralSettings_args, "updateUserGeneralSettings_args");
function usePhotoboothTicket_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      UsePhotoboothTicketRequest(param.request)
    ]
  ];
}
__name(usePhotoboothTicket_args, "usePhotoboothTicket_args");
function validateEligibleFriends_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      15,
      1,
      [
        11,
        param.friends
      ]
    ],
    [
      8,
      2,
      r80_EnumC34376p(param.type)
    ]
  ];
}
__name(validateEligibleFriends_args, "validateEligibleFriends_args");
function validateProduct_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.shopId
    ],
    [
      11,
      3,
      param.productId
    ],
    [
      10,
      4,
      param.productVersion
    ]
  ];
}
__name(validateProduct_args, "validateProduct_args");
function validateProfile_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      11,
      2,
      param.displayName
    ]
  ];
}
__name(validateProfile_args, "validateProfile_args");
function verifyAccountUsingHashedPwd_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      VerifyAccountUsingHashedPwdRequest(param.request)
    ]
  ];
}
__name(verifyAccountUsingHashedPwd_args, "verifyAccountUsingHashedPwd_args");
function verifyAssertion_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      VerifyAssertionRequest(param.request)
    ]
  ];
}
__name(verifyAssertion_args, "verifyAssertion_args");
function verifyAttestation_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      VerifyAttestationRequest(param.request)
    ]
  ];
}
__name(verifyAttestation_args, "verifyAttestation_args");
function verifyBirthdayGiftAssociationToken_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      2,
      BirthdayGiftAssociationVerifyRequest(param.req)
    ]
  ];
}
__name(verifyBirthdayGiftAssociationToken_args, "verifyBirthdayGiftAssociationToken_args");
function verifyEapAccountForRegistration_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      12,
      2,
      Device(param.device)
    ],
    [
      12,
      3,
      SocialLogin(param.socialLogin)
    ]
  ];
}
__name(verifyEapAccountForRegistration_args, "verifyEapAccountForRegistration_args");
function verifyEapLogin_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      VerifyEapLoginRequest(param.request)
    ]
  ];
}
__name(verifyEapLogin_args, "verifyEapLogin_args");
function verifyPhoneNumber_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.sessionId
    ],
    [
      11,
      3,
      param.pinCode
    ],
    [
      11,
      4,
      param.udidHash
    ],
    [
      11,
      5,
      param.migrationPincodeSessionId
    ],
    [
      11,
      6,
      param.oldUdidHash
    ]
  ];
}
__name(verifyPhoneNumber_args, "verifyPhoneNumber_args");
function verifyPhonePinCode_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      VerifyPhonePinCodeRequest(param.request)
    ]
  ];
}
__name(verifyPhonePinCode_args, "verifyPhonePinCode_args");
function verifyPinCode_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      VerifyPinCodeRequest(param.request)
    ]
  ];
}
__name(verifyPinCode_args, "verifyPinCode_args");
function verifyQrCode_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      12,
      1,
      VerifyQrCodeRequest(param.request)
    ]
  ];
}
__name(verifyQrCode_args, "verifyQrCode_args");
function verifyQrcode_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      2,
      param.verifier
    ],
    [
      11,
      3,
      param.pinCode
    ]
  ];
}
__name(verifyQrcode_args, "verifyQrcode_args");
function verifySocialLogin_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      11,
      1,
      param.authSessionId
    ],
    [
      12,
      2,
      Device(param.device)
    ],
    [
      12,
      3,
      SocialLogin(param.socialLogin)
    ]
  ];
}
__name(verifySocialLogin_args, "verifySocialLogin_args");
function wakeUpLongPolling_args(param) {
  return typeof param === "undefined" ? [] : [
    [
      10,
      2,
      param.clientRevision
    ]
  ];
}
__name(wakeUpLongPolling_args, "wakeUpLongPolling_args");

// node_modules/@evex/linejs/base/thrift/rename/parser.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
function isStruct(obj) {
  return obj && Array.isArray(obj);
}
__name(isStruct, "isStruct");
var ThriftRenameParser = class {
  def = {};
  #name2fid(structName, name) {
    const struct = this.def[structName];
    if (struct && Array.isArray(struct)) {
      const result = struct.findIndex((e) => {
        return e.name == name;
      });
      if (result === -1) {
        return {
          name,
          fid: -1
        };
      } else {
        return struct[result];
      }
    } else {
      return {
        name,
        fid: -1
      };
    }
  }
  #fid2name(structName, fid) {
    const struct = this.def[structName];
    if (struct && Array.isArray(struct)) {
      const result = struct.findIndex((e) => {
        return e.fid == fid;
      });
      if (result === -1) {
        return {
          name: fid,
          fid
        };
      } else {
        return struct[result];
      }
    } else {
      return {
        name: fid,
        fid
      };
    }
  }
  rename_thrift(structName, object) {
    const newObject = {};
    if (typeof object !== "object")
      return object;
    for (const fid in object) {
      const value = object[fid];
      const finfo = this.#fid2name(structName, fid);
      if (typeof value === "undefined") {
        continue;
      }
      if (finfo.struct && (typeof value === "object" || typeof value === "number")) {
        if (isStruct(this.def[finfo.struct])) {
          newObject[finfo.name] = this.rename_thrift(finfo.struct, value);
        } else if (this.def[finfo.struct]) {
          newObject[finfo.name] = this.def[finfo.struct][value] || value;
        } else {
          newObject[finfo.name] = value;
        }
      } else if (typeof finfo.list === "string" && typeof value === "object") {
        newObject[finfo.name] = [];
        value.forEach((e, i) => {
          newObject[finfo.name][i] = this.rename_thrift(finfo.list, e);
        });
      } else if (typeof finfo.map === "string" && typeof value === "object") {
        newObject[finfo.name] = {};
        for (const key in value) {
          const e = value[key];
          newObject[finfo.name][key] = this.rename_thrift(finfo.map, e);
        }
      } else if (typeof finfo.set === "string" && typeof value === "object") {
        newObject[finfo.name] = [];
        value.forEach((e, i) => {
          newObject[finfo.name][i] = this.rename_thrift(finfo.set, e);
        });
      } else {
        newObject[finfo.name] = value;
      }
    }
    return newObject;
  }
  rename_data(data, square2) {
    const name = data._info.fname;
    const struct_name = (square2 ? "SquareService_" : "") + name + "_result";
    data.data = this.rename_thrift(struct_name, data.data);
    return data;
  }
};
__name(ThriftRenameParser, "ThriftRenameParser");

// node_modules/@evex/linejs/base/thrift/readwrite/read.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var thrift2 = __toESM(require_browser2(), 1);
import { Buffer as Buffer3 } from "node:buffer";
function readStruct(input) {
  const Thrift6 = thrift2.Thrift;
  const returnData = {};
  input.readStructBegin();
  while (true) {
    const { ftype, fid } = input.readFieldBegin();
    if (ftype == Thrift6.Type.STOP) {
      break;
    }
    returnData[fid] = readValue(input, ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return returnData;
}
__name(readStruct, "readStruct");
function isBinary(bin) {
  const str = bin.toString();
  if (JSON.stringify(str).includes("\\u")) {
    return true;
  }
  const bin2 = Buffer3.from(str);
  return bin.toString("base64") !== bin2.toString("base64");
}
__name(isBinary, "isBinary");
function bigInt(bin) {
  const str = bin.toString("hex");
  const num = parseInt(str, 16);
  if (Number.MAX_SAFE_INTEGER < num) {
    return BigInt("0x" + str);
  }
  return num;
}
__name(bigInt, "bigInt");
function readValue(input, ftype) {
  const Thrift6 = thrift2.Thrift;
  if (ftype == Thrift6.Type.STRUCT) {
    return readStruct(input);
  } else if (ftype == Thrift6.Type.I32) {
    return input.readI32();
  } else if (ftype == Thrift6.Type.I64) {
    return bigInt(input.readI64().buffer);
  } else if (ftype == Thrift6.Type.STRING) {
    const bin = input.readBinary();
    if (isBinary(bin)) {
      return bin;
    } else {
      return bin.toString();
    }
  } else if (ftype == Thrift6.Type.LIST) {
    const returnData = [];
    const { size, etype } = input.readListBegin();
    for (let _i = 0; _i < size; ++_i) {
      returnData.push(readValue(input, etype));
    }
    input.readListEnd();
    return returnData;
  } else if (ftype == Thrift6.Type.MAP) {
    const returnData = {};
    const { size, ktype, vtype } = input.readMapBegin();
    for (let _i = 0; _i < size; ++_i) {
      const key = readValue(input, ktype);
      const val = readValue(input, vtype);
      returnData[key] = val;
    }
    input.readMapEnd();
    return returnData;
  } else if (ftype == Thrift6.Type.SET) {
    const returnData = [];
    const { size, etype } = input.readSetBegin();
    for (let _i = 0; _i < size; ++_i) {
      returnData.push(readValue(input, etype));
    }
    input.readSetEnd();
    return returnData;
  } else if (ftype == Thrift6.Type.BOOL) {
    return input.readBool();
  } else if (ftype == Thrift6.Type.DOUBLE) {
    return input.readDouble();
  } else {
    input.skip(ftype);
    return;
  }
}
__name(readValue, "readValue");
function _readThrift(data, Protocol = thrift2.TCompactProtocol) {
  const bufTrans = new thrift2.TFramedTransport(data instanceof Buffer3 ? data : Buffer3.from(data));
  const proto = new Protocol(bufTrans);
  const msg_info = proto.readMessageBegin();
  const tdata = readStruct(proto);
  proto.readMessageEnd();
  return {
    data: tdata,
    _info: msg_info
  };
}
__name(_readThrift, "_readThrift");
function readThrift(data, Protocol = thrift2.TCompactProtocol) {
  return _readThrift(data, Protocol);
}
__name(readThrift, "readThrift");
function readThriftStruct(data, Protocol = thrift2.TCompactProtocol) {
  const bufTrans = new thrift2.TFramedTransport(data instanceof Buffer3 ? data : Buffer3.from(data));
  const proto = new Protocol(bufTrans);
  return readStruct(proto);
}
__name(readThriftStruct, "readThriftStruct");

// node_modules/@evex/linejs/base/thrift/readwrite/write.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var thrift3 = __toESM(require_browser2(), 1);
import { Buffer as Buffer4 } from "node:buffer";
var import_node_int64 = __toESM(require_Int64(), 1);
var Thrift3 = thrift3.Thrift;
function writeThrift(value, name, Protocol) {
  let myBuf = Buffer4.from([]);
  const buftra = new thrift3.TBufferedTransport(myBuf, function(outBuf) {
    if (!outBuf)
      return;
    myBuf = Buffer4.concat([
      myBuf,
      outBuf
    ]);
  });
  const myprot = new Protocol(buftra);
  _writeStruct(myprot, value);
  myprot.flush();
  buftra.flush();
  if (myBuf.length === 1 && myBuf[0] === 0) {
    myBuf = Buffer4.from([]);
  }
  const writedBinary = new Uint8Array([
    ...genHeader[Protocol == thrift3.TBinaryProtocol ? 3 : 4](name),
    ...myBuf,
    0
  ]);
  return writedBinary;
}
__name(writeThrift, "writeThrift");
function writeStruct(value, Protocol) {
  let myBuf = Buffer4.from([]);
  const buftra = new thrift3.TBufferedTransport(myBuf, function(outBuf) {
    if (!outBuf)
      return;
    myBuf = Buffer4.concat([
      myBuf,
      outBuf
    ]);
  });
  const myprot = new Protocol(buftra);
  _writeStruct(myprot, value);
  myprot.flush();
  buftra.flush();
  if (myBuf.length === 1 && myBuf[0] === 0) {
    myBuf = Buffer4.from([]);
  }
  return myBuf;
}
__name(writeStruct, "writeStruct");
function _writeStruct(output, value = []) {
  if (!value.length) {
    return;
  }
  output.writeStructBegin("");
  value.forEach((e) => {
    if (e === null || e === void 0) {
      return;
    }
    writeValue(output, e[0], e[1], e[2]);
  });
  output.writeFieldStop();
  output.writeStructEnd();
  return;
}
__name(_writeStruct, "_writeStruct");
function writeValue(output, ftype, fid, val) {
  if (val === void 0 || val === null) {
    return;
  }
  switch (ftype) {
    case Thrift3.Type.STRING:
      if (val instanceof Buffer4) {
        output.writeFieldBegin("", Thrift3.Type.STRING, fid);
        output.writeBinary(val);
        output.writeFieldEnd();
      } else {
        if (typeof val !== "string") {
          throw new TypeError(`ftype=${ftype}: value is not string`);
        }
        output.writeFieldBegin("", Thrift3.Type.STRING, fid);
        output.writeString(val.toString());
        output.writeFieldEnd();
      }
      break;
    case Thrift3.Type.DOUBLE:
      if (typeof val !== "number") {
        throw new TypeError(`ftype=${ftype}: value is not number`);
      }
      output.writeFieldBegin("", Thrift3.Type.DOUBLE, fid);
      output.writeDouble(val);
      output.writeFieldEnd();
      break;
    case Thrift3.Type.I64:
      if (typeof val === "bigint") {
        output.writeFieldBegin("", Thrift3.Type.I64, fid);
        output.writeI64(new import_node_int64.default(val.toString(16)));
        output.writeFieldEnd();
      } else if (typeof val !== "number") {
        throw new TypeError(`ftype=${ftype}: value is not number`);
      } else {
        output.writeFieldBegin("", Thrift3.Type.I64, fid);
        output.writeI64(val);
        output.writeFieldEnd();
      }
      break;
    case Thrift3.Type.I32:
      if (typeof val !== "number") {
        throw new TypeError(`ftype=${ftype}: value is not number`);
      }
      output.writeFieldBegin("", Thrift3.Type.I32, fid);
      output.writeI32(val);
      output.writeFieldEnd();
      break;
    case Thrift3.Type.BOOL:
      if (typeof val !== "boolean" && typeof val !== "number") {
        throw new TypeError(`ftype=${ftype}: value is not boolean`);
      }
      output.writeFieldBegin("", Thrift3.Type.BOOL, fid);
      output.writeBool(Boolean(val));
      output.writeFieldEnd();
      break;
    case Thrift3.Type.STRUCT:
      if (!Array.isArray(val)) {
        throw new TypeError(`ftype=${ftype}: value is not struct`);
      }
      if (!val.length) {
        return;
      }
      output.writeFieldBegin("", Thrift3.Type.STRUCT, fid);
      _writeStruct(output, val);
      output.writeFieldEnd();
      break;
    case Thrift3.Type.MAP:
      val = val;
      if (!val[2]) {
        return;
      }
      output.writeFieldBegin("", Thrift3.Type.MAP, fid);
      output.writeMapBegin(val[0], val[1], Thrift3.objectLength(val[2]));
      for (const kiter in val[2]) {
        if (Object.prototype.hasOwnProperty.call(val[2], kiter)) {
          const viter = val[2][kiter];
          writeValue_(output, val[0], kiter);
          writeValue_(output, val[1], viter);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
      break;
    case Thrift3.Type.LIST:
      val = val;
      if (!val[1]) {
        return;
      }
      output.writeFieldBegin("", Thrift3.Type.LIST, fid);
      output.writeListBegin(val[0], val[1].length);
      for (const iter in val[1]) {
        if (Object.prototype.hasOwnProperty.call(val[1], iter)) {
          writeValue_(output, val[0], val[1][iter]);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
      break;
    case Thrift3.Type.SET:
      val = val;
      if (!val[1]) {
        return;
      }
      output.writeFieldBegin("", Thrift3.Type.SET, fid);
      output.writeSetBegin(val[0], val[1].length);
      for (const iter in val[1]) {
        if (Object.prototype.hasOwnProperty.call(val[1], iter)) {
          writeValue_(output, val[0], val[1][iter]);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
      break;
    default:
      break;
  }
}
__name(writeValue, "writeValue");
function writeValue_(output, ftype, val) {
  if (val === void 0 || val === null) {
    return;
  }
  switch (ftype) {
    case Thrift3.Type.STRING:
      if (val instanceof Buffer4) {
        output.writeBinary(val);
      } else {
        if (typeof val !== "string") {
          throw new TypeError(`ftype=${ftype}: value is not string`);
        }
        output.writeString(val.toString());
      }
      break;
    case Thrift3.Type.DOUBLE:
      if (typeof val !== "number") {
        throw new TypeError(`ftype=${ftype}: value is not number`);
      }
      output.writeDouble(val);
      break;
    case Thrift3.Type.I64:
      if (typeof val !== "number") {
        throw new TypeError(`ftype=${ftype}: value is not number`);
      }
      output.writeI64(val);
      break;
    case Thrift3.Type.I32:
      if (typeof val !== "number") {
        throw new TypeError(`ftype=${ftype}: value is not number`);
      }
      output.writeI32(val);
      break;
    case Thrift3.Type.BOOL:
      if (typeof val !== "boolean") {
        throw new TypeError(`ftype=${ftype}: value is not boolean`);
      }
      output.writeBool(val);
      break;
    case Thrift3.Type.STRUCT:
      if (!Array.isArray(val)) {
        throw new TypeError(`ftype=${ftype}: value is not struct`);
      }
      _writeStruct(output, val);
      break;
    default:
      break;
  }
}
__name(writeValue_, "writeValue_");

// node_modules/@evex/linejs/base/thrift/mod.js
var Thrift4 = class extends ThriftRenameParser {
  constructor() {
    super();
  }
  readThrift(...params) {
    return readThrift(...params);
  }
  readThriftStruct(...params) {
    return readThriftStruct(...params);
  }
  writeThrift(...params) {
    return writeThrift(...params);
  }
};
__name(Thrift4, "Thrift");

// node_modules/@evex/linejs/base/service/auth/mod.js
var AuthService = class {
  client;
  protocolType = 4;
  requestPath = "/AS4";
  errorName = "AuthServiceError";
  constructor(client) {
    this.client = client;
  }
  /**
  * @description Try to refresh token.
  */
  async tryRefreshToken() {
    const refreshToken = await this.client.storage.get("refreshToken");
    if (typeof refreshToken === "string") {
      const RATR = await this.refresh({
        request: {
          refreshToken
        }
      });
      this.client.authToken = RATR.accessToken;
      this.client.emit("update:authtoken", RATR.accessToken);
      await this.client.storage.set("expire", RATR.tokenIssueTimeEpochSec + RATR.durationUntilRefreshInSec);
    } else {
      throw new InternalError("refreshError", "refreshToken not found");
    }
  }
  async refresh(...param) {
    return await this.client.request.request(struct_exports.refresh_args(...param), "refresh", this.protocolType, true, "/EXT/auth/tokenrefresh/v1");
  }
  async reportRefreshedAccessToken(...param) {
    return await this.client.request.request(struct_exports.reportRefreshedAccessToken_args(...param), "reportRefreshedAccessToken", this.protocolType, true, this.requestPath);
  }
  //
  async connectEapAccount(...param) {
    return await this.client.request.request(struct_exports.connectEapAccount_args(...param), "connectEapAccount", this.protocolType, true, this.requestPath);
  }
  async disconnectEapAccount(...param) {
    return await this.client.request.request(struct_exports.disconnectEapAccount_args(...param), "disconnectEapAccount", this.protocolType, true, this.requestPath);
  }
  async openSession(...param) {
    return await this.client.request.request(struct_exports.openSession_args(...param), "openSession", this.protocolType, true, this.requestPath);
  }
  async verifyEapLogin(...param) {
    return await this.client.request.request(struct_exports.verifyEapLogin_args(...param), "verifyEapLogin", this.protocolType, true, this.requestPath);
  }
  //
  async updatePassword(...param) {
    return await this.client.request.request(struct_exports.updatePassword_args(...param), "updatePassword", this.protocolType, true, this.requestPath);
  }
  async establishE2EESession(...param) {
    return await this.client.request.request(struct_exports.establishE2EESession_args(...param), "establishE2EESession", this.protocolType, true, this.requestPath);
  }
  async issueTokenForAccountMigrationSettings(...param) {
    return await this.client.request.request(struct_exports.issueTokenForAccountMigrationSettings_args(...param), "issueTokenForAccountMigrationSettings", this.protocolType, true, this.requestPath);
  }
  async openAuthSession(...param) {
    return await this.client.request.request(struct_exports.openAuthSession_args(...param), "openAuthSession", this.protocolType, true, this.requestPath);
  }
  async getAuthRSAKey(...param) {
    return await this.client.request.request(struct_exports.getAuthRSAKey_args(...param), "getAuthRSAKey", this.protocolType, true, this.requestPath);
  }
  async setIdentifier(...param) {
    return await this.client.request.request(struct_exports.setIdentifier_args(...param), "setIdentifier", this.protocolType, true, this.requestPath);
  }
  async updateIdentifier(...param) {
    return await this.client.request.request(struct_exports.updateIdentifier_args(...param), "updateIdentifier", this.protocolType, true, this.requestPath);
  }
  async resendIdentifierConfirmation(...param) {
    return await this.client.request.request(struct_exports.resendIdentifierConfirmation_args(...param), "resendIdentifierConfirmation", this.protocolType, true, this.requestPath);
  }
  async confirmIdentifier(...param) {
    return await this.client.request.request(struct_exports.confirmIdentifier_args(...param), "confirmIdentifier", this.protocolType, true, this.requestPath);
  }
  async removeIdentifier(...param) {
    return await this.client.request.request(struct_exports.removeIdentifier_args(...param), "removeIdentifier", this.protocolType, true, this.requestPath);
  }
  async issueV3TokenForPrimary(...param) {
    return await this.client.request.request(struct_exports.issueV3TokenForPrimary_args(...param), "issueV3TokenForPrimary", this.protocolType, true, this.requestPath);
  }
};
__name(AuthService, "AuthService");

// node_modules/@evex/linejs/base/service/call/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var CallService = class {
  client;
  protocolType = 4;
  requestPath = "/V4";
  errorName = "CallServiceError";
  constructor(client) {
    this.client = client;
  }
  async acquireCallRoute(...param) {
    return await this.client.request.request(struct_exports.acquireCallRoute_args(...param), "acquireCallRoute", this.protocolType, true, this.requestPath);
  }
  async acquireOACallRoute(...param) {
    return await this.client.request.request(struct_exports.acquireOACallRoute_args(...param), "acquireOACallRoute", this.protocolType, true, this.requestPath);
  }
  async lookupPaidCall(...param) {
    return await this.client.request.request(struct_exports.lookupPaidCall_args(...param), "lookupPaidCall", this.protocolType, true, this.requestPath);
  }
  async acquirePaidCallRoute(...param) {
    return await this.client.request.request(struct_exports.acquirePaidCallRoute_args(...param), "acquirePaidCallRoute", this.protocolType, true, this.requestPath);
  }
  async acquireGroupCallRoute(...param) {
    return await this.client.request.request(struct_exports.acquireGroupCallRoute_args(...param), "acquireGroupCallRoute", this.protocolType, true, this.requestPath);
  }
  async getGroupCall(...param) {
    return await this.client.request.request(struct_exports.getGroupCall_args(...param), "getGroupCall", this.protocolType, true, this.requestPath);
  }
  async inviteIntoGroupCall(...param) {
    return await this.client.request.request(struct_exports.inviteIntoGroupCall_args(...param), "inviteIntoGroupCall", this.protocolType, true, this.requestPath);
  }
  async getGroupCallUrls(...param) {
    return await this.client.request.request(struct_exports.getGroupCallUrls_args(...param), "getGroupCallUrls", this.protocolType, true, this.requestPath);
  }
  async createGroupCallUrl(...param) {
    return await this.client.request.request(struct_exports.createGroupCallUrl_args(...param), "createGroupCallUrl", this.protocolType, true, this.requestPath);
  }
  async deleteGroupCallUrl(...param) {
    return await this.client.request.request(struct_exports.deleteGroupCallUrl_args(...param), "deleteGroupCallUrl", this.protocolType, true, this.requestPath);
  }
  async updateGroupCallUrl(...param) {
    return await this.client.request.request(struct_exports.updateGroupCallUrl_args(...param), "updateGroupCallUrl", this.protocolType, true, this.requestPath);
  }
  async getGroupCallUrlInfo(...param) {
    return await this.client.request.request(struct_exports.getGroupCallUrlInfo_args(...param), "getGroupCallUrlInfo", this.protocolType, true, this.requestPath);
  }
  async joinChatByCallUrl(...param) {
    return await this.client.request.request(struct_exports.joinChatByCallUrl_args(...param), "joinChatByCallUrl", this.protocolType, true, this.requestPath);
  }
  async kickoutFromGroupCall(...param) {
    return await this.client.request.request(struct_exports.kickoutFromGroupCall_args(...param), "kickoutFromGroupCall", this.protocolType, true, this.requestPath);
  }
  async startPhotobooth(...param) {
    return await this.client.request.request(struct_exports.startPhotobooth_args(...param), "startPhotobooth", this.protocolType, true, this.requestPath);
  }
  async usePhotoboothTicket(...param) {
    return await this.client.request.request(struct_exports.usePhotoboothTicket_args(...param), "usePhotoboothTicket", this.protocolType, true, this.requestPath);
  }
  async getPhotoboothBalance(...param) {
    return await this.client.request.request(struct_exports.getPhotoboothBalance_args(...param), "getPhotoboothBalance", this.protocolType, true, this.requestPath);
  }
};
__name(CallService, "CallService");

// node_modules/@evex/linejs/base/service/channel/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var ChannelService = class {
  client;
  protocolType = 4;
  requestPath = "/CH4";
  errorName = "ChannelServiceError";
  constructor(client) {
    this.client = client;
  }
  /**
  * @description Gets the ChannelToken by channelId.\
  * channelIds:
  * - linevoom: 1341209850
  */
  async approveChannelAndIssueChannelToken(...param) {
    return await this.client.request.request(struct_exports.approveChannelAndIssueChannelToken_args(...param), "approveChannelAndIssueChannelToken", this.protocolType, true, this.requestPath);
  }
  async getChannelInfo(...param) {
    return await this.client.request.request(struct_exports.getChannelInfo_args(...param), "getChannelInfo", this.protocolType, true, this.requestPath);
  }
  async getCommonDomains(...param) {
    return await this.client.request.request(struct_exports.getCommonDomains_args(...param), "getCommonDomains", this.protocolType, true, this.requestPath);
  }
  async issueRequestTokenWithAuthScheme(...param) {
    return await this.client.request.request(struct_exports.issueRequestTokenWithAuthScheme_args(...param), "issueRequestTokenWithAuthScheme", this.protocolType, true, this.requestPath);
  }
  async getReturnUrlWithRequestTokenForAutoLogin(...param) {
    return await this.client.request.request(struct_exports.getReturnUrlWithRequestTokenForAutoLogin_args(...param), "getReturnUrlWithRequestTokenForAutoLogin", this.protocolType, true, this.requestPath);
  }
  async getWebLoginDisallowedUrl(...param) {
    return await this.client.request.request(struct_exports.getWebLoginDisallowedUrl_args(...param), "getWebLoginDisallowedUrl", this.protocolType, true, this.requestPath);
  }
  async updateChannelNotificationSetting(...param) {
    return await this.client.request.request(struct_exports.updateChannelNotificationSetting_args(...param), "updateChannelNotificationSetting", this.protocolType, true, this.requestPath);
  }
  async updateChannelSettings(...param) {
    return await this.client.request.request(struct_exports.updateChannelSettings_args(...param), "updateChannelSettings", this.protocolType, true, this.requestPath);
  }
  async getUpdatedChannelIds(...param) {
    return await this.client.request.request(struct_exports.getUpdatedChannelIds_args(...param), "getUpdatedChannelIds", this.protocolType, true, this.requestPath);
  }
  async getChannelNotificationSettings(...param) {
    return await this.client.request.request(struct_exports.getChannelNotificationSettings_args(...param), "getChannelNotificationSettings", this.protocolType, true, this.requestPath);
  }
  async getApprovedChannels(...param) {
    return await this.client.request.request(struct_exports.getApprovedChannels_args(...param), "getApprovedChannels", this.protocolType, true, this.requestPath);
  }
  async issueChannelToken(...param) {
    return await this.client.request.request(struct_exports.issueChannelToken_args(...param), "issueChannelToken", this.protocolType, true, this.requestPath);
  }
};
__name(ChannelService, "ChannelService");

// node_modules/@evex/linejs/base/service/liff/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var _LiffService = class {
  liffTokenCache = {};
  requestPath = "/LIFF1";
  protocolType = 4;
  errorName = "LiffServiceError";
  liffId = "2006747340-AoraPvdD";
  csrfRegExp = /<input type="hidden" name="__csrf" id="__csrf" value="(.*?)">/;
  client;
  constructor(client) {
    this.client = client;
  }
  /**
  * @description Gets the LiffToken by liffId and chatMid.
  */
  async issueLiffView(options) {
    const { chatMid, liffId, lang } = {
      lang: "ja_JP",
      ...options
    };
    let context2 = [
      12,
      1,
      []
    ];
    let chaLINETypes;
    let chat;
    if (chatMid) {
      chat = [
        11,
        1,
        chatMid
      ];
      if ([
        "u",
        "c",
        "r"
      ].includes(chatMid[0])) {
        chaLINETypes = 2;
      } else {
        chaLINETypes = 3;
      }
      context2 = [
        12,
        chaLINETypes,
        [
          chat
        ]
      ];
    }
    return await this.client.request.request([
      [
        12,
        1,
        [
          [
            11,
            1,
            liffId
          ],
          [
            12,
            2,
            [
              context2
            ]
          ],
          [
            11,
            3,
            lang
          ]
        ]
      ]
    ], "issueLiffView", this.protocolType, true, this.requestPath);
  }
  async getLiffViewWithoutUserContext(...param) {
    return await this.client.request.request(struct_exports.getLiffViewWithoutUserContext_args(...param), "getLiffViewWithoutUserContext", this.protocolType, true, this.requestPath);
  }
  async issueSubLiffView(...param) {
    return await this.client.request.request(struct_exports.issueSubLiffView_args(...param), "issueSubLiffView", this.protocolType, true, this.requestPath);
  }
  /**
  * @description Gets the LiffToken by liffId and chatMid with consent.
  */
  async getLiffToken(options) {
    const { chatMid, liffId, lang, tryConsent } = {
      lang: "ja_JP",
      tryConsent: true,
      ...options
    };
    try {
      const liff = await this.issueLiffView({
        liffId,
        chatMid,
        lang
      });
      return liff.accessToken;
    } catch (e) {
      if (e.data) {
        const error3 = e;
        this.client.log("liff-error", {
          ...error3.data
        });
        if (error3.data.liffException.code === "CONSENT_REQUIRED" && tryConsent) {
          const data = error3.data.liffException;
          const payload = data.payload;
          const { channelId, consentUrl } = payload.consentRequired;
          const toType = chatMid && this.client.getToType(chatMid);
          let hasConsent = false;
          if (channelId && consentUrl) {
            if (toType === 4 || this.client.device.startsWith("DESKTOP")) {
              hasConsent = await this.tryConsentAuthorize(consentUrl, channelId);
            } else {
              hasConsent = await this.tryConsentLiff(channelId);
            }
            if (hasConsent) {
              options.tryConsent = false;
              return this.getLiffToken(options);
            }
          }
        }
      }
      throw new InternalError(this.errorName, `Failed to get LiffToken: ${liffId}${chatMid ? "@" + chatMid : ""}`);
    }
  }
  /**
  * @description Send the LiffMessages.
  */
  async sendLiff(options) {
    let token;
    const { to, messages, tryConsent: _tryConsent, forceIssue } = {
      tryConsent: true,
      forceIssue: false,
      ...options
    };
    if (!this.liffTokenCache[to] || forceIssue) {
      token = await this.getLiffToken({
        chatMid: to,
        liffId: this.liffId
      });
    } else {
      token = this.liffTokenCache[to];
    }
    const liffHeaders = {
      Accept: "application/json, text/plain, */*",
      "User-Agent": "Mozilla/5.0 (Linux; Android 4.4.2; G730-U00 Build/JLS36C) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/30.0.0.0 Mobile Safari/537.36 Line/9.8.0",
      "Accept-Encoding": "gzip, deflate",
      "Accept-Language": "zh-TW,zh;q=0.9",
      Authorization: `Bearer ${token}`,
      "content-type": "application/json"
    };
    const payload = JSON.stringify({
      messages
    });
    const response = await this.client.fetch("https://api.line.me/message/v3/share", {
      method: "POST",
      body: payload,
      headers: liffHeaders
    });
    const responseBody = await response.json();
    if (!response.ok) {
      throw new InternalError(this.errorName, `Failed to send Liff message: ${response.statusText}`, responseBody);
    }
    return responseBody;
  }
  async tryConsentLiff(channelId, referer) {
    const payload = JSON.stringify({
      on: [
        "P",
        "CM"
      ],
      off: []
    });
    const headers = {
      "X-LINE-ChannelId": channelId,
      "X-LINE-Access": this.client.authToken,
      "User-Agent": "Mozilla/5.0 (Linux; Android 8.0.1; SAMSUNG Realise/DeachSword; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/56.0.2924.87 Mobile Safari/537.36",
      "Content-Type": "application/json",
      "X-Line-Application": this.client.request.systemType,
      "X-Requested-With": "XMLHttpRequest",
      "Accept-Language": "ja-JP,en-US;q=0.8",
      ...referer ? {
        referer
      } : {}
    };
    const response = await this.client.fetch(_LiffService.CONSENT_API_URL, {
      method: "POST",
      body: payload,
      headers
    });
    return response.ok;
  }
  async tryConsentAuthorize(consentUrl, channelId, allPermission = [
    "P",
    "CM",
    "OC"
  ], approvedPermission = [
    "P",
    "CM",
    "OC"
  ]) {
    const headers = {
      "X-Line-Access": this.client?.authToken,
      "User-Agent": this.client.request.userAgent,
      "X-Line-Application": this.client.request.systemType
    };
    const response = await this.client.fetch(consentUrl, {
      method: "GET",
      headers
    });
    if (response.ok) {
      const cookies = [];
      response.headers.forEach((v2, k) => {
        if (k === "set-cookie") {
          cookies.push(v2.split(";")[0]);
        }
      });
      const text = await response.text();
      const csrfToken = (this.csrfRegExp.exec(text) || [
        null,
        null
      ])[1];
      if (channelId && csrfToken) {
        headers["cookie"] = cookies.join("; ");
        headers["referer"] = consentUrl;
        const authResponse = await this.client.fetch(_LiffService.AUTH_CONSENT_URL, {
          method: "POST",
          body: `${allPermission.map((e) => "allPermission=" + e).join("&")}&${approvedPermission.map((e) => "approvedPermission=" + e).join("&")}&__WLS=&channelId=2006747340&__csrf=${csrfToken}&allow=true`,
          headers
        });
        return authResponse.ok;
      }
    }
    return false;
  }
};
var LiffService = _LiffService;
__name(LiffService, "LiffService");
__publicField(LiffService, "LINE_LIFF_ENDPOINT", "https://api.line.me/message/v3/share");
__publicField(LiffService, "CONSENT_API_URL", "https://access.line.me/dialog/api/permissions");
__publicField(LiffService, "AUTH_CONSENT_URL", "https://access.line.me/oauth2/v2.1/authorize/consent");

// node_modules/@evex/linejs/base/service/livetalk/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var SquareLiveTalkService = class {
  client;
  protocolType = 4;
  requestPath = "/SQLV1";
  errorName = "SquareLiveTalkServiceError";
  constructor(client) {
    this.client = client;
  }
  async acceptSpeakers(...param) {
    return await this.client.request.request(struct_exports.SquareService_acceptSpeakers_args(...param), "acceptSpeakers", this.protocolType, true, this.requestPath);
  }
  async acceptToChangeRole(...param) {
    return await this.client.request.request(struct_exports.SquareService_acceptToChangeRole_args(...param), "acceptToChangeRole", this.protocolType, true, this.requestPath);
  }
  async acceptToListen(...param) {
    return await this.client.request.request(struct_exports.SquareService_acceptToListen_args(...param), "acceptToListen", this.protocolType, true, this.requestPath);
  }
  async acceptToSpeak(...param) {
    return await this.client.request.request(struct_exports.SquareService_acceptToSpeak_args(...param), "acceptToSpeak", this.protocolType, true, this.requestPath);
  }
  async cancelToSpeak(...param) {
    return await this.client.request.request(struct_exports.SquareService_cancelToSpeak_args(...param), "cancelToSpeak", this.protocolType, true, this.requestPath);
  }
  async fetchLiveTalkEvents(...param) {
    return await this.client.request.request(struct_exports.SquareService_fetchLiveTalkEvents_args(...param), "fetchLiveTalkEvents", this.protocolType, true, this.requestPath);
  }
  async findLiveTalkByInvitationTicket(...param) {
    return await this.client.request.request(struct_exports.SquareService_findLiveTalkByInvitationTicket_args(...param), "findLiveTalkByInvitationTicket", this.protocolType, true, this.requestPath);
  }
  async forceEndLiveTalk(...param) {
    return await this.client.request.request(struct_exports.SquareService_forceEndLiveTalk_args(...param), "forceEndLiveTalk", this.protocolType, true, this.requestPath);
  }
  async getLiveTalkInfoForNonMember(...param) {
    return await this.client.request.request(struct_exports.SquareService_getLiveTalkInfoForNonMember_args(...param), "getLiveTalkInfoForNonMember", this.protocolType, true, this.requestPath);
  }
  async getLiveTalkInvitationUrl(...param) {
    return await this.client.request.request(struct_exports.SquareService_getLiveTalkInvitationUrl_args(...param), "getLiveTalkInvitationUrl", this.protocolType, true, this.requestPath);
  }
  async getLiveTalkSpeakersForNonMember(...param) {
    return await this.client.request.request(struct_exports.SquareService_getLiveTalkSpeakersForNonMember_args(...param), "getLiveTalkSpeakersForNonMember", this.protocolType, true, this.requestPath);
  }
  async getSquareInfoByChatMid(...param) {
    return await this.client.request.request(struct_exports.SquareService_getSquareInfoByChatMid_args(...param), "getSquareInfoByChatMid", this.protocolType, true, this.requestPath);
  }
  async inviteToChangeRole(...param) {
    return await this.client.request.request(struct_exports.SquareService_inviteToChangeRole_args(...param), "inviteToChangeRole", this.protocolType, true, this.requestPath);
  }
  async inviteToListen(...param) {
    return await this.client.request.request(struct_exports.SquareService_inviteToListen_args(...param), "inviteToListen", this.protocolType, true, this.requestPath);
  }
  async inviteToLiveTalk(...param) {
    return await this.client.request.request(struct_exports.SquareService_inviteToLiveTalk_args(...param), "inviteToLiveTalk", this.protocolType, true, this.requestPath);
  }
  async inviteToSpeak(...param) {
    return await this.client.request.request(struct_exports.SquareService_inviteToSpeak_args(...param), "inviteToSpeak", this.protocolType, true, this.requestPath);
  }
  async joinLiveTalk(...param) {
    return await this.client.request.request(struct_exports.SquareService_joinLiveTalk_args(...param), "joinLiveTalk", this.protocolType, true, this.requestPath);
  }
  async kickOutLiveTalkParticipants(...param) {
    return await this.client.request.request(struct_exports.SquareService_kickOutLiveTalkParticipants_args(...param), "kickOutLiveTalkParticipants", this.protocolType, true, this.requestPath);
  }
  async rejectSpeakers(...param) {
    return await this.client.request.request(struct_exports.SquareService_rejectSpeakers_args(...param), "rejectSpeakers", this.protocolType, true, this.requestPath);
  }
  async rejectToSpeak(...param) {
    return await this.client.request.request(struct_exports.SquareService_rejectToSpeak_args(...param), "rejectToSpeak", this.protocolType, true, this.requestPath);
  }
  async reportLiveTalk(...param) {
    return await this.client.request.request(struct_exports.SquareService_reportLiveTalk_args(...param), "reportLiveTalk", this.protocolType, true, this.requestPath);
  }
  async reportLiveTalkSpeaker(...param) {
    return await this.client.request.request(struct_exports.SquareService_reportLiveTalkSpeaker_args(...param), "reportLiveTalkSpeaker", this.protocolType, true, this.requestPath);
  }
  async requestToListen(...param) {
    return await this.client.request.request(struct_exports.SquareService_requestToListen_args(...param), "requestToListen", this.protocolType, true, this.requestPath);
  }
  async requestToSpeak(...param) {
    return await this.client.request.request(struct_exports.SquareService_requestToSpeak_args(...param), "requestToSpeak", this.protocolType, true, this.requestPath);
  }
  async updateLiveTalkAttrs(...param) {
    return await this.client.request.request(struct_exports.SquareService_updateLiveTalkAttrs_args(...param), "updateLiveTalkAttrs", this.protocolType, true, this.requestPath);
  }
  async acquireLiveTalk(...param) {
    return await this.client.request.request(struct_exports.SquareService_acquireLiveTalk_args(...param), "acquireLiveTalk", this.protocolType, true, this.requestPath);
  }
};
__name(SquareLiveTalkService, "SquareLiveTalkService");

// node_modules/@evex/linejs/base/service/relation/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var RelationService = class {
  client;
  protocolType = 4;
  requestPath = "/RE4";
  errorName = "RelationServiceError";
  constructor(client) {
    this.client = client;
  }
  async getTargetProfiles(...param) {
    return await this.client.request.request(struct_exports.getTargetProfiles_args(...param), "getTargetProfiles", this.protocolType, true, this.requestPath);
  }
  async getRecommendationDetails(...param) {
    return await this.client.request.request(struct_exports.getRecommendationDetails_args(...param), "getRecommendationDetails", this.protocolType, true, this.requestPath);
  }
  async getContactCalendarEvents(...param) {
    return await this.client.request.request(struct_exports.getContactCalendarEvents_args(...param), "getContactCalendarEvents", this.protocolType, true, this.requestPath);
  }
  async getContactsV3(options) {
    return await this.client.request.request(struct_exports.getContactsV3_args({
      request: {
        targetUsers: options.mids.map((m) => ({
          targetUserMid: m
        })),
        syncReason: "AUTO_REPAIR",
        checkUserStatusStrictly: options.checkUserStatusStrictly
      }
    }), "getContactsV3", this.protocolType, true, this.requestPath);
  }
  async getFriendDetails(...param) {
    return await this.client.request.request(struct_exports.getFriendDetails_args(...param), "getFriendDetails", this.protocolType, true, this.requestPath);
  }
  /**
  * @description Add friend by mid.
  */
  async addFriendByMid(options) {
    const { mid, reference, trackingMetaType, trackingMetaHint } = {
      trackingMetaType: 5,
      ...options
    };
    return await this.client.request.request([
      [
        8,
        1,
        await this.client.getReqseq()
      ],
      [
        11,
        2,
        mid
      ],
      [
        12,
        3,
        [
          [
            11,
            1,
            reference
          ],
          [
            12,
            2,
            [
              [
                12,
                trackingMetaType,
                [
                  [
                    11,
                    1,
                    trackingMetaHint
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ], "addFriendByMid", this.protocolType, false, this.requestPath);
  }
};
__name(RelationService, "RelationService");

// node_modules/@evex/linejs/base/service/square/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var SquareService = class {
  client;
  protocolType = 4;
  requestPath = "/SQ1";
  errorName = "SquareServiceError";
  constructor(client) {
    this.client = client;
  }
  async inviteIntoSquareChat(...param) {
    return await this.client.request.request(struct_exports.SquareService_inviteIntoSquareChat_args(...param), "inviteIntoSquareChat", this.protocolType, true, this.requestPath);
  }
  async inviteToSquare(...param) {
    return await this.client.request.request(struct_exports.SquareService_inviteToSquare_args(...param), "inviteToSquare", this.protocolType, true, this.requestPath);
  }
  async getJoinedSquares(options = {}) {
    return await this.client.request.request(struct_exports.SquareService_getJoinedSquares_args({
      request: {
        limit: 100,
        ...options
      }
    }), "getJoinedSquares", this.protocolType, true, this.requestPath);
  }
  async markAsRead(...param) {
    return await this.client.request.request(struct_exports.SquareService_markAsRead_args(...param), "markAsRead", this.protocolType, true, this.requestPath);
  }
  async reactToMessage(...param) {
    return await this.client.request.request(struct_exports.SquareService_reactToMessage_args(...param), "reactToMessage", this.protocolType, true, this.requestPath);
  }
  async findSquareByInvitationTicket(...param) {
    return await this.client.request.request(struct_exports.SquareService_findSquareByInvitationTicket_args(...param), "findSquareByInvitationTicket", this.protocolType, true, this.requestPath);
  }
  async fetchMyEvents(options) {
    return await this.client.request.request(struct_exports.SquareService_fetchMyEvents_args({
      request: {
        limit: 100,
        ...options
      }
    }), "fetchMyEvents", this.protocolType, true, this.requestPath);
  }
  async fetchSquareChatEvents(options) {
    return await this.client.request.request(struct_exports.SquareService_fetchSquareChatEvents_args({
      request: {
        limit: 100,
        ...options
      }
    }), "fetchSquareChatEvents", this.protocolType, true, this.requestPath);
  }
  async sendMessage(options) {
    return await this.client.request.request(struct_exports.SquareService_sendMessage_args({
      request: {
        reqSeq: await this.client.getReqseq("sq"),
        squareChatMid: options.squareChatMid,
        squareMessage: {
          squareMessageRevision: 4,
          message: {
            to: options.squareChatMid,
            text: options.text,
            contentType: options.contentType ?? 0,
            contentMetadata: options.contentMetadata ?? {},
            location: options.location,
            ...options.relatedMessageId ? {
              relatedMessageId: options.relatedMessageId,
              relatedMessageServiceCode: "SQUARE",
              messageRelationType: "REPLY"
            } : {}
          }
        }
      }
    }), "sendMessage", this.protocolType, true, this.requestPath);
  }
  async getSquare(options) {
    return await this.client.request.request(struct_exports.SquareService_getSquare_args({
      request: {
        mid: options.squareMid
      }
    }), "getSquare", this.protocolType, true, this.requestPath);
  }
  async getJoinableSquareChats(...param) {
    return await this.client.request.request(struct_exports.SquareService_getJoinableSquareChats_args(...param), "getJoinableSquareChats", this.protocolType, true, this.requestPath);
  }
  defaultSquareCoverImageObsHash = "0h6tJfahRYaVt3H0eLAsAWDFheczgHd3wTCTx2eApNKSoefHNVGRdwfgxbdgUMLi8MSngnPFMeNmpbLi8MSngnPFMeNmpbLi8MSngnPQ";
  /**
  *  @description Create square.
  */
  async createSquare(options) {
    return await this.client.request.request(struct_exports.SquareService_createSquare_args({
      request: {
        reqSeq: await this.client.getReqseq("sq"),
        square: {
          name: options.squareName,
          profileImageObsHash: options.profileImageObsHash || this.defaultSquareCoverImageObsHash,
          desc: options.description,
          searchable: options.searchable,
          type: "OPEN",
          categoryId: 1,
          revision: 0,
          ableToUseInvitationTicket: true,
          joinMethod: {
            type: options.SquareJoinMethodType
          },
          adultOnly: "NONE",
          svcTags: []
        },
        creator: {
          displayName: options.displayName,
          ableToReceiveMessage: true,
          revision: 0
        }
      }
    }), "createSquare", this.protocolType, true, this.requestPath);
  }
  async getSquareChatAnnouncements(...param) {
    return await this.client.request.request(struct_exports.SquareService_getSquareChatAnnouncements_args(...param), "getSquareChatAnnouncements", this.protocolType, true, this.requestPath);
  }
  async leaveSquareChat(...param) {
    return await this.client.request.request(struct_exports.SquareService_leaveSquareChat_args(...param), "leaveSquareChat", this.protocolType, true, this.requestPath);
  }
  async getSquareChatMember(...param) {
    return await this.client.request.request(struct_exports.SquareService_getSquareChatMember_args(...param), "getSquareChatMember", this.protocolType, true, this.requestPath);
  }
  async searchSquares(...param) {
    return await this.client.request.request(struct_exports.SquareService_searchSquares_args(...param), "searchSquares", this.protocolType, true, this.requestPath);
  }
  async updateSquareFeatureSet(...param) {
    return await this.client.request.request(struct_exports.SquareService_updateSquareFeatureSet_args(...param), "updateSquareFeatureSet", this.protocolType, true, this.requestPath);
  }
  async joinSquare(options) {
    return await this.client.request.request(struct_exports.SquareService_joinSquare_args({
      request: {
        squareMid: options.squareMid,
        joinValue: {
          approvalValue: {
            message: options.joinMessage
          },
          codeValue: {
            code: options.passCode
          }
        },
        member: {
          squareMid: options.squareMid,
          displayName: options.displayName,
          ableToReceiveMessage: options.ableToReceiveMessage,
          revision: 0
        }
      }
    }), "joinSquare", this.protocolType, true, this.requestPath);
  }
  async getPopularKeywords(...param) {
    return await this.client.request.request(struct_exports.SquareService_getPopularKeywords_args(...param), "getPopularKeywords", this.protocolType, true, this.requestPath);
  }
  async reportSquareMessage(...param) {
    return await this.client.request.request(struct_exports.SquareService_reportSquareMessage_args(...param), "reportSquareMessage", this.protocolType, true, this.requestPath);
  }
  async updateSquareMemberRelation(...param) {
    return await this.client.request.request(struct_exports.SquareService_updateSquareMemberRelation_args(...param), "updateSquareMemberRelation", this.protocolType, true, this.requestPath);
  }
  async leaveSquare(...param) {
    return await this.client.request.request(struct_exports.SquareService_leaveSquare_args(...param), "leaveSquare", this.protocolType, true, this.requestPath);
  }
  async getSquareMemberRelations(...param) {
    return await this.client.request.request(struct_exports.SquareService_getSquareMemberRelations_args(...param), "getSquareMemberRelations", this.protocolType, true, this.requestPath);
  }
  async removeSubscriptions(...param) {
    return await this.client.request.request(struct_exports.SquareService_removeSubscriptions_args(...param), "removeSubscriptions", this.protocolType, true, this.requestPath);
  }
  async getSquareMembers(...param) {
    return await this.client.request.request(struct_exports.SquareService_getSquareMembers_args(...param), "getSquareMembers", this.protocolType, true, this.requestPath);
  }
  async updateSquareChat(...param) {
    return await this.client.request.request(struct_exports.SquareService_updateSquareChat_args(...param), "updateSquareChat", this.protocolType, true, this.requestPath);
  }
  async destroyMessage(options) {
    return await this.client.request.request(struct_exports.SquareService_destroyMessage_args({
      request: {
        messageId: options.messageId,
        squareChatMid: options.squareChatMid,
        threadMid: options.threadMid
      }
    }), "destroyMessage", this.protocolType, true, this.requestPath);
  }
  async reportSquareChat(...param) {
    return await this.client.request.request(struct_exports.SquareService_reportSquareChat_args(...param), "reportSquareChat", this.protocolType, true, this.requestPath);
  }
  async unsendMessage(options) {
    return await this.client.request.request(struct_exports.SquareService_unsendMessage_args({
      request: {
        messageId: options.messageId,
        squareChatMid: options.squareChatMid,
        threadMid: options.threadMid
      }
    }), "unsendMessage", this.protocolType, true, this.requestPath);
  }
  async deleteSquareChatAnnouncement(...param) {
    return await this.client.request.request(struct_exports.SquareService_deleteSquareChatAnnouncement_args(...param), "deleteSquareChatAnnouncement", this.protocolType, true, this.requestPath);
  }
  async createSquareChat(...param) {
    return await this.client.request.request(struct_exports.SquareService_createSquareChat_args(...param), "createSquareChat", this.protocolType, true, this.requestPath);
  }
  async deleteSquareChat(...param) {
    return await this.client.request.request(struct_exports.SquareService_deleteSquareChat_args(...param), "deleteSquareChat", this.protocolType, true, this.requestPath);
  }
  async getSquareChatMembers(options) {
    return await this.client.request.request(struct_exports.SquareService_getSquareChatMembers_args({
      request: {
        continuationToken: options.continuationToken,
        squareChatMid: options.squareChatMid,
        limit: options.limit ?? 100
      }
    }), "getSquareChatMembers", this.protocolType, true, this.requestPath);
  }
  async getSquareFeatureSet(...param) {
    return await this.client.request.request(struct_exports.SquareService_getSquareFeatureSet_args(...param), "getSquareFeatureSet", this.protocolType, true, this.requestPath);
  }
  async updateSquareAuthority(...param) {
    return await this.client.request.request(struct_exports.SquareService_updateSquareAuthority_args(...param), "updateSquareAuthority", this.protocolType, true, this.requestPath);
  }
  async rejectSquareMembers(...param) {
    return await this.client.request.request(struct_exports.SquareService_rejectSquareMembers_args(...param), "rejectSquareMembers", this.protocolType, true, this.requestPath);
  }
  async deleteSquare(...param) {
    return await this.client.request.request(struct_exports.SquareService_deleteSquare_args(...param), "deleteSquare", this.protocolType, true, this.requestPath);
  }
  async reportSquare(...param) {
    return await this.client.request.request(struct_exports.SquareService_reportSquare_args(...param), "reportSquare", this.protocolType, true, this.requestPath);
  }
  async getInvitationTicketUrl(...param) {
    return await this.client.request.request(struct_exports.SquareService_getInvitationTicketUrl_args(...param), "getInvitationTicketUrl", this.protocolType, true, this.requestPath);
  }
  async updateSquareChatMember(...param) {
    return await this.client.request.request(struct_exports.SquareService_updateSquareChatMember_args(...param), "updateSquareChatMember", this.protocolType, true, this.requestPath);
  }
  async updateSquareMember(...param) {
    return await this.client.request.request(struct_exports.SquareService_updateSquareMember_args(...param), "updateSquareMember", this.protocolType, true, this.requestPath);
  }
  async updateSquare(...param) {
    return await this.client.request.request(struct_exports.SquareService_updateSquare_args(...param), "updateSquare", this.protocolType, true, this.requestPath);
  }
  async getSquareAuthorities(...param) {
    return await this.client.request.request(struct_exports.SquareService_getSquareAuthorities_args(...param), "getSquareAuthorities", this.protocolType, true, this.requestPath);
  }
  async updateSquareMembers(...param) {
    return await this.client.request.request(struct_exports.SquareService_updateSquareMembers_args(...param), "updateSquareMembers", this.protocolType, true, this.requestPath);
  }
  async getSquareChatStatus(...param) {
    return await this.client.request.request(struct_exports.SquareService_getSquareChatStatus_args(...param), "getSquareChatStatus", this.protocolType, true, this.requestPath);
  }
  async approveSquareMembers(...param) {
    return await this.client.request.request(struct_exports.SquareService_approveSquareMembers_args(...param), "approveSquareMembers", this.protocolType, true, this.requestPath);
  }
  async getSquareStatus(...param) {
    return await this.client.request.request(struct_exports.SquareService_getSquareStatus_args(...param), "getSquareStatus", this.protocolType, true, this.requestPath);
  }
  async searchSquareMembers(...param) {
    return await this.client.request.request(struct_exports.SquareService_searchSquareMembers_args(...param), "searchSquareMembers", this.protocolType, true, this.requestPath);
  }
  async checkJoinCode(...param) {
    return await this.client.request.request(struct_exports.SquareService_checkJoinCode_args(...param), "checkJoinCode", this.protocolType, true, this.requestPath);
  }
  async createSquareChatAnnouncement(options) {
    return await this.client.request.request(struct_exports.SquareService_createSquareChatAnnouncement_args({
      createSquareChatAnnouncementRequest: {
        reqSeq: 0,
        squareChatMid: options.squareChatMid,
        squareChatAnnouncement: {
          announcementSeq: 0,
          contents: {
            textMessageAnnouncementContents: {
              senderSquareMemberMid: options.senderMid,
              messageId: options.messageId,
              text: options.text
            }
          },
          createdAt: options.createdAt,
          type: 0
        }
      }
    }), "createSquareChatAnnouncement", this.protocolType, true, this.requestPath);
  }
  async getSquareAuthority(...param) {
    return await this.client.request.request(struct_exports.SquareService_getSquareAuthority_args(...param), "getSquareAuthority", this.protocolType, true, this.requestPath);
  }
  async getSquareChat(options) {
    return await this.client.request.request(struct_exports.SquareService_getSquareChat_args({
      request: {
        squareChatMid: options.squareChatMid
      }
    }), "getSquareChat", this.protocolType, true, this.requestPath);
  }
  async refreshSubscriptions(...param) {
    return await this.client.request.request(struct_exports.SquareService_refreshSubscriptions_args(...param), "refreshSubscriptions", this.protocolType, true, this.requestPath);
  }
  async getJoinedSquareChats(...param) {
    return await this.client.request.request(struct_exports.SquareService_getJoinedSquareChats_args(...param), "getJoinedSquareChats", this.protocolType, true, this.requestPath);
  }
  async joinSquareChat(...param) {
    return await this.client.request.request(struct_exports.SquareService_joinSquareChat_args(...param), "joinSquareChat", this.protocolType, true, this.requestPath);
  }
  async findSquareByEmid(...param) {
    return await this.client.request.request(struct_exports.SquareService_findSquareByEmid_args(...param), "findSquareByEmid", this.protocolType, true, this.requestPath);
  }
  async getSquareMemberRelation(...param) {
    return await this.client.request.request(struct_exports.SquareService_getSquareMemberRelation_args(...param), "getSquareMemberRelation", this.protocolType, true, this.requestPath);
  }
  async getSquareMember(options) {
    return await this.client.request.request(struct_exports.SquareService_getSquareMember_args({
      request: options
    }), "getSquareMember", this.protocolType, true, this.requestPath);
  }
  async destroyMessages(...param) {
    return await this.client.request.request(struct_exports.SquareService_destroyMessages_args(...param), "destroyMessages", this.protocolType, true, this.requestPath);
  }
  async getCategories(...param) {
    return await this.client.request.request(struct_exports.SquareService_getCategories_args(...param), "getCategories", this.protocolType, true, this.requestPath);
  }
  async reportSquareMember(...param) {
    return await this.client.request.request(struct_exports.SquareService_reportSquareMember_args(...param), "reportSquareMember", this.protocolType, true, this.requestPath);
  }
  async getNoteStatus(...param) {
    return await this.client.request.request(struct_exports.SquareService_getNoteStatus_args(...param), "getNoteStatus", this.protocolType, true, this.requestPath);
  }
  async searchSquareChatMembers(options) {
    return await this.client.request.request(struct_exports.SquareService_searchSquareChatMembers_args({
      request: {
        searchOption: options.searchOption,
        continuationToken: options.continuationToken,
        squareChatMid: options.squareChatMid,
        limit: options.limit ?? 100
      }
    }), "searchSquareChatMembers", this.protocolType, true, this.requestPath);
  }
  async getSquareChatFeatureSet(...param) {
    return await this.client.request.request(struct_exports.SquareService_getSquareChatFeatureSet_args(...param), "getSquareChatFeatureSet", this.protocolType, true, this.requestPath);
  }
  async getSquareEmid(...param) {
    return await this.client.request.request(struct_exports.SquareService_getSquareEmid_args(...param), "getSquareEmid", this.protocolType, true, this.requestPath);
  }
  async getSquareMembersBySquare(...param) {
    return await this.client.request.request(struct_exports.SquareService_getSquareMembersBySquare_args(...param), "getSquareMembersBySquare", this.protocolType, true, this.requestPath);
  }
  async manualRepair(...param) {
    return await this.client.request.request(struct_exports.SquareService_manualRepair_args(...param), "manualRepair", this.protocolType, true, this.requestPath);
  }
  async syncSquareMembers(...param) {
    return await this.client.request.request(struct_exports.SquareService_syncSquareMembers_args(...param), "syncSquareMembers", this.protocolType, true, this.requestPath);
  }
  async hideSquareMemberContents(...param) {
    return await this.client.request.request(struct_exports.SquareService_hideSquareMemberContents_args(...param), "hideSquareMemberContents", this.protocolType, true, this.requestPath);
  }
  async markChatsAsRead(...param) {
    return await this.client.request.request(struct_exports.SquareService_markChatsAsRead_args(...param), "markChatsAsRead", this.protocolType, true, this.requestPath);
  }
  async reportMessageSummary(...param) {
    return await this.client.request.request(struct_exports.SquareService_reportMessageSummary_args(...param), "reportMessageSummary", this.protocolType, true, this.requestPath);
  }
  async getGoogleAdOptions(...param) {
    return await this.client.request.request(struct_exports.SquareService_getGoogleAdOptions_args(...param), "getGoogleAdOptions", this.protocolType, true, this.requestPath);
  }
  async unhideSquareMemberContents(...param) {
    return await this.client.request.request(struct_exports.SquareService_unhideSquareMemberContents_args(...param), "unhideSquareMemberContents", this.protocolType, true, this.requestPath);
  }
  async getSquareChatEmid(...param) {
    return await this.client.request.request(struct_exports.SquareService_getSquareChatEmid_args(...param), "getSquareChatEmid", this.protocolType, true, this.requestPath);
  }
  async getSquareThread(...param) {
    return await this.client.request.request(struct_exports.SquareService_getSquareThread_args(...param), "getSquareThread", this.protocolType, true, this.requestPath);
  }
  async getSquareThreadMid(...param) {
    return await this.client.request.request(struct_exports.SquareService_getSquareThreadMid_args(...param), "getSquareThreadMid", this.protocolType, true, this.requestPath);
  }
  async getUserSettings(...param) {
    return await this.client.request.request(struct_exports.SquareService_getUserSettings_args(...param), "getUserSettings", this.protocolType, true, this.requestPath);
  }
  async markThreadsAsRead(...param) {
    return await this.client.request.request(struct_exports.SquareService_markThreadsAsRead_args(...param), "markThreadsAsRead", this.protocolType, true, this.requestPath);
  }
  async sendSquareThreadMessage(...param) {
    return await this.client.request.request(struct_exports.SquareService_sendSquareThreadMessage_args(...param), "sendSquareThreadMessage", this.protocolType, true, this.requestPath);
  }
  async findSquareByInvitationTicketV2(...param) {
    return await this.client.request.request(struct_exports.SquareService_findSquareByInvitationTicketV2_args(...param), "findSquareByInvitationTicketV2", this.protocolType, true, this.requestPath);
  }
  async leaveSquareThread(...param) {
    return await this.client.request.request(struct_exports.SquareService_leaveSquareThread_args(...param), "leaveSquareThread", this.protocolType, true, this.requestPath);
  }
  async joinSquareThread(...param) {
    return await this.client.request.request(struct_exports.SquareService_joinSquareThread_args(...param), "joinSquareThread", this.protocolType, true, this.requestPath);
  }
  async updateUserSettings(...param) {
    return await this.client.request.request(struct_exports.SquareService_updateUserSettings_args(...param), "updateUserSettings", this.protocolType, true, this.requestPath);
  }
};
__name(SquareService, "SquareService");

// node_modules/@evex/linejs/base/service/talk/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var TalkService = class {
  client;
  protocolType = 4;
  requestPath = "/S4";
  errorName = "TalkServiceError";
  constructor(client) {
    this.client = client;
  }
  /**
  * Retrieves LINE events from the server.
  *
  * @param options - Optional parameters for retrieving events.
  * @param options.limit - The maximum number of events to retrieve. Default is 100.
  * @param options.revision - The last known revision number. Default is 0.
  * @param options.globalRev - The last known global revision number. Default is 0.
  * @param options.individualRev - The last known individual revision number. Default is 0.
  * @param options.timeout - The timeout for the request in milliseconds. Default is the client's long timeout configuration.
  * @returns A promise that resolves to the success result of the event retrieval.
  */
  async sync(options = {}) {
    const { limit, revision, individualRev, globalRev, timeout } = {
      limit: 100,
      revision: 0,
      globalRev: 0,
      individualRev: 0,
      timeout: this.client.config.longTimeout,
      ...options
    };
    return await this.client.request.request(struct_exports.sync_args({
      request: {
        lastRevision: revision,
        lastGlobalRevision: globalRev,
        lastIndividualRevision: individualRev,
        count: limit
      }
    }), "sync", 4, true, "/SYNC4", {}, timeout);
  }
  /**
  * Sends a message to a specified recipient with various options.
  *
  * @param options - The options for sending the message.
  * @param options.to - The recipient's ID.
  * @param options.text - The text content of the message (optional).
  * @param options.contentType - The type of content being sent (optional).
  * @param options.contentMetadata - Additional metadata for the content (optional).
  * @param options.relatedMessageId - The ID of a related message, if any (optional).
  * @param options.location - The location information to be sent (optional).
  * @param options.chunks - The message content in chunks, either as strings or buffers (optional).
  * @param options.e2ee - Flag indicating whether to use end-to-end encryption (optional).
  * @returns A promise that resolves to the sent message.
  * @throws Will throw an error if the message sending fails.
  */
  async sendMessage(options) {
    const { to, text, contentType, contentMetadata, relatedMessageId, location, e2ee, chunks } = {
      contentType: "NONE",
      contentMetadata: {},
      ...options
    };
    if (e2ee && !chunks && location || e2ee && !chunks && text) {
      const chunks2 = await this.client.e2ee.encryptE2EEMessage(to, text || location || "invalid", contentType);
      const _contentMetadata = {
        ...contentMetadata,
        ...{
          e2eeVersion: "2",
          contentType: (ContentType(contentType) || 0).toString(),
          e2eeMark: "2"
        }
      };
      const options2 = {
        to,
        contentType,
        contentMetadata: _contentMetadata,
        relatedMessageId,
        e2ee,
        chunks: chunks2
      };
      return this.sendMessage(options2);
    }
    const message = struct_exports.sendMessage_args({
      seq: await this.client.getReqseq(),
      message: {
        reactions: void 0,
        to,
        createdTime: 0,
        deliveredTime: 0,
        hasContent: false,
        contentType,
        contentMetadata,
        sessionId: 0,
        text,
        location,
        chunks,
        relatedMessageId,
        ...relatedMessageId ? {
          messageRelationType: "REPLY",
          relatedMessageServiceCode: "TALK"
        } : {}
      }
    });
    try {
      return await this.client.request.request(message, "sendMessage", this.protocolType, true, this.requestPath);
    } catch (error3) {
      if (error3 instanceof InternalError && (error3.data?.code.toString()).includes("E2EE") && typeof e2ee === "undefined") {
        options.e2ee = true;
        return this.sendMessage(options);
      } else {
        throw error3;
      }
    }
  }
  async getProfile(...param) {
    return await this.client.request.request(struct_exports.getProfile_args(...param), "getProfile", this.protocolType, "Profile", this.requestPath);
  }
  async getSettings(...param) {
    return await this.client.request.request(struct_exports.getSettings_args(...param), "getSettings", this.protocolType, true, this.requestPath);
  }
  async sendChatChecked(...param) {
    return await this.client.request.request(struct_exports.sendChatChecked_args(...param), "sendChatChecked", this.protocolType, true, this.requestPath);
  }
  async unsendMessage(...param) {
    return await this.client.request.request(struct_exports.unsendMessage_args(...param), "unsendMessage", this.protocolType, true, this.requestPath);
  }
  async deleteOtherFromChat(...param) {
    return await this.client.request.request(struct_exports.deleteOtherFromChat_args(...param), "deleteOtherFromChat", this.protocolType, true, this.requestPath);
  }
  async inviteIntoChat(options) {
    return await this.client.request.request(struct_exports.inviteIntoChat_args({
      request: {
        targetUserMids: options.targetUserMids,
        chatMid: options.chatMid
      }
    }), "inviteIntoChat", this.protocolType, true, this.requestPath);
  }
  async cancelChatInvitation(...param) {
    return await this.client.request.request(struct_exports.cancelChatInvitation_args(...param), "cancelChatInvitation", this.protocolType, true, this.requestPath);
  }
  async deleteSelfFromChat(...param) {
    return await this.client.request.request(struct_exports.deleteSelfFromChat_args(...param), "deleteSelfFromChat", this.protocolType, true, this.requestPath);
  }
  async acceptChatInvitation(...param) {
    return await this.client.request.request(struct_exports.acceptChatInvitation_args(...param), "acceptChatInvitation", this.protocolType, true, this.requestPath);
  }
  async reissueChatTicket(...param) {
    return await this.client.request.request(struct_exports.reissueChatTicket_args(...param), "reissueChatTicket", this.protocolType, true, this.requestPath);
  }
  async findChatByTicket(...param) {
    return await this.client.request.request(struct_exports.findChatByTicket_args(...param), "findChatByTicket", this.protocolType, true, this.requestPath);
  }
  async acceptChatInvitationByTicket(...param) {
    return await this.client.request.request(struct_exports.acceptChatInvitationByTicket_args(...param), "acceptChatInvitationByTicket", this.protocolType, true, this.requestPath);
  }
  async updateChat(...param) {
    return await this.client.request.request(struct_exports.updateChat_args(...param), "updateChat", this.protocolType, true, this.requestPath);
  }
  async getAllContactIds(...param) {
    return await this.client.request.request(struct_exports.getAllContactIds_args(...param), "getAllContactIds", this.protocolType, true, this.requestPath);
  }
  async getBlockedContactIds(...param) {
    return await this.client.request.request(struct_exports.getBlockedContactIds_args(...param), "getBlockedContactIds", this.protocolType, true, this.requestPath);
  }
  async getBlockedRecommendationIds(...param) {
    return await this.client.request.request(struct_exports.getBlockedRecommendationIds_args(...param), "getBlockedRecommendationIds", this.protocolType, true, this.requestPath);
  }
  async sendPostback(...param) {
    return await this.client.request.request(struct_exports.sendPostback_args(...param), "sendPostback", this.protocolType, true, this.requestPath);
  }
  async getMessageBoxes(...param) {
    return await this.client.request.request(struct_exports.getMessageBoxes_args(...param), "getMessageBoxes", this.protocolType, true, this.requestPath);
  }
  async getChatRoomAnnouncementsBulk(...param) {
    return await this.client.request.request(struct_exports.getChatRoomAnnouncementsBulk_args(...param), "getChatRoomAnnouncementsBulk", this.protocolType, true, this.requestPath);
  }
  async getChatRoomAnnouncements(...param) {
    return await this.client.request.request(struct_exports.getChatRoomAnnouncements_args(...param), "getChatRoomAnnouncements", this.protocolType, true, this.requestPath);
  }
  async removeChatRoomAnnouncement(...param) {
    return await this.client.request.request(struct_exports.removeChatRoomAnnouncement_args(...param), "removeChatRoomAnnouncement", this.protocolType, true, this.requestPath);
  }
  async createChatRoomAnnouncement(...param) {
    return await this.client.request.request(struct_exports.createChatRoomAnnouncement_args(...param), "createChatRoomAnnouncement", this.protocolType, true, this.requestPath);
  }
  async leaveRoom(...param) {
    return await this.client.request.request(struct_exports.leaveRoom_args(...param), "leaveRoom", this.protocolType, true, this.requestPath);
  }
  async getRoomsV2(...param) {
    return await this.client.request.request(struct_exports.getRoomsV2_args(...param), "getRoomsV2", this.protocolType, true, this.requestPath);
  }
  async createRoomV2(...param) {
    return await this.client.request.request(struct_exports.createRoomV2_args(...param), "createRoomV2", this.protocolType, true, this.requestPath);
  }
  async getCountries(...param) {
    return await this.client.request.request(struct_exports.getCountries_args(...param), "getCountries", this.protocolType, true, this.requestPath);
  }
  async acquireEncryptedAccessToken(...param) {
    return await this.client.request.request(struct_exports.acquireEncryptedAccessToken_args(...param), "acquireEncryptedAccessToken", this.protocolType, true, this.requestPath);
  }
  async blockContact(...param) {
    return await this.client.request.request(struct_exports.blockContact_args(...param), "blockContact", this.protocolType, true, this.requestPath);
  }
  async unblockContact(...param) {
    return await this.client.request.request(struct_exports.unblockContact_args(...param), "unblockContact", this.protocolType, true, this.requestPath);
  }
  async getConfigurations(...param) {
    return await this.client.request.request(struct_exports.getConfigurations_args(...param), "getConfigurations", this.protocolType, true, this.requestPath);
  }
  async fetchOperations(...param) {
    return await this.client.request.request(struct_exports.fetchOperations_args(...param), "fetchOperations", this.protocolType, true, this.requestPath);
  }
  async getRepairElements(...param) {
    return await this.client.request.request(struct_exports.getRepairElements_args(...param), "getRepairElements", this.protocolType, true, this.requestPath);
  }
  async getSettingsAttributes2(...param) {
    return await this.client.request.request(struct_exports.getSettingsAttributes2_args(...param), "getSettingsAttributes2", this.protocolType, true, this.requestPath);
  }
  async updateSettingsAttributes2(...param) {
    return await this.client.request.request(struct_exports.updateSettingsAttributes2_args(...param), "updateSettingsAttributes2", this.protocolType, true, this.requestPath);
  }
  async rejectChatInvitation(...param) {
    return await this.client.request.request(struct_exports.rejectChatInvitation_args(...param), "rejectChatInvitation", this.protocolType, true, this.requestPath);
  }
  async getE2EEPublicKey(...param) {
    return await this.client.request.request(struct_exports.getE2EEPublicKey_args(...param), "getE2EEPublicKey", this.protocolType, true, this.requestPath);
  }
  async getE2EEPublicKeys() {
    return await this.client.request.request([], "getE2EEPublicKeys", this.protocolType, false, this.requestPath);
  }
  async registerE2EEPublicKey(...param) {
    return await this.client.request.request(struct_exports.registerE2EEPublicKey_args(...param), "registerE2EEPublicKey", this.protocolType, true, this.requestPath);
  }
  async registerE2EEGroupKey(...param) {
    return await this.client.request.request(struct_exports.registerE2EEGroupKey_args(...param), "registerE2EEGroupKey", this.protocolType, true, this.requestPath);
  }
  async getE2EEGroupSharedKey(...param) {
    return await this.client.request.request(struct_exports.getE2EEGroupSharedKey_args(...param), "getE2EEGroupSharedKey", this.protocolType, true, this.requestPath);
  }
  async getLastE2EEGroupSharedKey(...param) {
    return await this.client.request.request(struct_exports.getLastE2EEGroupSharedKey_args(...param), "getLastE2EEGroupSharedKey", this.protocolType, true, this.requestPath);
  }
  async getLastE2EEPublicKeys(...param) {
    return await this.client.request.request(struct_exports.getLastE2EEPublicKeys_args(...param), "getLastE2EEPublicKeys", this.protocolType, true, this.requestPath);
  }
  async negotiateE2EEPublicKey(...param) {
    return await this.client.request.request(struct_exports.negotiateE2EEPublicKey_args(...param), "negotiateE2EEPublicKey", this.protocolType, true, this.requestPath);
  }
  async react(options) {
    return await this.client.request.request(struct_exports.react_args({
      reactRequest: {
        reqSeq: 0,
        messageId: options.id,
        reactionType: {
          predefinedReactionType: options.reaction
        }
      }
    }), "react", this.protocolType, true, this.requestPath);
  }
  async createChat(...param) {
    return await this.client.request.request(struct_exports.createChat_args(...param), "createChat", this.protocolType, true, this.requestPath);
  }
  async setChatHiddenStatus(...param) {
    return await this.client.request.request(struct_exports.setChatHiddenStatus_args(...param), "setChatHiddenStatus", this.protocolType, true, this.requestPath);
  }
  async getFollowers(...param) {
    return await this.client.request.request(struct_exports.getFollowers_args(...param), "getFollowers", this.protocolType, true, this.requestPath);
  }
  async getFollowings(...param) {
    return await this.client.request.request(struct_exports.getFollowings_args(...param), "getFollowings", this.protocolType, true, this.requestPath);
  }
  async removeFollower(...param) {
    return await this.client.request.request(struct_exports.removeFollower_args(...param), "removeFollower", this.protocolType, true, this.requestPath);
  }
  async follow(...param) {
    return await this.client.request.request(struct_exports.follow_args(...param), "follow", this.protocolType, true, this.requestPath);
  }
  async unfollow(...param) {
    return await this.client.request.request(struct_exports.unfollow_args(...param), "unfollow", this.protocolType, true, this.requestPath);
  }
  async bulkFollow(...param) {
    return await this.client.request.request(struct_exports.bulkFollow_args(...param), "bulkFollow", this.protocolType, true, this.requestPath);
  }
  async decryptFollowEMid(...param) {
    return await this.client.request.request(struct_exports.decryptFollowEMid_args(...param), "decryptFollowEMid", this.protocolType, true, this.requestPath);
  }
  async getMessageReadRange(...param) {
    return await this.client.request.request(struct_exports.getMessageReadRange_args(...param), "getMessageReadRange", this.protocolType, true, this.requestPath);
  }
  async getChatRoomBGMs(...param) {
    return await this.client.request.request(struct_exports.getChatRoomBGMs_args(...param), "getChatRoomBGMs", this.protocolType, true, this.requestPath);
  }
  async updateChatRoomBGM(...param) {
    return await this.client.request.request(struct_exports.updateChatRoomBGM_args(...param), "updateChatRoomBGM", this.protocolType, true, this.requestPath);
  }
  async blockRecommendation(...param) {
    return await this.client.request.request(struct_exports.blockRecommendation_args(...param), "blockRecommendation", this.protocolType, true, this.requestPath);
  }
  async unblockRecommendation(...param) {
    return await this.client.request.request(struct_exports.unblockRecommendation_args(...param), "unblockRecommendation", this.protocolType, true, this.requestPath);
  }
  async getRecommendationIds(...param) {
    return await this.client.request.request(struct_exports.getRecommendationIds_args(...param), "getRecommendationIds", this.protocolType, true, this.requestPath);
  }
  async getExtendedProfile(...param) {
    return await this.client.request.request(struct_exports.getExtendedProfile_args(...param), "getExtendedProfile", this.protocolType, true, this.requestPath);
  }
  async updateExtendedProfileAttribute(...param) {
    return await this.client.request.request(struct_exports.updateExtendedProfileAttribute_args(...param), "updateExtendedProfileAttribute", this.protocolType, true, this.requestPath);
  }
  async setNotificationsEnabled(...param) {
    return await this.client.request.request(struct_exports.setNotificationsEnabled_args(...param), "setNotificationsEnabled", this.protocolType, true, this.requestPath);
  }
  async syncContacts(...param) {
    return await this.client.request.request(struct_exports.syncContacts_args(...param), "syncContacts", this.protocolType, true, this.requestPath);
  }
  async findContactsByPhone(...param) {
    return await this.client.request.request(struct_exports.findContactsByPhone_args(...param), "findContactsByPhone", this.protocolType, true, this.requestPath);
  }
  async findContactByUserid(...param) {
    return await this.client.request.request(struct_exports.findContactByUserid_args(...param), "findContactByUserid", this.protocolType, true, this.requestPath);
  }
  async updateContactSetting(...param) {
    return await this.client.request.request(struct_exports.updateContactSetting_args(...param), "updateContactSetting", this.protocolType, true, this.requestPath);
  }
  async findContactByUserTicket(...param) {
    return await this.client.request.request(struct_exports.findContactByUserTicket_args(...param), "findContactByUserTicket", this.protocolType, true, this.requestPath);
  }
  async verifyQrcode(...param) {
    return await this.client.request.request(struct_exports.verifyQrcode_args(...param), "verifyQrcode", this.protocolType, true, this.requestPath);
  }
  async reportAbuseEx(...param) {
    return await this.client.request.request(struct_exports.reportAbuseEx_args(...param), "reportAbuseEx", this.protocolType, true, this.requestPath);
  }
  async updateProfileAttributes(...param) {
    return await this.client.request.request(struct_exports.updateProfileAttributes_args(...param), "updateProfileAttributes", this.protocolType, true, this.requestPath);
  }
  async updateNotificationToken(...param) {
    return await this.client.request.request(struct_exports.updateNotificationToken_args(...param), "updateNotificationToken", this.protocolType, true, this.requestPath);
  }
  async tryFriendRequest(...param) {
    return await this.client.request.request(struct_exports.tryFriendRequest_args(...param), "tryFriendRequest", this.protocolType, true, this.requestPath);
  }
  async generateUserTicket(...param) {
    return await this.client.request.request(struct_exports.generateUserTicket_args(...param), "generateUserTicket", this.protocolType, true, this.requestPath);
  }
  async getRecentFriendRequests(...param) {
    return await this.client.request.request(struct_exports.getRecentFriendRequests_args(...param), "getRecentFriendRequests", this.protocolType, true, this.requestPath);
  }
  async resendPinCode(...param) {
    return await this.client.request.request(struct_exports.resendPinCode_args(...param), "resendPinCode", this.protocolType, true, this.requestPath);
  }
  async notifyRegistrationComplete(...param) {
    return await this.client.request.request(struct_exports.notifyRegistrationComplete_args(...param), "notifyRegistrationComplete", this.protocolType, true, this.requestPath);
  }
  async getInstantNews(...param) {
    return await this.client.request.request(struct_exports.getInstantNews_args(...param), "getInstantNews", this.protocolType, true, this.requestPath);
  }
  async changeVerificationMethod(...param) {
    return await this.client.request.request(struct_exports.changeVerificationMethod_args(...param), "changeVerificationMethod", this.protocolType, true, this.requestPath);
  }
  async getChatEffectMetaList(...param) {
    return await this.client.request.request(struct_exports.getChatEffectMetaList_args(...param), "getChatEffectMetaList", this.protocolType, true, this.requestPath);
  }
  async notifyInstalled(...param) {
    return await this.client.request.request(struct_exports.notifyInstalled_args(...param), "notifyInstalled", this.protocolType, true, this.requestPath);
  }
  async reportDeviceState(...param) {
    return await this.client.request.request(struct_exports.reportDeviceState_args(...param), "reportDeviceState", this.protocolType, true, this.requestPath);
  }
  async sendChatRemoved(...param) {
    return await this.client.request.request(struct_exports.sendChatRemoved_args(...param), "sendChatRemoved", this.protocolType, true, this.requestPath);
  }
  async startUpdateVerification(...param) {
    return await this.client.request.request(struct_exports.startUpdateVerification_args(...param), "startUpdateVerification", this.protocolType, true, this.requestPath);
  }
  async inviteIntoRoom(...param) {
    return await this.client.request.request(struct_exports.inviteIntoRoom_args(...param), "inviteIntoRoom", this.protocolType, true, this.requestPath);
  }
  async removeFriendRequest(...param) {
    return await this.client.request.request(struct_exports.removeFriendRequest_args(...param), "removeFriendRequest", this.protocolType, true, this.requestPath);
  }
  async reportProfile(...param) {
    return await this.client.request.request(struct_exports.reportProfile_args(...param), "reportProfile", this.protocolType, true, this.requestPath);
  }
  async wakeUpLongPolling(...param) {
    return await this.client.request.request(struct_exports.wakeUpLongPolling_args(...param), "wakeUpLongPolling", this.protocolType, true, this.requestPath);
  }
  async updateAndGetNearby(...param) {
    return await this.client.request.request(struct_exports.updateAndGetNearby_args(...param), "updateAndGetNearby", this.protocolType, true, this.requestPath);
  }
  async reportSettings(...param) {
    return await this.client.request.request(struct_exports.reportSettings_args(...param), "reportSettings", this.protocolType, true, this.requestPath);
  }
  async verifyPhoneNumber(...param) {
    return await this.client.request.request(struct_exports.verifyPhoneNumber_args(...param), "verifyPhoneNumber", this.protocolType, true, this.requestPath);
  }
  async isUseridAvailable(...param) {
    return await this.client.request.request(struct_exports.isUseridAvailable_args(...param), "isUseridAvailable", this.protocolType, true, this.requestPath);
  }
  async registerUserid(...param) {
    return await this.client.request.request(struct_exports.registerUserid_args(...param), "registerUserid", this.protocolType, true, this.requestPath);
  }
  async finishUpdateVerification(...param) {
    return await this.client.request.request(struct_exports.finishUpdateVerification_args(...param), "finishUpdateVerification", this.protocolType, true, this.requestPath);
  }
  async clearRingtone(...param) {
    return await this.client.request.request(struct_exports.clearRingtone_args(...param), "clearRingtone", this.protocolType, true, this.requestPath);
  }
  async notifyUpdated(...param) {
    return await this.client.request.request(struct_exports.notifyUpdated_args(...param), "notifyUpdated", this.protocolType, true, this.requestPath);
  }
  async reportPushRecvReports(...param) {
    return await this.client.request.request(struct_exports.reportPushRecvReports_args(...param), "reportPushRecvReports", this.protocolType, true, this.requestPath);
  }
  async getFriendRequests(...param) {
    return await this.client.request.request(struct_exports.getFriendRequests_args(...param), "getFriendRequests", this.protocolType, true, this.requestPath);
  }
  async addToFollowBlacklist(...param) {
    return await this.client.request.request(struct_exports.addToFollowBlacklist_args(...param), "addToFollowBlacklist", this.protocolType, true, this.requestPath);
  }
  async removeFromFollowBlacklist(...param) {
    return await this.client.request.request(struct_exports.removeFromFollowBlacklist_args(...param), "removeFromFollowBlacklist", this.protocolType, true, this.requestPath);
  }
  async getFollowBlacklist(...param) {
    return await this.client.request.request(struct_exports.getFollowBlacklist_args(...param), "getFollowBlacklist", this.protocolType, true, this.requestPath);
  }
  async determineMediaMessageFlow(...param) {
    return await this.client.request.request(struct_exports.determineMediaMessageFlow_args(...param), "determineMediaMessageFlow", this.protocolType, true, this.requestPath);
  }
  async createSession(...param) {
    return await this.client.request.request(struct_exports.createSession_args(...param), "createSession", this.protocolType, true, this.requestPath);
  }
  async cancelReaction(...param) {
    return await this.client.request.request(struct_exports.cancelReaction_args(...param), "cancelReaction", this.protocolType, true, this.requestPath);
  }
  async getNotificationSettings(...param) {
    return await this.client.request.request(struct_exports.getNotificationSettings_args(...param), "getNotificationSettings", this.protocolType, true, this.requestPath);
  }
  async getChats(options) {
    return await this.client.request.request(struct_exports.getChats_args({
      request: {
        withInvitees: true,
        withMembers: true,
        ...options
      },
      syncReason: "INTERNAL"
    }), "getChats", this.protocolType, true, this.requestPath);
  }
  async getChat(options) {
    const res = await this.getChats({
      chatMids: [
        options.chatMid
      ],
      withInvitees: options.withInvitees,
      withMembers: options.withMembers
    });
    return res.chats[0];
  }
  async getAllChatMids(...param) {
    return await this.client.request.request(struct_exports.getAllChatMids_args(...param), "getAllChatMids", this.protocolType, true, this.requestPath);
  }
  async getPreviousMessagesV2WithRequest(...param) {
    return await this.client.request.request(struct_exports.getPreviousMessagesV2WithRequest_args(...param), "getPreviousMessagesV2WithRequest", this.protocolType, true, this.requestPath);
  }
  /**
  * @description Gets the server time
  */
  async getServerTime() {
    return await this.client.request.request([], "getServerTime", this.protocolType, true, this.requestPath);
  }
  /**
  * @description Get user information from mid.
  */
  async getContact(options) {
    const { mid } = {
      ...options
    };
    return await this.client.request.request([
      [
        11,
        2,
        mid
      ]
    ], "getContact", this.protocolType, "Contact", this.requestPath);
  }
  /**
  * @description Get users information from mids.
  */
  async getContacts(options) {
    const { mids } = {
      ...options
    };
    const response = (await this.client.request.request([
      [
        15,
        2,
        [
          11,
          mids
        ]
      ]
    ], "getContacts", this.protocolType, false, this.requestPath)).map((e) => this.client.thrift.rename_thrift("Contact", e));
    return response;
  }
  async getContactsV2(options) {
    const { mids } = {
      ...options
    };
    return await this.client.request.request([
      [
        12,
        1,
        [
          [
            15,
            1,
            [
              11,
              mids
            ]
          ]
        ]
      ]
    ], "getContactsV2", this.protocolType, "GetContactsV2Response", this.requestPath);
  }
};
__name(TalkService, "TalkService");

// node_modules/@evex/linejs/base/login/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/@evex/linejs/base/login/rsa-verify.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var import_node_bignumber = __toESM(require_rsa2(), 1);
function getRSACrypto(message, json) {
  const rsa = new import_node_bignumber.Key();
  rsa.setPublic(json.nvalue, json.evalue);
  const credentials = rsa.encrypt(message).toString("hex");
  const keyname = json.keynm;
  return {
    keyname,
    credentials,
    message
  };
}
__name(getRSACrypto, "getRSACrypto");

// node_modules/@evex/linejs/base/login/regex.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var EMAIL_REGEX = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
var PASSWORD_REGEX = /^[a-zA-Z0-9!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]{8,}$/;

// node_modules/@evex/linejs/base/login/mod.js
import { Buffer as Buffer5 } from "node:buffer";
var Login = class {
  client;
  cert;
  qrCert;
  constructor(client) {
    this.client = client;
    this.qrCert = null;
    this.cert = null;
  }
  /**
  * @description Registers a certificate to be used for login.
  *
  * @param {string | null} cert - The certificate to register. If null, the certificate will be cleared.
  */
  async registerCert(cert, email) {
    await this.client.storage.set("cert:" + email, cert);
  }
  /**
  * @description Reads the certificate from the registered path, if it exists.
  *
  * @return {Promise<string | undefined>} The certificate, or undefined if it does not exist or an error occurred.
  */
  async getCert(email) {
    return await this.client.storage.get("cert:" + email);
  }
  /**
  * @description Registers a certificate to be used for login.
  *
  * @param {string | null} qrCert - The certificate to register. If null, the certificate will be cleared.
  */
  async registerQrCert(qrCert) {
    await this.client.storage.set("qrCert", qrCert);
  }
  /**
  * @description Reads the certificate from the registered path, if it exists.
  *
  * @return {Promise<string | undefined>} The certificate, or undefined if it does not exist or an error occurred.
  */
  async getQrCert() {
    return await this.client.storage.get("qrCert");
  }
  async ready() {
    if (!this.client.authToken) {
      throw new InternalError("NotAuthorized", "try login first");
    }
    this.client.profile = await this.client.talk.getProfile();
    this.client.emit("ready", this.client.profile);
  }
  /**
  * Logs in the user using the provided options.
  *
  * Depending on the options provided, this method will:
  * - Use QR code authentication if no options are provided or if `options.qr` is true.
  * - Use an authentication token if `options.authToken` is provided.
  * - Use email and password authentication if `options.email` is provided.
  *
  * @param {LoginOption} [options] - The login options.
  * @param {boolean} [options.qr] - Whether to use QR code authentication.
  * @param {boolean} [options.v3] - Whether to use version 3 of QR code authentication.
  * @param {string} [options.authToken] - The authentication token.
  * @param {string} [options.email] - The user's email.
  * @param {string} [options.password] - The user's password.
  *
  * @example
  * // Login with QR code
  * await login();
  *
  * @example
  * // Login with authentication token
  * await login({ authToken: 'your-auth-token' });
  *
  * @example
  * // Login with email and password
  * await login({ email: 'user@example.com', password: 'your-password' });
  */
  async login(options) {
    if (!options) {
      await this.withQrCode();
    } else if (options.qr) {
      await this.withQrCode({
        v3: options.v3
      });
    } else if (options.authToken) {
      this.client.emit("update:authtoken", options.authToken);
      this.client.authToken = options.authToken;
    } else if (options.email) {
      await this.withPassword(options);
    } else {
      await this.withQrCode();
    }
    await this.ready();
  }
  /**
  * Login with qrcode.
  * @param options.v3 use v3 login or not.
  */
  async withQrCode(options) {
    let authToken;
    if (typeof options === "undefined" || typeof options.v3 === "undefined") {
      if (isV3Support(this.client.device)) {
        authToken = await this.requestSQR2();
      } else {
        authToken = await this.requestSQR();
      }
    } else {
      if (options.v3) {
        authToken = await this.requestSQR2();
      } else {
        authToken = await this.requestSQR();
      }
    }
    this.client.emit("update:authtoken", authToken);
    this.client.authToken = authToken;
  }
  async requestSQR() {
    const { 1: sqr } = await this.createSession();
    let { 1: url } = await this.createQrCode(sqr);
    const [secret, secretUrl] = this.client.e2ee.createSqrSecret();
    url = url + secretUrl;
    this.client.emit("qrcall", url);
    if (await this.checkQrCodeVerified(sqr)) {
      try {
        await this.verifyCertificate(sqr, await this.getQrCert());
      } catch (_e) {
        const { 1: pincode } = await this.createPinCode(sqr);
        this.client.emit("pincall", pincode);
        await this.checkPinCodeVerified(sqr);
      }
      const response = await this.qrCodeLogin(sqr);
      const { 1: pem, 2: authToken, 4: e2eeInfo, 5: _mid } = response;
      if (pem) {
        this.client.emit("update:qrcert", pem);
        await this.registerQrCert(pem);
      }
      if (e2eeInfo) {
        await this.client.e2ee.decodeE2EEKeyV1(e2eeInfo, Buffer5.from(secret));
      }
      return authToken;
    }
    throw new InternalError("TimeoutError", "checkQrCodeVerified timed out");
  }
  async requestSQR2() {
    const { 1: sqr } = await this.createSession();
    let { 1: url } = await this.createQrCode(sqr);
    const [secret, secretUrl] = this.client.e2ee.createSqrSecret();
    url = url + secretUrl;
    this.client.emit("qrcall", url);
    if (await this.checkQrCodeVerified(sqr)) {
      try {
        await this.verifyCertificate(sqr, await this.getQrCert());
      } catch (_e) {
        const { 1: pincode } = await this.createPinCode(sqr);
        this.client.emit("pincall", pincode);
        await this.checkPinCodeVerified(sqr);
      }
      const response = await this.qrCodeLoginV2(sqr);
      const { 1: pem, 3: tokenInfo, 4: _mid, 10: e2eeInfo } = response;
      if (pem) {
        this.client.emit("update:qrcert", pem);
        await this.registerQrCert(pem);
      }
      if (e2eeInfo) {
        await this.client.e2ee.decodeE2EEKeyV1(e2eeInfo, Buffer5.from(secret));
      }
      await this.client.storage.set("refreshToken", tokenInfo[2]);
      await this.client.storage.set("expire", tokenInfo[3] + tokenInfo[6]);
      console.log(tokenInfo);
      return tokenInfo[1];
    }
    throw new InternalError("TimeoutError", "checkQrCodeVerified timed out");
  }
  /**
  * Login with email and password.
  * @param options.email account e-mail address
  * @param options.password account password
  * @param options.pincode Custom pin-code. It have to be 6-digit.
  * @param options.v3 use v3 login or not.
  * @param options.e2ee use e2ee login or not.
  */
  async withPassword(options) {
    let authToken;
    if (!EMAIL_REGEX.test(options.email)) {
      throw new InternalError("RegExpUnmatch", "invalid email");
    }
    if (!PASSWORD_REGEX.test(options.password)) {
      throw new InternalError("RegExpUnmatch", "invalid password");
    }
    if (typeof options.v3 === "undefined") {
      if (isV3Support(this.client.device)) {
        authToken = await this.requestEmailLoginV2(options.email, options.password, options.pincode);
      } else {
        authToken = await this.requestEmailLogin(options.email, options.password, options.pincode, options.e2ee);
      }
    } else {
      if (options.v3) {
        authToken = await this.requestEmailLoginV2(options.email, options.password, options.pincode);
      } else {
        authToken = await this.requestEmailLogin(options.email, options.password, options.pincode, options.e2ee);
      }
    }
    this.client.emit("update:authtoken", authToken);
    this.client.authToken = authToken;
  }
  /**
  * @description Login to LINE server with email and password.
  *
  * @param {string} [email] The email to login with.
  * @param {string} [password] The password to login with.
  * @param {boolean} [enableE2EE=false] Enable E2EE Login or not.
  * @param {string} [constantPincode="114514"] The constant pincode.
  * @returns {Promise<string>} The auth token.
  * @throws {InternalError} If the system is not setup yet.
  * @throws {InternalError} If the login type is not supported.
  * @throws {InternalError} If the constant pincode is not valid.
  * @emits pincall
  * @emits update:cert
  */
  async requestEmailLogin(email, password, constantPincode = "114514", enableE2EE = true) {
    if (constantPincode.length !== 6) {
      throw new InternalError("Invalid constant pincode", "The constant pincode should be 6 digits");
    }
    this.client.log("login", {
      method: "email_v1",
      email,
      password: password.length,
      enableE2EE,
      constantPincode
    });
    const rsaKey = await this.getRSAKeyInfo();
    const { keynm, sessionKey } = rsaKey;
    const message = String.fromCharCode(sessionKey.length) + sessionKey + String.fromCharCode(email.length) + email + String.fromCharCode(password.length) + password;
    let e2eeData, secret, secretPK;
    if (enableE2EE) {
      [secret, secretPK] = this.client.e2ee.createSqrSecret(true);
      e2eeData = this.client.e2ee.encryptAESECB(this.client.e2ee.getSHA256Sum(constantPincode), Buffer5.from(secretPK, "base64"));
    }
    const encryptedMessage = getRSACrypto(message, rsaKey).credentials;
    const cert = await this.getCert(email) || void 0;
    let response = await this.loginV2(keynm, encryptedMessage, this.client.device, void 0, e2eeData, cert, "loginZ");
    if (!response.authToken) {
      this.client.emit("pincall", response.pinCode || constantPincode);
      if (enableE2EE && secret) {
        const headers = {
          "user-agent": this.client.request.userAgent,
          "x-line-application": this.client.request.systemType,
          "x-line-access": response.verifier,
          "x-lal": "ja_JP",
          "x-lpv": "1",
          "x-lhm": "GET",
          "accept-encoding": "gzip"
        };
        const e2eeInfo = (await this.client.fetch(`https://${this.client.request.endpoint}/LF1`, {
          headers
        }).then((res) => res.json())).result;
        this.client.log("response", e2eeInfo);
        await this.client.e2ee.decodeE2EEKeyV1(e2eeInfo.metadata, Buffer5.from(secret));
        const deviceSecret = this.client.e2ee.encryptDeviceSecret(Buffer5.from(e2eeInfo.metadata.publicKey, "base64"), Buffer5.from(secret), Buffer5.from(e2eeInfo.metadata.encryptedKeyChain, "base64"));
        const e2eeLogin = await this.confirmE2EELogin(response.verifier, deviceSecret);
        response = await this.loginV2(keynm, encryptedMessage, this.client.device, e2eeLogin, e2eeData, cert, "loginZ");
      } else {
        const headers = {
          accept: "application/x-thrift",
          "user-agent": this.client.request.userAgent,
          "x-line-application": this.client.request.systemType,
          "x-line-access": response.verifier,
          "x-lal": "ja_JP",
          "x-lpv": "1",
          "x-lhm": "GET",
          "accept-encoding": "gzip"
        };
        const verifier = await this.client.fetch(`https://${this.client.request.endpoint}/Q`, {
          headers
        }).then((res) => res.json());
        this.client.log("response", verifier);
        response = await this.loginV2(keynm, encryptedMessage, this.client.device, verifier.result.verifier, e2eeData, cert, "loginZ");
      }
    }
    if (response.certificate) {
      this.client.emit("update:cert", response.certificate);
      await this.registerCert(response.certificate, email);
    }
    return response.authToken;
  }
  async requestEmailLoginV2(email, password, constantPincode = "114514") {
    if (constantPincode.length !== 6) {
      throw new InternalError("Invalid constant pincode", "The constant pincode should be 6 digits");
    }
    this.client.log("login", {
      method: "email",
      email,
      password: password.length,
      constantPincode
    });
    const rsaKey = await this.getRSAKeyInfo();
    const { keynm, sessionKey } = rsaKey;
    const message = String.fromCharCode(sessionKey.length) + sessionKey + String.fromCharCode(email.length) + email + String.fromCharCode(password.length) + password;
    const [secret, secretPK] = this.client.e2ee.createSqrSecret(true);
    const e2eeData = this.client.e2ee.encryptAESECB(this.client.e2ee.getSHA256Sum(constantPincode), Buffer5.from(secretPK, "base64"));
    const encryptedMessage = getRSACrypto(message, rsaKey).credentials;
    const cert = await this.getCert(email) || void 0;
    let response = await this.loginV2(keynm, encryptedMessage, this.client.device, void 0, e2eeData, cert, "loginV2");
    if (!response[9]) {
      this.client.emit("pincall", constantPincode);
      const headers = {
        accept: "application/x-thrift",
        "user-agent": this.client.request.userAgent,
        "x-line-application": this.client.request.systemType,
        "x-line-access": response[3],
        "x-lal": "ja_JP",
        "x-lpv": "1",
        "x-lhm": "GET",
        "accept-encoding": "gzip"
      };
      const e2eeInfo = (await this.client.fetch(`https://${this.client.request.endpoint}/LF1`, {
        headers
      }).then((res) => res.json())).result;
      this.client.log("response", e2eeInfo);
      await this.client.e2ee.decodeE2EEKeyV1(e2eeInfo.metadata, Buffer5.from(secret));
      const deviceSecret = this.client.e2ee.encryptDeviceSecret(Buffer5.from(e2eeInfo.metadata.publicKey, "base64"), Buffer5.from(secret), Buffer5.from(e2eeInfo.metadata.encryptedKeyChain, "base64"));
      const e2eeLogin = await this.confirmE2EELogin(response[3], deviceSecret);
      response = await this.loginV2(keynm, encryptedMessage, this.client.device, e2eeLogin, e2eeData, cert, "loginV2");
    }
    if (response[2]) {
      this.client.emit("update:cert", response[2]);
      await this.registerCert(response[2], email);
    }
    await this.client.storage.set("refreshToken", response[9][2]);
    await this.client.storage.set("expire", response[9][3] + response[9][6]);
    return response[9][1];
  }
  /**
  * @description Get RSA key info for login.
  *
  * @param {number} [provider=0] Provider to get RSA key info from.
  * @returns {Promise<LINETypes.RSAKey>} RSA key info.
  * @throws {FetchError} If failed to fetch RSA key info.
  */
  async getRSAKeyInfo(provider = 0) {
    return await this.client.request.request([
      [
        12,
        1,
        [
          [
            8,
            2,
            struct_exports.IdentityProvider(provider)
          ]
        ]
      ]
    ], "getRSAKeyInfo", 3, "RSAKey", "/api/v3/TalkService.do");
  }
  async loginV2(keynm, encryptedMessage, deviceName, verifier, secret, cert, methodName) {
    let loginType = 2;
    if (!secret)
      loginType = 0;
    if (verifier) {
      loginType = 1;
    }
    return await this.client.request.request([
      [
        12,
        2,
        [
          [
            8,
            1,
            loginType
          ],
          [
            8,
            2,
            1
          ],
          [
            11,
            3,
            keynm
          ],
          [
            11,
            4,
            encryptedMessage
          ],
          [
            2,
            5,
            0
          ],
          [
            11,
            6,
            ""
          ],
          [
            11,
            7,
            deviceName
          ],
          [
            11,
            8,
            cert
          ],
          [
            11,
            9,
            verifier
          ],
          [
            11,
            10,
            secret
          ],
          [
            8,
            11,
            1
          ],
          [
            11,
            12,
            "System Product Name"
          ]
        ]
      ]
    ], methodName, 3, methodName === "loginZ" ? "LoginResult" : false, "/api/v3p/rs");
  }
  async createSession() {
    return await this.client.request.request([], "createSession", 4, false, "/acct/lgn/sq/v1");
  }
  async createQrCode(qrcode) {
    return await this.client.request.request([
      [
        12,
        1,
        [
          [
            11,
            1,
            qrcode
          ]
        ]
      ]
    ], "createQrCode", 4, false, "/acct/lgn/sq/v1");
  }
  async checkQrCodeVerified(qrcode) {
    try {
      await this.client.request.request([
        [
          12,
          1,
          [
            [
              11,
              1,
              qrcode
            ]
          ]
        ]
      ], "checkQrCodeVerified", 4, false, "/acct/lp/lgn/sq/v1", {
        "x-lst": "180000",
        "x-line-access": qrcode
      }, this.client.config.longTimeout);
      return true;
    } catch (error3) {
      throw error3;
    }
  }
  async verifyCertificate(qrcode, cert) {
    return await this.client.request.request([
      [
        12,
        1,
        [
          [
            11,
            1,
            qrcode
          ],
          [
            11,
            2,
            cert
          ]
        ]
      ]
    ], "verifyCertificate", 4, false, "/acct/lgn/sq/v1");
  }
  async createPinCode(qrcode) {
    return await this.client.request.request([
      [
        12,
        1,
        [
          [
            11,
            1,
            qrcode
          ]
        ]
      ]
    ], "createPinCode", 4, false, "/acct/lgn/sq/v1");
  }
  async checkPinCodeVerified(qrcode) {
    try {
      await this.client.request.request([
        [
          12,
          1,
          [
            [
              11,
              1,
              qrcode
            ]
          ]
        ]
      ], "checkPinCodeVerified", 4, false, "/acct/lp/lgn/sq/v1", {
        "x-lst": "180000",
        "x-line-access": qrcode
      }, this.client.config.longTimeout);
      return true;
    } catch (error3) {
      throw error3;
    }
  }
  async qrCodeLogin(authSessionId, autoLoginIsRequired = true) {
    return await this.client.request.request([
      [
        12,
        1,
        [
          [
            11,
            1,
            authSessionId
          ],
          [
            11,
            2,
            this.client.device
          ],
          [
            2,
            3,
            autoLoginIsRequired
          ]
        ]
      ]
    ], "qrCodeLogin", 4, false, "/acct/lgn/sq/v1");
  }
  async qrCodeLoginV2(authSessionId, modelName = "evex-device", systemName = "linejs-v2", autoLoginIsRequired = true) {
    return await this.client.request.request([
      [
        12,
        1,
        [
          [
            11,
            1,
            authSessionId
          ],
          [
            11,
            2,
            systemName
          ],
          [
            11,
            3,
            modelName
          ],
          [
            2,
            4,
            autoLoginIsRequired
          ]
        ]
      ]
    ], "qrCodeLoginV2", 4, false, "/acct/lgn/sq/v1");
  }
  async confirmE2EELogin(verifier, deviceSecret) {
    return await this.client.request.request([
      [
        11,
        1,
        verifier
      ],
      [
        11,
        2,
        deviceSecret
      ]
    ], "confirmE2EELogin", 3, false, "/api/v3p/rs");
  }
};
__name(Login, "Login");

// node_modules/@evex/linejs/base/request/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var square = [
  "/SQ1",
  "/SQLV1"
];
var _RequestClient = class {
  client;
  endpoint;
  userAgent;
  systemType;
  constructor(client) {
    const deviceDetails = client.deviceDetails;
    this.endpoint = client.endpoint ?? "legy.line-apps.com";
    this.systemType = `${deviceDetails.device}	${deviceDetails.appVersion}	${deviceDetails.systemName}	${deviceDetails.systemVersion}`;
    this.userAgent = `Line/${deviceDetails.appVersion}`;
    this.client = client;
  }
  /**
  * @description Request to LINE API.
  *
  * @param value - The thrift value(argument) to request.
  * @param methodName - The method name of the request.
  * @param protocolType - The protocol type of the request.
  * @param parse - Whether to parse the response.
  * @param path - The path of the request.
  * @param headers - The headers of the request.
  * @param timeout - The timeout milliseconds of the request.
  * @returns The response.
  */
  async request(value, methodName, protocolType = 3, parse = true, path = "/S3", headers = {}, timeout = this.client.config.timeout) {
    const res = await this.requestCore(path, value, methodName, protocolType, headers, void 0, parse, void 0, timeout);
    return res.data.success;
  }
  /**
  * @description Request to LINE API by raw.
  *
  * @param {string} [path] - The path of the request.
  * @param {NestedArray} [value] - The value to request.
  * @param {string} [methodName] - The method name of the request.
  * @param {ProtocolKey} [protocolType] - The protocol type of the request.
  * @param {object} [appendHeaders={}] - The headers to append to the request.
  * @param {string} [overrideMethod="POST"] - The method of the request.
  * @param {boolean | string} [parse=true] - Whether to parse the response.
  * @param {boolean} [isReRequest=false] - Is Re-Request.
  * @param {number} [timeout=this.timeOutMs] - The timeout milliseconds of the request.
  * @returns {Promise<ParsedThrift>} The response.
  * @throws {InternalError} If the request fails or timeout.
  */
  async requestCore(path, value, methodName, protocolType, appendHeaders = {}, overrideMethod = "POST", parse = true, isReRequest = false, timeout = 1e3) {
    const protocol = Protocols[protocolType];
    const headers = {
      ...this.getHeader(overrideMethod),
      ...appendHeaders
    };
    this.client.log("writeThrift", {
      value,
      methodName,
      protocolType
    });
    const Trequest = this.client.thrift.writeThrift(value, methodName, protocol);
    this.client.log("request", {
      methodName,
      path: `https://${this.endpoint}${path}`,
      method: overrideMethod,
      headers,
      timeout,
      body: Trequest
    });
    const response = await this.client.fetch(`https://${this.endpoint}${path}`, {
      method: overrideMethod,
      headers,
      signal: AbortSignal.timeout(timeout),
      body: Trequest
    });
    const nextToken = response.headers.get("x-line-next-access");
    if (nextToken) {
      this.client.emit("update:authtoken", nextToken);
    }
    const body = await response.arrayBuffer();
    const parsedBody = new Uint8Array(body);
    this.client.log("response", {
      ...response,
      parsedBody,
      methodName
    });
    let res;
    let hasError = false;
    try {
      res = this.client.thrift.readThrift(parsedBody, protocol);
    } catch {
      throw new Error(`Request internal failed: Invalid response buffer <${[
        ...parsedBody
      ].map((e) => e.toString(16)).join(" ")}>`);
    }
    if (!res.data[0] && Object.keys(res.data).length) {
      hasError = true;
    }
    if (parse === true) {
      this.client.thrift.rename_data(res, square.includes(path));
    } else if (typeof parse === "string") {
      res.data.success = this.client.thrift.rename_thrift(parse, res.data[0]);
      delete res.data[0];
      if (res.data[1]) {
        const structName = _RequestClient.EXCEPTION_TYPES[path] || "TalkException";
        if (structName) {
          res.data.e = this.client.thrift.rename_thrift(structName, res.data[1]);
        } else {
          res.data.e = res.data[1];
        }
        delete res.data[1];
      }
    } else {
      res.data.success = res.data[0];
      delete res.data[0];
      if (res.data[1]) {
        const structName = _RequestClient.EXCEPTION_TYPES[path] || "TalkException";
        if (structName) {
          res.data.e = this.client.thrift.rename_thrift(structName, res.data[1]);
        } else {
          res.data.e = res.data[1];
        }
        delete res.data[1];
      }
    }
    this.client.log("readThrift", {
      res
    });
    const isRefresh = Boolean(res.data.e && res.data.e["code"] === "MUST_REFRESH_V3_TOKEN" && await this.client.storage.get("refreshToken"));
    if (res.data.e && !isRefresh) {
      throw new InternalError("RequestError", `Request internal failed, ${methodName}(${path}) -> ` + JSON.stringify(res.data.e), res.data.e);
    }
    if (hasError && !isRefresh) {
      throw new InternalError("RequestError", `Request internal failed, ${methodName}(${path}) -> ` + JSON.stringify(res.data), res.data);
    }
    if (isRefresh && !isReRequest) {
      await this.client.auth.tryRefreshToken();
      return this.requestCore(path, value, methodName, protocolType, appendHeaders, overrideMethod, parse, true);
    }
    return res;
  }
  /**
  * Get HTTP headers for a request.
  * @param {string} [overrideMethod="POST"] The HTTP method to use in the `x-lhm` header.
  * @returns {Record<string, string>} An object with the headers as key-value pairs.
  * @throws {InternalError} If the client has not been setup yet.
  */
  getHeader(overrideMethod = "POST") {
    const header = {
      Host: this.endpoint,
      accept: "application/x-thrift",
      "user-agent": this.userAgent,
      "x-line-application": this.systemType,
      "content-type": "application/x-thrift",
      "x-lal": "ja_JP",
      "x-lpv": "1",
      "x-lhm": overrideMethod,
      "accept-encoding": "gzip"
    };
    if (this.client.authToken) {
      header["x-line-access"] = this.client.authToken;
    }
    return header;
  }
};
var RequestClient = _RequestClient;
__name(RequestClient, "RequestClient");
__publicField(RequestClient, "EXCEPTION_TYPES", {
  "/S3": "TalkException",
  "/S4": "TalkException",
  "/SYNC4": "TalkException",
  "/SYNC3": "TalkException",
  "/CH3": "ChannelException",
  "/CH4": "ChannelException",
  "/SQ1": "SquareException",
  "/LIFF1": "LiffException",
  "/api/v3p/rs": "TalkException",
  "/api/v3/TalkService.do": "TalkException"
});

// node_modules/@evex/linejs/base/e2ee/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var import_curve25519_js = __toESM(require_lib2(), 1);
init_crypto2();
var import_tweetnacl = __toESM(require_nacl_fast(), 1);
import { Buffer as Buffer6 } from "node:buffer";
var import_crypto_js = __toESM(require_crypto_js(), 1);
var E2EE = class {
  client;
  constructor(client) {
    this.client = client;
  }
  async getE2EESelfKeyData(mid) {
    try {
      const keyData = JSON.parse(await this.client.storage.get("e2eeKeys:" + mid));
      if (keyData && keyData.privKey && keyData.pubKey)
        return keyData;
    } catch (_e) {
    }
    const keys = await this.client.talk.getE2EEPublicKeys();
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      const keyId = key.keyId ?? key[2];
      const _keyData = await this.getE2EESelfKeyDataByKeyId(keyId);
      if (_keyData) {
        await this.saveE2EESelfKeyData(_keyData);
        return _keyData;
      }
    }
    throw new InternalError("NoE2EEKey", "E2EE Key has not been saved, try register `saveE2EESelfKeyDataByKeyId` or use E2EE Login");
  }
  async getE2EESelfKeyDataByKeyId(keyId) {
    try {
      return JSON.parse(await this.client.storage.get("e2eeKeys:" + keyId));
    } catch (_e) {
    }
  }
  async saveE2EESelfKeyDataByKeyId(keyId, value) {
    await this.client.storage.set("e2eeKeys:" + keyId, JSON.stringify(value));
  }
  async saveE2EESelfKeyData(value) {
    await this.client.storage.set("e2eeKeys:" + this.client.profile?.mid, JSON.stringify(value));
  }
  async getE2EELocalPublicKey(mid, keyId) {
    const toType = this.client.getToType(mid);
    if (toType === enums.MIDType.USER) {
      let key = void 0;
      if (keyId !== void 0) {
        key = await this.client.storage.get(`e2eePublicKeys:${keyId}`);
      }
      let receiverKeyData;
      if (!key) {
        receiverKeyData = await this.client.talk.negotiateE2EEPublicKey({
          mid
        });
        const specVersion = receiverKeyData.specVersion;
        if (specVersion === -1) {
          throw new InternalError("Not support E2EE", `${mid}`);
        }
        const publicKey = receiverKeyData.publicKey;
        const receiverKeyId = publicKey.keyId;
        if (receiverKeyId === keyId) {
          key = Buffer6.from(publicKey.keyData).toString("base64");
          await this.client.storage.set(`e2eePublicKeys:${keyId}`, key);
        } else {
          throw new InternalError("No E2EEKey", `E2EE key id ${keyId} not found on ${mid}, key id should be ${receiverKeyId}`);
        }
      }
      return Buffer6.from(key, "base64");
    } else {
      let key;
      key = await this.client.storage.get(`e2eeGroupKeys:${mid}`);
      if (keyId !== void 0 && key !== void 0) {
        const keyData = JSON.parse(key);
        if (keyId !== keyData["keyId"]) {
          this.e2eeLog("getE2EELocalPublicKeykeyIdMismatch", mid);
          key = void 0;
        } else {
          return keyData;
        }
      } else {
        key = void 0;
      }
      if (!key) {
        let e2eeGroupSharedKey;
        try {
          e2eeGroupSharedKey = await this.client.talk.getLastE2EEGroupSharedKey({
            keyVersion: 2,
            chatMid: mid
          });
        } catch (error3) {
          if (error3 instanceof InternalError && error3.data.code == "NOT_FOUND") {
            e2eeGroupSharedKey = await this.tryRegisterE2EEGroupKey(mid);
          } else {
            throw error3;
          }
        }
        const groupKeyId = e2eeGroupSharedKey.groupKeyId;
        const creator = e2eeGroupSharedKey.creator;
        const creatorKeyId = e2eeGroupSharedKey.creatorKeyId;
        const receiverKeyId = e2eeGroupSharedKey.receiverKeyId;
        const encryptedSharedKey = Buffer6.from(e2eeGroupSharedKey.encryptedSharedKey);
        const selfKey = Buffer6.from((await this.getE2EESelfKeyDataByKeyId(receiverKeyId))["privKey"], "base64");
        const creatorKey = await this.getE2EELocalPublicKey(creator, creatorKeyId);
        const aesKey = this.generateSharedSecret(selfKey, creatorKey);
        const aes_key = this.getSHA256Sum(Buffer6.from(aesKey), "Key");
        const aes_iv = this.xor(this.getSHA256Sum(Buffer6.from(aesKey), "IV"));
        this.e2eeLog("getE2EELocalPublicKeyAESInfo", {
          aes_key,
          aes_iv,
          encryptedSharedKey
        });
        const decipher = crypto_default.createDecipheriv("aes-256-cbc", aes_key, aes_iv);
        const plainText = Buffer6.concat([
          decipher.update(encryptedSharedKey),
          decipher.final()
        ]);
        this.e2eeLog("getE2EELocalPublicKeyDecryptedLength", plainText.length);
        const decrypted = plainText.toString("base64");
        this.e2eeLog("getE2EELocalPublicKeyDecrypted", decrypted);
        const data = {
          privKey: decrypted,
          keyId: groupKeyId
        };
        key = JSON.stringify(data);
        await this.client.storage.set(`e2eeGroupKeys:${mid}`, key);
        return data;
      }
      return JSON.parse(key);
    }
  }
  async tryRegisterE2EEGroupKey(chatMid) {
    const e2eePublicKeys = await this.client.talk.getLastE2EEPublicKeys({
      chatMid
    });
    const members = [];
    const keyIds = [];
    const encryptedSharedKeys = [];
    const selfKeyId = e2eePublicKeys[this.client.profile.mid].keyId;
    const selfKeyData = await this.getE2EESelfKeyDataByKeyId(selfKeyId);
    if (!selfKeyData) {
      throw new InternalError("NoE2EEKey", "E2EE Key has not been saved, try register `saveE2EESelfKeyDataByKeyId` or use E2EE Login");
    }
    const selfKey = Buffer6.from(selfKeyData.privKey, "base64");
    const private_key = crypto_default.randomBytes(32);
    for (const mid in e2eePublicKeys) {
      if (Object.prototype.hasOwnProperty.call(e2eePublicKeys, mid)) {
        const key = e2eePublicKeys[mid];
        members.push(mid);
        const { keyId, keyData } = key;
        keyIds.push(keyId);
        const aesKey = this.generateSharedSecret(selfKey, Buffer6.from(keyData));
        const aes_key = this.getSHA256Sum(Buffer6.from(aesKey), "Key");
        const aes_iv = this.xor(this.getSHA256Sum(Buffer6.from(aesKey), "IV"));
        const cipher = crypto_default.createCipheriv("aes-256-cbc", aes_key, aes_iv);
        const encryptedSharedKey = Buffer6.concat([
          cipher.update(private_key),
          cipher.final()
        ]);
        encryptedSharedKeys.push(encryptedSharedKey);
      }
    }
    return this.client.talk.registerE2EEGroupKey({
      keyVersion: 1,
      chatMid,
      keyIds,
      members,
      encryptedSharedKeys
    });
  }
  generateSharedSecret(privateKey, publicKey) {
    this.e2eeLog("generateSharedSecretKeyInfo", {
      privateKey: privateKey.length,
      publicKey: publicKey.length
    });
    return (0, import_curve25519_js.sharedKey)(Uint8Array.from(privateKey), Uint8Array.from(publicKey));
  }
  xor(buf) {
    const bufLength = Math.floor(buf.length / 2);
    const buf2 = Buffer6.alloc(bufLength);
    for (let i = 0; i < bufLength; i++) {
      buf2[i] = buf[i] ^ buf[bufLength + i];
    }
    return buf2;
  }
  getSHA256Sum(...args) {
    const hash2 = crypto_default.createHash("sha256");
    for (let arg of args) {
      if (typeof arg === "string") {
        arg = Buffer6.from(arg);
      }
      hash2.update(arg);
    }
    return hash2.digest();
  }
  encryptAESECB(aesKey, plainData) {
    const cipher = crypto_default.createCipheriv("aes-256-ecb", aesKey, new Uint8Array(0));
    cipher.setAutoPadding(false);
    return Buffer6.concat([
      cipher.update(plainData),
      cipher.final()
    ]);
  }
  async decodeE2EEKeyV1(data, secret) {
    if (data.encryptedKeyChain) {
      const encryptedKeyChain = Buffer6.from(data.encryptedKeyChain, "base64");
      const keyId = data.keyId;
      const publicKey = Buffer6.from(data.publicKey, "base64");
      const e2eeVersion = data.e2eeVersion;
      const [privKey, pubKey] = this.decryptKeyChain(publicKey, secret, encryptedKeyChain);
      this.e2eeLog("decodeE2EEKeyV1E2EEKeyInfo", {
        e2eeKey: {
          keyId,
          privKey,
          pubKey,
          e2eeVersion
        }
      });
      await this.client.storage.set("e2eeKeys:" + keyId, JSON.stringify({
        keyId,
        privKey: privKey.toString("base64"),
        pubKey: pubKey.toString("base64"),
        e2eeVersion
      }));
      return {
        keyId,
        privKey,
        pubKey,
        e2eeVersion
      };
    }
  }
  decryptKeyChain(publicKey, privateKey, encryptedKeyChain) {
    this.e2eeLog("decryptKeyChainKeyInfo", {
      decryptKeyChain: {
        publicKey: publicKey.toString("base64"),
        privateKey: privateKey.toString("base64"),
        encryptedKeyChain: encryptedKeyChain.toString("base64")
      }
    });
    const sharedSecret = this.generateSharedSecret(privateKey, publicKey);
    const aesKey = this.getSHA256Sum(Buffer6.from(sharedSecret), "Key");
    const aesIv = this.xor(this.getSHA256Sum(Buffer6.from(sharedSecret), "IV"));
    const decipher = crypto_default.createDecipheriv("aes-256-cbc", aesKey, aesIv);
    decipher.setAutoPadding(false);
    const keychainData = Buffer6.concat([
      decipher.update(encryptedKeyChain),
      decipher.final()
    ]);
    this.e2eeLog("decryptKeyChainBinKeyInfo", {
      binkey: keychainData.toString("hex")
    });
    const key = this.client.thrift.readThriftStruct(keychainData)[1];
    const publicKeyBytes = Buffer6.from(key[0][4]);
    const privateKeyBytes = Buffer6.from(key[0][5]);
    return [
      privateKeyBytes,
      publicKeyBytes
    ];
  }
  encryptDeviceSecret(publicKey, privateKey, encryptedKeyChain) {
    const sharedSecret = this.generateSharedSecret(privateKey, publicKey);
    const aesKey = this.getSHA256Sum(Buffer6.from(sharedSecret), "Key");
    encryptedKeyChain = this.xor(this.getSHA256Sum(encryptedKeyChain));
    const cipher = crypto_default.createCipheriv("aes-256-ecb", aesKey, new Uint8Array(0));
    cipher.setAutoPadding(false);
    const keychainData = Buffer6.concat([
      cipher.update(encryptedKeyChain),
      cipher.final()
    ]);
    return keychainData;
  }
  generateAAD(a, b, c, d, e = 2, f = 0) {
    let aad = Buffer6.alloc(0);
    aad = Buffer6.concat([
      aad,
      Buffer6.from(a)
    ]);
    aad = Buffer6.concat([
      aad,
      Buffer6.from(b)
    ]);
    aad = Buffer6.concat([
      aad,
      this.getIntBytes(c)
    ]);
    aad = Buffer6.concat([
      aad,
      this.getIntBytes(d)
    ]);
    aad = Buffer6.concat([
      aad,
      this.getIntBytes(e)
    ]);
    aad = Buffer6.concat([
      aad,
      this.getIntBytes(f)
    ]);
    return aad;
  }
  getIntBytes(i) {
    const j = 4;
    let res;
    if (j ** 2 === 16) {
      const buffer = new ArrayBuffer(4);
      const view = new DataView(buffer);
      view.setInt32(0, i);
      res = new Uint8Array(buffer);
    } else {
      const buffer = new ArrayBuffer(8);
      const view = new DataView(buffer);
      view.setBigInt64(0, BigInt(i));
      res = new Uint8Array(buffer);
    }
    return res;
  }
  async encryptE2EEMessage(to, data, contentType = 0, specVersion = 2) {
    contentType = ContentType(contentType) ?? 0;
    const _from = this.client.profile?.mid;
    const selfKeyData = await this.getE2EESelfKeyData(_from);
    if (to.length === 0 || ![
      0,
      1,
      2
    ].includes(this.client.getToType(to) ?? -1)) {
      throw new InternalError("Invalid mid", to);
    }
    const senderKeyId = selfKeyData.keyId;
    let receiverKeyId, keyData;
    if (this.client.getToType(to) === enums.MIDType.USER) {
      const privateKey = Buffer6.from(selfKeyData.privKey, "base64");
      const receiverKeyData = await this.client.talk.negotiateE2EEPublicKey({
        mid: to
      });
      specVersion = receiverKeyData.specVersion;
      if (specVersion === -1) {
        throw new InternalError("Not support E2EE", `${to}`);
      }
      const publicKey = receiverKeyData.publicKey;
      receiverKeyId = publicKey.keyId;
      const receiverKeyDataBuffer = Buffer6.from(publicKey.keyData);
      keyData = this.generateSharedSecret(privateKey, receiverKeyDataBuffer);
    } else {
      const groupK = await this.getE2EELocalPublicKey(to, void 0);
      const privK = Buffer6.from(groupK.privKey, "base64");
      const pubK = Buffer6.from(selfKeyData.pubKey, "base64");
      receiverKeyId = groupK.keyId;
      keyData = this.generateSharedSecret(privK, pubK);
    }
    if (contentType === enums.ContentType.LOCATION && typeof data === "object") {
      return this.encryptE2EELocationMessage(senderKeyId, receiverKeyId, Buffer6.from(keyData), specVersion, data, to, _from);
    } else if (typeof data === "string") {
      return this.encryptE2EETextMessage(senderKeyId, receiverKeyId, Buffer6.from(keyData), specVersion, data, to, _from);
    } else {
      return this.encryptE2EEMessageByData(senderKeyId, receiverKeyId, Buffer6.from(keyData), specVersion, data, to, _from, contentType);
    }
  }
  encryptE2EETextMessage(senderKeyId, receiverKeyId, keyData, specVersion, text, to, _from) {
    const salt = crypto_default.randomBytes(16);
    const gcmKey = this.getSHA256Sum(keyData, salt, Buffer6.from("Key"));
    const aad = this.generateAAD(to, _from, senderKeyId, receiverKeyId, specVersion, 0);
    const sign2 = crypto_default.randomBytes(12);
    const data = Buffer6.from(JSON.stringify({
      text
    }));
    const encData = this.encryptE2EEMessageV2(data, gcmKey, sign2, aad);
    const bSenderKeyId = Buffer6.from(this.getIntBytes(senderKeyId));
    const bReceiverKeyId = Buffer6.from(this.getIntBytes(receiverKeyId));
    this.e2eeLog("encryptE2EETextMessageSenderKeyId", `${senderKeyId} (${bSenderKeyId.toString("hex")})`);
    this.e2eeLog("encryptE2EETextMessageReceiverKeyId", `${receiverKeyId} (${bReceiverKeyId.toString("hex")})`);
    return [
      salt,
      encData,
      sign2,
      bSenderKeyId,
      bReceiverKeyId
    ];
  }
  encryptE2EEMessageByData(senderKeyId, receiverKeyId, keyData, specVersion, rawdata, to, _from, contentType) {
    const salt = crypto_default.randomBytes(16);
    const gcmKey = this.getSHA256Sum(keyData, salt, Buffer6.from("Key"));
    const aad = this.generateAAD(to, _from, senderKeyId, receiverKeyId, specVersion, contentType);
    const sign2 = crypto_default.randomBytes(12);
    const data = Buffer6.from(JSON.stringify(rawdata));
    const encData = this.encryptE2EEMessageV2(data, gcmKey, sign2, aad);
    const bSenderKeyId = Buffer6.from(this.getIntBytes(senderKeyId));
    const bReceiverKeyId = Buffer6.from(this.getIntBytes(receiverKeyId));
    this.e2eeLog("encryptE2EEDataMessageSenderKeyId", `${senderKeyId} (${bSenderKeyId.toString("hex")})`);
    this.e2eeLog("encryptE2EEDataMessageReceiverKeyId", `${receiverKeyId} (${bReceiverKeyId.toString("hex")})`);
    return [
      salt,
      encData,
      sign2,
      bSenderKeyId,
      bReceiverKeyId
    ];
  }
  encryptE2EELocationMessage(senderKeyId, receiverKeyId, keyData, specVersion, location, to, _from) {
    const salt = crypto_default.randomBytes(16);
    const gcmKey = this.getSHA256Sum(keyData, salt, Buffer6.from("Key"));
    const aad = this.generateAAD(to, _from, senderKeyId, receiverKeyId, specVersion, 15);
    const sign2 = crypto_default.randomBytes(12);
    const data = Buffer6.from(JSON.stringify({
      location
    }));
    const encData = this.encryptE2EEMessageV2(data, gcmKey, sign2, aad);
    const bSenderKeyId = Buffer6.from(this.getIntBytes(senderKeyId));
    const bReceiverKeyId = Buffer6.from(this.getIntBytes(receiverKeyId));
    this.e2eeLog("encryptE2EELocationMessageSenderKeyId", `${senderKeyId} (${bSenderKeyId.toString("hex")})`);
    this.e2eeLog("encryptE2EELocationMessageReceiverKeyId", `${receiverKeyId} (${bReceiverKeyId.toString("hex")})`);
    return [
      salt,
      encData,
      sign2,
      bSenderKeyId,
      bReceiverKeyId
    ];
  }
  encryptE2EEMessageV2(data, gcmKey, nonce, aad) {
    this.e2eeLog("createCipheriv", {
      data,
      gcmKey,
      nonce,
      aad
    });
    const cipher = crypto_default.createCipheriv("aes-256-gcm", gcmKey, nonce);
    cipher.setAAD(aad);
    const encrypted = Buffer6.concat([
      cipher.update(data),
      cipher.final()
    ]);
    const tag = cipher.getAuthTag();
    return Buffer6.concat([
      encrypted,
      tag
    ]);
  }
  async decryptE2EEMessage(messageObj) {
    if ((messageObj.contentType === "NONE" || messageObj.contentType === enums.ContentType.NONE) && messageObj.chunks) {
      const [text, meta] = await this.decryptE2EETextMessage(messageObj);
      messageObj.text = text;
      messageObj.contentMetadata = {
        ...messageObj.contentMetadata,
        ...meta
      };
    } else if ((messageObj.contentType === "LOCATION" || messageObj.contentType === enums.ContentType.LOCATION) && messageObj.chunks) {
      messageObj.location = await this.decryptE2EELocationMessage(messageObj);
    }
    return messageObj;
  }
  async decryptE2EETextMessage(messageObj, isSelf = false) {
    const _from = messageObj.from;
    const to = messageObj.to;
    if (_from === this.client.profile?.mid) {
      isSelf = true;
    }
    const toType = messageObj.toType;
    const metadata = messageObj.contentMetadata;
    const specVersion = metadata.e2eeVersion || "2";
    const contentType = messageObj.contentType;
    const chunks = messageObj.chunks.map((chunk) => typeof chunk === "string" ? Buffer6.from(chunk, "utf-8") : chunk);
    const senderKeyId = byte2int(chunks[3]);
    const receiverKeyId = byte2int(chunks[4]);
    this.e2eeLog("decryptE2EETextMessageSenderKeyId", senderKeyId);
    this.e2eeLog("decryptE2EETextMessageReceiverKeyId", receiverKeyId);
    const selfKey = await this.getE2EESelfKeyData(this.client.profile.mid);
    let privK = Buffer6.from(selfKey.privKey, "base64");
    let pubK;
    if (toType === enums.MIDType.USER || toType === "USER") {
      pubK = await this.getE2EELocalPublicKey(isSelf ? to : _from, isSelf ? receiverKeyId : senderKeyId);
    } else {
      const groupK = await this.getE2EELocalPublicKey(to, receiverKeyId);
      privK = Buffer6.from(groupK.privKey, "base64");
      pubK = Buffer6.from(selfKey.pubKey, "base64");
      if (_from !== this.client.profile?.mid) {
        pubK = await this.getE2EELocalPublicKey(_from, senderKeyId);
      }
    }
    let decrypted;
    if (specVersion === "2") {
      decrypted = this.decryptE2EEMessageV2(to, _from, chunks, privK, pubK, parseInt(specVersion), contentType);
    } else {
      decrypted = this.decryptE2EEMessageV1(chunks, privK, pubK);
    }
    const text = decrypted.text || "";
    const meta = {};
    for (const key in decrypted) {
      if (key === "text") {
        continue;
      }
      if (Object.prototype.hasOwnProperty.call(decrypted, key)) {
        const val = decrypted[key];
        if (typeof val === "string") {
          meta[key] = val;
        } else {
          meta[key] = JSON.stringify(val);
        }
      }
    }
    return [
      text,
      meta
    ];
  }
  async decryptE2EELocationMessage(messageObj, isSelf = true) {
    const _from = messageObj.from;
    const to = messageObj.to;
    const toType = messageObj.toType;
    const metadata = messageObj.contentMetadata;
    const specVersion = metadata.e2eeVersion || "2";
    const contentType = messageObj.contentType;
    const chunks = messageObj.chunks.map((chunk) => typeof chunk === "string" ? Buffer6.from(chunk, "utf-8") : chunk);
    const senderKeyId = byte2int(chunks[3]);
    const receiverKeyId = byte2int(chunks[4]);
    this.e2eeLog("decryptE2EELocationMessageSenderKeyId", senderKeyId);
    this.e2eeLog("decryptE2EELocationMessageReceiverKeyId", receiverKeyId);
    const selfKey = await this.getE2EESelfKeyData(this.client.profile?.mid);
    let privK = Buffer6.from(selfKey.privKey, "base64");
    let pubK;
    if (toType === enums.MIDType.USER || toType === "USER") {
      pubK = await this.getE2EELocalPublicKey(to, isSelf ? receiverKeyId : senderKeyId);
    } else {
      const groupK = await this.getE2EELocalPublicKey(to, receiverKeyId);
      privK = Buffer6.from(groupK.privKey, "base64");
      pubK = Buffer6.from(selfKey.pubKey, "base64");
      if (_from !== this.client.profile?.mid) {
        pubK = await this.getE2EELocalPublicKey(_from, senderKeyId);
      }
    }
    let decrypted;
    if (specVersion === "2") {
      decrypted = this.decryptE2EEMessageV2(to, _from, chunks, privK, pubK, parseInt(specVersion), contentType);
    } else {
      decrypted = this.decryptE2EEMessageV1(chunks, privK, pubK);
    }
    return decrypted.location || void 0;
  }
  async decryptE2EEDataMessage(messageObj, isSelf = true) {
    const _from = messageObj.from;
    const to = messageObj.to;
    const toType = messageObj.toType;
    const metadata = messageObj.contentMetadata;
    const specVersion = metadata.e2eeVersion || "2";
    const contentType = messageObj.contentType;
    const chunks = messageObj.chunks.map((chunk) => typeof chunk === "string" ? Buffer6.from(chunk, "utf-8") : chunk);
    const senderKeyId = byte2int(chunks[3]);
    const receiverKeyId = byte2int(chunks[4]);
    this.e2eeLog("decryptE2EELocationMessageSenderKeyId", senderKeyId);
    this.e2eeLog("decryptE2EELocationMessageReceiverKeyId", receiverKeyId);
    const selfKey = await this.getE2EESelfKeyData(this.client.profile?.mid);
    let privK = Buffer6.from(selfKey.privKey, "base64");
    let pubK;
    if (toType === enums.MIDType.USER || toType === "USER") {
      pubK = await this.getE2EELocalPublicKey(to, isSelf ? receiverKeyId : senderKeyId);
    } else {
      const groupK = await this.getE2EELocalPublicKey(to, receiverKeyId);
      privK = Buffer6.from(groupK.privKey, "base64");
      pubK = Buffer6.from(selfKey.pubKey, "base64");
      if (_from !== this.client.profile?.mid) {
        pubK = await this.getE2EELocalPublicKey(_from, senderKeyId);
      }
    }
    let decrypted;
    if (specVersion === "2") {
      decrypted = this.decryptE2EEMessageV2(to, _from, chunks, privK, pubK, parseInt(specVersion), contentType);
    } else {
      decrypted = this.decryptE2EEMessageV1(chunks, privK, pubK);
    }
    return decrypted || {};
  }
  decryptE2EEMessageV1(chunks, privK, pubK) {
    this.e2eeLog("decryptE2EEMessageV1_arg", {
      chunks,
      privK,
      pubK
    });
    const salt = chunks[0];
    const message = chunks[1];
    const _sign = chunks[2];
    const aesKey = this.generateSharedSecret(privK, pubK);
    const aes_key = this.getSHA256Sum(Buffer6.from(aesKey), salt, "Key");
    const aes_iv = this.xor(this.getSHA256Sum(Buffer6.from(aesKey), salt, "IV"));
    this.e2eeLog("decryptE2EEMessageV1", {
      aes_key,
      aes_iv,
      message
    });
    let decrypted;
    try {
      const decipher = crypto_default.createDecipheriv("aes-256-cbc", aes_key, aes_iv);
      decrypted = Buffer6.concat([
        decipher.update(message),
        decipher.final()
      ]);
    } catch (error3) {
      const decipher2 = crypto_default.createDecipheriv("aes-256-cbc", aes_key, aes_iv);
      decipher2.setAutoPadding(false);
      decrypted = Buffer6.concat([
        decipher2.update(message),
        decipher2.final()
      ]);
    }
    this.e2eeLog("decryptE2EEMessageV1DecryptedMessage", decrypted.toString("utf-8"));
    return JSON.parse(decrypted.toString("utf-8"));
  }
  decryptE2EEMessageV2(to, _from, chunks, privK, pubK, specVersion = 2, contentType = 0) {
    const salt = chunks[0];
    const message = chunks[1];
    const ciphertext = message.subarray(0, -16);
    const tag = message.subarray(-16);
    const sign2 = chunks[2];
    const senderKeyId = byte2int(chunks[3]);
    const receiverKeyId = byte2int(chunks[4]);
    const aesKey = this.generateSharedSecret(privK, pubK);
    const gcmKey = this.getSHA256Sum(Buffer6.from(aesKey), salt, "Key");
    const aad = this.generateAAD(to, _from, senderKeyId, receiverKeyId, specVersion, contentType);
    let decrypted;
    try {
      const decipher = crypto_default.createDecipheriv("aes-256-gcm", gcmKey, sign2);
      decipher.setAuthTag(tag);
      decipher.setAAD(aad);
      decrypted = Buffer6.concat([
        decipher.update(ciphertext),
        decipher.final()
      ]);
    } catch (error3) {
      try {
        const decipher2 = crypto_default.createDecipheriv("aes-256-gcm", gcmKey, sign2);
        decipher2.setAuthTag(tag);
        decipher2.setAAD(aad);
        decipher2.setAutoPadding(false);
        decrypted = Buffer6.concat([
          decipher2.update(ciphertext),
          decipher2.final()
        ]);
      } catch (retryError) {
        if (retryError instanceof Error) {
          this.e2eeLog("decryptE2EEMessageV2DecryptionFailed", retryError.message);
        }
        throw retryError;
      }
    }
    this.e2eeLog("decryptE2EEMessageV2DecryptedMessage", decrypted);
    return JSON.parse(decrypted.toString());
  }
  e2eeLog(type, message) {
    this.client.log("e2ee", {
      type,
      message
    });
  }
  createSqrSecret(base64Only = false) {
    const { secretKey, publicKey } = import_tweetnacl.default.box.keyPair();
    const secret = encodeURIComponent(Buffer6.from(publicKey).toString("base64"));
    const version2 = 1;
    if (base64Only) {
      return [
        Buffer6.from(secretKey),
        Buffer6.from(publicKey).toString("base64")
      ];
    }
    return [
      Buffer6.from(secretKey),
      `?secret=${secret}&e2eeVersion=${version2}`
    ];
  }
  // for e2ee next
  _encryptAESCTR(aesKey, nonce, data) {
    const cipher = crypto_default.createCipheriv("aes-256-ctr", aesKey, nonce);
    const encrypted = Buffer6.concat([
      cipher.update(data),
      cipher.final()
    ]);
    return encrypted;
  }
  async __encryptAESCTR(aesKey, nonce, data) {
    return Buffer6.from(await globalThis.crypto.subtle.encrypt({
      name: "AES-CTR",
      counter: nonce,
      length: 64
    }, await globalThis.crypto.subtle.importKey("raw", aesKey, "AES-CTR", false, [
      "encrypt",
      "decrypt"
    ]), data));
  }
  ___encryptAESCTR(aesKey, nonce, data) {
    const key = import_crypto_js.default.lib.WordArray.create(aesKey);
    const iv = import_crypto_js.default.lib.WordArray.create(nonce);
    const plaintext = import_crypto_js.default.lib.WordArray.create(data);
    const encrypted = import_crypto_js.default.AES.encrypt(plaintext, key, {
      iv,
      mode: import_crypto_js.default.mode.CTR,
      padding: import_crypto_js.default.pad.NoPadding
    });
    const ciphertext = Buffer6.from(encrypted.ciphertext.toString(import_crypto_js.default.enc.Hex), "hex");
    return ciphertext;
  }
  _decryptAESCTR(aesKey, nonce, data) {
    const decipher = crypto_default.createDecipheriv("aes-256-ctr", aesKey, nonce);
    const decrypted = Buffer6.concat([
      decipher.update(data),
      decipher.final()
    ]);
    return decrypted;
  }
  __decryptAESCTR(aesKey, nonce, data) {
    const keyWordArray = import_crypto_js.default.lib.WordArray.create(aesKey);
    const nonceWordArray = import_crypto_js.default.lib.WordArray.create(nonce);
    const encryptedData = import_crypto_js.default.lib.WordArray.create(data);
    const decrypted = import_crypto_js.default.AES.decrypt({
      ciphertext: encryptedData
    }, keyWordArray, {
      mode: import_crypto_js.default.mode.CTR,
      iv: nonceWordArray,
      padding: import_crypto_js.default.pad.NoPadding
    });
    return Buffer6.from(decrypted.toString(import_crypto_js.default.enc.Hex), "hex");
  }
  signData(data, key) {
    const hmac = crypto_default.createHmac("sha256", key);
    hmac.update(data);
    return hmac.digest();
  }
  async deriveKeyMaterial(keyMaterial) {
    const derived = await new Promise((resolve, reject) => {
      crypto_default.hkdf("sha256", keyMaterial, new Uint8Array(0), "FileEncryption", 76, (err, derivedKey) => {
        if (err) {
          reject(err);
        }
        resolve(Buffer6.from(derivedKey));
      });
    });
    return {
      encKey: derived.slice(0, 32),
      macKey: derived.slice(32, 64),
      // ???
      nonce: Buffer6.concat([
        derived.slice(64, 76),
        new Uint8Array(4)
      ])
    };
  }
  async encryptByKeyMaterial(rawData, keyMaterial) {
    if (!keyMaterial) {
      keyMaterial = crypto_default.randomBytes(32);
    }
    const keys = await this.deriveKeyMaterial(keyMaterial);
    const encData = await this.___encryptAESCTR(keys.encKey, keys.nonce, rawData);
    const sign2 = this.signData(encData, keys.macKey);
    return {
      keyMaterial: keyMaterial.toString("base64"),
      encryptedData: Buffer6.concat([
        encData,
        sign2
      ])
    };
  }
  async decryptByKeyMaterial(rawData, keyMaterial) {
    if (typeof keyMaterial === "string") {
      keyMaterial = Buffer6.from(keyMaterial, "base64");
    }
    const keys = await this.deriveKeyMaterial(keyMaterial);
    return this.__decryptAESCTR(keys.encKey, keys.nonce, rawData).slice(0, -32);
  }
};
__name(E2EE, "E2EE");
function byte2int(t) {
  let e = 0;
  const s = t.length;
  for (let i = 0; i < s; i++) {
    e = 256 * e + t[i];
  }
  return e;
}
__name(byte2int, "byte2int");

// node_modules/@evex/linejs/base/obs/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
import { Buffer as Buffer7 } from "node:buffer";

// node_modules/@evex/linejs/base/obs/mime.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var MimeType = {
  "audio/x-mpeg": "mpega",
  "application/postscript": "ps",
  "audio/x-aiff": "aiff",
  "application/x-aim": "aim",
  "image/x-jg": "art",
  "video/x-ms-asf": "asx",
  "audio/basic": "ulw",
  "video/x-msvideo": "avi",
  "video/x-rad-screenplay": "avx",
  "application/x-bcpio": "bcpio",
  "application/octet-stream": "exe",
  "image/bmp": "dib",
  "text/html": "html",
  "application/x-cdf": "cdf",
  "application/pkix-cert": "cer",
  "application/java": "class",
  "application/x-cpio": "cpio",
  "application/x-csh": "csh",
  "text/css": "css",
  "application/msword": "doc",
  "application/xml-dtd": "dtd",
  "video/x-dv": "dv",
  "application/x-dvi": "dvi",
  "application/vnd.ms-fontobject": "eot",
  "text/x-setext": "etx",
  "image/gif": "gif",
  "application/x-gtar": "gtar",
  "application/x-gzip": "gz",
  "application/x-hdf": "hdf",
  "application/mac-binhex40": "hqx",
  "text/x-component": "htc",
  "image/ief": "ief",
  "text/vnd.sun.j2me.app-descriptor": "jad",
  "application/java-archive": "jar",
  "text/x-java-source": "java",
  "application/x-java-jnlp-file": "jnlp",
  "image/jpeg": "jpg",
  "application/javascript": "js",
  "text/plain": "txt",
  "application/json": "json",
  "audio/midi": "midi",
  "application/x-latex": "latex",
  "audio/x-mpegurl": "m3u",
  "image/x-macpaint": "pnt",
  "text/troff": "tr",
  "application/mathml+xml": "mathml",
  "application/x-mif": "mif",
  "video/quicktime": "qt",
  "video/x-sgi-movie": "movie",
  "audio/mpeg": "mpa",
  "video/mp4": "mp4",
  "video/mpeg": "mpg",
  "video/mpeg2": "mpv2",
  "application/x-wais-source": "src",
  "application/x-netcdf": "nc",
  "application/oda": "oda",
  "application/vnd.oasis.opendocument.database": "odb",
  "application/vnd.oasis.opendocument.chart": "odc",
  "application/vnd.oasis.opendocument.formula": "odf",
  "application/vnd.oasis.opendocument.graphics": "odg",
  "application/vnd.oasis.opendocument.image": "odi",
  "application/vnd.oasis.opendocument.text-master": "odm",
  "application/vnd.oasis.opendocument.presentation": "odp",
  "application/vnd.oasis.opendocument.spreadsheet": "ods",
  "application/vnd.oasis.opendocument.text": "odt",
  "application/vnd.oasis.opendocument.graphics-template": "otg",
  "application/vnd.oasis.opendocument.text-web": "oth",
  "application/vnd.oasis.opendocument.presentation-template": "otp",
  "application/vnd.oasis.opendocument.spreadsheet-template": "ots",
  "application/vnd.oasis.opendocument.text-template": "ott",
  "application/ogg": "ogx",
  "video/ogg": "ogv",
  "audio/ogg": "spx",
  "application/x-font-opentype": "otf",
  "audio/flac": "flac",
  "application/annodex": "anx",
  "audio/annodex": "axa",
  "video/annodex": "axv",
  "application/xspf+xml": "xspf",
  "image/x-portable-bitmap": "pbm",
  "image/pict": "pict",
  "application/pdf": "pdf",
  "image/x-portable-graymap": "pgm",
  "audio/x-scpls": "pls",
  "image/png": "png",
  "image/x-portable-anymap": "pnm",
  "image/x-portable-pixmap": "ppm",
  "application/vnd.ms-powerpoint": "pps",
  "image/vnd.adobe.photoshop": "psd",
  "image/x-quicktime": "qtif",
  "image/x-cmu-raster": "ras",
  "application/rdf+xml": "rdf",
  "image/x-rgb": "rgb",
  "application/vnd.rn-realmedia": "rm",
  "application/rtf": "rtf",
  "text/richtext": "rtx",
  "application/font-sfnt": "sfnt",
  "application/x-sh": "sh",
  "application/x-shar": "shar",
  "application/x-stuffit": "sit",
  "application/x-sv4cpio": "sv4cpio",
  "application/x-sv4crc": "sv4crc",
  "image/svg+xml": "svgz",
  "application/x-shockwave-flash": "swf",
  "application/x-tar": "tar",
  "application/x-tcl": "tcl",
  "application/x-tex": "tex",
  "application/x-texinfo": "texinfo",
  "image/tiff": "tiff",
  "text/tab-separated-values": "tsv",
  "application/x-font-ttf": "ttf",
  "application/x-ustar": "ustar",
  "application/voicexml+xml": "vxml",
  "image/x-xbitmap": "xbm",
  "application/xhtml+xml": "xhtml",
  "application/vnd.ms-excel": "xls",
  "application/xml": "xsl",
  "image/x-xpixmap": "xpm",
  "application/xslt+xml": "xslt",
  "application/vnd.mozilla.xul+xml": "xul",
  "image/x-xwindowdump": "xwd",
  "application/vnd.visio": "vsd",
  "audio/x-wav": "wav",
  "image/vnd.wap.wbmp": "wbmp",
  "text/vnd.wap.wml": "wml",
  "application/vnd.wap.wmlc": "wmlc",
  "text/vnd.wap.wmlsc": "wmls",
  "application/vnd.wap.wmlscriptc": "wmlscriptc",
  "video/x-ms-wmv": "wmv",
  "application/font-woff": "woff",
  "application/font-woff2": "woff2",
  "model/vrml": "wrl",
  "application/wspolicy+xml": "wspolicy",
  "application/x-compress": "z",
  "application/zip": "zip"
};

// node_modules/@evex/linejs/base/obs/mod.js
init_crypto2();
var thrift4 = __toESM(require_browser2(), 1);
var LineObs = class {
  client;
  prefix = "https://obs.line-apps.com/";
  constructor(client) {
    this.client = client;
  }
  /**
  * Gets a message image URI by appending the given message ID to the prefixSticker
  * @param {string} [messageId] - The message ID to use in the URLSticker
  * @param {boolean} [isPreview=false] - Whether to append '/preview' to the URL.
  * @return {string} The getted message image
  */
  getMessageDataUrl(messageId, isPreview = false, square2 = false) {
    return `${this.prefix}r/${square2 ? "g2" : "talk"}/m/${messageId}${isPreview ? "/preview" : ""}`;
  }
  /**
  * Gets a message image URI by appending the given message ID to the prefixSticker
  * @param {string} [messageId] - The message ID to use in the URLSticker
  * @return {string} The getted message image
  */
  getMessageMetadataUrl(messageId, square2 = false) {
    return `${this.prefix}r/${square2 ? "g2" : "talk"}/m/${messageId}/object_info.obs`;
  }
  /**
  * @description Gets the message's data from LINE Obs.
  */
  async downloadMessageData(options) {
    if (!this.client.authToken) {
      throw new InternalError("Not setup yet", "Please call 'login()' first");
    }
    const { messageId, isPreview, isSquare } = {
      isPreview: false,
      isSquare: false,
      ...options
    };
    const blob = await (await this.client.fetch(this.getMessageDataUrl(messageId, isPreview, isSquare), {
      headers: {
        accept: "application/json, text/plain, */*",
        "x-line-application": this.client.request.systemType,
        "x-Line-access": this.client.authToken
      }
    })).blob();
    const fileInfo = await this.getMessageObsMetadata({
      messageId,
      isSquare
    });
    return new File([
      blob
    ], fileInfo.name, {
      type: blob.type
    });
  }
  /**
  * @description Gets the message's data from LINE Obs.
  */
  async getMessageObsMetadata(options) {
    if (!this.client.authToken) {
      throw new InternalError("Not setup yet", "Please call 'login()' first");
    }
    const { messageId, isSquare } = {
      isSquare: false,
      ...options
    };
    const r = await this.client.fetch(this.getMessageMetadataUrl(messageId, isSquare), {
      headers: {
        accept: "application/json, text/plain, */*",
        "x-line-application": this.client.request.systemType,
        "x-Line-access": this.client.authToken
      }
    });
    return r.json();
  }
  /**
  * @description Upload obs message to talk.
  */
  async uploadObjTalk(to, type, data, oid, filename) {
    if (!this.client.authToken) {
      throw new InternalError("Not setup yet", "Please call 'login()' first");
    }
    const ext = MimeType[data.type];
    const param = {
      ver: "2.0",
      name: filename || "linejs." + ext,
      type,
      ...oid ? {
        oid
      } : {
        oid: "reqseq",
        tomid: to,
        reqseq: this.client.getReqseq("talk").toString()
      }
    };
    if (type === "image") {
      param.cat = "original";
    } else if (type === "gif") {
      param.cat = "original";
      param.type = "image";
    } else if (type === "audio" || type === "video") {
      param.duration = "1919";
    }
    const toType = to[0] === "m" || to[0] === "t" ? "g2" : "talk";
    return await this.uploadObjectForService({
      data,
      oType: type,
      obsPath: toType + "/m/" + oid || "reqseq",
      filename: param.name,
      params: param
    });
  }
  async uploadObjectForService(options) {
    let { data, oType, obsPath, params, filename, addHeaders } = {
      oType: "image",
      obsPath: "myhome/h",
      ...options
    };
    const obsPathFinal = `/r/${obsPath}`;
    oType = oType.toLowerCase();
    filename = filename || crypto_default.randomUUID();
    const baseParams = {
      type: oType,
      ver: "2.0",
      name: filename
    };
    params = {
      ...baseParams,
      ...params || {}
    };
    if (!data || data.size === 0) {
      throw new InternalError("ObsError", "No data to send.");
    }
    let headers = this.client.request.getHeader("POST");
    headers["Content-Type"] = "application/octet-stream";
    headers["X-Obs-Params"] = Buffer7.from(JSON.stringify(params)).toString("base64");
    if (addHeaders) {
      headers = {
        ...headers,
        ...addHeaders
      };
    }
    const response = await this.client.fetch(this.prefix + obsPathFinal, {
      method: "POST",
      headers,
      body: data
    });
    const objId = response.headers.get("x-obs-oid") ?? "";
    const objHash = response.headers.get("x-obs-hash") ?? "";
    return {
      objId,
      objHash,
      headers: response.headers
    };
  }
  async downloadObjectForService(options) {
    let { obsPath, oid, addHeaders } = {
      addHeaders: {},
      ...options
    };
    if (obsPath.includes("{oid}")) {
      obsPath = obsPath.replace("{oid}", oid);
    } else {
      obsPath += "/" + oid;
    }
    let headers = this.client.request.getHeader("GET");
    headers = {
      ...headers,
      ...addHeaders
    };
    const obsPathFinal = "r/" + obsPath;
    const response = await this.client.fetch(this.prefix + obsPathFinal, {
      method: "GET",
      headers
    });
    return response.blob();
  }
  async uploadMediaByE2EE(options) {
    const { data, oType, to, filename } = options;
    const typeSet = {
      "image": [
        "emi",
        1
      ],
      "video": [
        "emv",
        2
      ],
      "audio": [
        "ema",
        3
      ],
      "file": [
        "emf",
        14
      ],
      "gif": [
        "emi",
        1
      ]
    };
    const ext = filename && filename.split(".").at(-1) || MimeType[data.type];
    const serviceName = "talk";
    const [obsNamespace, contentType] = typeSet[oType];
    const params = {
      "type": "file"
    };
    if (oType === "gif") {
      params["cat"] = "original";
    }
    if (!(to[0] === "u" || to[0] === "c")) {
      throw new InternalError("ObsError", "Invalid mid");
    }
    const { keyMaterial, encryptedData } = await this.client.e2ee.encryptByKeyMaterial(Buffer7.from(await data.arrayBuffer()));
    const tempId = "reqid-" + crypto_default.randomUUID();
    const edata = new Blob([
      encryptedData
    ]);
    const { objId } = await this.uploadObjectForService({
      data: edata,
      oType: "file",
      obsPath: `${serviceName}/${obsNamespace}/${tempId}`,
      params
    });
    if (oType === "image" || oType === "gif" || oType === "video") {
      const { objId: objId2, headers } = await this.uploadObjectForService({
        data: edata,
        oType: "file",
        obsPath: `${serviceName}/${obsNamespace}/${tempId}__ud-preview`,
        params
      });
      if (objId !== objId2) {
        throw new InternalError("ObsError", "objId not match", {
          headers
        });
      }
    }
    const chunks = await this.client.e2ee.encryptE2EEMessage(to, {
      keyMaterial,
      fileName: filename || "linejs." + ext
    }, contentType);
    return await this.client.talk.sendMessage({
      to,
      chunks,
      contentType,
      contentMetadata: {
        SID: obsNamespace,
        OID: objId,
        FILE_SIZE: edata.size.toString(),
        e2eeVersion: "2",
        ...oType === "image" || oType === "gif" || oType === "video" ? {
          MEDIA_CONTENT_INFO: JSON.stringify({
            category: "original",
            fileSize: edata.size,
            extension: ext,
            animated: oType == "gif"
          })
        } : {}
      }
    });
  }
  async downloadMediaByE2EE(message) {
    if (!(message.to[0] === "u" || message.to[0] === "c")) {
      throw new InternalError("ObsError", "Invalid mid");
    }
    const { id, contentMetadata, chunks } = message;
    if (!chunks || !chunks.length) {
      return null;
    }
    const { keyMaterial, fileName } = await this.client.e2ee.decryptE2EEDataMessage(message);
    const talkMeta = Buffer7.from(JSON.stringify({
      message: Buffer7.from(writeStruct([
        [
          11,
          4,
          id
        ],
        [
          15,
          27,
          [
            12,
            []
          ]
        ]
      ], thrift4.TBinaryProtocol)).toString("base64")
    })).toString("base64");
    const data = await this.downloadObjectForService({
      oid: contentMetadata.OID,
      obsPath: "talk/" + contentMetadata.SID,
      addHeaders: {
        "X-Talk-Meta": talkMeta
      }
    });
    const fileData = new File([
      await this.client.e2ee.decryptByKeyMaterial(Buffer7.from(await data.arrayBuffer()), keyMaterial)
    ], fileName);
    return fileData;
  }
};
__name(LineObs, "LineObs");

// node_modules/@evex/linejs/base/timeline/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var Timeline = class {
  timelineToken;
  timelineHeaders = {};
  client;
  constructor(client) {
    this.client = client;
  }
  async initTimeline() {
    if (this.timelineToken) {
      return;
    }
    this.timelineToken = (await this.client.channel.approveChannelAndIssueChannelToken({
      channelId: "1341209850"
    })).channelAccessToken;
    this.timelineHeaders = {
      "x-line-bdbtemplateversion": "v1",
      "x-lsr": "JP",
      "user-agent": this.client.request.userAgent,
      "x-line-channeltoken": this.timelineToken,
      "accept-encoding": "gzip",
      "x-line-global-config": "discover.enable=true; follow.enable=true; reboot.phase=scenario",
      "x-line-mid": this.client.profile.mid,
      "x-line-access": this.client.authToken,
      "content-type": "application/json; charset=UTF-8",
      "x-line-application": this.client.request.systemType,
      "x-lal": "ja_JP",
      "x-lpv": "1"
    };
  }
  async createPost(options) {
    await this.initTimeline();
    const { homeId, text, sharedPostId, textSizeMode, backgroundColor, textAnimation, readPermissionType, readPermissionGids, holdingTime, stickerIds, stickerPackageIds, locationLatitudes, locationLongitudes, locationNames, mediaObjectIds, mediaObjectTypes, sourceType } = {
      textSizeMode: "NORMAL",
      backgroundColor: "#FFFFFF",
      textAnimation: "NONE",
      readPermissionType: "ALL",
      sourceType: "TIMELINE",
      readPermissionGids: [],
      stickerIds: [],
      stickerPackageIds: [],
      locationLatitudes: [],
      locationLongitudes: [],
      locationNames: [],
      mediaObjectIds: [],
      mediaObjectTypes: [],
      ...options
    };
    if (homeId[0] === "u") {
      throw new Error("Not support oto");
    }
    const params = new URLSearchParams({
      homeId,
      sourceType
    });
    const postInfo = {
      readPermission: {
        type: readPermissionType,
        gids: readPermissionGids
      }
    };
    const stickers = [];
    const locations = [];
    const medias = [];
    stickerIds.forEach((stickerId, stickerIndex) => {
      stickers.push({
        id: stickerId,
        packageId: stickerPackageIds[stickerIndex],
        packageVersion: 1,
        hasAnimation: true,
        hasSound: true,
        stickerResourceType: "ANIMATION"
      });
    });
    locationLatitudes.forEach((locationLatitude, locatioIndex) => {
      locations.push({
        latitude: locationLatitude,
        longitude: locationLongitudes[locatioIndex],
        name: locationNames[locatioIndex]
      });
    });
    mediaObjectIds.forEach((mediaObjectId, mediaIndex) => {
      medias.push({
        objectId: mediaObjectId,
        type: mediaObjectTypes[mediaIndex],
        obsFace: "[]"
      });
    });
    const contents = {
      contentsStyle: {
        textStyle: {
          textSizeMode,
          backgroundColor,
          textAnimation
        },
        mediaStyle: {
          displayType: "GRID_1_A"
        }
      },
      stickers,
      locations,
      media: medias
    };
    if (typeof holdingTime !== "undefined") {
      postInfo.holdingTime = holdingTime;
    }
    if (typeof text !== "undefined") {
      contents.text = text;
    }
    if (typeof sharedPostId !== "undefined") {
      contents.sharedPostId = sharedPostId;
    }
    const data = {
      postInfo,
      contents
    };
    const headers = {
      ...this.timelineHeaders,
      "x-lhm": "POST"
    };
    return await this.client.fetch(`https://${this.client.request.endpoint}/${homeId[0] == "s" ? "sn" : "mh"}/api/v57/post/create.json?${params}`, {
      headers,
      body: JSON.stringify(data),
      method: "POST"
    }).then((r) => r.json());
  }
  async deletePost(options) {
    await this.initTimeline();
    const { homeId, postId } = {
      ...options
    };
    const headers = {
      ...this.timelineHeaders,
      "x-lhm": "GET"
    };
    const params = new URLSearchParams({
      homeId,
      postId
    });
    return await this.client.fetch(`https://${this.client.request.endpoint}/${homeId[0] == "s" ? "sn" : "mh"}/api/v57/post/delete.json?${params}`, {
      headers,
      method: "POST"
    }).then((r) => r.json());
  }
  async getPost(options) {
    await this.initTimeline();
    const { homeId, postId } = {
      ...options
    };
    const headers = {
      ...this.timelineHeaders,
      "x-lhm": "GET"
    };
    const params = new URLSearchParams({
      homeId,
      postId
    });
    return await this.client.fetch(`https://${this.client.request.endpoint}/${homeId[0] == "s" ? "sn" : "mh"}/api/v57/post/get.json?${params}`, {
      headers
    }).then((r) => r.json());
  }
  async listPost(options) {
    await this.initTimeline();
    const { homeId, postId, updatedTime, sourceType } = {
      sourceType: "TALKROOM",
      ...options
    };
    const headers = {
      ...this.timelineHeaders,
      "x-lhm": "GET"
    };
    const data = {
      homeId,
      sourceType,
      likeLimit: "0",
      commentLimit: "0"
    };
    if (postId) {
      data.postId = postId;
    }
    if (updatedTime) {
      data.updatedTime = updatedTime.toString();
    }
    const params = new URLSearchParams(data);
    return await this.client.fetch(`https://${this.client.request.endpoint}/${homeId[0] == "s" ? "sn" : "mh"}/api/v57/post/list.json?${params}`, {
      headers
    }).then((r) => r.json());
  }
  async sharePost(options) {
    const { chatMid, postId, homeId } = {
      ...options
    };
    await this.initTimeline();
    const headers = {
      ...this.timelineHeaders,
      "x-lhm": "POST"
    };
    return await this.client.fetch(`https://${this.client.request.endpoint}/${homeId[0] == "s" ? "sn" : "mh"}/api/v57/post/sendPostToTalk.json`, {
      method: "POST",
      headers,
      body: JSON.stringify({
        postId,
        receiveMids: [
          chatMid
        ]
      })
    }).then((r) => r.json());
  }
};
__name(Timeline, "Timeline");

// node_modules/@evex/linejs/base/polling/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
function sleep(time3) {
  return new Promise((resolve) => {
    setTimeout(resolve, time3);
  });
}
__name(sleep, "sleep");
var Polling = class {
  sync = {
    talk: {}
  };
  client;
  constructor(client) {
    this.client = client;
  }
  /**
  * Listens to square events and yields them as they are received.
  *
  * @param options - Configuration options for listening to square events.
  * @param options.signal - An AbortSignal to cancel the polling.
  * @param options.onError - A callback function to handle errors.
  * @param options.pollingInterval - The interval in milliseconds between polling requests. Defaults to 1000ms.
  *
  * @yields {SquareEvent} - The events received from the square.
  */
  async *listenSquareEvents(options = {}) {
    const { signal, onError, pollingInterval } = {
      pollingInterval: 1e3,
      ...options
    };
    let continuationToken;
    while (true) {
      try {
        const response = await this.client.square.fetchMyEvents({
          syncToken: this.sync.square,
          continuationToken,
          limit: 100
        });
        this.sync.square = response.syncToken;
        continuationToken = response.continuationToken;
        for (const event of response.events) {
          yield event;
        }
      } catch (error3) {
        if (onError) {
          onError(error3);
        }
      }
      await sleep(pollingInterval);
      if (signal?.aborted) {
        break;
      }
    }
  }
  /**
  * Listens for talk events by polling the server at a specified interval.
  *
  * @param {Object} [options] - Configuration options for the polling.
  * @param {AbortSignal} [options.signal] - An AbortSignal to cancel the polling.
  * @param {(error: unknown) => void} [options.onError] - A callback function to handle errors.
  * @param {number} [options.pollingInterval=1000] - The interval in milliseconds between each poll.
  *
  * @yields {Operation} - Yields each operation event received from the server.
  *
  * @returns {AsyncGenerator<Operation, void, unknown>} - An async generator that yields operation events.
  */
  async *listenTalkEvents(options = {}) {
    const { signal, onError, pollingInterval } = {
      pollingInterval: 100,
      ...options
    };
    while (true) {
      try {
        const response = await this.client.talk.sync({
          ...this.sync.talk,
          limit: 100
        });
        if (response.fullSyncResponse && response.fullSyncResponse.nextRevision) {
          this.sync.talk.revision = response.fullSyncResponse.nextRevision;
        }
        if (response.operationResponse && response.operationResponse.globalEvents && response.operationResponse.globalEvents.lastRevision) {
          this.sync.talk.globalRev = response.operationResponse.globalEvents.lastRevision;
        }
        if (response.operationResponse && response.operationResponse.individualEvents && response.operationResponse.individualEvents.lastRevision) {
          this.sync.talk.individualRev = response.operationResponse.individualEvents.lastRevision;
        }
        if (!(response.operationResponse && response.operationResponse.operations)) {
          continue;
        }
        for (const event of response.operationResponse.operations) {
          this.sync.talk.revision = event.revision;
          yield event;
        }
      } catch (error3) {
        if (onError) {
          onError(error3);
        }
      }
      await sleep(pollingInterval);
      if (signal?.aborted) {
        break;
      }
    }
  }
};
__name(Polling, "Polling");

// node_modules/@jsr/evex__linejs-types/thrift.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var Thrift5 = {
  "AR0_g": {
    "16641": "ILLEGAL_ARGUMENT",
    "16642": "MAJOR_VERSION_NOT_SUPPORTED",
    "16897": "AUTHENTICATION_FAILED",
    "20737": "INTERNAL_SERVER_ERROR",
    "20739": "SERVICE_UNAVAILABLE"
  },
  "AR0_q": {
    "0": "NOT_PURCHASED",
    "1": "SUBSCRIPTION"
  },
  "AccountMigrationPincodeType": {
    "0": "NOT_APPLICABLE",
    "1": "NOT_SET",
    "2": "SET",
    "3": "NEED_ENFORCED_INPUT"
  },
  "ApplicationType": {
    "16": "IOS",
    "17": "IOS_RC",
    "18": "IOS_BETA",
    "19": "IOS_ALPHA",
    "32": "ANDROID",
    "33": "ANDROID_RC",
    "34": "ANDROID_BETA",
    "35": "ANDROID_ALPHA",
    "48": "WAP",
    "49": "WAP_RC",
    "50": "WAP_BETA",
    "51": "WAP_ALPHA",
    "64": "BOT",
    "65": "BOT_RC",
    "66": "BOT_BETA",
    "67": "BOT_ALPHA",
    "80": "WEB",
    "81": "WEB_RC",
    "82": "WEB_BETA",
    "83": "WEB_ALPHA",
    "96": "DESKTOPWIN",
    "97": "DESKTOPWIN_RC",
    "98": "DESKTOPWIN_BETA",
    "99": "DESKTOPWIN_ALPHA",
    "112": "DESKTOPMAC",
    "113": "DESKTOPMAC_RC",
    "114": "DESKTOPMAC_BETA",
    "115": "DESKTOPMAC_ALPHA",
    "128": "CHANNELGW",
    "129": "CHANNELGW_RC",
    "130": "CHANNELGW_BETA",
    "131": "CHANNELGW_ALPHA",
    "144": "CHANNELCP",
    "145": "CHANNELCP_RC",
    "146": "CHANNELCP_BETA",
    "147": "CHANNELCP_ALPHA",
    "160": "WINPHONE",
    "161": "WINPHONE_RC",
    "162": "WINPHONE_BETA",
    "163": "WINPHONE_ALPHA",
    "176": "BLACKBERRY",
    "177": "BLACKBERRY_RC",
    "178": "BLACKBERRY_BETA",
    "179": "BLACKBERRY_ALPHA",
    "192": "WINMETRO",
    "193": "WINMETRO_RC",
    "194": "WINMETRO_BETA",
    "195": "WINMETRO_ALPHA",
    "200": "S40",
    "209": "S40_RC",
    "210": "S40_BETA",
    "211": "S40_ALPHA",
    "224": "CHRONO",
    "225": "CHRONO_RC",
    "226": "CHRONO_BETA",
    "227": "CHRONO_ALPHA",
    "256": "TIZEN",
    "257": "TIZEN_RC",
    "258": "TIZEN_BETA",
    "259": "TIZEN_ALPHA",
    "272": "VIRTUAL",
    "288": "FIREFOXOS",
    "289": "FIREFOXOS_RC",
    "290": "FIREFOXOS_BETA",
    "291": "FIREFOXOS_ALPHA",
    "304": "IOSIPAD",
    "305": "IOSIPAD_RC",
    "306": "IOSIPAD_BETA",
    "307": "IOSIPAD_ALPHA",
    "320": "BIZIOS",
    "321": "BIZIOS_RC",
    "322": "BIZIOS_BETA",
    "323": "BIZIOS_ALPHA",
    "336": "BIZANDROID",
    "337": "BIZANDROID_RC",
    "338": "BIZANDROID_BETA",
    "339": "BIZANDROID_ALPHA",
    "352": "BIZBOT",
    "353": "BIZBOT_RC",
    "354": "BIZBOT_BETA",
    "355": "BIZBOT_ALPHA",
    "368": "CHROMEOS",
    "369": "CHROMEOS_RC",
    "370": "CHROMEOS_BETA",
    "371": "CHROMEOS_ALPHA",
    "384": "ANDROIDLITE",
    "385": "ANDROIDLITE_RC",
    "386": "ANDROIDLITE_BETA",
    "387": "ANDROIDLITE_ALPHA",
    "400": "WIN10",
    "401": "WIN10_RC",
    "402": "WIN10_BETA",
    "403": "WIN10_ALPHA",
    "416": "BIZWEB",
    "417": "BIZWEB_RC",
    "418": "BIZWEB_BETA",
    "419": "BIZWEB_ALPHA",
    "432": "DUMMYPRIMARY",
    "433": "DUMMYPRIMARY_RC",
    "434": "DUMMYPRIMARY_BETA",
    "435": "DUMMYPRIMARY_ALPHA",
    "448": "SQUARE",
    "449": "SQUARE_RC",
    "450": "SQUARE_BETA",
    "451": "SQUARE_ALPHA",
    "464": "INTERNAL",
    "465": "INTERNAL_RC",
    "466": "INTERNAL_BETA",
    "467": "INTERNAL_ALPHA",
    "480": "CLOVAFRIENDS",
    "481": "CLOVAFRIENDS_RC",
    "482": "CLOVAFRIENDS_BETA",
    "483": "CLOVAFRIENDS_ALPHA",
    "496": "WATCHOS",
    "497": "WATCHOS_RC",
    "498": "WATCHOS_BETA",
    "499": "WATCHOS_ALPHA",
    "512": "OPENCHAT_PLUG",
    "513": "OPENCHAT_PLUG_RC",
    "514": "OPENCHAT_PLUG_BETA",
    "515": "OPENCHAT_PLUG_ALPHA",
    "528": "ANDROIDSECONDARY",
    "529": "ANDROIDSECONDARY_RC",
    "530": "ANDROIDSECONDARY_BETA",
    "531": "ANDROIDSECONDARY_ALPHA",
    "544": "WEAROS",
    "545": "WEAROS_RC",
    "546": "WEAROS_BETA",
    "547": "WEAROS_ALPHA"
  },
  "BotType": {
    "0": "RESERVED",
    "1": "OFFICIAL",
    "2": "LINE_AT_0",
    "3": "LINE_AT"
  },
  "CarrierCode": {
    "0": "NOT_SPECIFIED",
    "1": "JP_DOCOMO",
    "2": "JP_AU",
    "3": "JP_SOFTBANK",
    "4": "JP_DOCOMO_LINE",
    "5": "JP_SOFTBANK_LINE",
    "6": "JP_AU_LINE",
    "7": "JP_RAKUTEN",
    "8": "JP_MVNO",
    "9": "JP_USER_SELECTED_LINE",
    "17": "KR_SKT",
    "18": "KR_KT",
    "19": "KR_LGT"
  },
  "ChannelErrorCode": {
    "0": "ILLEGAL_ARGUMENT",
    "1": "INTERNAL_ERROR",
    "2": "CONNECTION_ERROR",
    "3": "AUTHENTICATIONI_FAILED",
    "4": "NEED_PERMISSION_APPROVAL",
    "5": "COIN_NOT_USABLE",
    "6": "WEBVIEW_NOT_ALLOWED",
    "7": "NOT_AVAILABLE_API"
  },
  "ContactAttribute": {
    "1": "CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL",
    "2": "CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL",
    "16": "CONTACT_ATTRIBUTE_CAPABLE_MY_HOME",
    "32": "CONTACT_ATTRIBUTE_CAPABLE_BUDDY"
  },
  "ContactSetting": {
    "1": "CONTACT_SETTING_NOTIFICATION_DISABLE",
    "2": "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE",
    "4": "CONTACT_SETTING_CONTACT_HIDE",
    "8": "CONTACT_SETTING_FAVORITE",
    "16": "CONTACT_SETTING_DELETE",
    "32": "CONTACT_SETTING_FRIEND_RINGTONE",
    "64": "CONTACT_SETTING_FRIEND_RINGBACK_TONE"
  },
  "ContactStatus": {
    "0": "UNSPECIFIED",
    "1": "FRIEND",
    "2": "FRIEND_BLOCKED",
    "3": "RECOMMEND",
    "4": "RECOMMEND_BLOCKED",
    "5": "DELETED",
    "6": "DELETED_BLOCKED"
  },
  "ContactType": {
    "0": "MID",
    "1": "PHONE",
    "2": "EMAIL",
    "3": "USERID",
    "4": "PROXIMITY",
    "5": "GROUP",
    "6": "USER",
    "7": "QRCODE",
    "8": "PROMOTION_BOT",
    "9": "CONTACT_MESSAGE",
    "10": "FRIEND_REQUEST",
    "11": "BEACON",
    "128": "REPAIR",
    "2305": "FACEBOOK",
    "2306": "SINA",
    "2307": "RENREN",
    "2308": "FEIXIN",
    "2309": "BBM"
  },
  "ContentType": {
    "0": "NONE",
    "1": "IMAGE",
    "2": "VIDEO",
    "3": "AUDIO",
    "4": "HTML",
    "5": "PDF",
    "6": "CALL",
    "7": "STICKER",
    "8": "PRESENCE",
    "9": "GIFT",
    "10": "GROUPBOARD",
    "11": "APPLINK",
    "12": "LINK",
    "13": "CONTACT",
    "14": "FILE",
    "15": "LOCATION",
    "16": "POSTNOTIFICATION",
    "17": "RICH",
    "18": "CHATEVENT",
    "19": "MUSIC",
    "20": "PAYMENT",
    "21": "EXTIMAGE",
    "22": "FLEX"
  },
  "Eg_EnumC8927a": {
    "1": "NEW",
    "2": "UPDATE",
    "3": "EVENT"
  },
  "EmailConfirmationStatus": {
    "0": "NOT_SPECIFIED",
    "1": "NOT_YET",
    "3": "DONE",
    "4": "NEED_ENFORCED_INPUT"
  },
  "ErrorCode": {
    "0": "ILLEGAL_ARGUMENT",
    "1": "AUTHENTICATION_FAILED",
    "2": "DB_FAILED",
    "3": "INVALID_STATE",
    "4": "EXCESSIVE_ACCESS",
    "5": "NOT_FOUND",
    "6": "INVALID_LENGTH",
    "7": "NOT_AVAILABLE_USER",
    "8": "NOT_AUTHORIZED_DEVICE",
    "9": "INVALID_MID",
    "10": "NOT_A_MEMBER",
    "11": "INCOMPATIBLE_APP_VERSION",
    "12": "NOT_READY",
    "13": "NOT_AVAILABLE_SESSION",
    "14": "NOT_AUTHORIZED_SESSION",
    "15": "SYSTEM_ERROR",
    "16": "NO_AVAILABLE_VERIFICATION_METHOD",
    "17": "NOT_AUTHENTICATED",
    "18": "INVALID_IDENTITY_CREDENTIAL",
    "19": "NOT_AVAILABLE_IDENTITY_IDENTIFIER",
    "20": "INTERNAL_ERROR",
    "21": "NO_SUCH_IDENTITY_IDENFIER",
    "22": "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY",
    "23": "ILLEGAL_IDENTITY_CREDENTIAL",
    "24": "UNKNOWN_CHANNEL",
    "25": "NO_SUCH_MESSAGE_BOX",
    "26": "NOT_AVAILABLE_MESSAGE_BOX",
    "27": "CHANNEL_DOES_NOT_MATCH",
    "28": "NOT_YOUR_MESSAGE",
    "29": "MESSAGE_DEFINED_ERROR",
    "30": "USER_CANNOT_ACCEPT_PRESENTS",
    "32": "USER_NOT_STICKER_OWNER",
    "33": "MAINTENANCE_ERROR",
    "34": "ACCOUNT_NOT_MATCHED",
    "35": "ABUSE_BLOCK",
    "36": "NOT_FRIEND",
    "37": "NOT_ALLOWED_CALL",
    "38": "BLOCK_FRIEND",
    "39": "INCOMPATIBLE_VOIP_VERSION",
    "40": "INVALID_SNS_ACCESS_TOKEN",
    "41": "EXTERNAL_SERVICE_NOT_AVAILABLE",
    "42": "NOT_ALLOWED_ADD_CONTACT",
    "43": "NOT_CERTIFICATED",
    "44": "NOT_ALLOWED_SECONDARY_DEVICE",
    "45": "INVALID_PIN_CODE",
    "47": "EXCEED_FILE_MAX_SIZE",
    "48": "EXCEED_DAILY_QUOTA",
    "49": "NOT_SUPPORT_SEND_FILE",
    "50": "MUST_UPGRADE",
    "51": "NOT_AVAILABLE_PIN_CODE_SESSION",
    "52": "EXPIRED_REVISION",
    "54": "NOT_YET_PHONE_NUMBER",
    "55": "BAD_CALL_NUMBER",
    "56": "UNAVAILABLE_CALL_NUMBER",
    "57": "NOT_SUPPORT_CALL_SERVICE",
    "58": "CONGESTION_CONTROL",
    "59": "NO_BALANCE",
    "60": "NOT_PERMITTED_CALLER_ID",
    "61": "NO_CALLER_ID_LIMIT_EXCEEDED",
    "62": "CALLER_ID_VERIFICATION_REQUIRED",
    "63": "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED",
    "64": "MESSAGE_NOT_FOUND",
    "65": "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT",
    "66": "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED",
    "67": "ACCOUNT_MIGRATION_PINCODE_BLOCKED",
    "69": "INVALID_PASSWORD_FORMAT",
    "70": "FEATURE_RESTRICTED",
    "71": "MESSAGE_NOT_DESTRUCTIBLE",
    "72": "PAID_CALL_REDEEM_FAILED",
    "73": "PREVENTED_JOIN_BY_TICKET",
    "75": "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT",
    "76": "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY",
    "77": "SECURITY_CENTER_NOT_VERIFIED",
    "78": "SECURITY_CENTER_BLOCKED_BY_SETTING",
    "79": "SECURITY_CENTER_BLOCKED",
    "80": "TALK_PROXY_EXCEPTION",
    "81": "E2EE_INVALID_PROTOCOL",
    "82": "E2EE_RETRY_ENCRYPT",
    "83": "E2EE_UPDATE_SENDER_KEY",
    "84": "E2EE_UPDATE_RECEIVER_KEY",
    "85": "E2EE_INVALID_ARGUMENT",
    "86": "E2EE_INVALID_VERSION",
    "87": "E2EE_SENDER_DISABLED",
    "88": "E2EE_RECEIVER_DISABLED",
    "89": "E2EE_SENDER_NOT_ALLOWED",
    "90": "E2EE_RECEIVER_NOT_ALLOWED",
    "91": "E2EE_RESEND_FAIL",
    "92": "E2EE_RESEND_OK",
    "93": "HITOKOTO_BACKUP_NO_AVAILABLE_DATA",
    "94": "E2EE_UPDATE_PRIMARY_DEVICE",
    "95": "SUCCESS",
    "96": "CANCEL",
    "97": "E2EE_PRIMARY_NOT_SUPPORT",
    "98": "E2EE_RETRY_PLAIN",
    "99": "E2EE_RECREATE_GROUP_KEY",
    "100": "E2EE_GROUP_TOO_MANY_MEMBERS",
    "101": "SERVER_BUSY",
    "102": "NOT_ALLOWED_ADD_FOLLOW",
    "103": "INCOMING_FRIEND_REQUEST_LIMIT",
    "104": "OUTGOING_FRIEND_REQUEST_LIMIT",
    "105": "OUTGOING_FRIEND_REQUEST_QUOTA",
    "106": "DUPLICATED",
    "107": "BANNED",
    "108": "NOT_AN_INVITEE",
    "109": "NOT_AN_OUTSIDER",
    "111": "EMPTY_GROUP",
    "112": "EXCEED_FOLLOW_LIMIT",
    "113": "UNSUPPORTED_ACCOUNT_TYPE",
    "114": "AGREEMENT_REQUIRED",
    "115": "SHOULD_RETRY",
    "116": "OVER_MAX_CHATS_PER_USER",
    "117": "NOT_AVAILABLE_API",
    "118": "INVALID_OTP",
    "119": "MUST_REFRESH_V3_TOKEN",
    "120": "ALREADY_EXPIRED",
    "121": "USER_NOT_STICON_OWNER",
    "122": "REFRESH_MEDIA_FLOW",
    "123": "EXCEED_FOLLOWER_LIMIT",
    "124": "INCOMPATIBLE_APP_TYPE",
    "125": "NOT_PREMIUM"
  },
  "Fg_a": {
    "0": "INTERNAL_ERROR",
    "1": "ILLEGAL_ARGUMENT",
    "2": "VERIFICATION_FAILED",
    "3": "NOT_FOUND",
    "4": "RETRY_LATER",
    "5": "HUMAN_VERIFICATION_REQUIRED",
    "6": "NOT_ENABLED",
    "100": "INVALID_CONTEXT",
    "101": "APP_UPGRADE_REQUIRED",
    "102": "NO_CONTENT"
  },
  "FriendRequestStatus": {
    "0": "NONE",
    "1": "AVAILABLE",
    "2": "ALREADY_REQUESTED",
    "3": "UNAVAILABLE"
  },
  "IdentityProvider": {
    "0": "UNKNOWN",
    "1": "LINE",
    "2": "NAVER_KR",
    "3": "LINE_PHONE"
  },
  "LN0_F0": {
    "0": "UNKNOWN",
    "1": "INVALID_TARGET_USER",
    "2": "AGE_VALIDATION",
    "3": "TOO_MANY_FRIENDS",
    "4": "TOO_MANY_REQUESTS",
    "5": "MALFORMED_REQUEST",
    "6": "TRACKING_META_QRCODE_FAVORED"
  },
  "LN0_X0": {
    "1": "USER",
    "2": "BOT"
  },
  "MIDType": {
    "0": "USER",
    "1": "ROOM",
    "2": "GROUP",
    "3": "SQUARE",
    "4": "SQUARE_CHAT",
    "5": "SQUARE_MEMBER",
    "6": "BOT",
    "7": "SQUARE_THREAD"
  },
  "NZ0_B0": {
    "0": "PAY",
    "1": "POI",
    "2": "FX",
    "3": "SEC",
    "4": "BIT",
    "5": "LIN",
    "6": "SCO",
    "7": "POC"
  },
  "NZ0_C0": {
    "0": "OK",
    "1": "MAINTENANCE",
    "2": "TPS_EXCEEDED",
    "3": "NOT_FOUND",
    "4": "BLOCKED",
    "5": "INTERNAL_ERROR",
    "6": "WALLET_CMS_MAINTENANCE"
  },
  "NZ0_EnumC12154b1": {
    "0": "NORMAL",
    "1": "CAMERA"
  },
  "NZ0_EnumC12169g1": {
    "101": "WALLET",
    "201": "ASSET",
    "301": "SHOPPING"
  },
  "NZ0_EnumC12170h": {
    "0": "HIDE_BADGE",
    "1": "SHOW_BADGE"
  },
  "NZ0_EnumC12188n": {
    "0": "OK",
    "1": "UNAVAILABLE",
    "2": "DUPLICATAE_REGISTRATION",
    "3": "INTERNAL_ERROR"
  },
  "NZ0_EnumC12192o0": {
    "0": "LV1",
    "1": "LV2",
    "2": "LV3",
    "3": "LV9"
  },
  "NZ0_EnumC12193o1": {
    "400": "INVALID_PARAMETER",
    "401": "AUTHENTICATION_FAILED",
    "500": "INTERNAL_SERVER_ERROR",
    "503": "SERVICE_IN_MAINTENANCE_MODE"
  },
  "NZ0_EnumC12195p0": {
    "1": "ALIVE",
    "2": "SUSPENDED",
    "3": "UNREGISTERED"
  },
  "NZ0_EnumC12197q": {
    "0": "PREFIX",
    "1": "SUFFIX"
  },
  "NZ0_EnumC12218x0": {
    "0": "NO_CONTENT",
    "1": "OK",
    "2": "ERROR"
  },
  "NZ0_I0": {
    "0": "A",
    "1": "B",
    "2": "C",
    "3": "D",
    "4": "UNKNOWN"
  },
  "NZ0_K0": {
    "0": "POCKET_MONEY",
    "1": "REFINANCE"
  },
  "NZ0_N0": {
    "0": "COMPACT",
    "1": "EXPANDED"
  },
  "NZ0_S0": {
    "0": "CARD",
    "1": "ACTION"
  },
  "NZ0_W0": {
    "0": "OK",
    "1": "INTERNAL_ERROR"
  },
  "NotificationStatus": {
    "1": "NOTIFICATION_ITEM_EXIST",
    "2": "TIMELINE_ITEM_EXIST",
    "4": "NOTE_GROUP_NEW_ITEM_EXIST",
    "8": "TIMELINE_BUDDYGROUP_CHANGED",
    "16": "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST",
    "32": "ALBUM_ITEM_EXIST",
    "64": "TIMELINE_ITEM_DELETED",
    "128": "OTOGROUP_ITEM_EXIST",
    "256": "GROUPHOME_NEW_ITEM_EXIST",
    "512": "GROUPHOME_HIDDEN_ITEM_CHANGED",
    "1024": "NOTIFICATION_ITEM_CHANGED",
    "2048": "BEAD_ITEM_HIDE",
    "4096": "BEAD_ITEM_SHOW",
    "8192": "LINE_TICKET_UPDATED",
    "16384": "TIMELINE_STORY_UPDATED",
    "32768": "SMARTCH_UPDATED",
    "65536": "AVATAR_UPDATED",
    "131072": "HOME_NOTIFICATION_ITEM_EXIST",
    "262144": "TIMELINE_REBOOT_COMPLETED",
    "524288": "TIMELINE_GUIDE_STORY_UPDATED",
    "1048576": "TIMELINE_F2F_COMPLETED",
    "2097152": "VOOM_LIVE_STATE_CHANGED",
    "4194304": "VOOM_ACTIVITY_REWARD_ITEM_EXIST"
  },
  "NotificationType": {
    "1": "APPLE_APNS",
    "2": "GOOGLE_C2DM",
    "3": "NHN_NNI",
    "4": "SKT_AOM",
    "5": "MS_MPNS",
    "6": "RIM_BIS",
    "7": "GOOGLE_GCM",
    "8": "NOKIA_NNAPI",
    "9": "TIZEN",
    "10": "MOZILLA_SIMPLE",
    "17": "LINE_BOT",
    "18": "LINE_WAP",
    "19": "APPLE_APNS_VOIP",
    "20": "MS_WNS",
    "21": "GOOGLE_FCM",
    "22": "CLOVA",
    "23": "CLOVA_VOIP",
    "24": "HUAWEI_HCM"
  },
  "Ob1_B0": {
    "0": "FOREGROUND",
    "1": "BACKGROUND"
  },
  "Ob1_C1": {
    "0": "NORMAL",
    "1": "BIG"
  },
  "Ob1_D0": {
    "0": "PURCHASE_ONLY",
    "1": "PURCHASE_OR_SUBSCRIPTION",
    "2": "SUBSCRIPTION_ONLY"
  },
  "Ob1_EnumC12607a1": {
    "1": "DEFAULT",
    "2": "VIEW_VIDEO"
  },
  "Ob1_EnumC12610b1": {
    "0": "NONE",
    "2": "BUDDY",
    "3": "INSTALL",
    "4": "MISSION",
    "5": "MUSTBUY"
  },
  "Ob1_EnumC12631i1": {
    "0": "UNKNOWN",
    "1": "PRODUCT",
    "2": "USER",
    "3": "PREMIUM_USER"
  },
  "Ob1_EnumC12638l": {
    "0": "VALID",
    "1": "INVALID"
  },
  "Ob1_EnumC12641m": {
    "1": "PREMIUM",
    "2": "VERIFIED",
    "3": "UNVERIFIED"
  },
  "Ob1_EnumC12652p1": {
    "0": "UNKNOWN",
    "1": "NONE",
    "16641": "ILLEGAL_ARGUMENT",
    "16642": "NOT_FOUND",
    "16643": "NOT_AVAILABLE",
    "16644": "NOT_PAID_PRODUCT",
    "16645": "NOT_FREE_PRODUCT",
    "16646": "ALREADY_OWNED",
    "16647": "ERROR_WITH_CUSTOM_MESSAGE",
    "16648": "NOT_AVAILABLE_TO_RECIPIENT",
    "16649": "NOT_AVAILABLE_FOR_CHANNEL_ID",
    "16650": "NOT_SALE_FOR_COUNTRY",
    "16651": "NOT_SALES_PERIOD",
    "16652": "NOT_SALE_FOR_DEVICE",
    "16653": "NOT_SALE_FOR_VERSION",
    "16654": "ALREADY_EXPIRED",
    "16655": "LIMIT_EXCEEDED",
    "16656": "MISSING_CAPABILITY",
    "16897": "AUTHENTICATION_FAILED",
    "17153": "BALANCE_SHORTAGE",
    "20737": "INTERNAL_SERVER_ERROR",
    "20738": "SERVICE_IN_MAINTENANCE_MODE",
    "20739": "SERVICE_UNAVAILABLE"
  },
  "Ob1_EnumC12656r0": {
    "0": "OK",
    "1": "PRODUCT_UNSUPPORTED",
    "2": "TEXT_NOT_SPECIFIED",
    "3": "TEXT_STYLE_UNAVAILABLE",
    "4": "CHARACTER_COUNT_LIMIT_EXCEEDED",
    "5": "CONTAINS_INVALID_WORD"
  },
  "Ob1_EnumC12664u": {
    "0": "UNKNOWN",
    "1": "NONE",
    "16641": "ILLEGAL_ARGUMENT",
    "16642": "NOT_FOUND",
    "16643": "NOT_AVAILABLE",
    "16644": "MAX_AMOUNT_OF_PRODUCTS_REACHED",
    "16645": "PRODUCT_IS_NOT_PREMIUM",
    "16646": "PRODUCT_IS_NOT_AVAILABLE_FOR_USER",
    "16897": "AUTHENTICATION_FAILED",
    "20737": "INTERNAL_SERVER_ERROR",
    "20739": "SERVICE_UNAVAILABLE"
  },
  "Ob1_EnumC12666u1": {
    "0": "POPULAR",
    "1": "NEW_RELEASE",
    "2": "EVENT",
    "3": "RECOMMENDED",
    "4": "POPULAR_WEEKLY",
    "5": "POPULAR_MONTHLY",
    "6": "POPULAR_RECENTLY_PUBLISHED",
    "7": "BUDDY",
    "8": "EXTRA_EVENT",
    "9": "BROWSING_HISTORY",
    "10": "POPULAR_TOTAL_SALES",
    "11": "NEW_SUBSCRIPTION",
    "12": "POPULAR_SUBSCRIPTION_30D",
    "13": "CPD_STICKER",
    "14": "POPULAR_WITH_FREE"
  },
  "Ob1_F1": {
    "1": "STATIC",
    "2": "ANIMATION"
  },
  "Ob1_I": {
    "0": "STATIC",
    "1": "POPULAR",
    "2": "NEW_RELEASE"
  },
  "Ob1_J0": {
    "0": "ON_SALE",
    "1": "OUTDATED_VERSION",
    "2": "NOT_ON_SALE"
  },
  "Ob1_J1": {
    "0": "OK",
    "1": "INVALID_PARAMETER",
    "2": "NOT_FOUND",
    "3": "NOT_SUPPORTED",
    "4": "CONFLICT",
    "5": "NOT_ELIGIBLE"
  },
  "Ob1_K1": {
    "0": "GOOGLE",
    "1": "APPLE",
    "2": "WEBSTORE",
    "3": "LINEMO",
    "4": "LINE_MUSIC",
    "5": "LYP",
    "6": "TW_CHT",
    "7": "FREEMIUM"
  },
  "Ob1_M1": {
    "0": "OK",
    "1": "UNKNOWN",
    "2": "NOT_SUPPORTED",
    "3": "NO_SUBSCRIPTION",
    "4": "SUBSCRIPTION_EXISTS",
    "5": "NOT_AVAILABLE",
    "6": "CONFLICT",
    "7": "OUTDATED_VERSION",
    "8": "NO_STUDENT_INFORMATION",
    "9": "ACCOUNT_HOLD",
    "10": "RETRY_STATE"
  },
  "Ob1_O0": {
    "1": "STICKER",
    "2": "THEME",
    "3": "STICON"
  },
  "Ob1_O1": {
    "0": "AVAILABLE",
    "1": "DIFFERENT_STORE",
    "2": "NOT_STUDENT",
    "3": "ALREADY_PURCHASED"
  },
  "Ob1_P1": {
    "1": "GENERAL",
    "2": "STUDENT"
  },
  "Ob1_Q1": {
    "1": "BASIC",
    "2": "DELUXE"
  },
  "Ob1_R1": {
    "1": "MONTHLY",
    "2": "YEARLY"
  },
  "Ob1_U1": {
    "0": "OK",
    "1": "UNKNOWN",
    "2": "NO_SUBSCRIPTION",
    "3": "EXISTS",
    "4": "NOT_FOUND",
    "5": "EXCEEDS_LIMIT",
    "6": "NOT_AVAILABLE"
  },
  "Ob1_V1": {
    "1": "DATE_ASC",
    "2": "DATE_DESC"
  },
  "Ob1_X1": {
    "0": "GENERAL",
    "1": "CREATORS",
    "2": "STICON"
  },
  "Ob1_a2": {
    "0": "NOT_PURCHASED",
    "1": "SUBSCRIPTION",
    "2": "NOT_SUBSCRIBED",
    "3": "NOT_ACCEPTED",
    "4": "NOT_PURCHASED_U2I",
    "5": "BUDDY"
  },
  "Ob1_c2": {
    "1": "STATIC",
    "2": "ANIMATION"
  },
  "OpType": {
    "0": "END_OF_OPERATION",
    "1": "UPDATE_PROFILE",
    "2": "NOTIFIED_UPDATE_PROFILE",
    "3": "REGISTER_USERID",
    "4": "ADD_CONTACT",
    "5": "NOTIFIED_ADD_CONTACT",
    "6": "BLOCK_CONTACT",
    "7": "UNBLOCK_CONTACT",
    "8": "NOTIFIED_RECOMMEND_CONTACT",
    "9": "CREATE_GROUP",
    "10": "UPDATE_GROUP",
    "11": "NOTIFIED_UPDATE_GROUP",
    "12": "INVITE_INTO_GROUP",
    "13": "NOTIFIED_INVITE_INTO_GROUP",
    "14": "LEAVE_GROUP",
    "15": "NOTIFIED_LEAVE_GROUP",
    "16": "ACCEPT_GROUP_INVITATION",
    "17": "NOTIFIED_ACCEPT_GROUP_INVITATION",
    "18": "KICKOUT_FROM_GROUP",
    "19": "NOTIFIED_KICKOUT_FROM_GROUP",
    "20": "CREATE_ROOM",
    "21": "INVITE_INTO_ROOM",
    "22": "NOTIFIED_INVITE_INTO_ROOM",
    "23": "LEAVE_ROOM",
    "24": "NOTIFIED_LEAVE_ROOM",
    "25": "SEND_MESSAGE",
    "26": "RECEIVE_MESSAGE",
    "27": "SEND_MESSAGE_RECEIPT",
    "28": "RECEIVE_MESSAGE_RECEIPT",
    "29": "SEND_CONTENT_RECEIPT",
    "30": "RECEIVE_ANNOUNCEMENT",
    "31": "CANCEL_INVITATION_GROUP",
    "32": "NOTIFIED_CANCEL_INVITATION_GROUP",
    "33": "NOTIFIED_UNREGISTER_USER",
    "34": "REJECT_GROUP_INVITATION",
    "35": "NOTIFIED_REJECT_GROUP_INVITATION",
    "36": "UPDATE_SETTINGS",
    "37": "NOTIFIED_REGISTER_USER",
    "38": "INVITE_VIA_EMAIL",
    "39": "NOTIFIED_REQUEST_RECOVERY",
    "40": "SEND_CHAT_CHECKED",
    "41": "SEND_CHAT_REMOVED",
    "42": "NOTIFIED_FORCE_SYNC",
    "43": "SEND_CONTENT",
    "44": "SEND_MESSAGE_MYHOME",
    "45": "NOTIFIED_UPDATE_CONTENT_PREVIEW",
    "46": "REMOVE_ALL_MESSAGES",
    "47": "NOTIFIED_UPDATE_PURCHASES",
    "48": "DUMMY",
    "49": "UPDATE_CONTACT",
    "50": "NOTIFIED_RECEIVED_CALL",
    "51": "CANCEL_CALL",
    "52": "NOTIFIED_REDIRECT",
    "53": "NOTIFIED_CHANNEL_SYNC",
    "54": "FAILED_SEND_MESSAGE",
    "55": "NOTIFIED_READ_MESSAGE",
    "56": "FAILED_EMAIL_CONFIRMATION",
    "58": "NOTIFIED_CHAT_CONTENT",
    "59": "NOTIFIED_PUSH_NOTICENTER_ITEM",
    "60": "NOTIFIED_JOIN_CHAT",
    "61": "NOTIFIED_LEAVE_CHAT",
    "62": "NOTIFIED_TYPING",
    "63": "FRIEND_REQUEST_ACCEPTED",
    "64": "DESTROY_MESSAGE",
    "65": "NOTIFIED_DESTROY_MESSAGE",
    "66": "UPDATE_PUBLICKEYCHAIN",
    "67": "NOTIFIED_UPDATE_PUBLICKEYCHAIN",
    "68": "NOTIFIED_BLOCK_CONTACT",
    "69": "NOTIFIED_UNBLOCK_CONTACT",
    "70": "UPDATE_GROUPPREFERENCE",
    "71": "NOTIFIED_PAYMENT_EVENT",
    "72": "REGISTER_E2EE_PUBLICKEY",
    "73": "NOTIFIED_E2EE_KEY_EXCHANGE_REQ",
    "74": "NOTIFIED_E2EE_KEY_EXCHANGE_RESP",
    "75": "NOTIFIED_E2EE_MESSAGE_RESEND_REQ",
    "76": "NOTIFIED_E2EE_MESSAGE_RESEND_RESP",
    "77": "NOTIFIED_E2EE_KEY_UPDATE",
    "78": "NOTIFIED_BUDDY_UPDATE_PROFILE",
    "79": "NOTIFIED_UPDATE_LINEAT_TABS",
    "80": "UPDATE_ROOM",
    "81": "NOTIFIED_BEACON_DETECTED",
    "82": "UPDATE_EXTENDED_PROFILE",
    "83": "ADD_FOLLOW",
    "84": "NOTIFIED_ADD_FOLLOW",
    "85": "DELETE_FOLLOW",
    "86": "NOTIFIED_DELETE_FOLLOW",
    "87": "UPDATE_TIMELINE_SETTINGS",
    "88": "NOTIFIED_FRIEND_REQUEST",
    "89": "UPDATE_RINGBACK_TONE",
    "90": "NOTIFIED_POSTBACK",
    "91": "RECEIVE_READ_WATERMARK",
    "92": "NOTIFIED_MESSAGE_DELIVERED",
    "93": "NOTIFIED_UPDATE_CHAT_BAR",
    "94": "NOTIFIED_CHATAPP_INSTALLED",
    "95": "NOTIFIED_CHATAPP_UPDATED",
    "96": "NOTIFIED_CHATAPP_NEW_MARK",
    "97": "NOTIFIED_CHATAPP_DELETED",
    "98": "NOTIFIED_CHATAPP_SYNC",
    "99": "NOTIFIED_UPDATE_MESSAGE",
    "100": "UPDATE_CHATROOMBGM",
    "101": "NOTIFIED_UPDATE_CHATROOMBGM",
    "102": "UPDATE_RINGTONE",
    "118": "UPDATE_USER_SETTINGS",
    "119": "NOTIFIED_UPDATE_STATUS_BAR",
    "120": "CREATE_CHAT",
    "121": "UPDATE_CHAT",
    "122": "NOTIFIED_UPDATE_CHAT",
    "123": "INVITE_INTO_CHAT",
    "124": "NOTIFIED_INVITE_INTO_CHAT",
    "125": "CANCEL_CHAT_INVITATION",
    "126": "NOTIFIED_CANCEL_CHAT_INVITATION",
    "127": "DELETE_SELF_FROM_CHAT",
    "128": "NOTIFIED_DELETE_SELF_FROM_CHAT",
    "129": "ACCEPT_CHAT_INVITATION",
    "130": "NOTIFIED_ACCEPT_CHAT_INVITATION",
    "131": "REJECT_CHAT_INVITATION",
    "132": "DELETE_OTHER_FROM_CHAT",
    "133": "NOTIFIED_DELETE_OTHER_FROM_CHAT",
    "134": "NOTIFIED_CONTACT_CALENDAR_EVENT",
    "135": "NOTIFIED_CONTACT_CALENDAR_EVENT_ALL",
    "136": "UPDATE_THINGS_OPERATIONS",
    "137": "SEND_CHAT_HIDDEN",
    "138": "CHAT_META_SYNC_ALL",
    "139": "SEND_REACTION",
    "140": "NOTIFIED_SEND_REACTION",
    "141": "NOTIFIED_UPDATE_PROFILE_CONTENT",
    "142": "FAILED_DELIVERY_MESSAGE",
    "143": "SEND_ENCRYPTED_E2EE_KEY_REQUESTED",
    "144": "CHANNEL_PAAK_AUTHENTICATION_REQUESTED",
    "145": "UPDATE_PIN_STATE",
    "146": "NOTIFIED_PREMIUMBACKUP_STATE_CHANGED",
    "147": "CREATE_MULTI_PROFILE",
    "148": "MULTI_PROFILE_STATUS_CHANGED",
    "149": "DELETE_MULTI_PROFILE",
    "150": "UPDATE_PROFILE_MAPPING",
    "151": "DELETE_PROFILE_MAPPING",
    "152": "NOTIFIED_DESTROY_NOTICENTER_PUSH"
  },
  "P70_g": {
    "1000": "INVALID_REQUEST",
    "1001": "RETRY_REQUIRED"
  },
  "PaidCallType": {
    "0": "OUT",
    "1": "IN",
    "2": "TOLLFREE",
    "3": "RECORD",
    "4": "AD",
    "5": "CS",
    "6": "OA",
    "7": "OAM"
  },
  "PayloadType": {
    "101": "PAYLOAD_BUY",
    "111": "PAYLOAD_CS",
    "121": "PAYLOAD_BONUS",
    "131": "PAYLOAD_EVENT",
    "141": "PAYLOAD_POINT_AUTO_EXCHANGED",
    "151": "PAYLOAD_POINT_MANUAL_EXCHANGED"
  },
  "Pb1_A0": {
    "0": "NORMAL",
    "1": "VIDEOCAM",
    "2": "VOIP",
    "3": "RECORD"
  },
  "Pb1_A3": {
    "0": "UNKNOWN",
    "1": "BACKGROUND_NEW_KEY_CREATED",
    "2": "BACKGROUND_PERIODICAL_VERIFICATION",
    "3": "FOREGROUND_NEW_PIN_REGISTERED",
    "4": "FOREGROUND_VERIFICATION"
  },
  "Pb1_B": {
    "1": "SIRI",
    "2": "GOOGLE_ASSISTANT",
    "3": "OS_SHARE"
  },
  "Pb1_D0": {
    "0": "RICH_MENU_ID",
    "1": "STATUS_BAR",
    "2": "BUDDY_CAUTION_NOTICE"
  },
  "Pb1_D4": {
    "1": "AUDIO",
    "2": "VIDEO",
    "3": "FACEPLAY"
  },
  "Pb1_D6": {
    "0": "GOOGLE",
    "1": "BAIDU",
    "2": "FOURSQUARE",
    "3": "YAHOOJAPAN",
    "4": "KINGWAY"
  },
  "Pb1_E7": {
    "0": "UNKNOWN",
    "1": "TALK",
    "2": "SQUARE"
  },
  "Pb1_EnumC12917a6": {
    "0": "UNKNOWN",
    "1": "APP_FOREGROUND",
    "2": "PERIODIC",
    "3": "MANUAL"
  },
  "Pb1_EnumC12926b1": {
    "0": "NOT_A_FRIEND",
    "1": "ALWAYS"
  },
  "Pb1_EnumC12941c2": {
    "26": "BLE_LCS_API_USABLE",
    "27": "PROHIBIT_MINIMIZE_CHANNEL_BROWSER",
    "28": "ALLOW_IOS_WEBKIT",
    "38": "PURCHASE_LCS_API_USABLE",
    "48": "ALLOW_ANDROID_ENABLE_ZOOM"
  },
  "Pb1_EnumC12945c6": {
    "1": "V1",
    "2": "V2"
  },
  "Pb1_EnumC12970e3": {
    "1": "USER_AGE_CHECKED",
    "2": "USER_APPROVAL_REQUIRED"
  },
  "Pb1_EnumC12997g2": {
    "0": "PROFILE",
    "1": "FRIENDS",
    "2": "GROUP"
  },
  "Pb1_EnumC12998g3": {
    "0": "UNKNOWN",
    "1": "WIFI",
    "2": "CELLULAR_NETWORK"
  },
  "Pb1_EnumC13009h0": {
    "1": "NORMAL",
    "2": "LOW_BATTERY"
  },
  "Pb1_EnumC13010h1": {
    "1": "NEW",
    "2": "PLANET"
  },
  "Pb1_EnumC13015h6": {
    "0": "FORWARD",
    "1": "AUTO_REPLY",
    "2": "SUBORDINATE",
    "3": "REPLY"
  },
  "Pb1_EnumC13022i": {
    "0": "SKIP",
    "1": "PINCODE",
    "2": "SECURITY_CENTER"
  },
  "Pb1_EnumC13029i6": {
    "0": "ADD",
    "1": "REMOVE",
    "2": "MODIFY"
  },
  "Pb1_EnumC13037j0": {
    "0": "UNSPECIFIED",
    "1": "INACTIVE",
    "2": "ACTIVE",
    "3": "DELETED"
  },
  "Pb1_EnumC13050k": {
    "0": "UNKNOWN",
    "1": "IOS_REDUCED_ACCURACY",
    "2": "IOS_FULL_ACCURACY",
    "3": "AOS_PRECISE_LOCATION",
    "4": "AOS_APPROXIMATE_LOCATION"
  },
  "Pb1_EnumC13082m3": {
    "0": "SHOW",
    "1": "HIDE"
  },
  "Pb1_EnumC13093n0": {
    "0": "NONE",
    "1": "TOP"
  },
  "Pb1_EnumC13127p6": {
    "0": "NORMAL",
    "1": "ALERT_DISABLED",
    "2": "ALWAYS"
  },
  "Pb1_EnumC13128p7": {
    "0": "UNKNOWN",
    "1": "DIRECT_INVITATION",
    "2": "DIRECT_CHAT",
    "3": "GROUP_INVITATION",
    "4": "GROUP_CHAT",
    "5": "ROOM_INVITATION",
    "6": "ROOM_CHAT",
    "7": "FRIEND_PROFILE",
    "8": "DIRECT_CHAT_SELECTED",
    "9": "GROUP_CHAT_SELECTED",
    "10": "ROOM_CHAT_SELECTED",
    "11": "DEPRECATED"
  },
  "Pb1_EnumC13148r0": {
    "1": "ALWAYS_HIDDEN",
    "2": "ALWAYS_SHOWN",
    "3": "SHOWN_BY_CONDITION"
  },
  "Pb1_EnumC13151r3": {
    "0": "ONEWAY",
    "1": "BOTH",
    "2": "NOT_REGISTERED"
  },
  "Pb1_EnumC13162s0": {
    "1": "NOT_SUSPICIOUS",
    "2": "SUSPICIOUS_00",
    "3": "SUSPICIOUS_01"
  },
  "Pb1_EnumC13196u6": {
    "0": "COIN",
    "1": "CREDIT",
    "2": "MONTHLY",
    "3": "OAM"
  },
  "Pb1_EnumC13209v5": {
    "0": "DUMMY",
    "1": "NOTICE",
    "2": "MORETAB",
    "3": "STICKERSHOP",
    "4": "CHANNEL",
    "5": "DENY_KEYWORD",
    "6": "CONNECTIONINFO",
    "7": "BUDDY",
    "8": "TIMELINEINFO",
    "9": "THEMESHOP",
    "10": "CALLRATE",
    "11": "CONFIGURATION",
    "12": "STICONSHOP",
    "13": "SUGGESTDICTIONARY",
    "14": "SUGGESTSETTINGS",
    "15": "USERSETTINGS",
    "16": "ANALYTICSINFO",
    "17": "SEARCHPOPULARKEYWORD",
    "18": "SEARCHNOTICE",
    "19": "TIMELINE",
    "20": "SEARCHPOPULARCATEGORY",
    "21": "EXTENDEDPROFILE",
    "22": "SEASONALMARKETING",
    "23": "NEWSTAB",
    "24": "SUGGESTDICTIONARYV2",
    "25": "CHATAPPSYNC",
    "26": "AGREEMENTS",
    "27": "INSTANTNEWS",
    "28": "EMOJI_MAPPING",
    "29": "SEARCHBARKEYWORDS",
    "30": "SHOPPING",
    "31": "CHAT_EFFECT_BACKGROUND",
    "32": "CHAT_EFFECT_KEYWORD",
    "33": "SEARCHINDEX",
    "34": "HUBTAB",
    "35": "PAY_RULE_UPDATED",
    "36": "SMARTCH",
    "37": "HOME_SERVICE_LIST",
    "38": "TIMELINESTORY",
    "39": "WALLET_TAB",
    "40": "POD_TAB",
    "41": "HOME_SAFETY_CHECK",
    "42": "HOME_SEASONAL_EFFECT",
    "43": "OPENCHAT_MAIN",
    "44": "CHAT_EFFECT_CONTENT_METADATA_TAG",
    "45": "VOOM_LIVE_STATE_CHANGED",
    "46": "PROFILE_STUDIO_N_BADGE",
    "47": "LYP_FONT",
    "48": "TIMELINESTORY_OA",
    "49": "TRAVEL"
  },
  "Pb1_EnumC13221w3": {
    "0": "UNKNOWN",
    "1": "EUROPEAN_ECONOMIC_AREA"
  },
  "Pb1_EnumC13222w4": {
    "1": "OBS_VIDEO",
    "2": "OBS_GENERAL",
    "3": "OBS_RINGBACK_TONE"
  },
  "Pb1_EnumC13237x5": {
    "1": "AUDIO",
    "2": "VIDEO",
    "3": "LIVE",
    "4": "PHOTOBOOTH"
  },
  "Pb1_EnumC13238x6": {
    "0": "NOT_SPECIFIED",
    "1": "VALID",
    "2": "VERIFICATION_REQUIRED",
    "3": "NOT_PERMITTED",
    "4": "LIMIT_EXCEEDED",
    "5": "LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED"
  },
  "Pb1_EnumC13251y5": {
    "1": "STANDARD",
    "2": "CONSTELLA"
  },
  "Pb1_EnumC13252y6": {
    "0": "ALL",
    "1": "PROFILE",
    "2": "SETTINGS",
    "3": "CONFIGURATIONS",
    "4": "CONTACT",
    "5": "GROUP",
    "6": "E2EE",
    "7": "MESSAGE"
  },
  "Pb1_EnumC13260z0": {
    "0": "ON_AIR",
    "1": "LIVE",
    "2": "GLP"
  },
  "Pb1_EnumC13267z7": {
    "1": "NOTIFICATION_SETTING",
    "255": "ALL"
  },
  "Pb1_F0": {
    "0": "NA",
    "1": "FRIEND_VIEW",
    "2": "OFFICIAL_ACCOUNT_VIEW"
  },
  "Pb1_F4": {
    "1": "INCOMING",
    "2": "OUTGOING"
  },
  "Pb1_F5": {
    "0": "UNKNOWN",
    "1": "SUCCESS",
    "2": "REQUIRE_SERVER_SIDE_EMAIL",
    "3": "REQUIRE_CLIENT_SIDE_EMAIL"
  },
  "Pb1_F6": {
    "0": "JBU",
    "1": "LIP"
  },
  "Pb1_G3": {
    "1": "PROMOTION_FRIENDS_INVITE",
    "2": "CAPABILITY_SERVER_SIDE_SMS",
    "3": "LINE_CLIENT_ANALYTICS_CONFIGURATION"
  },
  "Pb1_G4": {
    "1": "TIMELINE",
    "2": "NEARBY",
    "3": "SQUARE"
  },
  "Pb1_G6": {
    "2": "NICE",
    "3": "LOVE",
    "4": "FUN",
    "5": "AMAZING",
    "6": "SAD",
    "7": "OMG"
  },
  "Pb1_H6": {
    "0": "PUBLIC",
    "1": "PRIVATE"
  },
  "Pb1_I6": {
    "0": "NEVER_SHOW",
    "1": "ONE_WAY",
    "2": "MUTUAL"
  },
  "Pb1_J4": {
    "0": "OTHER",
    "1": "INITIALIZATION",
    "2": "PERIODIC_SYNC",
    "3": "MANUAL_SYNC",
    "4": "LOCAL_DB_CORRUPTED"
  },
  "Pb1_K2": {
    "1": "CHANNEL_INFO",
    "2": "CHANNEL_TOKEN",
    "4": "COMMON_DOMAIN",
    "255": "ALL"
  },
  "Pb1_K6": {
    "1": "EMAIL",
    "2": "DISPLAY_NAME",
    "4": "PHONETIC_NAME",
    "8": "PICTURE",
    "16": "STATUS_MESSAGE",
    "32": "ALLOW_SEARCH_BY_USERID",
    "64": "ALLOW_SEARCH_BY_EMAIL",
    "128": "BUDDY_STATUS",
    "256": "MUSIC_PROFILE",
    "512": "AVATAR_PROFILE",
    "2147483647": "ALL"
  },
  "Pb1_L2": {
    "0": "SYNC",
    "1": "REMOVE",
    "2": "REMOVE_ALL"
  },
  "Pb1_L4": {
    "0": "UNKNOWN",
    "1": "REVISION_GAP_TOO_LARGE_CLIENT",
    "2": "REVISION_GAP_TOO_LARGE_SERVER",
    "3": "OPERATION_EXPIRED",
    "4": "REVISION_HOLE",
    "5": "FORCE_TRIGGERED"
  },
  "Pb1_M6": {
    "0": "OWNER",
    "1": "FRIEND"
  },
  "Pb1_N6": {
    "1": "NFT",
    "2": "AVATAR",
    "3": "SNOW",
    "4": "ARCZ",
    "5": "FRENZ"
  },
  "Pb1_O2": {
    "1": "NAME",
    "2": "PICTURE_STATUS",
    "4": "PREVENTED_JOIN_BY_TICKET",
    "8": "NOTIFICATION_SETTING",
    "16": "INVITATION_TICKET",
    "32": "FAVORITE_TIMESTAMP",
    "64": "CHAT_TYPE"
  },
  "Pb1_O6": {
    "1": "DEFAULT",
    "2": "MULTI_PROFILE"
  },
  "Pb1_P6": {
    "0": "HIDDEN",
    "1000": "PUBLIC"
  },
  "Pb1_Q2": {
    "0": "BACKGROUND",
    "1": "KEYWORD",
    "2": "CONTENT_METADATA_TAG_BASED"
  },
  "Pb1_R3": {
    "1": "BEACON_AGREEMENT",
    "2": "BLUETOOTH",
    "3": "SHAKE_AGREEMENT",
    "4": "AUTO_SUGGEST",
    "5": "CHATROOM_CAPTURE",
    "6": "CHATROOM_MINIMIZEBROWSER",
    "7": "CHATROOM_MOBILESAFARI",
    "8": "VIDEO_HIGHTLIGHT_WIZARD",
    "9": "CHAT_FOLDER",
    "10": "BLUETOOTH_SCAN",
    "11": "AUTO_SUGGEST_FOLLOW_UP"
  },
  "Pb1_S7": {
    "1": "NONE",
    "2": "ALL"
  },
  "Pb1_T3": {
    "1": "LOCATION_OS",
    "2": "LOCATION_APP",
    "3": "VIDEO_AUTO_PLAY",
    "4": "HNI",
    "5": "AUTO_SUGGEST_LANG",
    "6": "CHAT_EFFECT_CACHED_CONTENT_LIST",
    "7": "IFA",
    "8": "ACCURACY_MODE"
  },
  "Pb1_T7": {
    "0": "SYNC",
    "1": "REPORT"
  },
  "Pb1_V7": {
    "0": "UNSPECIFIED",
    "1": "UNKNOWN",
    "2": "INITIALIZATION",
    "3": "OPERATION",
    "4": "FULL_SYNC",
    "5": "AUTO_REPAIR",
    "6": "MANUAL_REPAIR",
    "7": "INTERNAL",
    "8": "USER_INITIATED"
  },
  "Pb1_W2": {
    "0": "ANYONE_IN_CHAT",
    "1": "CREATOR_ONLY",
    "2": "NO_ONE"
  },
  "Pb1_W3": {
    "0": "ILLEGAL_ARGUMENT",
    "1": "AUTHENTICATION_FAILED",
    "2": "INTERNAL_ERROR",
    "3": "RESTORE_KEY_FIRST",
    "4": "NO_BACKUP",
    "6": "INVALID_PIN",
    "7": "PERMANENTLY_LOCKED",
    "8": "INVALID_PASSWORD",
    "9": "MASTER_KEY_CONFLICT"
  },
  "Pb1_X1": {
    "0": "MESSAGE",
    "1": "MESSAGE_NOTIFICATION",
    "2": "NOTIFICATION_CENTER"
  },
  "Pb1_X2": {
    "0": "MESSAGE",
    "1": "NOTE",
    "2": "CHANNEL"
  },
  "Pb1_Z2": {
    "0": "GROUP",
    "1": "ROOM",
    "2": "PEER"
  },
  "Pb1_gd": {
    "1": "OVER",
    "2": "UNDER",
    "3": "UNDEFINED"
  },
  "Pb1_od": {
    "0": "UNKNOWN",
    "1": "LOCATION"
  },
  "PointErrorCode": {
    "3001": "REQUEST_DUPLICATION",
    "3002": "INVALID_PARAMETER",
    "3003": "NOT_ENOUGH_BALANCE",
    "3004": "AUTHENTICATION_FAIL",
    "3005": "API_ACCESS_FORBIDDEN",
    "3006": "MEMBER_ACCOUNT_NOT_FOUND",
    "3007": "SERVICE_ACCOUNT_NOT_FOUND",
    "3008": "TRANSACTION_NOT_FOUND",
    "3009": "ALREADY_REVERSED_TRANSACTION",
    "3010": "MESSAGE_NOT_READABLE",
    "3011": "HTTP_REQUEST_METHOD_NOT_SUPPORTED",
    "3012": "HTTP_MEDIA_TYPE_NOT_SUPPORTED",
    "3013": "NOT_ALLOWED_TO_DEPOSIT",
    "3014": "NOT_ALLOWED_TO_PAY",
    "3015": "TRANSACTION_ACCESS_FORBIDDEN",
    "4001": "INVALID_SERVICE_CONFIGURATION",
    "5004": "DCS_COMMUNICATION_FAIL",
    "5007": "UPDATE_BALANCE_FAIL",
    "5888": "SYSTEM_MAINTENANCE",
    "5999": "SYSTEM_ERROR"
  },
  "Q70_q": {
    "0": "UNKNOWN",
    "1": "FACEBOOK",
    "2": "APPLE",
    "3": "GOOGLE"
  },
  "Q70_r": {
    "0": "INTERNAL_ERROR",
    "1": "ILLEGAL_ARGUMENT",
    "2": "VERIFICATION_FAILED",
    "4": "RETRY_LATER",
    "5": "HUMAN_VERIFICATION_REQUIRED",
    "101": "APP_UPGRADE_REQUIRED"
  },
  "Qj_EnumC13584a": {
    "0": "NOT_DETERMINED",
    "1": "RESTRICTED",
    "2": "DENIED",
    "3": "AUTHORIZED"
  },
  "Qj_EnumC13585b": {
    "1": "WHITE",
    "2": "BLACK"
  },
  "Qj_EnumC13588e": {
    "1": "LIGHT",
    "2": "DARK"
  },
  "Qj_EnumC13592i": {
    "0": "ILLEGAL_ARGUMENT",
    "1": "INTERNAL_ERROR",
    "2": "CONNECTION_ERROR",
    "3": "AUTHENTICATION_FAILED",
    "4": "NEED_PERMISSION_APPROVAL",
    "5": "COIN_NOT_USABLE",
    "6": "WEBVIEW_NOT_ALLOWED"
  },
  "Qj_EnumC13597n": {
    "1": "INVALID_REQUEST",
    "2": "UNAUTHORIZED",
    "3": "CONSENT_REQUIRED",
    "4": "VERSION_UPDATE_REQUIRED",
    "5": "COMPREHENSIVE_AGREEMENT_REQUIRED",
    "6": "SPLASH_SCREEN_REQUIRED",
    "7": "PERMANENT_LINK_INVALID_REQUEST",
    "8": "NO_DESTINATION_URL",
    "9": "SERVICE_ALREADY_TERMINATED",
    "100": "SERVER_ERROR"
  },
  "Qj_EnumC13604v": {
    "1": "GEOLOCATION",
    "2": "ADVERTISING_ID",
    "3": "BLUETOOTH_LE",
    "4": "QR_CODE",
    "5": "ADVERTISING_SDK",
    "6": "ADD_TO_HOME",
    "7": "SHARE_TARGET_MESSAGE",
    "8": "VIDEO_AUTO_PLAY",
    "9": "PROFILE_PLUS",
    "10": "SUBWINDOW_OPEN",
    "11": "SUBWINDOW_COMMON_MODULE",
    "12": "NO_LIFF_REFERRER",
    "13": "SKIP_CHANNEL_VERIFICATION_SCREEN",
    "14": "PROVIDER_PAGE",
    "15": "BASIC_AUTH",
    "16": "SIRI_DONATION"
  },
  "Qj_EnumC13605w": {
    "1": "ALLOW_DIRECT_LINK",
    "2": "ALLOW_DIRECT_LINK_V2"
  },
  "Qj_EnumC13606x": {
    "1": "LIGHT",
    "2": "LIGHT_TRANSLUCENT",
    "3": "DARK_TRANSLUCENT",
    "4": "LIGHT_ICON",
    "5": "DARK_ICON"
  },
  "Qj_a0": {
    "1": "CONCAT",
    "2": "REPLACE"
  },
  "Qj_e0": {
    "0": "SUCCESS",
    "1": "FAILURE",
    "2": "CANCEL"
  },
  "Qj_h0": {
    "1": "RIGHT",
    "2": "LEFT"
  },
  "Qj_i0": {
    "1": "FULL",
    "2": "TALL",
    "3": "COMPACT"
  },
  "R70_e": {
    "0": "INTERNAL_ERROR",
    "1": "ILLEGAL_ARGUMENT",
    "2": "VERIFICATION_FAILED",
    "3": "EXTERNAL_SERVICE_UNAVAILABLE",
    "4": "RETRY_LATER",
    "100": "INVALID_CONTEXT",
    "101": "NOT_SUPPORTED",
    "102": "FORBIDDEN",
    "201": "FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR"
  },
  "RegistrationType": {
    "0": "PHONE",
    "1": "EMAIL_WAP",
    "2305": "FACEBOOK",
    "2306": "SINA",
    "2307": "RENREN",
    "2308": "FEIXIN",
    "2309": "APPLE",
    "2310": "YAHOOJAPAN",
    "2311": "GOOGLE"
  },
  "ReportType": {
    "1": "ADVERTISING",
    "2": "GENDER_HARASSMENT",
    "3": "HARASSMENT",
    "4": "OTHER",
    "5": "IRRELEVANT_CONTENT",
    "6": "IMPERSONATION",
    "7": "SCAM"
  },
  "S70_a": {
    "0": "INTERNAL_ERROR",
    "1": "ILLEGAL_ARGUMENT",
    "2": "VERIFICATION_FAILED",
    "3": "RETRY_LATER",
    "100": "INVALID_CONTEXT",
    "101": "APP_UPGRADE_REQUIRED"
  },
  "SettingsAttributeEx": {
    "0": "NOTIFICATION_ENABLE",
    "1": "NOTIFICATION_MUTE_EXPIRATION",
    "2": "NOTIFICATION_NEW_MESSAGE",
    "3": "NOTIFICATION_GROUP_INVITATION",
    "4": "NOTIFICATION_SHOW_MESSAGE",
    "5": "NOTIFICATION_INCOMING_CALL",
    "6": "PRIVACY_SYNC_CONTACTS",
    "7": "PRIVACY_SEARCH_BY_PHONE_NUMBER",
    "8": "NOTIFICATION_SOUND_MESSAGE",
    "9": "NOTIFICATION_SOUND_GROUP",
    "10": "CONTACT_MY_TICKET",
    "11": "IDENTITY_PROVIDER",
    "12": "IDENTITY_IDENTIFIER",
    "13": "PRIVACY_SEARCH_BY_USERID",
    "14": "PRIVACY_SEARCH_BY_EMAIL",
    "15": "PREFERENCE_LOCALE",
    "16": "NOTIFICATION_DISABLED_WITH_SUB",
    "17": "NOTIFICATION_PAYMENT",
    "18": "SECURITY_CENTER_SETTINGS",
    "19": "SNS_ACCOUNT",
    "20": "PHONE_REGISTRATION",
    "21": "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN",
    "22": "CUSTOM_MODE",
    "23": "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME",
    "24": "EMAIL_CONFIRMATION_STATUS",
    "25": "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND",
    "26": "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL",
    "27": "PRIVACY_AGREE_USE_PAIDCALL",
    "28": "ACCOUNT_MIGRATION_PINCODE",
    "29": "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE",
    "30": "PRIVACY_ALLOW_FRIEND_REQUEST",
    "31": "PWLESS_PRIMARY_CREDENTIAL_REGISTRATION",
    "32": "ALLOWED_TO_CONNECT_EAP_ACCOUNT",
    "33": "E2EE_ENABLE",
    "34": "HITOKOTO_BACKUP_REQUESTED",
    "35": "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME",
    "36": "CONTACT_ALLOW_FOLLOWING",
    "37": "PRIVACY_ALLOW_NEARBY",
    "38": "AGREEMENT_NEARBY",
    "39": "AGREEMENT_SQUARE",
    "40": "NOTIFICATION_MENTION",
    "41": "ALLOW_UNREGISTRATION_SECONDARY_DEVICE",
    "42": "AGREEMENT_BOT_USE",
    "43": "AGREEMENT_SHAKE_FUNCTION",
    "44": "AGREEMENT_MOBILE_CONTACT_NAME",
    "45": "NOTIFICATION_THUMBNAIL",
    "46": "AGREEMENT_SOUND_TO_TEXT",
    "47": "AGREEMENT_PRIVACY_POLICY_VERSION",
    "48": "AGREEMENT_AD_BY_WEB_ACCESS",
    "49": "AGREEMENT_PHONE_NUMBER_MATCHING",
    "50": "AGREEMENT_COMMUNICATION_INFO",
    "51": "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS",
    "52": "AGREEMENT_THINGS_WIRELESS_COMMUNICATION",
    "53": "AGREEMENT_GDPR",
    "54": "PRIVACY_STATUS_MESSAGE_HISTORY",
    "55": "AGREEMENT_PROVIDE_LOCATION",
    "56": "AGREEMENT_BEACON",
    "57": "PRIVACY_PROFILE_HISTORY",
    "58": "AGREEMENT_CONTENTS_SUGGEST",
    "59": "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION",
    "60": "PRIVACY_AGE_RESULT",
    "61": "PRIVACY_AGE_RESULT_RECEIVED",
    "62": "AGREEMENT_OCR_IMAGE_COLLECTION",
    "63": "PRIVACY_ALLOW_FOLLOW",
    "64": "PRIVACY_SHOW_FOLLOW_LIST",
    "65": "NOTIFICATION_BADGE_TALK_ONLY",
    "66": "AGREEMENT_ICNA",
    "67": "NOTIFICATION_REACTION",
    "68": "AGREEMENT_MID",
    "69": "HOME_NOTIFICATION_NEW_FRIEND",
    "70": "HOME_NOTIFICATION_FAVORITE_FRIEND_UPDATE",
    "71": "HOME_NOTIFICATION_GROUP_MEMBER_UPDATE",
    "72": "HOME_NOTIFICATION_BIRTHDAY",
    "73": "AGREEMENT_LINE_OUT_USE",
    "74": "AGREEMENT_LINE_OUT_PROVIDE_INFO",
    "75": "NOTIFICATION_SHOW_PROFILE_IMAGE",
    "76": "AGREEMENT_PDPA",
    "77": "AGREEMENT_LOCATION_VERSION",
    "78": "ALLOWED_TO_SHOW_ZHD_PAGE",
    "79": "AGREEMENT_SNOW_AI_AVATAR",
    "80": "EAP_ONLY_ACCOUNT_TARGET_COUNTRY",
    "81": "AGREEMENT_LYP_PREMIUM_ALBUM",
    "82": "AGREEMENT_LYP_PREMIUM_ALBUM_VERSION",
    "83": "AGREEMENT_ALBUM_USAGE_DATA",
    "84": "AGREEMENT_ALBUM_USAGE_DATA_VERSION",
    "85": "AGREEMENT_LYP_PREMIUM_BACKUP",
    "86": "AGREEMENT_LYP_PREMIUM_BACKUP_VERSION",
    "87": "AGREEMENT_OA_AI_ASSISTANT",
    "88": "AGREEMENT_OA_AI_ASSISTANT_VERSION",
    "89": "AGREEMENT_LYP_PREMIUM_MULTI_PROFILE",
    "90": "AGREEMENT_LYP_PREMIUM_MULTI_PROFILE_VERSION"
  },
  "SnsIdType": {
    "1": "FACEBOOK",
    "2": "SINA",
    "3": "RENREN",
    "4": "FEIXIN",
    "5": "BBM",
    "6": "APPLE",
    "7": "YAHOOJAPAN",
    "8": "GOOGLE"
  },
  "SpammerReason": {
    "0": "OTHER",
    "1": "ADVERTISING",
    "2": "GENDER_HARASSMENT",
    "3": "HARASSMENT",
    "4": "IMPERSONATION",
    "5": "SCAM"
  },
  "SpotCategory": {
    "0": "UNKNOWN",
    "1": "GOURMET",
    "2": "BEAUTY",
    "3": "TRAVEL",
    "4": "SHOPPING",
    "5": "ENTERTAINMENT",
    "6": "SPORTS",
    "7": "TRANSPORT",
    "8": "LIFE",
    "9": "HOSPITAL",
    "10": "FINANCE",
    "11": "EDUCATION",
    "12": "OTHER",
    "10000": "ALL"
  },
  "SquareAttribute": {
    "1": "NAME",
    "2": "WELCOME_MESSAGE",
    "3": "PROFILE_IMAGE",
    "4": "DESCRIPTION",
    "6": "SEARCHABLE",
    "7": "CATEGORY",
    "8": "INVITATION_URL",
    "9": "ABLE_TO_USE_INVITATION_URL",
    "10": "STATE",
    "11": "EMBLEMS",
    "12": "JOIN_METHOD",
    "13": "CHANNEL_ID",
    "14": "SVC_TAGS"
  },
  "SquareAuthorityAttribute": {
    "1": "UPDATE_SQUARE_PROFILE",
    "2": "INVITE_NEW_MEMBER",
    "3": "APPROVE_JOIN_REQUEST",
    "4": "CREATE_POST",
    "5": "CREATE_OPEN_SQUARE_CHAT",
    "6": "DELETE_SQUARE_CHAT_OR_POST",
    "7": "REMOVE_SQUARE_MEMBER",
    "8": "GRANT_ROLE",
    "9": "ENABLE_INVITATION_TICKET",
    "10": "CREATE_CHAT_ANNOUNCEMENT",
    "11": "UPDATE_MAX_CHAT_MEMBER_COUNT",
    "12": "USE_READONLY_DEFAULT_CHAT",
    "13": "SEND_ALL_MENTION"
  },
  "SquareChatType": {
    "1": "OPEN",
    "2": "SECRET",
    "3": "ONE_ON_ONE",
    "4": "SQUARE_DEFAULT"
  },
  "SquareMemberAttribute": {
    "1": "DISPLAY_NAME",
    "2": "PROFILE_IMAGE",
    "3": "ABLE_TO_RECEIVE_MESSAGE",
    "5": "MEMBERSHIP_STATE",
    "6": "ROLE",
    "7": "PREFERENCE"
  },
  "SquareMembershipState": {
    "1": "JOIN_REQUESTED",
    "2": "JOINED",
    "3": "REJECTED",
    "4": "LEFT",
    "5": "KICK_OUT",
    "6": "BANNED",
    "7": "DELETED",
    "8": "JOIN_REQUEST_WITHDREW"
  },
  "StickerResourceType": {
    "1": "STATIC",
    "2": "ANIMATION",
    "3": "SOUND",
    "4": "ANIMATION_SOUND",
    "5": "POPUP",
    "6": "POPUP_SOUND",
    "7": "NAME_TEXT",
    "8": "PER_STICKER_TEXT"
  },
  "SyncCategory": {
    "0": "PROFILE",
    "1": "SETTINGS",
    "2": "OPS",
    "3": "CONTACT",
    "4": "RECOMMEND",
    "5": "BLOCK",
    "6": "GROUP",
    "7": "ROOM",
    "8": "NOTIFICATION",
    "9": "ADDRESS_BOOK"
  },
  "T70_C": {
    "0": "INITIAL_BACKUP_STATE_UNSPECIFIED",
    "1": "INITIAL_BACKUP_STATE_READY",
    "2": "INITIAL_BACKUP_STATE_MESSAGE_ONGOING",
    "3": "INITIAL_BACKUP_STATE_FINISHED",
    "4": "INITIAL_BACKUP_STATE_ABORTED",
    "5": "INITIAL_BACKUP_STATE_MEDIA_ONGOING"
  },
  "T70_EnumC14390b": {
    "0": "UNKNOWN",
    "1": "PHONE_NUMBER",
    "2": "EMAIL"
  },
  "T70_EnumC14392c": {
    "0": "UNKNOWN",
    "1": "SKIP",
    "2": "PASSWORD",
    "3": "WEB_BASED",
    "4": "EMAIL_BASED",
    "11": "NONE"
  },
  "T70_EnumC14406j": {
    "0": "INTERNAL_ERROR",
    "1": "ILLEGAL_ARGUMENT",
    "2": "VERIFICATION_FAILED",
    "3": "NOT_FOUND",
    "4": "RETRY_LATER",
    "5": "HUMAN_VERIFICATION_REQUIRED",
    "100": "INVALID_CONTEXT",
    "101": "APP_UPGRADE_REQUIRED"
  },
  "T70_K": {
    "0": "UNKNOWN",
    "1": "SMS",
    "2": "IVR",
    "3": "SMSPULL"
  },
  "T70_L": {
    "0": "PREMIUM_TYPE_UNSPECIFIED",
    "1": "PREMIUM_TYPE_LYP",
    "2": "PREMIUM_TYPE_LINE"
  },
  "T70_Z0": {
    "1": "PHONE_VERIF",
    "2": "EAP_VERIF"
  },
  "T70_e1": {
    "0": "UNKNOWN",
    "1": "SKIP",
    "2": "WEB_BASED"
  },
  "T70_j1": {
    "0": "UNKNOWN",
    "1": "FACEBOOK",
    "2": "APPLE",
    "3": "GOOGLE"
  },
  "U70_c": {
    "0": "INTERNAL_ERROR",
    "1": "FORBIDDEN",
    "100": "INVALID_CONTEXT"
  },
  "Uf_EnumC14873o": {
    "1": "ANDROID",
    "2": "IOS"
  },
  "VR0_l": {
    "1": "DEFAULT",
    "2": "UEN"
  },
  "VerificationMethod": {
    "0": "NO_AVAILABLE",
    "1": "PIN_VIA_SMS",
    "2": "CALLERID_INDIGO",
    "4": "PIN_VIA_TTS",
    "10": "SKIP"
  },
  "VerificationResult": {
    "0": "FAILED",
    "1": "OK_NOT_REGISTERED_YET",
    "2": "OK_REGISTERED_WITH_SAME_DEVICE",
    "3": "OK_REGISTERED_WITH_ANOTHER_DEVICE"
  },
  "WR0_a": {
    "1": "FREE",
    "2": "PREMIUM"
  },
  "a80_EnumC16644b": {
    "0": "UNKNOWN",
    "1": "FACEBOOK",
    "2": "APPLE",
    "3": "GOOGLE"
  },
  "FetchDirection": {
    "1": "FORWARD",
    "2": "BACKWARD"
  },
  "LiveTalkEventType": {
    "1": "NOTIFIED_UPDATE_LIVE_TALK_TITLE",
    "2": "NOTIFIED_UPDATE_LIVE_TALK_ANNOUNCEMENT",
    "3": "NOTIFIED_UPDATE_SQUARE_MEMBER_ROLE",
    "4": "NOTIFIED_UPDATE_LIVE_TALK_ALLOW_REQUEST_TO_SPEAK",
    "5": "NOTIFIED_UPDATE_SQUARE_MEMBER"
  },
  "LiveTalkReportType": {
    "1": "ADVERTISING",
    "2": "GENDER_HARASSMENT",
    "3": "HARASSMENT",
    "4": "IRRELEVANT_CONTENT",
    "5": "OTHER",
    "6": "IMPERSONATION",
    "7": "SCAM"
  },
  "MessageSummaryReportType": {
    "1": "LEGAL_VIOLATION",
    "2": "HARASSMENT",
    "3": "PERSONAL_IDENTIFIER",
    "4": "FALSE_INFORMATION",
    "5": "GENDER_HARASSMENT",
    "6": "OTHER"
  },
  "NotificationPostType": {
    "2": "POST_MENTION",
    "3": "POST_LIKE",
    "4": "POST_COMMENT",
    "5": "POST_COMMENT_MENTION",
    "6": "POST_COMMENT_LIKE",
    "7": "POST_RELAY_JOIN"
  },
  "SquareEventStatus": {
    "1": "NORMAL",
    "2": "ALERT_DISABLED"
  },
  "SquareEventType": {
    "0": "RECEIVE_MESSAGE",
    "1": "SEND_MESSAGE",
    "2": "NOTIFIED_JOIN_SQUARE_CHAT",
    "3": "NOTIFIED_INVITE_INTO_SQUARE_CHAT",
    "4": "NOTIFIED_LEAVE_SQUARE_CHAT",
    "5": "NOTIFIED_DESTROY_MESSAGE",
    "6": "NOTIFIED_MARK_AS_READ",
    "7": "NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE",
    "8": "NOTIFIED_UPDATE_SQUARE",
    "9": "NOTIFIED_UPDATE_SQUARE_STATUS",
    "10": "NOTIFIED_UPDATE_SQUARE_AUTHORITY",
    "11": "NOTIFIED_UPDATE_SQUARE_MEMBER",
    "12": "NOTIFIED_UPDATE_SQUARE_CHAT",
    "13": "NOTIFIED_UPDATE_SQUARE_CHAT_STATUS",
    "14": "NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER",
    "15": "NOTIFIED_CREATE_SQUARE_MEMBER",
    "16": "NOTIFIED_CREATE_SQUARE_CHAT_MEMBER",
    "17": "NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION",
    "18": "NOTIFIED_SHUTDOWN_SQUARE",
    "19": "NOTIFIED_KICKOUT_FROM_SQUARE",
    "20": "NOTIFIED_DELETE_SQUARE_CHAT",
    "21": "NOTIFICATION_JOIN_REQUEST",
    "22": "NOTIFICATION_JOINED",
    "23": "NOTIFICATION_PROMOTED_COADMIN",
    "24": "NOTIFICATION_PROMOTED_ADMIN",
    "25": "NOTIFICATION_DEMOTED_MEMBER",
    "26": "NOTIFICATION_KICKED_OUT",
    "27": "NOTIFICATION_SQUARE_DELETE",
    "28": "NOTIFICATION_SQUARE_CHAT_DELETE",
    "29": "NOTIFICATION_MESSAGE",
    "30": "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME",
    "31": "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE",
    "32": "NOTIFIED_UPDATE_SQUARE_FEATURE_SET",
    "33": "NOTIFIED_ADD_BOT",
    "34": "NOTIFIED_REMOVE_BOT",
    "36": "NOTIFIED_UPDATE_SQUARE_NOTE_STATUS",
    "37": "NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT",
    "38": "NOTIFIED_UPDATE_SQUARE_CHAT_MAX_MEMBER_COUNT",
    "39": "NOTIFICATION_POST_ANNOUNCEMENT",
    "40": "NOTIFICATION_POST",
    "41": "MUTATE_MESSAGE",
    "42": "NOTIFICATION_NEW_CHAT_MEMBER",
    "43": "NOTIFIED_UPDATE_READONLY_CHAT",
    "46": "NOTIFIED_UPDATE_MESSAGE_STATUS",
    "47": "NOTIFICATION_MESSAGE_REACTION",
    "48": "NOTIFIED_CHAT_POPUP",
    "49": "NOTIFIED_SYSTEM_MESSAGE",
    "50": "NOTIFIED_UPDATE_SQUARE_CHAT_FEATURE_SET",
    "51": "NOTIFIED_UPDATE_LIVE_TALK",
    "52": "NOTIFICATION_LIVE_TALK",
    "53": "NOTIFIED_UPDATE_LIVE_TALK_INFO",
    "54": "NOTIFICATION_THREAD_MESSAGE",
    "55": "NOTIFICATION_THREAD_MESSAGE_REACTION",
    "56": "NOTIFIED_UPDATE_THREAD",
    "57": "NOTIFIED_UPDATE_THREAD_STATUS",
    "58": "NOTIFIED_UPDATE_THREAD_MEMBER",
    "59": "NOTIFIED_UPDATE_THREAD_ROOT_MESSAGE",
    "60": "NOTIFIED_UPDATE_THREAD_ROOT_MESSAGE_STATUS"
  },
  "AdScreen": {
    "1": "CHATROOM",
    "2": "THREAD_SPACE",
    "3": "YOUR_THREADS",
    "4": "NOTE_LIST",
    "5": "NOTE_END",
    "6": "WEB_MAIN",
    "7": "WEB_SEARCH_RESULT"
  },
  "BooleanState": {
    "0": "NONE",
    "1": "OFF",
    "2": "ON"
  },
  "ChatroomPopupType": {
    "1": "IMG_TEXT",
    "2": "TEXT_ONLY",
    "3": "IMG_ONLY"
  },
  "ContentsAttribute": {
    "1": "NONE",
    "2": "CONTENTS_HIDDEN"
  },
  "FetchType": {
    "1": "DEFAULT",
    "2": "PREFETCH_BY_SERVER",
    "3": "PREFETCH_BY_CLIENT"
  },
  "LiveTalkAttribute": {
    "1": "TITLE",
    "2": "ALLOW_REQUEST_TO_SPEAK"
  },
  "LiveTalkRole": {
    "1": "HOST",
    "2": "CO_HOST",
    "3": "GUEST"
  },
  "LiveTalkSpeakerSetting": {
    "1": "APPROVAL",
    "2": "ALL"
  },
  "LiveTalkType": {
    "1": "PUBLIC",
    "2": "PRIVATE"
  },
  "MessageReactionType": {
    "0": "ALL",
    "1": "UNDO",
    "2": "NICE",
    "3": "LOVE",
    "4": "FUN",
    "5": "AMAZING",
    "6": "SAD",
    "7": "OMG"
  },
  "NotifiedMessageType": {
    "1": "MENTION",
    "2": "REPLY"
  },
  "PopupAttribute": {
    "1": "NAME",
    "2": "ACTIVATED",
    "3": "STARTS_AT",
    "4": "ENDS_AT",
    "5": "CONTENT"
  },
  "PopupType": {
    "1": "MAIN",
    "2": "CHATROOM"
  },
  "SquareChatAttribute": {
    "2": "NAME",
    "3": "SQUARE_CHAT_IMAGE",
    "4": "STATE",
    "5": "TYPE",
    "6": "MAX_MEMBER_COUNT",
    "7": "MESSAGE_VISIBILITY",
    "8": "ABLE_TO_SEARCH_MESSAGE"
  },
  "SquareChatFeatureControlState": {
    "1": "DISABLED",
    "2": "ENABLED"
  },
  "SquareChatMemberAttribute": {
    "4": "MEMBERSHIP_STATE",
    "6": "NOTIFICATION_MESSAGE",
    "7": "NOTIFICATION_NEW_MEMBER",
    "8": "LEFT_BY_KICK_MESSAGE_LOCAL_ID",
    "9": "MESSAGE_LOCAL_ID_WHEN_BLOCK"
  },
  "SquareChatMembershipState": {
    "1": "JOINED",
    "2": "LEFT"
  },
  "SquareChatState": {
    "0": "ALIVE",
    "1": "DELETED",
    "2": "SUSPENDED"
  },
  "SquareEmblem": {
    "1": "SUPER",
    "2": "OFFICIAL"
  },
  "SquareErrorCode": {
    "0": "UNKNOWN",
    "400": "ILLEGAL_ARGUMENT",
    "401": "AUTHENTICATION_FAILURE",
    "403": "FORBIDDEN",
    "404": "NOT_FOUND",
    "409": "REVISION_MISMATCH",
    "410": "PRECONDITION_FAILED",
    "500": "INTERNAL_ERROR",
    "501": "NOT_IMPLEMENTED",
    "503": "TRY_AGAIN_LATER",
    "505": "MAINTENANCE",
    "506": "NO_PRESENCE_EXISTS"
  },
  "SquareFeatureControlState": {
    "1": "DISABLED",
    "2": "ENABLED"
  },
  "SquareFeatureSetAttribute": {
    "1": "CREATING_SECRET_SQUARE_CHAT",
    "2": "INVITING_INTO_OPEN_SQUARE_CHAT",
    "3": "CREATING_SQUARE_CHAT",
    "4": "READONLY_DEFAULT_CHAT",
    "5": "SHOWING_ADVERTISEMENT",
    "6": "DELEGATE_JOIN_TO_PLUG",
    "7": "DELEGATE_KICK_OUT_TO_PLUG",
    "8": "DISABLE_UPDATE_JOIN_METHOD",
    "9": "DISABLE_TRANSFER_ADMIN",
    "10": "CREATING_LIVE_TALK",
    "11": "DISABLE_UPDATE_SEARCHABLE",
    "12": "SUMMARIZING_MESSAGES",
    "13": "CREATING_SQUARE_THREAD",
    "14": "ENABLE_SQUARE_THREAD",
    "15": "DISABLE_CHANGE_ROLE_CO_ADMIN"
  },
  "SquareJoinMethodType": {
    "0": "NONE",
    "1": "APPROVAL",
    "2": "CODE"
  },
  "SquareMemberRelationState": {
    "1": "NONE",
    "2": "BLOCKED"
  },
  "SquareMemberRole": {
    "1": "ADMIN",
    "2": "CO_ADMIN",
    "10": "MEMBER"
  },
  "SquareMessageState": {
    "1": "SENT",
    "2": "DELETED",
    "3": "FORBIDDEN",
    "4": "UNSENT"
  },
  "SquareMetadataAttribute": {
    "1": "EXCLUDED",
    "2": "NO_AD"
  },
  "SquarePreferenceAttribute": {
    "1": "FAVORITE",
    "2": "NOTI_FOR_NEW_JOIN_REQUEST"
  },
  "SquareProviderType": {
    "1": "UNKNOWN",
    "2": "YOUTUBE",
    "3": "OA_FANSPACE"
  },
  "SquareState": {
    "0": "ALIVE",
    "1": "DELETED",
    "2": "SUSPENDED"
  },
  "SquareThreadAttribute": {
    "1": "STATE",
    "2": "EXPIRES_AT",
    "3": "READ_ONLY_AT"
  },
  "SquareThreadMembershipState": {
    "1": "JOINED",
    "2": "LEFT"
  },
  "SquareThreadState": {
    "1": "ALIVE",
    "2": "DELETED"
  },
  "SquareType": {
    "0": "CLOSED",
    "1": "OPEN"
  },
  "TargetChatType": {
    "0": "ALL",
    "1": "MIDS",
    "2": "CATEGORIES",
    "3": "CHANNEL_ID"
  },
  "TargetUserType": {
    "0": "ALL",
    "1": "MIDS"
  },
  "do0_EnumC23139B": {
    "1": "CLOUD",
    "2": "BLE",
    "3": "BEACON"
  },
  "do0_EnumC23147e": {
    "0": "SUCCESS",
    "1": "UNKNOWN_ERROR",
    "2": "BLUETOOTH_NOT_AVAILABLE",
    "3": "CONNECTION_TIMEOUT",
    "4": "CONNECTION_ERROR",
    "5": "CONNECTION_IN_PROGRESS"
  },
  "do0_EnumC23148f": {
    "0": "ONETIME",
    "1": "AUTOMATIC",
    "2": "BEACON"
  },
  "do0_G": {
    "0": "SUCCESS",
    "1": "UNKNOWN_ERROR",
    "2": "GATT_ERROR",
    "3": "GATT_OPERATION_NOT_SUPPORTED",
    "4": "GATT_SERVICE_NOT_FOUND",
    "5": "GATT_CHARACTERISTIC_NOT_FOUND",
    "6": "GATT_CONNECTION_CLOSED",
    "7": "CONNECTION_INVALID"
  },
  "do0_M": {
    "0": "INTERNAL_SERVER_ERROR",
    "1": "UNAUTHORIZED",
    "2": "INVALID_REQUEST",
    "3": "INVALID_STATE",
    "4096": "DEVICE_LIMIT_EXCEEDED",
    "4097": "UNSUPPORTED_REGION"
  },
  "fN0_EnumC24466B": {
    "0": "LINE_PREMIUM",
    "1": "LYP_PREMIUM"
  },
  "fN0_EnumC24467C": {
    "1": "LINE",
    "2": "YAHOO_JAPAN"
  },
  "fN0_EnumC24469a": {
    "1": "OK",
    "2": "NOT_SUPPORTED",
    "3": "UNDEFINED",
    "4": "NOT_ENOUGH_TICKETS",
    "5": "NOT_FRIENDS",
    "6": "NO_AGREEMENT"
  },
  "fN0_F": {
    "1": "OK",
    "2": "NOT_SUPPORTED",
    "3": "UNDEFINED",
    "4": "CONFLICT",
    "5": "NOT_AVAILABLE",
    "6": "INVALID_INVITATION",
    "7": "IN_PAYMENT_FAILURE_STATE"
  },
  "fN0_G": {
    "1": "APPLE",
    "2": "GOOGLE"
  },
  "fN0_H": {
    "1": "INACTIVE",
    "2": "ACTIVE_FINITE",
    "3": "ACTIVE_INFINITE"
  },
  "fN0_o": {
    "1": "AVAILABLE",
    "2": "ALREADY_SUBSCRIBED"
  },
  "fN0_p": {
    "0": "UNKNOWN",
    "1": "SOFTBANK_BUNDLE",
    "2": "YBB_BUNDLE",
    "3": "YAHOO_MOBILE_BUNDLE",
    "4": "PPCG_BUNDLE",
    "5": "ENJOY_BUNDLE",
    "6": "YAHOO_TRIAL_BUNDLE",
    "7": "YAHOO_APPLE",
    "8": "YAHOO_GOOGLE",
    "9": "LINE_APPLE",
    "10": "LINE_GOOGLE",
    "11": "YAHOO_WALLET"
  },
  "fN0_q": {
    "0": "UNKNOWN",
    "1": "NONE",
    "16641": "ILLEGAL_ARGUMENT",
    "16642": "NOT_FOUND",
    "16643": "NOT_AVAILABLE",
    "16644": "INTERNAL_SERVER_ERROR",
    "16645": "AUTHENTICATION_FAILED"
  },
  "g80_EnumC24993a": {
    "0": "INTERNAL_ERROR",
    "1": "ILLEGAL_ARGUMENT",
    "2": "INVALID_CONTEXT",
    "3": "TOO_MANY_REQUESTS"
  },
  "h80_EnumC25645e": {
    "0": "INTERNAL_ERROR",
    "1": "ILLEGAL_ARGUMENT",
    "2": "NOT_FOUND",
    "3": "RETRY_LATER",
    "100": "INVALID_CONTEXT",
    "101": "NOT_SUPPORTED"
  },
  "I80_EnumC26392b": {
    "0": "UNKNOWN",
    "1": "SKIP",
    "2": "PASSWORD",
    "4": "EMAIL_BASED",
    "11": "NONE"
  },
  "I80_EnumC26394c": {
    "0": "PHONE_NUMBER",
    "1": "APPLE",
    "2": "GOOGLE"
  },
  "I80_EnumC26408j": {
    "0": "INTERNAL_ERROR",
    "1": "ILLEGAL_ARGUMENT",
    "2": "VERIFICATION_FAILED",
    "3": "NOT_FOUND",
    "4": "RETRY_LATER",
    "5": "HUMAN_VERIFICATION_REQUIRED",
    "100": "INVALID_CONTEXT",
    "101": "APP_UPGRADE_REQUIRED"
  },
  "I80_EnumC26425y": {
    "0": "UNKNOWN",
    "1": "SMS",
    "2": "IVR"
  },
  "j80_EnumC27228a": {
    "1": "AUTHENTICATION_FAILED",
    "2": "INVALID_STATE",
    "3": "NOT_AUTHORIZED_DEVICE",
    "4": "MUST_REFRESH_V3_TOKEN"
  },
  "jO0_EnumC27533B": {
    "1": "PAYMENT_APPLE",
    "2": "PAYMENT_GOOGLE"
  },
  "jO0_EnumC27535b": {
    "0": "ILLEGAL_ARGUMENT",
    "1": "AUTHENTICATION_FAILED",
    "20": "INTERNAL_ERROR",
    "29": "MESSAGE_DEFINED_ERROR",
    "33": "MAINTENANCE_ERROR"
  },
  "jO0_EnumC27559z": {
    "0": "PAYMENT_PG_NONE",
    "1": "PAYMENT_PG_AU",
    "2": "PAYMENT_PG_AL"
  },
  "jf_EnumC27712a": {
    "1": "NONE",
    "2": "DOES_NOT_RESPOND",
    "3": "RESPOND_MANUALLY",
    "4": "RESPOND_AUTOMATICALLY"
  },
  "jf_EnumC27717f": {
    "0": "UNKNOWN",
    "1": "BAD_REQUEST",
    "2": "NOT_FOUND",
    "3": "FORBIDDEN",
    "4": "INTERNAL_SERVER_ERROR"
  },
  "kf_EnumC28766a": {
    "0": "ILLEGAL_ARGUMENT",
    "1": "INTERNAL_ERROR",
    "2": "UNAUTHORIZED"
  },
  "kf_o": {
    "0": "ANDROID",
    "1": "IOS"
  },
  "kf_p": {
    "0": "RICHMENU",
    "1": "TALK_ROOM"
  },
  "kf_r": {
    "0": "WEB",
    "1": "POSTBACK",
    "2": "SEND_MESSAGE"
  },
  "kf_u": {
    "0": "CLICK",
    "1": "IMPRESSION"
  },
  "kf_x": {
    "0": "UNKNOWN",
    "1": "PROFILE",
    "2": "TALK_LIST",
    "3": "OA_CALL"
  },
  "n80_o": {
    "0": "INTERNAL_ERROR",
    "100": "INVALID_CONTEXT",
    "200": "FIDO_UNKNOWN_CREDENTIAL_ID",
    "201": "FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR",
    "202": "FIDO_UNACCEPTABLE_CONTENT",
    "203": "FIDO_INVALID_REQUEST"
  },
  "o80_e": {
    "0": "INTERNAL_ERROR",
    "1": "VERIFICATION_FAILED",
    "2": "LOGIN_NOT_ALLOWED",
    "3": "EXTERNAL_SERVICE_UNAVAILABLE",
    "4": "RETRY_LATER",
    "100": "NOT_SUPPORTED",
    "101": "ILLEGAL_ARGUMENT",
    "102": "INVALID_CONTEXT",
    "103": "FORBIDDEN",
    "200": "FIDO_UNKNOWN_CREDENTIAL_ID",
    "201": "FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR",
    "202": "FIDO_UNACCEPTABLE_CONTENT",
    "203": "FIDO_INVALID_REQUEST"
  },
  "og_E": {
    "1": "RUNNING",
    "2": "CLOSING",
    "3": "CLOSED",
    "4": "SUSPEND"
  },
  "og_EnumC32661b": {
    "0": "INACTIVE",
    "1": "ACTIVE"
  },
  "og_EnumC32663d": {
    "0": "PREMIUM",
    "1": "VERIFIED",
    "2": "UNVERIFIED"
  },
  "og_EnumC32671l": {
    "0": "ILLEGAL_ARGUMENT",
    "1": "AUTHENTICATION_FAILED",
    "3": "INVALID_STATE",
    "5": "NOT_FOUND",
    "20": "INTERNAL_ERROR",
    "33": "MAINTENANCE_ERROR"
  },
  "og_G": {
    "0": "FREE",
    "1": "MONTHLY",
    "2": "PER_PAYMENT"
  },
  "og_I": {
    "0": "OK",
    "1": "REACHED_TIER_LIMIT",
    "2": "REACHED_MEMBER_LIMIT",
    "3": "ALREADY_JOINED",
    "4": "NOT_SUPPORTED_LINE_VERSION",
    "5": "BOT_USER_REGION_IS_NOT_MATCH"
  },
  "q80_EnumC33651c": {
    "0": "INTERNAL_ERROR",
    "1": "ILLEGAL_ARGUMENT",
    "2": "VERIFICATION_FAILED",
    "3": "NOT_ALLOWED_QR_CODE_LOGIN",
    "4": "VERIFICATION_NOTICE_FAILED",
    "5": "RETRY_LATER",
    "100": "INVALID_CONTEXT",
    "101": "APP_UPGRADE_REQUIRED"
  },
  "qm_EnumC34112e": {
    "1": "BUTTON",
    "2": "ENTRY_SELECTED",
    "3": "BROADCAST_ENTER",
    "4": "BROADCAST_LEAVE",
    "5": "BROADCAST_STAY"
  },
  "qm_s": {
    "0": "ILLEGAL_ARGUMENT",
    "5": "NOT_FOUND",
    "20": "INTERNAL_ERROR"
  },
  "r80_EnumC34361a": {
    "1": "PERSONAL_ACCOUNT",
    "2": "CURRENT_ACCOUNT"
  },
  "r80_EnumC34362b": {
    "1": "BANK_ALL",
    "2": "BANK_DEPOSIT",
    "3": "BANK_WITHDRAWAL"
  },
  "r80_EnumC34365e": {
    "1": "BANK",
    "2": "ATM",
    "3": "CONVENIENCE_STORE",
    "4": "DEBIT_CARD",
    "5": "E_CHANNEL",
    "6": "VIRTUAL_BANK_ACCOUNT",
    "7": "AUTO",
    "8": "CVS_LAWSON",
    "9": "SEVEN_BANK_DEPOSIT",
    "10": "CODE_DEPOSIT"
  },
  "r80_EnumC34367g": {
    "0": "AVAILABLE",
    "1": "DIFFERENT_REGION",
    "2": "UNSUPPORTED_DEVICE",
    "3": "PHONE_NUMBER_UNREGISTERED",
    "4": "UNAVAILABLE_FROM_LINE_PAY",
    "5": "INVALID_USER"
  },
  "r80_EnumC34368h": {
    "1": "CHARGE",
    "2": "WITHDRAW"
  },
  "r80_EnumC34370j": {
    "0": "UNKNOWN",
    "1": "VISA",
    "2": "MASTER",
    "3": "AMEX",
    "4": "DINERS",
    "5": "JCB"
  },
  "r80_EnumC34371k": {
    "0": "NULL",
    "1": "ATM",
    "2": "CONVENIENCE_STORE"
  },
  "r80_EnumC34372l": {
    "1": "SCALE2",
    "2": "SCALE3",
    "3": "HDPI",
    "4": "XHDPI"
  },
  "r80_EnumC34374n": {
    "0": "SUCCESS",
    "1000": "GENERAL_USER_ERROR",
    "1101": "ACCOUNT_NOT_EXISTS",
    "1102": "ACCOUNT_INVALID_STATUS",
    "1103": "ACCOUNT_ALREADY_EXISTS",
    "1104": "MERCHANT_NOT_EXISTS",
    "1105": "MERCHANT_INVALID_STATUS",
    "1107": "AGREEMENT_REQUIRED",
    "1108": "BLACKLISTED",
    "1109": "WRONG_PASSWORD",
    "1110": "INVALID_CREDIT_CARD",
    "1111": "LIMIT_EXCEEDED",
    "1115": "CANNOT_PROCEED",
    "1120": "TOO_WEAK_PASSWORD",
    "1125": "CANNOT_CREATE_ACCOUNT",
    "1130": "TEMPORARY_PASSWORD_ERROR",
    "1140": "MISSING_PARAMETERS",
    "1141": "NO_VALID_MYCODE_ACCOUNT",
    "1142": "INSUFFICIENT_BALANCE",
    "1150": "TRANSACTION_NOT_FOUND",
    "1152": "TRANSACTION_FINISHED",
    "1153": "PAYMENT_AMOUNT_WRONG",
    "1157": "BALANCE_ACCOUNT_NOT_EXISTS",
    "1158": "DUPLICATED_CITIZEN_ID",
    "1159": "PAYMENT_REQUEST_NOT_FOUND",
    "1169": "AUTH_FAILED",
    "1171": "PASSWORD_SETTING_REQUIRED",
    "1172": "TRANSACTION_ALREADY_PROCESSED",
    "1178": "CURRENCY_NOT_SUPPORTED",
    "1180": "PAYMENT_NOT_AVAILABLE",
    "1181": "TRANSFER_REQUEST_NOT_FOUND",
    "1183": "INVALID_PAYMENT_AMOUNT",
    "1184": "INSUFFICIENT_PAYMENT_AMOUNT",
    "1185": "EXTERNAL_SYSTEM_MAINTENANCE",
    "1186": "EXTERNAL_SYSTEM_INOPERATIONAL",
    "1192": "SESSION_EXPIRED",
    "1195": "UPGRADE_REQUIRED",
    "1196": "REQUEST_TOKEN_EXPIRED",
    "1198": "OPERATION_FINISHED",
    "1199": "EXTERNAL_SYSTEM_ERROR",
    "1299": "PARTIAL_AMOUNT_APPROVED",
    "1600": "PINCODE_AUTH_REQUIRED",
    "1601": "ADDITIONAL_AUTH_REQUIRED",
    "1603": "NOT_BOUND",
    "1610": "OTP_USER_REGISTRATION_ERROR",
    "1611": "OTP_CARD_REGISTRATION_ERROR",
    "1612": "NO_AUTH_METHOD",
    "1696": "GENERAL_USER_ERROR_RESTART",
    "1697": "GENERAL_USER_ERROR_REFRESH",
    "1698": "GENERAL_USER_ERROR_CLOSE",
    "9000": "INTERNAL_SERVER_ERROR",
    "9999": "INTERNAL_SYSTEM_MAINTENANCE",
    "10000": "UNKNOWN_ERROR"
  },
  "r80_EnumC34376p": {
    "1": "TRANSFER",
    "2": "TRANSFER_REQUEST",
    "3": "DUTCH",
    "4": "INVITATION"
  },
  "r80_EnumC34377q": {
    "0": "NULL",
    "1": "UNIDEN",
    "2": "WAIT",
    "3": "IDENTIFIED",
    "4": "CHECKING"
  },
  "r80_EnumC34378s": {
    "0": "UNKNOWN",
    "1": "MORE_TAB",
    "2": "CHAT_ROOM_PLUS_MENU",
    "3": "TRANSFER",
    "4": "PAYMENT",
    "5": "LINECARD",
    "6": "INVITATION"
  },
  "r80_e0": {
    "0": "NONE",
    "1": "ONE_TIME_PAYMENT_AGREEMENT",
    "2": "SIMPLE_JOINING_AGREEMENT",
    "3": "LINE_CARD_CASH_AGREEMENT",
    "4": "LINE_CARD_MONEY_AGREEMENT",
    "5": "JOINING_WITH_LINE_CARD_AGREEMENT",
    "6": "LINE_CARD_AGREEMENT"
  },
  "r80_g0": {
    "0": "NULL",
    "1": "ATM",
    "2": "CONVENIENCE_STORE",
    "3": "ALL"
  },
  "r80_h0": {
    "1": "READY",
    "2": "COMPLETE",
    "3": "WAIT",
    "4": "CANCEL",
    "5": "FAIL",
    "6": "EXPIRE",
    "7": "ALL"
  },
  "r80_i0": {
    "1": "TRANSFER_ACCEPTABLE",
    "2": "REMOVE_INVOICE",
    "3": "INVOICE_CODE",
    "4": "SHOW_ALWAYS_INVOICE"
  },
  "r80_m0": {
    "1": "OK",
    "2": "NOT_ALIVE_USER",
    "3": "NEED_BALANCE_DISCLAIMER",
    "4": "ECONTEXT_CHARGING_IN_PROGRESS",
    "6": "TRANSFER_IN_PROGRESS",
    "7": "OK_REMAINING_BALANCE",
    "8": "ADVERSE_BALANCE",
    "9": "CONFIRM_REQUIRED"
  },
  "r80_n0": {
    "1": "LINE",
    "2": "LINEPAY"
  },
  "r80_r": {
    "1": "CITIZEN_ID",
    "2": "PASSPORT",
    "3": "WORK_PERMIT",
    "4": "ALIEN_CARD"
  },
  "t80_h": {
    "1": "CLIENT",
    "2": "SERVER"
  },
  "t80_i": {
    "1": "APP_INSTANCE_LOCAL",
    "2": "APP_TYPE_LOCAL",
    "3": "GLOBAL"
  },
  "t80_n": {
    "0": "UNKNOWN",
    "1": "NONE",
    "16641": "ILLEGAL_ARGUMENT",
    "16642": "NOT_FOUND",
    "16643": "NOT_AVAILABLE",
    "16644": "TOO_LARGE_VALUE",
    "16645": "CLOCK_DRIFT_DETECTED",
    "16646": "UNSUPPORTED_APPLICATION_TYPE",
    "16647": "DUPLICATED_ENTRY",
    "16897": "AUTHENTICATION_FAILED",
    "20737": "INTERNAL_SERVER_ERROR",
    "20738": "SERVICE_IN_MAINTENANCE_MODE",
    "20739": "SERVICE_UNAVAILABLE"
  },
  "t80_r": {
    "1": "USER_ACTION",
    "2": "DATA_OUTDATED",
    "3": "APP_MIGRATION",
    "100": "OTHER"
  },
  "vh_EnumC37632c": {
    "1": "ACTIVE",
    "2": "INACTIVE"
  },
  "vh_m": {
    "1": "SAFE",
    "2": "NOT_SAFE"
  },
  "wm_EnumC38497a": {
    "0": "UNKNOWN",
    "1": "BOT_NOT_FOUND",
    "2": "BOT_NOT_AVAILABLE",
    "3": "NOT_A_MEMBER",
    "4": "SQUARECHAT_NOT_FOUND",
    "5": "FORBIDDEN",
    "400": "ILLEGAL_ARGUMENT",
    "401": "AUTHENTICATION_FAILED",
    "500": "INTERNAL_ERROR"
  },
  "zR0_EnumC40578c": {
    "0": "FOREGROUND",
    "1": "BACKGROUND"
  },
  "zR0_EnumC40579d": {
    "1": "STICKER",
    "2": "THEME",
    "3": "STICON"
  },
  "zR0_h": {
    "0": "NORMAL",
    "1": "BIG"
  },
  "zR0_j": {
    "0": "UNKNOWN",
    "1": "NONE",
    "16641": "ILLEGAL_ARGUMENT",
    "16642": "NOT_FOUND",
    "16643": "NOT_AVAILABLE",
    "16897": "AUTHENTICATION_FAILED",
    "20737": "INTERNAL_SERVER_ERROR",
    "20739": "SERVICE_UNAVAILABLE"
  },
  "zf_EnumC40713a": {
    "1": "PERSONAL",
    "2": "ROOM",
    "3": "GROUP",
    "4": "SQUARE_CHAT"
  },
  "zf_EnumC40715c": {
    "1": "REGULAR",
    "2": "PRIORITY",
    "3": "MORE"
  },
  "zf_EnumC40716d": {
    "1": "INVALID_REQUEST",
    "2": "UNAUTHORIZED",
    "100": "SERVER_ERROR"
  },
  "AccessTokenRefreshException": [
    {
      "fid": 1,
      "name": "errorCode",
      "struct": "P70_g"
    },
    {
      "fid": 2,
      "name": "reasonCode",
      "type": 10
    }
  ],
  "AccountEapConnectException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "Q70_r"
    },
    {
      "fid": 2,
      "name": "alertMessage",
      "type": 11
    },
    {
      "fid": 11,
      "name": "webAuthDetails",
      "struct": "WebAuthDetails"
    }
  ],
  "I80_C26390a": [
    {
      "fid": 1,
      "name": "code",
      "struct": "I80_EnumC26408j"
    },
    {
      "fid": 2,
      "name": "alertMessage",
      "type": 11
    },
    {
      "fid": 11,
      "name": "webAuthDetails",
      "struct": "I80_K0"
    }
  ],
  "AuthException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "T70_EnumC14406j"
    },
    {
      "fid": 2,
      "name": "alertMessage",
      "type": 11
    },
    {
      "fid": 11,
      "name": "webAuthDetails",
      "struct": "WebAuthDetails"
    }
  ],
  "BotException": [
    {
      "fid": 1,
      "name": "errorCode",
      "struct": "wm_EnumC38497a"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    },
    {
      "fid": 3,
      "name": "parameterMap",
      "map": 11,
      "key": 11
    }
  ],
  "BotExternalException": [
    {
      "fid": 1,
      "name": "errorCode",
      "struct": "kf_EnumC28766a"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    }
  ],
  "ChannelException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "ChannelErrorCode"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    },
    {
      "fid": 3,
      "name": "parameterMap",
      "map": 11,
      "key": 11
    }
  ],
  "ChannelPaakAuthnException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "n80_o"
    },
    {
      "fid": 2,
      "name": "errorMessage",
      "type": 11
    }
  ],
  "ChatappException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "zf_EnumC40716d"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    }
  ],
  "CoinException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "jO0_EnumC27535b"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    },
    {
      "fid": 3,
      "name": "parameterMap",
      "map": 11,
      "key": 11
    }
  ],
  "CollectionException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "Ob1_EnumC12664u"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    },
    {
      "fid": 3,
      "name": "parameterMap",
      "map": 11,
      "key": 11
    }
  ],
  "E2EEKeyBackupException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "Pb1_W3"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    },
    {
      "fid": 3,
      "name": "parameterMap",
      "map": 11,
      "key": 11
    }
  ],
  "ExcessiveRequestItemException": [
    {
      "fid": 1,
      "name": "max_size",
      "type": 8
    },
    {
      "fid": 2,
      "name": "hint",
      "type": 11
    }
  ],
  "HomeException": [
    {
      "fid": 1,
      "name": "exceptionCode",
      "struct": "Fg_a"
    },
    {
      "fid": 2,
      "name": "message",
      "type": 11
    },
    {
      "fid": 3,
      "name": "retryTimeMillis",
      "type": 10
    }
  ],
  "LFLPremiumException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "AR0_g"
    }
  ],
  "LiffChannelException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "Qj_EnumC13592i"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    },
    {
      "fid": 3,
      "name": "parameterMap",
      "map": 11,
      "key": 11
    }
  ],
  "LiffException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "Qj_EnumC13597n"
    },
    {
      "fid": 2,
      "name": "message",
      "type": 11
    },
    {
      "fid": 3,
      "name": "payload",
      "struct": "Qj_C13599p"
    }
  ],
  "MembershipException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "og_EnumC32671l"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    },
    {
      "fid": 3,
      "name": "parameterMap",
      "map": 11,
      "key": 11
    }
  ],
  "OaChatException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "jf_EnumC27717f"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    },
    {
      "fid": 3,
      "name": "parameterMap",
      "map": 11,
      "key": 11
    }
  ],
  "PasswordUpdateException": [
    {
      "fid": 1,
      "name": "errorCode",
      "struct": "U70_c"
    },
    {
      "fid": 2,
      "name": "errorMessage",
      "type": 11
    }
  ],
  "PaymentException": [
    {
      "fid": 1,
      "name": "errorCode",
      "struct": "r80_EnumC34374n"
    },
    {
      "fid": 2,
      "name": "debugReason",
      "type": 11
    },
    {
      "fid": 3,
      "name": "serverDefinedMessage",
      "type": 11
    },
    {
      "fid": 4,
      "name": "errorDetailMap",
      "map": 11,
      "key": 11
    }
  ],
  "PointException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "PointErrorCode"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    },
    {
      "fid": 3,
      "name": "extra",
      "map": 11,
      "key": 11
    }
  ],
  "PremiumException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "fN0_q"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    }
  ],
  "PrimaryQrCodeMigrationException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "h80_EnumC25645e"
    },
    {
      "fid": 2,
      "name": "errorMessage",
      "type": 11
    }
  ],
  "PwlessCredentialException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "R70_e"
    },
    {
      "fid": 2,
      "name": "alertMessage",
      "type": 11
    }
  ],
  "RejectedException": [
    {
      "fid": 1,
      "name": "rejectionReason",
      "struct": "LN0_F0"
    },
    {
      "fid": 2,
      "name": "hint",
      "type": 11
    }
  ],
  "SeamlessLoginException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "g80_EnumC24993a"
    },
    {
      "fid": 2,
      "name": "errorMessage",
      "type": 11
    },
    {
      "fid": 3,
      "name": "errorTitle",
      "type": 11
    }
  ],
  "SecondAuthFactorPinCodeException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "S70_a"
    },
    {
      "fid": 2,
      "name": "alertMessage",
      "type": 11
    }
  ],
  "SecondaryPwlessLoginException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "o80_e"
    },
    {
      "fid": 2,
      "name": "alertMessage",
      "type": 11
    }
  ],
  "SecondaryQrCodeException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "q80_EnumC33651c"
    },
    {
      "fid": 2,
      "name": "alertMessage",
      "type": 11
    }
  ],
  "ServerFailureException": [
    {
      "fid": 1,
      "name": "hint",
      "type": 11
    }
  ],
  "SettingsException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "t80_n"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    },
    {
      "fid": 3,
      "name": "parameters",
      "map": 11,
      "key": 11
    }
  ],
  "ShopException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "Ob1_EnumC12652p1"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    },
    {
      "fid": 3,
      "name": "parameterMap",
      "map": 11,
      "key": 11
    }
  ],
  "SquareException": [
    {
      "fid": 1,
      "name": "errorCode",
      "struct": "SquareErrorCode"
    },
    {
      "fid": 2,
      "name": "errorExtraInfo",
      "struct": "ErrorExtraInfo"
    },
    {
      "fid": 3,
      "name": "reason",
      "type": 11
    }
  ],
  "SuggestTrialException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "zR0_j"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    },
    {
      "fid": 3,
      "name": "parameterMap",
      "map": 11,
      "key": 11
    }
  ],
  "TalkException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "ErrorCode"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    },
    {
      "fid": 3,
      "name": "parameterMap",
      "map": 11,
      "key": 11
    }
  ],
  "ThingsException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "do0_M"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    }
  ],
  "TokenAuthException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "j80_EnumC27228a"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    }
  ],
  "WalletException": [
    {
      "fid": 1,
      "name": "code",
      "struct": "NZ0_EnumC12193o1"
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    },
    {
      "fid": 3,
      "name": "attributes",
      "map": 11,
      "key": 11
    }
  ],
  "m80_C30146a": [],
  "m80_b": [],
  "AD": [
    {
      "fid": 1,
      "name": "body",
      "type": 11
    },
    {
      "fid": 2,
      "name": "priority",
      "struct": "Priority"
    },
    {
      "fid": 3,
      "name": "lossUrl",
      "type": 11
    }
  ],
  "AR0_o": [
    {
      "fid": 1,
      "name": "sticker",
      "struct": "_any"
    }
  ],
  "AbuseMessage": [
    {
      "fid": 1,
      "name": "messageId",
      "type": 10
    },
    {
      "fid": 2,
      "name": "message",
      "type": 11
    },
    {
      "fid": 3,
      "name": "senderMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "contentType",
      "struct": "ContentType"
    },
    {
      "fid": 5,
      "name": "createdTime",
      "type": 10
    },
    {
      "fid": 6,
      "name": "metadata",
      "map": 11,
      "key": 11
    }
  ],
  "AbuseReport": [
    {
      "fid": 1,
      "name": "reportSource",
      "struct": "Pb1_EnumC13128p7"
    },
    {
      "fid": 2,
      "name": "applicationType",
      "struct": "ApplicationType"
    },
    {
      "fid": 3,
      "name": "spammerReasons",
      "list": 8
    },
    {
      "fid": 4,
      "name": "abuseMessages",
      "list": "AbuseMessage"
    },
    {
      "fid": 5,
      "name": "metadata",
      "map": 11,
      "key": 11
    }
  ],
  "AbuseReportLineMeeting": [
    {
      "fid": 1,
      "name": "reporteeMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "spammerReasons",
      "list": 8
    },
    {
      "fid": 3,
      "name": "evidenceIds",
      "list": "EvidenceId"
    },
    {
      "fid": 4,
      "name": "chatMid",
      "type": 11
    }
  ],
  "AcceptChatInvitationByTicketRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "ticketId",
      "type": 11
    }
  ],
  "AcceptChatInvitationRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    }
  ],
  "AcceptSpeakersRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "targetMids",
      "set": 11
    }
  ],
  "AcceptToChangeRoleRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "inviteRequestId",
      "type": 11
    }
  ],
  "AcceptToListenRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "inviteRequestId",
      "type": 11
    }
  ],
  "AcceptToSpeakRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "inviteRequestId",
      "type": 11
    }
  ],
  "AccountIdentifier": [
    {
      "fid": 1,
      "name": "type",
      "struct": "T70_EnumC14390b"
    },
    {
      "fid": 2,
      "name": "identifier",
      "type": 11
    },
    {
      "fid": 11,
      "name": "countryCode",
      "type": 11
    }
  ],
  "AcquireLiveTalkRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "title",
      "type": 11
    },
    {
      "fid": 3,
      "name": "type",
      "struct": "LiveTalkType"
    },
    {
      "fid": 4,
      "name": "speakerSetting",
      "struct": "LiveTalkSpeakerSetting"
    }
  ],
  "AcquireLiveTalkResponse": [
    {
      "fid": 1,
      "name": "liveTalk",
      "struct": "LiveTalk"
    }
  ],
  "AcquireOACallRouteRequest": [
    {
      "fid": 1,
      "name": "searchId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "fromEnvInfo",
      "map": 11,
      "key": 11
    },
    {
      "fid": 3,
      "name": "otp",
      "type": 11
    }
  ],
  "AcquireOACallRouteResponse": [
    {
      "fid": 1,
      "name": "oaCallRoute",
      "struct": "Pb1_C13113o6"
    }
  ],
  "ActionButton": [
    {
      "fid": 1,
      "name": "label",
      "type": 11
    }
  ],
  "ActivateSubscriptionRequest": [
    {
      "fid": 1,
      "name": "uniqueKey",
      "type": 11
    },
    {
      "fid": 2,
      "name": "activeStatus",
      "struct": "og_EnumC32661b"
    }
  ],
  "AdRequest": [
    {
      "fid": 1,
      "name": "headers",
      "map": 11,
      "key": 11
    },
    {
      "fid": 2,
      "name": "queryParams",
      "map": 11,
      "key": 11
    }
  ],
  "AdTypeOptOutClickEventRequest": [
    {
      "fid": 1,
      "name": "moduleAdId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "targetId",
      "type": 11
    }
  ],
  "AddFriendByMidRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "userMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "tracking",
      "struct": "AddFriendTracking"
    }
  ],
  "AddFriendTracking": [
    {
      "fid": 1,
      "name": "reference",
      "type": 11
    },
    {
      "fid": 2,
      "name": "trackingMeta",
      "struct": "LN0_C11274d"
    }
  ],
  "AddItemToCollectionRequest": [
    {
      "fid": 1,
      "name": "collectionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "productType",
      "struct": "Ob1_O0"
    },
    {
      "fid": 3,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "itemId",
      "type": 11
    }
  ],
  "AddMetaByPhone": [
    {
      "fid": 1,
      "name": "phone",
      "type": 11
    }
  ],
  "AddMetaBySearchId": [
    {
      "fid": 1,
      "name": "searchId",
      "type": 11
    }
  ],
  "AddMetaByUserTicket": [
    {
      "fid": 1,
      "name": "ticket",
      "type": 11
    }
  ],
  "AddMetaChatNote": [
    {
      "fid": 1,
      "name": "chatMid",
      "type": 11
    }
  ],
  "AddMetaChatNoteMenu": [
    {
      "fid": 1,
      "name": "chatMid",
      "type": 11
    }
  ],
  "AddMetaGroupMemberList": [
    {
      "fid": 1,
      "name": "chatMid",
      "type": 11
    }
  ],
  "AddMetaGroupVideoCall": [
    {
      "fid": 1,
      "name": "chatMid",
      "type": 11
    }
  ],
  "AddMetaInvalid": [
    {
      "fid": 1,
      "name": "hint",
      "type": 11
    }
  ],
  "AddMetaMentionInChat": [
    {
      "fid": 1,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "messageId",
      "type": 11
    }
  ],
  "AddMetaProfileUndefined": [
    {
      "fid": 1,
      "name": "hint",
      "type": 11
    }
  ],
  "AddMetaSearchIdInUnifiedSearch": [
    {
      "fid": 1,
      "name": "searchId",
      "type": 11
    }
  ],
  "AddMetaShareContact": [
    {
      "fid": 1,
      "name": "messageId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "senderMid",
      "type": 11
    }
  ],
  "AddMetaStrangerCall": [
    {
      "fid": 1,
      "name": "messageId",
      "type": 11
    }
  ],
  "AddMetaStrangerMessage": [
    {
      "fid": 1,
      "name": "messageId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    }
  ],
  "AddOaFriendResponse": [
    {
      "fid": 1,
      "name": "status",
      "type": 11
    }
  ],
  "AddProductToSubscriptionSlotRequest": [
    {
      "fid": 1,
      "name": "productType",
      "struct": "Ob1_O0"
    },
    {
      "fid": 2,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "oldProductId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "subscriptionService",
      "struct": "Ob1_S1"
    }
  ],
  "AddProductToSubscriptionSlotResponse": [
    {
      "fid": 1,
      "name": "result",
      "struct": "Ob1_U1"
    }
  ],
  "AddThemeToSubscriptionSlotRequest": [
    {
      "fid": 1,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "currentlyAppliedProductId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "subscriptionService",
      "struct": "Ob1_S1"
    }
  ],
  "AddThemeToSubscriptionSlotResponse": [
    {
      "fid": 1,
      "name": "result",
      "struct": "Ob1_U1"
    }
  ],
  "AddToFollowBlacklistRequest": [
    {
      "fid": 1,
      "name": "followMid",
      "struct": "Pb1_A4"
    }
  ],
  "AgeCheckRequestResult": [
    {
      "fid": 1,
      "name": "authUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    }
  ],
  "AgreeToTermsRequest": [
    {
      "fid": 1,
      "name": "termsType",
      "struct": "TermsType"
    },
    {
      "fid": 2,
      "name": "termsAgreement",
      "struct": "TermsAgreement"
    }
  ],
  "AiQnABotTermsAgreement": [
    {
      "fid": 1,
      "name": "termsVersion",
      "type": 8
    }
  ],
  "AnalyticsInfo": [
    {
      "fid": 1,
      "name": "gaSamplingRate",
      "type": 4
    },
    {
      "fid": 2,
      "name": "tmid",
      "type": 11
    }
  ],
  "AnimationEffectContent": [
    {
      "fid": 1,
      "name": "animationImageUrl",
      "type": 11
    }
  ],
  "AnimationLayer": [
    {
      "fid": 1,
      "name": "initialImage",
      "struct": "RichImage"
    },
    {
      "fid": 2,
      "name": "frontImage",
      "struct": "RichImage"
    },
    {
      "fid": 3,
      "name": "backgroundImage",
      "struct": "RichImage"
    }
  ],
  "ApplicationVersionRange": [
    {
      "fid": 1,
      "name": "lowerBound",
      "type": 11
    },
    {
      "fid": 2,
      "name": "lowerBoundInclusive",
      "type": 2
    },
    {
      "fid": 3,
      "name": "upperBound",
      "type": 11
    },
    {
      "fid": 4,
      "name": "upperBoundInclusive",
      "type": 2
    }
  ],
  "ApprovalValue": [
    {
      "fid": 1,
      "name": "message",
      "type": 11
    }
  ],
  "ApproveSquareMembersRequest": [
    {
      "fid": 2,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "requestedMemberMids",
      "list": 11
    }
  ],
  "ApproveSquareMembersResponse": [
    {
      "fid": 1,
      "name": "approvedMembers",
      "list": "SquareMember"
    },
    {
      "fid": 2,
      "name": "status",
      "struct": "SquareStatus"
    }
  ],
  "ApprovedChannelInfo": [
    {
      "fid": 1,
      "name": "channelInfo",
      "struct": "ChannelInfo"
    },
    {
      "fid": 2,
      "name": "approvedAt",
      "type": 10
    }
  ],
  "ApprovedChannelInfos": [
    {
      "fid": 1,
      "name": "approvedChannelInfos",
      "list": "ApprovedChannelInfo"
    },
    {
      "fid": 2,
      "name": "revision",
      "type": 10
    }
  ],
  "AssetServiceInfo": [
    {
      "fid": 1,
      "name": "status",
      "struct": "NZ0_C0"
    },
    {
      "fid": 2,
      "name": "myAssetServiceCode",
      "struct": "NZ0_B0"
    },
    {
      "fid": 3,
      "name": "name",
      "type": 11
    },
    {
      "fid": 4,
      "name": "signupText",
      "type": 11
    },
    {
      "fid": 5,
      "name": "iconUrl",
      "type": 11
    },
    {
      "fid": 6,
      "name": "landingUrl",
      "type": 11
    },
    {
      "fid": 7,
      "name": "currencyProperty",
      "struct": "CurrencyProperty"
    },
    {
      "fid": 8,
      "name": "balance",
      "type": 11
    },
    {
      "fid": 9,
      "name": "profit",
      "type": 11
    },
    {
      "fid": 10,
      "name": "maintenanceText",
      "type": 11
    },
    {
      "fid": 11,
      "name": "availableBalanceString",
      "type": 11
    },
    {
      "fid": 12,
      "name": "availableBalance",
      "type": 11
    }
  ],
  "AuthPublicKeyCredential": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "type",
      "type": 11
    },
    {
      "fid": 3,
      "name": "response",
      "struct": "AuthenticatorAssertionResponse"
    },
    {
      "fid": 4,
      "name": "extensionResults",
      "struct": "AuthenticationExtensionsClientOutputs"
    }
  ],
  "AuthSessionRequest": [
    {
      "fid": 1,
      "name": "metaData",
      "map": 11,
      "key": 11
    }
  ],
  "AuthenticateWithPaakRequest": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "credential",
      "struct": "AuthPublicKeyCredential"
    }
  ],
  "AuthenticationExtensionsClientInputs": [
    {
      "fid": 91,
      "name": "lineAuthenSel",
      "set": 11
    }
  ],
  "AuthenticationExtensionsClientOutputs": [
    {
      "fid": 91,
      "name": "lineAuthenSel",
      "type": 2
    }
  ],
  "AuthenticatorAssertionResponse": [
    {
      "fid": 1,
      "name": "clientDataJSON",
      "type": 11
    },
    {
      "fid": 2,
      "name": "authenticatorData",
      "type": 11
    },
    {
      "fid": 3,
      "name": "signature",
      "type": 11
    },
    {
      "fid": 4,
      "name": "userHandle",
      "type": 11
    }
  ],
  "AuthenticatorAttestationResponse": [
    {
      "fid": 1,
      "name": "clientDataJSON",
      "type": 11
    },
    {
      "fid": 2,
      "name": "attestationObject",
      "type": 11
    },
    {
      "fid": 3,
      "name": "transports",
      "set": 11
    }
  ],
  "AuthenticatorSelectionCriteria": [
    {
      "fid": 1,
      "name": "authenticatorAttachment",
      "type": 11
    },
    {
      "fid": 2,
      "name": "requireResidentKey",
      "type": 2
    },
    {
      "fid": 3,
      "name": "userVerification",
      "type": 11
    }
  ],
  "AutoSuggestionShowcaseRequest": [
    {
      "fid": 1,
      "name": "productType",
      "struct": "Ob1_O0"
    },
    {
      "fid": 2,
      "name": "suggestionType",
      "struct": "Ob1_a2"
    }
  ],
  "AutoSuggestionShowcaseResponse": [
    {
      "fid": 1,
      "name": "productList",
      "list": "ProductSummaryForAutoSuggest"
    },
    {
      "fid": 2,
      "name": "totalSize",
      "type": 10
    }
  ],
  "AvatarProfile": [
    {
      "fid": 1,
      "name": "version",
      "type": 11
    },
    {
      "fid": 2,
      "name": "updatedMillis",
      "type": 10
    },
    {
      "fid": 3,
      "name": "thumbnail",
      "type": 11
    },
    {
      "fid": 4,
      "name": "usablePublicly",
      "type": 2
    }
  ],
  "BadgeInfo": [
    {
      "fid": 1,
      "name": "enabled",
      "type": 2
    },
    {
      "fid": 2,
      "name": "badgeRevision",
      "type": 10
    }
  ],
  "Balance": [
    {
      "fid": 1,
      "name": "currentPointsFixedPointDecimal",
      "type": 11
    }
  ],
  "BalanceShortcut": [
    {
      "fid": 1,
      "name": "osPayment",
      "type": 2
    },
    {
      "fid": 2,
      "name": "iconPosition",
      "type": 8
    },
    {
      "fid": 3,
      "name": "iconUrl",
      "type": 11
    },
    {
      "fid": 4,
      "name": "iconText",
      "type": 11
    },
    {
      "fid": 5,
      "name": "iconAltText",
      "type": 11
    },
    {
      "fid": 6,
      "name": "linkUrl",
      "type": 11
    },
    {
      "fid": 7,
      "name": "tsTargetId",
      "type": 11
    },
    {
      "fid": 8,
      "name": "iconType",
      "struct": "NZ0_EnumC12154b1"
    },
    {
      "fid": 9,
      "name": "iconUrlDarkMode",
      "type": 11
    },
    {
      "fid": 10,
      "name": "toolTip",
      "struct": "Tooltip"
    }
  ],
  "BalanceShortcutInfo": [
    {
      "fid": 1,
      "name": "balanceShortcuts",
      "list": "BalanceShortcut"
    },
    {
      "fid": 2,
      "name": "osPaymentFallbackShortcut",
      "struct": "BalanceShortcut"
    }
  ],
  "BalanceShortcutInfoV4": [
    {
      "fid": 1,
      "name": "compactShortcuts",
      "list": "CompactShortcut"
    },
    {
      "fid": 2,
      "name": "balanceShortcuts",
      "list": "BalanceShortcut"
    },
    {
      "fid": 3,
      "name": "defaultExpand",
      "type": 2
    }
  ],
  "BankBranchInfo": [
    {
      "fid": 1,
      "name": "branchId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "branchCode",
      "type": 11
    },
    {
      "fid": 3,
      "name": "name",
      "type": 11
    },
    {
      "fid": 4,
      "name": "name2",
      "type": 11
    }
  ],
  "BannerRequest": [
    {
      "fid": 1,
      "name": "test",
      "type": 2
    },
    {
      "fid": 2,
      "name": "trigger",
      "struct": "Uf_C14856C"
    },
    {
      "fid": 3,
      "name": "ad",
      "struct": "AdRequest"
    },
    {
      "fid": 4,
      "name": "content",
      "struct": "ContentRequest"
    }
  ],
  "BannerResponse": [
    {
      "fid": 1,
      "name": "rid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "timestamp",
      "type": 10
    },
    {
      "fid": 3,
      "name": "minInterval",
      "type": 10
    },
    {
      "fid": 4,
      "name": "lang",
      "type": 11
    },
    {
      "fid": 5,
      "name": "trigger",
      "struct": "Uf_C14856C"
    },
    {
      "fid": 6,
      "name": "payloads",
      "list": "Uf_p"
    }
  ],
  "Beacon": [
    {
      "fid": 1,
      "name": "hardwareId",
      "type": 11
    }
  ],
  "BeaconBackgroundNotification": [
    {
      "fid": 1,
      "name": "actionInterval",
      "type": 10
    },
    {
      "fid": 2,
      "name": "actionAndConditions",
      "list": "qm_C34110c"
    },
    {
      "fid": 3,
      "name": "actionDelay",
      "type": 10
    },
    {
      "fid": 4,
      "name": "actionConditions"
    }
  ],
  "BeaconData": [
    {
      "fid": 1,
      "name": "hwid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "rssi",
      "type": 8
    },
    {
      "fid": 3,
      "name": "txPower",
      "type": 8
    },
    {
      "fid": 4,
      "name": "scannedTimestampMs",
      "type": 10
    }
  ],
  "BeaconLayerInfoAndActions": [
    {
      "fid": 1,
      "name": "pictureUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "label",
      "type": 11
    },
    {
      "fid": 3,
      "name": "text",
      "type": 11
    },
    {
      "fid": 4,
      "name": "actions",
      "list": 11
    },
    {
      "fid": 5,
      "name": "showOrConditions",
      "list": "qm_C34110c"
    },
    {
      "fid": 6,
      "name": "showConditions"
    },
    {
      "fid": 7,
      "name": "timeToHide",
      "type": 10
    }
  ],
  "BeaconQueryResponse": [
    {
      "fid": 2,
      "name": "deprecated_actionUrls",
      "list": 11
    },
    {
      "fid": 3,
      "name": "cacheTtl",
      "type": 10
    },
    {
      "fid": 4,
      "name": "touchActions",
      "struct": "BeaconTouchActions"
    },
    {
      "fid": 5,
      "name": "layerInfoAndActions",
      "struct": "BeaconLayerInfoAndActions"
    },
    {
      "fid": 6,
      "name": "backgroundEnteringNotification",
      "struct": "BeaconBackgroundNotification"
    },
    {
      "fid": 7,
      "name": "backgroundLeavingNotification",
      "struct": "BeaconBackgroundNotification"
    },
    {
      "fid": 8,
      "name": "group",
      "type": 11
    },
    {
      "fid": 9,
      "name": "major",
      "type": 11
    },
    {
      "fid": 10,
      "name": "minor",
      "type": 11
    },
    {
      "fid": 11,
      "name": "effectiveRange",
      "type": 4
    },
    {
      "fid": 12,
      "name": "channelWhiteList",
      "list": 11
    },
    {
      "fid": 13,
      "name": "actionId",
      "type": 10
    },
    {
      "fid": 14,
      "name": "stayReportInterval",
      "type": 10
    },
    {
      "fid": 15,
      "name": "leaveThresholdTime",
      "type": 10
    },
    {
      "fid": 17,
      "name": "touchThreshold",
      "type": 4
    },
    {
      "fid": 18,
      "name": "cutoffThreshold",
      "type": 6
    },
    {
      "fid": 19,
      "name": "dataUserBots",
      "list": "DataUserBot"
    },
    {
      "fid": 20,
      "name": "deviceId",
      "type": 11
    },
    {
      "fid": 21,
      "name": "deviceDisplayName",
      "type": 11
    },
    {
      "fid": 22,
      "name": "botMid",
      "type": 11
    },
    {
      "fid": 23,
      "name": "pop",
      "type": 2
    }
  ],
  "BeaconTouchActions": [
    {
      "fid": 1,
      "name": "actions",
      "list": 11
    }
  ],
  "BirthdayGiftAssociationVerifyRequest": [
    {
      "fid": 1,
      "name": "associationToken",
      "type": 11
    }
  ],
  "BirthdayGiftAssociationVerifyResponse": [
    {
      "fid": 1,
      "name": "tokenStatus",
      "struct": "Ob1_EnumC12638l"
    },
    {
      "fid": 2,
      "name": "recipientUserMid",
      "type": 11
    }
  ],
  "BleNotificationReceivedTrigger": [
    {
      "fid": 1,
      "name": "serviceUuid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "characteristicUuid",
      "type": 11
    }
  ],
  "BleProduct": [
    {
      "fid": 1,
      "name": "serviceUuid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "psdiServiceUuid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "psdiCharacteristicUuid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "name",
      "type": 11
    },
    {
      "fid": 5,
      "name": "profileImageLocation",
      "type": 11
    },
    {
      "fid": 6,
      "name": "bondingRequired",
      "type": 2
    }
  ],
  "Bot": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "basicSearchId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "region",
      "type": 11
    },
    {
      "fid": 4,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 5,
      "name": "pictureUrl",
      "type": 11
    },
    {
      "fid": 6,
      "name": "brandType",
      "struct": "og_EnumC32663d"
    }
  ],
  "BotBlockDetail": [
    {
      "fid": 3,
      "name": "deletedFromBlockList",
      "type": 2
    }
  ],
  "BotFriendDetail": [
    {
      "fid": 1,
      "name": "createdTime",
      "type": 10
    },
    {
      "fid": 4,
      "name": "favoriteTime",
      "type": 10
    },
    {
      "fid": 6,
      "name": "hidden",
      "type": 2
    }
  ],
  "BotOaCallDetail": [
    {
      "fid": 1,
      "name": "oaCallUrl",
      "type": 11
    }
  ],
  "BotTalkroomAds": [
    {
      "fid": 1,
      "name": "talkroomAdsEnabled",
      "type": 2
    },
    {
      "fid": 2,
      "name": "botTalkroomAdsInventoryKeys",
      "list": "BotTalkroomAdsInventoryKey"
    },
    {
      "fid": 3,
      "name": "displayTalkroomAdsToMembershipUser",
      "type": 2
    }
  ],
  "BotTalkroomAdsInventoryKey": [
    {
      "fid": 1,
      "name": "talkroomAdsPosition",
      "struct": "Pb1_EnumC13093n0"
    },
    {
      "fid": 2,
      "name": "talkroomAdsIosInventoryKey",
      "type": 11
    },
    {
      "fid": 3,
      "name": "talkroomAdsAndroidInventoryKey",
      "type": 11
    }
  ],
  "BrowsingHistory": [
    {
      "fid": 1,
      "name": "productSearchSummary",
      "struct": "ProductSearchSummary"
    },
    {
      "fid": 2,
      "name": "browsingTime",
      "type": 10
    }
  ],
  "BuddyCautionNotice": [
    {
      "fid": 1,
      "name": "type",
      "struct": "Pb1_EnumC13162s0"
    }
  ],
  "BuddyCautionNoticeFromCMS": [
    {
      "fid": 1,
      "name": "visibility",
      "struct": "Pb1_EnumC13148r0"
    }
  ],
  "BuddyChatBar": [
    {
      "fid": 1,
      "name": "barItems",
      "list": "Pb1_C13190u0"
    }
  ],
  "BuddyDetail": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "memberCount",
      "type": 10
    },
    {
      "fid": 3,
      "name": "onAir",
      "type": 2
    },
    {
      "fid": 4,
      "name": "businessAccount",
      "type": 2
    },
    {
      "fid": 5,
      "name": "addable",
      "type": 2
    },
    {
      "fid": 6,
      "name": "acceptableContentTypes",
      "set": 8
    },
    {
      "fid": 7,
      "name": "capableMyhome",
      "type": 2
    },
    {
      "fid": 8,
      "name": "freePhoneCallable",
      "type": 2
    },
    {
      "fid": 9,
      "name": "phoneNumberToDial",
      "type": 11
    },
    {
      "fid": 10,
      "name": "needPermissionApproval",
      "type": 2
    },
    {
      "fid": 11,
      "name": "channelId",
      "type": 8
    },
    {
      "fid": 12,
      "name": "channelProviderName",
      "type": 11
    },
    {
      "fid": 13,
      "name": "iconType",
      "type": 8
    },
    {
      "fid": 14,
      "name": "botType",
      "struct": "BotType"
    },
    {
      "fid": 15,
      "name": "showRichMenu",
      "type": 2
    },
    {
      "fid": 16,
      "name": "richMenuRevision",
      "type": 10
    },
    {
      "fid": 17,
      "name": "onAirLabel",
      "struct": "Pb1_EnumC13260z0"
    },
    {
      "fid": 18,
      "name": "useTheme",
      "type": 2
    },
    {
      "fid": 19,
      "name": "themeId",
      "type": 11
    },
    {
      "fid": 20,
      "name": "useBar",
      "type": 2
    },
    {
      "fid": 21,
      "name": "barRevision",
      "type": 10
    },
    {
      "fid": 22,
      "name": "useBackground",
      "type": 2
    },
    {
      "fid": 23,
      "name": "backgroundId",
      "type": 11
    },
    {
      "fid": 24,
      "name": "statusBarEnabled",
      "type": 2
    },
    {
      "fid": 25,
      "name": "statusBarRevision",
      "type": 10
    },
    {
      "fid": 26,
      "name": "searchId",
      "type": 11
    },
    {
      "fid": 27,
      "name": "onAirVersion",
      "type": 8
    },
    {
      "fid": 28,
      "name": "blockable",
      "type": 2
    },
    {
      "fid": 29,
      "name": "botActiveStatus",
      "struct": "Pb1_EnumC13037j0"
    },
    {
      "fid": 30,
      "name": "membershipEnabled",
      "type": 2
    },
    {
      "fid": 31,
      "name": "legalCountryCode",
      "type": 11
    },
    {
      "fid": 32,
      "name": "botTalkroomAds",
      "struct": "BotTalkroomAds"
    },
    {
      "fid": 33,
      "name": "botOaCallDetail",
      "struct": "BotOaCallDetail"
    },
    {
      "fid": 34,
      "name": "aiChatBot",
      "type": 2
    },
    {
      "fid": 35,
      "name": "supportSpeechToText",
      "type": 2
    },
    {
      "fid": 36,
      "name": "voomEnabled",
      "type": 2
    },
    {
      "fid": 37,
      "name": "buddyCautionNoticeFromCMS",
      "struct": "BuddyCautionNoticeFromCMS"
    },
    {
      "fid": 38,
      "name": "region",
      "type": 11
    }
  ],
  "BuddyDetailWithPersonal": [
    {
      "fid": 1,
      "name": "buddyDetail",
      "struct": "BuddyDetail"
    },
    {
      "fid": 2,
      "name": "personalDetail",
      "struct": "BuddyPersonalDetail"
    }
  ],
  "BuddyLive": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "onLive",
      "type": 2
    },
    {
      "fid": 3,
      "name": "title",
      "type": 11
    },
    {
      "fid": 4,
      "name": "viewerCount",
      "type": 10
    },
    {
      "fid": 5,
      "name": "liveUrl",
      "type": 11
    }
  ],
  "BuddyOnAir": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "freshnessLifetime",
      "type": 10
    },
    {
      "fid": 4,
      "name": "onAirId",
      "type": 11
    },
    {
      "fid": 5,
      "name": "onAir",
      "type": 2
    },
    {
      "fid": 11,
      "name": "text",
      "type": 11
    },
    {
      "fid": 12,
      "name": "viewerCount",
      "type": 10
    },
    {
      "fid": 13,
      "name": "targetCount",
      "type": 10
    },
    {
      "fid": 14,
      "name": "livePlayTime",
      "type": 10
    },
    {
      "fid": 15,
      "name": "screenAspectRate",
      "type": 11
    },
    {
      "fid": 31,
      "name": "onAirType",
      "struct": "Pb1_A0"
    },
    {
      "fid": 32,
      "name": "onAirUrls",
      "struct": "BuddyOnAirUrls"
    },
    {
      "fid": 33,
      "name": "aspectRatioOfSource",
      "type": 11
    },
    {
      "fid": 41,
      "name": "useFadingOut",
      "type": 2
    },
    {
      "fid": 42,
      "name": "fadingOutIn",
      "type": 10
    },
    {
      "fid": 43,
      "name": "urlAfterFadingOut",
      "type": 11
    },
    {
      "fid": 44,
      "name": "labelAfterFadingOut",
      "type": 11
    },
    {
      "fid": 51,
      "name": "useLowerBanner",
      "type": 2
    },
    {
      "fid": 52,
      "name": "lowerBannerUrl",
      "type": 11
    },
    {
      "fid": 53,
      "name": "lowerBannerLabel",
      "type": 11
    }
  ],
  "BuddyOnAirUrls": [
    {
      "fid": 1,
      "name": "hls",
      "map": 11,
      "key": 11
    },
    {
      "fid": 2,
      "name": "smoothStreaming",
      "map": 11,
      "key": 11
    }
  ],
  "BuddyPersonalDetail": [
    {
      "fid": 1,
      "name": "richMenuId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "statusBarRevision",
      "type": 10
    },
    {
      "fid": 3,
      "name": "buddyCautionNotice",
      "struct": "BuddyCautionNotice"
    }
  ],
  "BuddyRichMenuChatBarItem": [
    {
      "fid": 1,
      "name": "label",
      "type": 11
    },
    {
      "fid": 2,
      "name": "body",
      "type": 11
    },
    {
      "fid": 3,
      "name": "selected",
      "type": 2
    }
  ],
  "BuddySearchResult": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "pictureStatus",
      "type": 11
    },
    {
      "fid": 4,
      "name": "picturePath",
      "type": 11
    },
    {
      "fid": 5,
      "name": "statusMessage",
      "type": 11
    },
    {
      "fid": 6,
      "name": "businessAccount",
      "type": 2
    },
    {
      "fid": 7,
      "name": "iconType",
      "type": 8
    },
    {
      "fid": 8,
      "name": "botType",
      "struct": "BotType"
    }
  ],
  "BuddyStatusBar": [
    {
      "fid": 1,
      "name": "label",
      "type": 11
    },
    {
      "fid": 2,
      "name": "displayType",
      "struct": "Pb1_EnumC12926b1"
    },
    {
      "fid": 3,
      "name": "title",
      "type": 11
    },
    {
      "fid": 4,
      "name": "iconUrl",
      "type": 11
    },
    {
      "fid": 5,
      "name": "linkUrl",
      "type": 11
    }
  ],
  "BuddyWebChatBarItem": [
    {
      "fid": 1,
      "name": "label",
      "type": 11
    },
    {
      "fid": 2,
      "name": "url",
      "type": 11
    }
  ],
  "BuddyWidget": [
    {
      "fid": 1,
      "name": "icon",
      "type": 11
    },
    {
      "fid": 2,
      "name": "label",
      "type": 11
    },
    {
      "fid": 3,
      "name": "url",
      "type": 11
    }
  ],
  "BuddyWidgetListCharBarItem": [
    {
      "fid": 1,
      "name": "label",
      "type": 11
    },
    {
      "fid": 2,
      "name": "widgets",
      "list": "BuddyWidget"
    },
    {
      "fid": 3,
      "name": "selected",
      "type": 2
    }
  ],
  "BulkFollowRequest": [
    {
      "fid": 1,
      "name": "followTargetMids",
      "set": 11
    },
    {
      "fid": 2,
      "name": "unfollowTargetMids",
      "set": 11
    },
    {
      "fid": 3,
      "name": "hasNext",
      "type": 2
    }
  ],
  "BulkGetRequest": [
    {
      "fid": 1,
      "name": "requests",
      "set": "GetRequest"
    }
  ],
  "BulkGetResponse": [
    {
      "fid": 1,
      "name": "values",
      "map": "t80_g",
      "key": 11
    }
  ],
  "BulkSetRequest": [
    {
      "fid": 1,
      "name": "requests",
      "set": "SetRequest"
    }
  ],
  "BulkSetResponse": [
    {
      "fid": 1,
      "name": "values",
      "map": "t80_l",
      "key": 11
    }
  ],
  "Button": [
    {
      "fid": 1,
      "name": "content",
      "struct": "ButtonContent"
    },
    {
      "fid": 2,
      "name": "style",
      "struct": "ButtonStyle"
    }
  ],
  "ButtonStyle": [
    {
      "fid": 1,
      "name": "textColorHexCode",
      "type": 11
    },
    {
      "fid": 2,
      "name": "bgColor",
      "struct": "ButtonBGColor"
    }
  ],
  "BuyMustbuyRequest": [
    {
      "fid": 1,
      "name": "productType",
      "struct": "Ob1_O0"
    },
    {
      "fid": 2,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "serialNumber",
      "type": 11
    }
  ],
  "CallHost": [
    {
      "fid": 1,
      "name": "host",
      "type": 11
    },
    {
      "fid": 2,
      "name": "port",
      "type": 8
    },
    {
      "fid": 3,
      "name": "zone",
      "type": 11
    }
  ],
  "CallRoute": [
    {
      "fid": 1,
      "name": "fromToken",
      "type": 11
    },
    {
      "fid": 2,
      "name": "callFlowType",
      "struct": "Pb1_EnumC13010h1"
    },
    {
      "fid": 3,
      "name": "voipAddress",
      "type": 11
    },
    {
      "fid": 4,
      "name": "voipUdpPort",
      "type": 8
    },
    {
      "fid": 5,
      "name": "voipTcpPort",
      "type": 8
    },
    {
      "fid": 6,
      "name": "fromZone",
      "type": 11
    },
    {
      "fid": 7,
      "name": "toZone",
      "type": 11
    },
    {
      "fid": 8,
      "name": "fakeCall",
      "type": 2
    },
    {
      "fid": 9,
      "name": "ringbackTone",
      "type": 11
    },
    {
      "fid": 10,
      "name": "toMid",
      "type": 11
    },
    {
      "fid": 11,
      "name": "tunneling",
      "type": 11
    },
    {
      "fid": 12,
      "name": "commParam",
      "type": 11
    },
    {
      "fid": 13,
      "name": "stid",
      "type": 11
    },
    {
      "fid": 14,
      "name": "encFromMid",
      "type": 11
    },
    {
      "fid": 15,
      "name": "encToMid",
      "type": 11
    },
    {
      "fid": 16,
      "name": "switchableToVideo",
      "type": 2
    },
    {
      "fid": 17,
      "name": "voipAddress6",
      "type": 11
    },
    {
      "fid": 18,
      "name": "w2pGw",
      "type": 11
    },
    {
      "fid": 19,
      "name": "drCall",
      "type": 2
    },
    {
      "fid": 20,
      "name": "stnpk",
      "type": 11
    }
  ],
  "Callback": [
    {
      "fid": 1,
      "name": "impEventUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "clickEventUrl",
      "type": 11
    },
    {
      "fid": 3,
      "name": "muteEventUrl",
      "type": 11
    },
    {
      "fid": 4,
      "name": "upvoteEventUrl",
      "type": 11
    },
    {
      "fid": 5,
      "name": "downvoteEventUrl",
      "type": 11
    },
    {
      "fid": 6,
      "name": "bounceEventUrl",
      "type": 11
    },
    {
      "fid": 7,
      "name": "undeliveredEventUrl",
      "type": 11
    }
  ],
  "CampaignContent": [
    {
      "fid": 1,
      "name": "iconUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "iconAltText",
      "type": 11
    },
    {
      "fid": 3,
      "name": "iconDisplayRule",
      "struct": "IconDisplayRule"
    },
    {
      "fid": 4,
      "name": "animationEffectContent",
      "struct": "AnimationEffectContent"
    }
  ],
  "CampaignProperty": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "name",
      "type": 11
    },
    {
      "fid": 3,
      "name": "type",
      "type": 11
    },
    {
      "fid": 4,
      "name": "headerContent",
      "struct": "HeaderContent"
    },
    {
      "fid": 5,
      "name": "campaignContent",
      "struct": "CampaignContent"
    }
  ],
  "CanCreateCombinationStickerRequest": [
    {
      "fid": 1,
      "name": "packageIds",
      "set": 11
    }
  ],
  "CanCreateCombinationStickerResponse": [
    {
      "fid": 1,
      "name": "canCreate",
      "type": 2
    },
    {
      "fid": 2,
      "name": "usablePackageIds",
      "set": 11
    }
  ],
  "CancelChatInvitationRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "targetUserMids",
      "set": 11
    }
  ],
  "CancelPaakAuthRequest": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    }
  ],
  "CancelPaakAuthenticationRequest": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "CancelPinCodeRequest": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "CancelReactionRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "messageId",
      "type": 10
    }
  ],
  "CancelToSpeakRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    }
  ],
  "Candidate": [
    {
      "fid": 1,
      "name": "type",
      "struct": "zR0_EnumC40579d"
    },
    {
      "fid": 2,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "itemId",
      "type": 11
    }
  ],
  "Category": [
    {
      "fid": 1,
      "name": "id",
      "type": 8
    },
    {
      "fid": 2,
      "name": "name",
      "type": 11
    }
  ],
  "CategoryName": [
    {
      "fid": 1,
      "name": "categoryId",
      "type": 8
    },
    {
      "fid": 2,
      "name": "names",
      "map": 11,
      "key": 11
    }
  ],
  "ChangeSubscriptionRequest": [
    {
      "fid": 1,
      "name": "billingItemId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "subscriptionService",
      "struct": "Ob1_S1"
    },
    {
      "fid": 3,
      "name": "storeCode",
      "struct": "Ob1_K1"
    }
  ],
  "ChangeSubscriptionResponse": [
    {
      "fid": 1,
      "name": "result",
      "struct": "Ob1_M1"
    },
    {
      "fid": 2,
      "name": "orderId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "confirmUrl",
      "type": 11
    }
  ],
  "ChannelContext": [
    {
      "fid": 1,
      "name": "channelName",
      "type": 11
    }
  ],
  "ChannelDomain": [
    {
      "fid": 1,
      "name": "host",
      "type": 11
    },
    {
      "fid": 2,
      "name": "removed",
      "type": 2
    }
  ],
  "ChannelDomains": [
    {
      "fid": 1,
      "name": "channelDomains",
      "list": "ChannelDomain"
    },
    {
      "fid": 2,
      "name": "revision",
      "type": 10
    }
  ],
  "ChannelIdWithLastUpdated": [
    {
      "fid": 1,
      "name": "channelId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "lastUpdated",
      "type": 10
    }
  ],
  "ChannelInfo": [
    {
      "fid": 1,
      "name": "channelId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "name",
      "type": 11
    },
    {
      "fid": 4,
      "name": "entryPageUrl",
      "type": 11
    },
    {
      "fid": 5,
      "name": "descriptionText",
      "type": 11
    },
    {
      "fid": 6,
      "name": "provider",
      "struct": "ChannelProvider"
    },
    {
      "fid": 7,
      "name": "publicType",
      "struct": "Pb1_P6"
    },
    {
      "fid": 8,
      "name": "iconImage",
      "type": 11
    },
    {
      "fid": 9,
      "name": "permissions",
      "list": 11
    },
    {
      "fid": 11,
      "name": "iconThumbnailImage",
      "type": 11
    },
    {
      "fid": 12,
      "name": "channelConfigurations",
      "list": 8
    },
    {
      "fid": 13,
      "name": "lcsAllApiUsable",
      "type": 2
    },
    {
      "fid": 14,
      "name": "allowedPermissions",
      "set": "Pb1_EnumC12997g2"
    },
    {
      "fid": 15,
      "name": "channelDomains",
      "list": "ChannelDomain"
    },
    {
      "fid": 16,
      "name": "updatedTimestamp",
      "type": 10
    },
    {
      "fid": 17,
      "name": "featureLicenses",
      "set": "Pb1_EnumC12941c2"
    }
  ],
  "ChannelNotificationSetting": [
    {
      "fid": 1,
      "name": "channelId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "name",
      "type": 11
    },
    {
      "fid": 3,
      "name": "notificationReceivable",
      "type": 2
    },
    {
      "fid": 4,
      "name": "messageReceivable",
      "type": 2
    },
    {
      "fid": 5,
      "name": "showDefault",
      "type": 2
    }
  ],
  "ChannelProvider": [
    {
      "fid": 1,
      "name": "name",
      "type": 11
    },
    {
      "fid": 2,
      "name": "certified",
      "type": 2
    }
  ],
  "ChannelSettings": [
    {
      "fid": 1,
      "name": "unapprovedMessageReceivable",
      "type": 2
    }
  ],
  "ChannelToken": [
    {
      "fid": 1,
      "name": "token",
      "type": 11
    },
    {
      "fid": 2,
      "name": "obsToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "expiration",
      "type": 10
    },
    {
      "fid": 4,
      "name": "refreshToken",
      "type": 11
    },
    {
      "fid": 5,
      "name": "channelAccessToken",
      "type": 11
    }
  ],
  "Chat": [
    {
      "fid": 1,
      "name": "type",
      "struct": "Pb1_Z2"
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "createdTime",
      "type": 10
    },
    {
      "fid": 4,
      "name": "notificationDisabled",
      "type": 2
    },
    {
      "fid": 5,
      "name": "favoriteTimestamp",
      "type": 10
    },
    {
      "fid": 6,
      "name": "chatName",
      "type": 11
    },
    {
      "fid": 7,
      "name": "picturePath",
      "type": 11
    },
    {
      "fid": 8,
      "name": "extra",
      "struct": "Pb1_C13208v4"
    }
  ],
  "ChatEffectMeta": [
    {
      "fid": 1,
      "name": "contentId",
      "type": 10
    },
    {
      "fid": 2,
      "name": "category",
      "struct": "Pb1_Q2"
    },
    {
      "fid": 3,
      "name": "name",
      "type": 11
    },
    {
      "fid": 4,
      "name": "defaultContent",
      "struct": "ChatEffectMetaContent"
    },
    {
      "fid": 5,
      "name": "optionalContents",
      "map": "ChatEffectMetaContent",
      "key": 8
    },
    {
      "fid": 6,
      "name": "keywords",
      "set": 11
    },
    {
      "fid": 7,
      "name": "beginTimeMillis",
      "type": 10
    },
    {
      "fid": 8,
      "name": "endTimeMillis",
      "type": 10
    },
    {
      "fid": 9,
      "name": "createdTimeMillis",
      "type": 10
    },
    {
      "fid": 10,
      "name": "updatedTimeMillis",
      "type": 10
    },
    {
      "fid": 11,
      "name": "contentMetadataTag",
      "type": 11
    }
  ],
  "ChatEffectMetaContent": [
    {
      "fid": 1,
      "name": "url",
      "type": 11
    },
    {
      "fid": 2,
      "name": "checksum",
      "type": 11
    }
  ],
  "ChatRoomAnnouncement": [
    {
      "fid": 1,
      "name": "announcementSeq",
      "type": 10
    },
    {
      "fid": 2,
      "name": "type",
      "struct": "Pb1_X2"
    },
    {
      "fid": 3,
      "name": "contents",
      "struct": "ChatRoomAnnouncementContents"
    },
    {
      "fid": 4,
      "name": "creatorMid",
      "type": 11
    },
    {
      "fid": 5,
      "name": "createdTime",
      "type": 10
    },
    {
      "fid": 6,
      "name": "deletePermission",
      "struct": "Pb1_W2"
    }
  ],
  "ChatRoomAnnouncementContentMetadata": [
    {
      "fid": 1,
      "name": "replace",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sticonOwnership",
      "type": 11
    },
    {
      "fid": 3,
      "name": "postNotificationMetadata",
      "type": 11
    }
  ],
  "ChatRoomAnnouncementContents": [
    {
      "fid": 1,
      "name": "displayFields",
      "type": 8
    },
    {
      "fid": 2,
      "name": "text",
      "type": 11
    },
    {
      "fid": 3,
      "name": "link",
      "type": 11
    },
    {
      "fid": 4,
      "name": "thumbnail",
      "type": 11
    },
    {
      "fid": 5,
      "name": "contentMetadata",
      "struct": "ChatRoomAnnouncementContentMetadata"
    }
  ],
  "ChatRoomBGM": [
    {
      "fid": 1,
      "name": "creatorMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "createdTime",
      "type": 10
    },
    {
      "fid": 3,
      "name": "chatRoomBGMInfo",
      "type": 11
    }
  ],
  "Chatapp": [
    {
      "fid": 1,
      "name": "chatappId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "name",
      "type": 11
    },
    {
      "fid": 3,
      "name": "icon",
      "type": 11
    },
    {
      "fid": 4,
      "name": "url",
      "type": 11
    },
    {
      "fid": 5,
      "name": "availableChatTypes",
      "list": 8
    }
  ],
  "ChatroomPopup": [
    {
      "fid": 1,
      "name": "imageObsHash",
      "type": 11
    },
    {
      "fid": 2,
      "name": "title",
      "type": 11
    },
    {
      "fid": 3,
      "name": "content",
      "type": 11
    },
    {
      "fid": 4,
      "name": "targetRoles",
      "set": 8
    },
    {
      "fid": 5,
      "name": "button",
      "struct": "Button"
    },
    {
      "fid": 6,
      "name": "type",
      "struct": "ChatroomPopupType"
    },
    {
      "fid": 7,
      "name": "animatedImage",
      "type": 2
    },
    {
      "fid": 8,
      "name": "targetChatType",
      "struct": "TargetChatType"
    },
    {
      "fid": 9,
      "name": "targetChats",
      "struct": "TargetChats"
    },
    {
      "fid": 10,
      "name": "targetUserType",
      "struct": "TargetUserType"
    },
    {
      "fid": 11,
      "name": "targetUsers",
      "struct": "TargetUsers"
    }
  ],
  "I80_C26396d": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "CheckEmailAssignedResponse": [
    {
      "fid": 1,
      "name": "sameAccountFromPhone",
      "type": 2
    }
  ],
  "CheckIfEncryptedE2EEKeyReceivedRequest": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "secureChannelData",
      "struct": "h80_t"
    }
  ],
  "CheckIfEncryptedE2EEKeyReceivedResponse": [
    {
      "fid": 1,
      "name": "nonce",
      "type": 11
    },
    {
      "fid": 2,
      "name": "encryptedSecureChannelPayload",
      "struct": "h80_Z70_a"
    },
    {
      "fid": 3,
      "name": "userProfile",
      "struct": "h80_V70_a"
    },
    {
      "fid": 4,
      "name": "appTypeDifferentFromPrevDevice",
      "type": 2
    },
    {
      "fid": 5,
      "name": "e2eeKeyBackupServiceConfig",
      "type": 2
    }
  ],
  "I80_C26400f": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "I80_C26402g": [
    {
      "fid": 1,
      "name": "verified",
      "type": 2
    }
  ],
  "CheckIfPhonePinCodeMsgVerifiedRequest": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "userPhoneNumber",
      "struct": "UserPhoneNumber"
    }
  ],
  "CheckIfPhonePinCodeMsgVerifiedResponse": [
    {
      "fid": 1,
      "name": "accountExist",
      "type": 2
    },
    {
      "fid": 2,
      "name": "sameUdidFromAccount",
      "type": 2
    },
    {
      "fid": 3,
      "name": "allowedToRegister",
      "type": 2
    },
    {
      "fid": 11,
      "name": "userProfile",
      "struct": "UserProfile"
    }
  ],
  "CheckJoinCodeRequest": [
    {
      "fid": 2,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "joinCode",
      "type": 11
    }
  ],
  "CheckJoinCodeResponse": [
    {
      "fid": 1,
      "name": "joinToken",
      "type": 11
    }
  ],
  "CheckOperationResult": [
    {
      "fid": 1,
      "name": "tradable",
      "type": 2
    },
    {
      "fid": 2,
      "name": "reason",
      "type": 11
    },
    {
      "fid": 3,
      "name": "detailMessage",
      "type": 11
    }
  ],
  "CheckUserAgeAfterApprovalWithDocomoV2Request": [
    {
      "fid": 1,
      "name": "accessToken",
      "type": 11
    },
    {
      "fid": 2,
      "name": "agprm",
      "type": 11
    }
  ],
  "CheckUserAgeAfterApprovalWithDocomoV2Response": [
    {
      "fid": 1,
      "name": "userAgeType",
      "struct": "Pb1_gd"
    }
  ],
  "CheckUserAgeWithDocomoV2Request": [
    {
      "fid": 1,
      "name": "authCode",
      "type": 11
    }
  ],
  "CheckUserAgeWithDocomoV2Response": [
    {
      "fid": 1,
      "name": "responseType",
      "struct": "Pb1_EnumC12970e3"
    },
    {
      "fid": 2,
      "name": "userAgeType",
      "struct": "Pb1_gd"
    },
    {
      "fid": 3,
      "name": "approvalRedirectUrl",
      "type": 11
    },
    {
      "fid": 4,
      "name": "accessToken",
      "type": 11
    }
  ],
  "ClientNetworkStatus": [
    {
      "fid": 1,
      "name": "networkType",
      "struct": "Pb1_EnumC12998g3"
    },
    {
      "fid": 2,
      "name": "wifiSignals",
      "list": "WifiSignal"
    }
  ],
  "CodeValue": [
    {
      "fid": 1,
      "name": "code",
      "type": 11
    }
  ],
  "Coin": [
    {
      "fid": 1,
      "name": "freeCoinBalance",
      "type": 8
    },
    {
      "fid": 2,
      "name": "payedCoinBalance",
      "type": 8
    },
    {
      "fid": 3,
      "name": "totalCoinBalance",
      "type": 8
    },
    {
      "fid": 4,
      "name": "rewardCoinBalance",
      "type": 8
    }
  ],
  "CoinHistory": [
    {
      "fid": 1,
      "name": "payDate",
      "type": 10
    },
    {
      "fid": 2,
      "name": "coinBalance",
      "type": 8
    },
    {
      "fid": 3,
      "name": "coin",
      "type": 8
    },
    {
      "fid": 4,
      "name": "price",
      "type": 11
    },
    {
      "fid": 5,
      "name": "title",
      "type": 11
    },
    {
      "fid": 6,
      "name": "refund",
      "type": 2
    },
    {
      "fid": 7,
      "name": "paySeq",
      "type": 11
    },
    {
      "fid": 8,
      "name": "currency",
      "type": 11
    },
    {
      "fid": 9,
      "name": "currencySign",
      "type": 11
    },
    {
      "fid": 10,
      "name": "displayPrice",
      "type": 11
    },
    {
      "fid": 11,
      "name": "payload",
      "struct": "CoinPayLoad"
    },
    {
      "fid": 12,
      "name": "channelId",
      "type": 11
    }
  ],
  "CoinPayLoad": [
    {
      "fid": 1,
      "name": "payCoin",
      "type": 8
    },
    {
      "fid": 2,
      "name": "freeCoin",
      "type": 8
    },
    {
      "fid": 3,
      "name": "type",
      "struct": "PayloadType"
    },
    {
      "fid": 4,
      "name": "rewardCoin",
      "type": 8
    }
  ],
  "CoinProductItem": [
    {
      "fid": 1,
      "name": "itemId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "coin",
      "type": 8
    },
    {
      "fid": 3,
      "name": "freeCoin",
      "type": 8
    },
    {
      "fid": 5,
      "name": "currency",
      "type": 11
    },
    {
      "fid": 6,
      "name": "price",
      "type": 11
    },
    {
      "fid": 7,
      "name": "displayPrice",
      "type": 11
    },
    {
      "fid": 8,
      "name": "name",
      "type": 11
    },
    {
      "fid": 9,
      "name": "desc",
      "type": 11
    }
  ],
  "CoinPurchaseReservation": [
    {
      "fid": 1,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "country",
      "type": 11
    },
    {
      "fid": 3,
      "name": "currency",
      "type": 11
    },
    {
      "fid": 4,
      "name": "price",
      "type": 11
    },
    {
      "fid": 5,
      "name": "appStoreCode",
      "struct": "jO0_EnumC27533B"
    },
    {
      "fid": 6,
      "name": "language",
      "type": 11
    },
    {
      "fid": 7,
      "name": "pgCode",
      "struct": "jO0_EnumC27559z"
    },
    {
      "fid": 8,
      "name": "redirectUrl",
      "type": 11
    }
  ],
  "Collection": [
    {
      "fid": 1,
      "name": "collectionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "items",
      "list": "CollectionItem"
    },
    {
      "fid": 3,
      "name": "productType",
      "struct": "Ob1_O0"
    },
    {
      "fid": 4,
      "name": "createdTimeMillis",
      "type": 10
    },
    {
      "fid": 5,
      "name": "updatedTimeMillis",
      "type": 10
    }
  ],
  "CollectionItem": [
    {
      "fid": 1,
      "name": "itemId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "displayData",
      "struct": "Ob1_E"
    },
    {
      "fid": 4,
      "name": "sortId",
      "type": 8
    }
  ],
  "CombinationStickerMetadata": [
    {
      "fid": 1,
      "name": "version",
      "type": 10
    },
    {
      "fid": 2,
      "name": "canvasWidth",
      "type": 4
    },
    {
      "fid": 3,
      "name": "canvasHeight",
      "type": 4
    },
    {
      "fid": 4,
      "name": "stickerLayouts",
      "list": "StickerLayout"
    }
  ],
  "CombinationStickerStickerData": [
    {
      "fid": 1,
      "name": "packageId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "stickerId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "version",
      "type": 10
    }
  ],
  "CompactShortcut": [
    {
      "fid": 1,
      "name": "iconPosition",
      "type": 8
    },
    {
      "fid": 2,
      "name": "iconUrl",
      "type": 11
    },
    {
      "fid": 3,
      "name": "iconAltText",
      "type": 11
    },
    {
      "fid": 4,
      "name": "iconType",
      "struct": "NZ0_EnumC12154b1"
    },
    {
      "fid": 5,
      "name": "linkUrl",
      "type": 11
    },
    {
      "fid": 6,
      "name": "tsTargetId",
      "type": 11
    }
  ],
  "Configurations": [
    {
      "fid": 1,
      "name": "revision",
      "type": 10
    },
    {
      "fid": 2,
      "name": "configMap",
      "map": 11,
      "key": 11
    }
  ],
  "ConfigurationsParams": [
    {
      "fid": 1,
      "name": "regionOfUsim",
      "type": 11
    },
    {
      "fid": 2,
      "name": "regionOfTelephone",
      "type": 11
    },
    {
      "fid": 3,
      "name": "regionOfLocale",
      "type": 11
    },
    {
      "fid": 4,
      "name": "carrier",
      "type": 11
    }
  ],
  "ConnectDeviceOperation": [
    {
      "fid": 1,
      "name": "connectionTimeoutMillis",
      "type": 10
    }
  ],
  "ConnectEapAccountRequest": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "Contact": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "createdTime",
      "type": 10
    },
    {
      "fid": 10,
      "name": "type",
      "struct": "ContactType"
    },
    {
      "fid": 11,
      "name": "status",
      "struct": "ContactStatus"
    },
    {
      "fid": 21,
      "name": "relation",
      "struct": "Pb1_EnumC13151r3"
    },
    {
      "fid": 22,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 23,
      "name": "phoneticName",
      "type": 11
    },
    {
      "fid": 24,
      "name": "pictureStatus",
      "type": 11
    },
    {
      "fid": 25,
      "name": "thumbnailUrl",
      "type": 11
    },
    {
      "fid": 26,
      "name": "statusMessage",
      "type": 11
    },
    {
      "fid": 27,
      "name": "displayNameOverridden",
      "type": 11
    },
    {
      "fid": 28,
      "name": "favoriteTime",
      "type": 10
    },
    {
      "fid": 31,
      "name": "capableVoiceCall",
      "type": 2
    },
    {
      "fid": 32,
      "name": "capableVideoCall",
      "type": 2
    },
    {
      "fid": 33,
      "name": "capableMyhome",
      "type": 2
    },
    {
      "fid": 34,
      "name": "capableBuddy",
      "type": 2
    },
    {
      "fid": 35,
      "name": "attributes",
      "type": 8
    },
    {
      "fid": 36,
      "name": "settings",
      "type": 10
    },
    {
      "fid": 37,
      "name": "picturePath",
      "type": 11
    },
    {
      "fid": 38,
      "name": "recommendParams",
      "type": 11
    },
    {
      "fid": 39,
      "name": "friendRequestStatus",
      "struct": "FriendRequestStatus"
    },
    {
      "fid": 40,
      "name": "musicProfile",
      "type": 11
    },
    {
      "fid": 42,
      "name": "videoProfile",
      "type": 11
    },
    {
      "fid": 43,
      "name": "statusMessageContentMetadata",
      "map": 11,
      "key": 11
    },
    {
      "fid": 44,
      "name": "avatarProfile",
      "struct": "AvatarProfile"
    },
    {
      "fid": 45,
      "name": "friendRingtone",
      "type": 11
    },
    {
      "fid": 46,
      "name": "friendRingbackTone",
      "type": 11
    },
    {
      "fid": 47,
      "name": "nftProfile",
      "type": 2
    },
    {
      "fid": 48,
      "name": "pictureSource",
      "struct": "Pb1_N6"
    },
    {
      "fid": 49,
      "name": "profileId",
      "type": 11
    }
  ],
  "ContactCalendarEvent": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "state",
      "struct": "Pb1_EnumC13082m3"
    },
    {
      "fid": 3,
      "name": "year",
      "type": 8
    },
    {
      "fid": 4,
      "name": "month",
      "type": 8
    },
    {
      "fid": 5,
      "name": "day",
      "type": 8
    }
  ],
  "ContactCalendarEvents": [
    {
      "fid": 1,
      "name": "events",
      "key": 8
    }
  ],
  "ContactModification": [
    {
      "fid": 1,
      "name": "type",
      "struct": "Pb1_EnumC13029i6"
    },
    {
      "fid": 2,
      "name": "luid",
      "type": 11
    },
    {
      "fid": 11,
      "name": "phones",
      "list": 11
    },
    {
      "fid": 12,
      "name": "emails",
      "list": 11
    },
    {
      "fid": 13,
      "name": "userids",
      "list": 11
    },
    {
      "fid": 14,
      "name": "mobileContactName",
      "type": 11
    },
    {
      "fid": 15,
      "name": "phoneticName",
      "type": 11
    }
  ],
  "ContactRegistration": [
    {
      "fid": 1,
      "name": "contact",
      "struct": "Contact"
    },
    {
      "fid": 10,
      "name": "luid",
      "type": 11
    },
    {
      "fid": 11,
      "name": "contactType",
      "struct": "ContactType"
    },
    {
      "fid": 12,
      "name": "contactKey",
      "type": 11
    }
  ],
  "Content": [
    {
      "fid": 1,
      "name": "title",
      "type": 11
    },
    {
      "fid": 2,
      "name": "desc",
      "type": 11
    },
    {
      "fid": 3,
      "name": "linkUrl",
      "type": 11
    },
    {
      "fid": 4,
      "name": "fallbackUrl",
      "type": 11
    },
    {
      "fid": 5,
      "name": "badge",
      "struct": "Uf_C14864f"
    },
    {
      "fid": 6,
      "name": "image",
      "struct": "Image"
    },
    {
      "fid": 7,
      "name": "button",
      "struct": "ActionButton"
    },
    {
      "fid": 8,
      "name": "callback",
      "struct": "Callback"
    },
    {
      "fid": 9,
      "name": "noBidCallback",
      "struct": "NoBidCallback"
    },
    {
      "fid": 10,
      "name": "ttl",
      "type": 10
    },
    {
      "fid": 11,
      "name": "muteSupported",
      "type": 2
    },
    {
      "fid": 12,
      "name": "voteSupported",
      "type": 2
    },
    {
      "fid": 13,
      "name": "priority",
      "struct": "Priority"
    }
  ],
  "ContentRequest": [
    {
      "fid": 1,
      "name": "os",
      "struct": "Uf_EnumC14873o"
    },
    {
      "fid": 2,
      "name": "appv",
      "type": 11
    },
    {
      "fid": 3,
      "name": "lineAcceptableLanguage",
      "type": 11
    },
    {
      "fid": 4,
      "name": "countryCode",
      "type": 11
    }
  ],
  "CountryCode": [
    {
      "fid": 1,
      "name": "code",
      "type": 11
    }
  ],
  "CreateChatRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "type",
      "struct": "Pb1_Z2"
    },
    {
      "fid": 3,
      "name": "name",
      "type": 11
    },
    {
      "fid": 4,
      "name": "targetUserMids",
      "set": 11
    },
    {
      "fid": 5,
      "name": "picturePath",
      "type": 11
    }
  ],
  "CreateChatResponse": [
    {
      "fid": 1,
      "name": "chat",
      "struct": "Chat"
    }
  ],
  "CreateCollectionForUserRequest": [
    {
      "fid": 1,
      "name": "productType",
      "struct": "Ob1_O0"
    }
  ],
  "CreateCollectionForUserResponse": [
    {
      "fid": 1,
      "name": "collection",
      "struct": "Collection"
    }
  ],
  "CreateCombinationStickerRequest": [
    {
      "fid": 1,
      "name": "metadata",
      "struct": "CombinationStickerMetadata"
    },
    {
      "fid": 2,
      "name": "stickers",
      "list": "CombinationStickerStickerData"
    },
    {
      "fid": 3,
      "name": "idOfPreviousVersionOfCombinationSticker",
      "type": 11
    }
  ],
  "CreateCombinationStickerResponse": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    }
  ],
  "CreateGroupCallUrlRequest": [
    {
      "fid": 1,
      "name": "title",
      "type": 11
    }
  ],
  "CreateGroupCallUrlResponse": [
    {
      "fid": 1,
      "name": "url",
      "struct": "GroupCallUrl"
    }
  ],
  "CreateMultiProfileRequest": [
    {
      "fid": 1,
      "name": "displayName",
      "type": 11
    }
  ],
  "CreateMultiProfileResponse": [
    {
      "fid": 1,
      "name": "profileId",
      "type": 11
    }
  ],
  "I80_C26406i": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "CreateSessionResponse": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    }
  ],
  "CreateSquareChatAnnouncementRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "squareChatAnnouncement",
      "struct": "SquareChatAnnouncement"
    }
  ],
  "CreateSquareChatAnnouncementResponse": [
    {
      "fid": 1,
      "name": "announcement",
      "struct": "SquareChatAnnouncement"
    }
  ],
  "CreateSquareChatRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "squareChat",
      "struct": "SquareChat"
    },
    {
      "fid": 3,
      "name": "squareMemberMids",
      "list": 11
    }
  ],
  "CreateSquareChatResponse": [
    {
      "fid": 1,
      "name": "squareChat",
      "struct": "SquareChat"
    },
    {
      "fid": 2,
      "name": "squareChatStatus",
      "struct": "SquareChatStatus"
    },
    {
      "fid": 3,
      "name": "squareChatMember",
      "struct": "SquareChatMember"
    },
    {
      "fid": 4,
      "name": "squareChatFeatureSet",
      "struct": "SquareChatFeatureSet"
    }
  ],
  "CreateSquareRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "square",
      "struct": "Square"
    },
    {
      "fid": 3,
      "name": "creator",
      "struct": "SquareMember"
    }
  ],
  "CreateSquareResponse": [
    {
      "fid": 1,
      "name": "square",
      "struct": "Square"
    },
    {
      "fid": 2,
      "name": "creator",
      "struct": "SquareMember"
    },
    {
      "fid": 3,
      "name": "authority",
      "struct": "SquareAuthority"
    },
    {
      "fid": 4,
      "name": "status",
      "struct": "SquareStatus"
    },
    {
      "fid": 5,
      "name": "featureSet",
      "struct": "SquareFeatureSet"
    },
    {
      "fid": 6,
      "name": "noteStatus",
      "struct": "NoteStatus"
    },
    {
      "fid": 7,
      "name": "squareChat",
      "struct": "SquareChat"
    },
    {
      "fid": 8,
      "name": "squareChatStatus",
      "struct": "SquareChatStatus"
    },
    {
      "fid": 9,
      "name": "squareChatMember",
      "struct": "SquareChatMember"
    },
    {
      "fid": 10,
      "name": "squareChatFeatureSet",
      "struct": "SquareChatFeatureSet"
    }
  ],
  "CurrencyProperty": [
    {
      "fid": 1,
      "name": "code",
      "type": 11
    },
    {
      "fid": 2,
      "name": "symbol",
      "type": 11
    },
    {
      "fid": 3,
      "name": "position",
      "struct": "NZ0_EnumC12197q"
    },
    {
      "fid": 4,
      "name": "scale",
      "type": 8
    }
  ],
  "CustomBadgeLabel": [
    {
      "fid": 1,
      "name": "text",
      "type": 11
    },
    {
      "fid": 2,
      "name": "backgroundColorCode",
      "type": 11
    }
  ],
  "CustomColor": [
    {
      "fid": 1,
      "name": "hexColorCode",
      "type": 11
    }
  ],
  "DataRetention": [
    {
      "fid": 1,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "productRegion",
      "type": 11
    },
    {
      "fid": 3,
      "name": "productType",
      "struct": "fN0_EnumC24466B"
    },
    {
      "fid": 4,
      "name": "inDataRetention",
      "type": 2
    },
    {
      "fid": 5,
      "name": "dataRetentionEndTime",
      "type": 10
    }
  ],
  "DataUserBot": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "placeName",
      "type": 11
    }
  ],
  "DeleteGroupCallUrlRequest": [
    {
      "fid": 1,
      "name": "urlId",
      "type": 11
    }
  ],
  "DeleteMultiProfileRequest": [
    {
      "fid": 1,
      "name": "profileId",
      "type": 11
    }
  ],
  "DeleteOtherFromChatRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "targetUserMids",
      "set": 11
    }
  ],
  "DeleteSafetyStatusRequest": [
    {
      "fid": 1,
      "name": "disasterId",
      "type": 11
    }
  ],
  "DeleteSelfFromChatRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "lastSeenMessageDeliveredTime",
      "type": 10
    },
    {
      "fid": 4,
      "name": "lastSeenMessageId",
      "type": 11
    },
    {
      "fid": 5,
      "name": "lastMessageDeliveredTime",
      "type": 10
    },
    {
      "fid": 6,
      "name": "lastMessageId",
      "type": 11
    }
  ],
  "DeleteSquareChatAnnouncementRequest": [
    {
      "fid": 2,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "announcementSeq",
      "type": 10
    }
  ],
  "DeleteSquareChatRequest": [
    {
      "fid": 2,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "revision",
      "type": 10
    }
  ],
  "DeleteSquareRequest": [
    {
      "fid": 2,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "revision",
      "type": 10
    }
  ],
  "DestinationLIFFRequest": [
    {
      "fid": 1,
      "name": "originalUrl",
      "type": 11
    }
  ],
  "DestinationLIFFResponse": [
    {
      "fid": 1,
      "name": "destinationUrl",
      "type": 11
    }
  ],
  "DestroyMessageRequest": [
    {
      "fid": 2,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "messageId",
      "type": 11
    },
    {
      "fid": 5,
      "name": "threadMid",
      "type": 11
    }
  ],
  "DestroyMessagesRequest": [
    {
      "fid": 2,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "messageIds",
      "set": 11
    },
    {
      "fid": 5,
      "name": "threadMid",
      "type": 11
    }
  ],
  "DetermineMediaMessageFlowRequest": [
    {
      "fid": 1,
      "name": "chatMid",
      "type": 11
    }
  ],
  "DetermineMediaMessageFlowResponse": [
    {
      "fid": 1,
      "name": "flowMap",
      "map": 8,
      "key": 8
    },
    {
      "fid": 2,
      "name": "cacheTtlMillis",
      "type": 10
    }
  ],
  "Device": [
    {
      "fid": 1,
      "name": "udid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "deviceModel",
      "type": 11
    }
  ],
  "DeviceInfo": [
    {
      "fid": 1,
      "name": "deviceName",
      "type": 11
    },
    {
      "fid": 2,
      "name": "systemName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "systemVersion",
      "type": 11
    },
    {
      "fid": 4,
      "name": "model",
      "type": 11
    },
    {
      "fid": 5,
      "name": "webViewVersion",
      "type": 11
    },
    {
      "fid": 10,
      "name": "carrierCode",
      "struct": "CarrierCode"
    },
    {
      "fid": 11,
      "name": "carrierName",
      "type": 11
    },
    {
      "fid": 20,
      "name": "applicationType",
      "struct": "ApplicationType"
    }
  ],
  "DeviceLinkRequest": [
    {
      "fid": 1,
      "name": "deviceId",
      "type": 11
    }
  ],
  "DeviceLinkResponse": [
    {
      "fid": 1,
      "name": "latestOffset",
      "type": 10
    }
  ],
  "DeviceUnlinkRequest": [
    {
      "fid": 1,
      "name": "deviceId",
      "type": 11
    }
  ],
  "DisasterInfo": [
    {
      "fid": 1,
      "name": "disasterId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "title",
      "type": 11
    },
    {
      "fid": 3,
      "name": "region",
      "type": 11
    },
    {
      "fid": 4,
      "name": "disasterDescription",
      "type": 11
    },
    {
      "fid": 5,
      "name": "seeMoreUrl",
      "type": 11
    },
    {
      "fid": 7,
      "name": "status",
      "struct": "vh_EnumC37632c"
    },
    {
      "fid": 8,
      "name": "highImpact",
      "type": 2
    }
  ],
  "DisconnectEapAccountRequest": [
    {
      "fid": 1,
      "name": "eapType",
      "struct": "Q70_q"
    }
  ],
  "DisplayMoney": [
    {
      "fid": 1,
      "name": "amount",
      "type": 11
    },
    {
      "fid": 2,
      "name": "amountString",
      "type": 11
    },
    {
      "fid": 3,
      "name": "currency",
      "type": 11
    }
  ],
  "E2EEKeyChain": [
    {
      "fid": 1,
      "name": "keychain",
      "list": "Pb1_V3"
    }
  ],
  "E2EEMessageInfo": [
    {
      "fid": 1,
      "name": "contentType",
      "struct": "ContentType"
    },
    {
      "fid": 2,
      "name": "contentMetadata",
      "map": 11,
      "key": 11
    },
    {
      "fid": 3,
      "name": "chunks",
      "list": 11
    }
  ],
  "E2EEMetadata": [
    {
      "fid": 1,
      "name": "e2EEPublicKeyId",
      "type": 10
    }
  ],
  "E2EENegotiationResult": [
    {
      "fid": 1,
      "name": "allowedTypes",
      "set": 8
    },
    {
      "fid": 2,
      "name": "publicKey",
      "struct": "Pb1_C13097n4"
    },
    {
      "fid": 3,
      "name": "specVersion",
      "type": 8
    }
  ],
  "EapLogin": [
    {
      "fid": 1,
      "name": "type",
      "struct": "a80_EnumC16644b"
    },
    {
      "fid": 2,
      "name": "accessToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "countryCode",
      "type": 11
    }
  ],
  "EditItemsInCollectionRequest": [
    {
      "fid": 1,
      "name": "collectionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "items",
      "list": "CollectionItem"
    }
  ],
  "EditorsPickBannerForClient": [
    {
      "fid": 1,
      "name": "id",
      "type": 10
    },
    {
      "fid": 2,
      "name": "endPageBannerImageUrl",
      "type": 11
    },
    {
      "fid": 3,
      "name": "defaulteditorsPickShowcaseType",
      "struct": "Ob1_I"
    },
    {
      "fid": 4,
      "name": "showNewBadge",
      "type": 2
    },
    {
      "fid": 5,
      "name": "name",
      "type": 11
    },
    {
      "fid": 6,
      "name": "description",
      "type": 11
    }
  ],
  "Eg_C8928b": [],
  "Eh_C8933a": [],
  "Eh_C8935c": [],
  "EstablishE2EESessionRequest": [
    {
      "fid": 1,
      "name": "clientPublicKey",
      "type": 11
    }
  ],
  "EstablishE2EESessionResponse": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "serverPublicKey",
      "type": 11
    },
    {
      "fid": 3,
      "name": "expireAt",
      "type": 10
    }
  ],
  "EventButton": [
    {
      "fid": 1,
      "name": "text",
      "type": 11
    },
    {
      "fid": 2,
      "name": "linkUrl",
      "type": 11
    }
  ],
  "EvidenceId": [
    {
      "fid": 1,
      "name": "spaceId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "objectId",
      "type": 11
    }
  ],
  "ExecuteOnetimeScenarioOperation": [
    {
      "fid": 1,
      "name": "connectionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "scenario",
      "struct": "Scenario"
    }
  ],
  "ExistPinCodeResponse": [
    {
      "fid": 1,
      "name": "exists",
      "type": 2
    }
  ],
  "ExtendedMessageBox": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "midType",
      "struct": "MIDType"
    },
    {
      "fid": 4,
      "name": "lastDeliveredMessageId",
      "struct": "MessageBoxV2MessageId"
    },
    {
      "fid": 5,
      "name": "lastSeenMessageId",
      "type": 10
    },
    {
      "fid": 6,
      "name": "unreadCount",
      "type": 10
    },
    {
      "fid": 7,
      "name": "lastMessages",
      "list": "Message"
    },
    {
      "fid": 8,
      "name": "lastRemovedMessageId",
      "type": 10
    },
    {
      "fid": 9,
      "name": "lastRemovedTime",
      "type": 10
    },
    {
      "fid": 10,
      "name": "hiddenAtMessageId",
      "type": 10
    }
  ],
  "ExtendedProfile": [
    {
      "fid": 1,
      "name": "birthday",
      "struct": "ExtendedProfileBirthday"
    }
  ],
  "ExtendedProfileBirthday": [
    {
      "fid": 1,
      "name": "year",
      "type": 11
    },
    {
      "fid": 2,
      "name": "yearPrivacyLevelType",
      "struct": "Pb1_H6"
    },
    {
      "fid": 3,
      "name": "yearEnabled",
      "type": 2
    },
    {
      "fid": 5,
      "name": "day",
      "type": 11
    },
    {
      "fid": 6,
      "name": "dayPrivacyLevelType",
      "struct": "Pb1_H6"
    },
    {
      "fid": 7,
      "name": "dayEnabled",
      "type": 2
    }
  ],
  "FetchLiveTalkEventsRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "syncToken",
      "type": 11
    },
    {
      "fid": 4,
      "name": "limit",
      "type": 8
    }
  ],
  "FetchLiveTalkEventsResponse": [
    {
      "fid": 1,
      "name": "events",
      "list": "LiveTalkEvent"
    },
    {
      "fid": 2,
      "name": "syncToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "hasMore",
      "type": 2
    }
  ],
  "FetchMyEventsRequest": [
    {
      "fid": 1,
      "name": "subscriptionId",
      "type": 10
    },
    {
      "fid": 2,
      "name": "syncToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "limit",
      "type": 8
    },
    {
      "fid": 4,
      "name": "continuationToken",
      "type": 11
    }
  ],
  "FetchMyEventsResponse": [
    {
      "fid": 1,
      "name": "subscription",
      "struct": "SubscriptionState"
    },
    {
      "fid": 2,
      "name": "events",
      "list": "SquareEvent"
    },
    {
      "fid": 3,
      "name": "syncToken",
      "type": 11
    },
    {
      "fid": 4,
      "name": "continuationToken",
      "type": 11
    }
  ],
  "FetchOperationsRequest": [
    {
      "fid": 1,
      "name": "deviceId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "offsetFrom",
      "type": 10
    }
  ],
  "FetchOperationsResponse": [
    {
      "fid": 1,
      "name": "operations",
      "list": "ThingsOperation"
    },
    {
      "fid": 2,
      "name": "hasNext",
      "type": 2
    }
  ],
  "FetchPhonePinCodeMsgRequest": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "userPhoneNumber",
      "struct": "UserPhoneNumber"
    }
  ],
  "FetchPhonePinCodeMsgResponse": [
    {
      "fid": 1,
      "name": "pinCodeMessage",
      "type": 11
    },
    {
      "fid": 2,
      "name": "destinationPhoneNumber",
      "type": 11
    }
  ],
  "FetchSquareChatEventsRequest": [
    {
      "fid": 1,
      "name": "subscriptionId",
      "type": 10
    },
    {
      "fid": 2,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "syncToken",
      "type": 11
    },
    {
      "fid": 4,
      "name": "limit",
      "type": 8
    },
    {
      "fid": 5,
      "name": "direction",
      "struct": "FetchDirection"
    },
    {
      "fid": 6,
      "name": "inclusive",
      "struct": "BooleanState"
    },
    {
      "fid": 7,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 8,
      "name": "fetchType",
      "struct": "FetchType"
    },
    {
      "fid": 9,
      "name": "threadMid",
      "type": 11
    }
  ],
  "FetchSquareChatEventsResponse": [
    {
      "fid": 1,
      "name": "subscription",
      "struct": "SubscriptionState"
    },
    {
      "fid": 2,
      "name": "events",
      "list": "SquareEvent"
    },
    {
      "fid": 3,
      "name": "syncToken",
      "type": 11
    },
    {
      "fid": 4,
      "name": "continuationToken",
      "type": 11
    }
  ],
  "FileMeta": [
    {
      "fid": 1,
      "name": "url",
      "type": 11
    },
    {
      "fid": 2,
      "name": "hash",
      "type": 11
    }
  ],
  "FindChatByTicketRequest": [
    {
      "fid": 1,
      "name": "ticketId",
      "type": 11
    }
  ],
  "FindChatByTicketResponse": [
    {
      "fid": 1,
      "name": "chat",
      "struct": "Chat"
    }
  ],
  "FindLiveTalkByInvitationTicketRequest": [
    {
      "fid": 1,
      "name": "invitationTicket",
      "type": 11
    }
  ],
  "FindLiveTalkByInvitationTicketResponse": [
    {
      "fid": 1,
      "name": "chatInvitationTicket",
      "type": 11
    },
    {
      "fid": 2,
      "name": "liveTalk",
      "struct": "LiveTalk"
    },
    {
      "fid": 3,
      "name": "chat",
      "struct": "SquareChat"
    },
    {
      "fid": 4,
      "name": "squareMember",
      "struct": "SquareMember"
    },
    {
      "fid": 5,
      "name": "chatMembershipState",
      "struct": "SquareChatMembershipState"
    },
    {
      "fid": 6,
      "name": "squareAdultOnly",
      "struct": "BooleanState"
    }
  ],
  "FindSquareByEmidRequest": [
    {
      "fid": 1,
      "name": "emid",
      "type": 11
    }
  ],
  "FindSquareByEmidResponse": [
    {
      "fid": 1,
      "name": "square",
      "struct": "Square"
    },
    {
      "fid": 2,
      "name": "myMembership",
      "struct": "SquareMember"
    },
    {
      "fid": 3,
      "name": "squareAuthority",
      "struct": "SquareAuthority"
    },
    {
      "fid": 4,
      "name": "squareStatus",
      "struct": "SquareStatus"
    },
    {
      "fid": 5,
      "name": "squareFeatureSet",
      "struct": "SquareFeatureSet"
    },
    {
      "fid": 6,
      "name": "noteStatus",
      "struct": "NoteStatus"
    }
  ],
  "FindSquareByInvitationTicketRequest": [
    {
      "fid": 2,
      "name": "invitationTicket",
      "type": 11
    }
  ],
  "FindSquareByInvitationTicketResponse": [
    {
      "fid": 1,
      "name": "square",
      "struct": "Square"
    },
    {
      "fid": 2,
      "name": "myMembership",
      "struct": "SquareMember"
    },
    {
      "fid": 3,
      "name": "squareAuthority",
      "struct": "SquareAuthority"
    },
    {
      "fid": 4,
      "name": "squareStatus",
      "struct": "SquareStatus"
    },
    {
      "fid": 5,
      "name": "squareFeatureSet",
      "struct": "SquareFeatureSet"
    },
    {
      "fid": 6,
      "name": "noteStatus",
      "struct": "NoteStatus"
    },
    {
      "fid": 7,
      "name": "chat",
      "struct": "SquareChat"
    },
    {
      "fid": 8,
      "name": "chatStatus",
      "struct": "SquareChatStatus"
    }
  ],
  "FindSquareByInvitationTicketV2Request": [
    {
      "fid": 1,
      "name": "invitationTicket",
      "type": 11
    }
  ],
  "FindSquareByInvitationTicketV2Response": [
    {
      "fid": 1,
      "name": "square",
      "struct": "Square"
    },
    {
      "fid": 2,
      "name": "myMembership",
      "struct": "SquareMember"
    },
    {
      "fid": 3,
      "name": "squareAuthority",
      "struct": "SquareAuthority"
    },
    {
      "fid": 4,
      "name": "squareStatus",
      "struct": "SquareStatus"
    },
    {
      "fid": 5,
      "name": "squareFeatureSet",
      "struct": "SquareFeatureSet"
    },
    {
      "fid": 6,
      "name": "noteStatus",
      "struct": "NoteStatus"
    },
    {
      "fid": 7,
      "name": "chat",
      "struct": "SquareChat"
    },
    {
      "fid": 8,
      "name": "chatStatus",
      "struct": "SquareChatStatusWithoutMessage"
    }
  ],
  "FollowBuddyDetail": [
    {
      "fid": 1,
      "name": "iconType",
      "type": 8
    }
  ],
  "FollowProfile": [
    {
      "fid": 1,
      "name": "followMid",
      "struct": "Pb1_A4"
    },
    {
      "fid": 2,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "picturePath",
      "type": 11
    },
    {
      "fid": 4,
      "name": "following",
      "type": 2
    },
    {
      "fid": 5,
      "name": "allowFollow",
      "type": 2
    },
    {
      "fid": 6,
      "name": "followBuddyDetail",
      "struct": "FollowBuddyDetail"
    }
  ],
  "FollowRequest": [
    {
      "fid": 1,
      "name": "followMid",
      "struct": "Pb1_A4"
    }
  ],
  "FontMeta": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "name",
      "type": 11
    },
    {
      "fid": 3,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 4,
      "name": "type",
      "struct": "VR0_WR0_a"
    },
    {
      "fid": 5,
      "name": "font",
      "struct": "FileMeta"
    },
    {
      "fid": 6,
      "name": "fontSubset",
      "struct": "FileMeta"
    },
    {
      "fid": 7,
      "name": "expiresAtMillis",
      "type": 10
    }
  ],
  "ForceEndLiveTalkRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    }
  ],
  "ForceSelectedSubTabInfo": [
    {
      "fid": 1,
      "name": "subTabId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "forceSelectedSubTabRevision",
      "type": 10
    },
    {
      "fid": 3,
      "name": "wrsDefaultTabModelId",
      "type": 11
    }
  ],
  "FormattedPhoneNumbers": [
    {
      "fid": 1,
      "name": "localFormatPhoneNumber",
      "type": 11
    },
    {
      "fid": 2,
      "name": "prettifiedFormatPhoneNumber",
      "type": 11
    }
  ],
  "FriendRequest": [
    {
      "fid": 1,
      "name": "eMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "direction",
      "struct": "Pb1_F4"
    },
    {
      "fid": 4,
      "name": "method",
      "struct": "Pb1_G4"
    },
    {
      "fid": 5,
      "name": "param",
      "type": 11
    },
    {
      "fid": 6,
      "name": "timestamp",
      "type": 10
    },
    {
      "fid": 7,
      "name": "seqId",
      "type": 10
    },
    {
      "fid": 10,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 11,
      "name": "picturePath",
      "type": 11
    },
    {
      "fid": 12,
      "name": "pictureStatus",
      "type": 11
    }
  ],
  "FriendRequestsInfo": [
    {
      "fid": 1,
      "name": "totalIncomingCount",
      "type": 8
    },
    {
      "fid": 2,
      "name": "totalOutgoingCount",
      "type": 8
    },
    {
      "fid": 3,
      "name": "recentIncomings",
      "list": "FriendRequest"
    },
    {
      "fid": 4,
      "name": "recentOutgoings",
      "list": "FriendRequest"
    },
    {
      "fid": 5,
      "name": "totalIncomingLimit",
      "type": 8
    },
    {
      "fid": 6,
      "name": "totalOutgoingLimit",
      "type": 8
    }
  ],
  "FullSyncResponse": [
    {
      "fid": 1,
      "name": "reasons",
      "set": 8
    },
    {
      "fid": 2,
      "name": "nextRevision",
      "type": 10
    }
  ],
  "GattReadAction": [
    {
      "fid": 1,
      "name": "serviceUuid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "characteristicUuid",
      "type": 11
    }
  ],
  "Geolocation": [
    {
      "fid": 1,
      "name": "longitude",
      "type": 4
    },
    {
      "fid": 2,
      "name": "latitude",
      "type": 4
    },
    {
      "fid": 3,
      "name": "accuracy",
      "struct": "GeolocationAccuracy"
    },
    {
      "fid": 4,
      "name": "altitudeMeters",
      "type": 4
    },
    {
      "fid": 5,
      "name": "velocityMetersPerSecond",
      "type": 4
    },
    {
      "fid": 6,
      "name": "bearingDegrees",
      "type": 4
    },
    {
      "fid": 7,
      "name": "beaconData",
      "list": "BeaconData"
    }
  ],
  "GeolocationAccuracy": [
    {
      "fid": 1,
      "name": "radiusMeters",
      "type": 4
    },
    {
      "fid": 2,
      "name": "radiusConfidence",
      "type": 4
    },
    {
      "fid": 3,
      "name": "altitudeAccuracy",
      "type": 4
    },
    {
      "fid": 4,
      "name": "velocityAccuracy",
      "type": 4
    },
    {
      "fid": 5,
      "name": "bearingAccuracy",
      "type": 4
    },
    {
      "fid": 6,
      "name": "accuracyMode",
      "struct": "Pb1_EnumC13050k"
    }
  ],
  "GetAccessTokenRequest": [
    {
      "fid": 1,
      "name": "fontId",
      "type": 11
    }
  ],
  "GetAccessTokenResponse": [
    {
      "fid": 1,
      "name": "queryParams",
      "key": 11
    },
    {
      "fid": 2,
      "name": "headers",
      "key": 11
    },
    {
      "fid": 3,
      "name": "expiresAtMillis",
      "type": 10
    }
  ],
  "I80_C26410k": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "GetAcctVerifMethodResponse": [
    {
      "fid": 1,
      "name": "availableMethod",
      "struct": "T70_EnumC14392c"
    },
    {
      "fid": 2,
      "name": "sameAccountFromAuthFactor",
      "type": 2
    }
  ],
  "I80_C26412l": [
    {
      "fid": 1,
      "name": "availableMethod",
      "struct": "I80_EnumC26392b"
    }
  ],
  "GetAllChatMidsRequest": [
    {
      "fid": 1,
      "name": "withMemberChats",
      "type": 2
    },
    {
      "fid": 2,
      "name": "withInvitedChats",
      "type": 2
    }
  ],
  "GetAllChatMidsResponse": [
    {
      "fid": 1,
      "name": "memberChatMids",
      "set": 11
    },
    {
      "fid": 2,
      "name": "invitedChatMids",
      "set": 11
    }
  ],
  "GetAllowedRegistrationMethodResponse": [
    {
      "fid": 1,
      "name": "registrationMethod",
      "struct": "T70_Z0"
    }
  ],
  "GetAssertionChallengeResponse": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "challenge",
      "type": 11
    }
  ],
  "GetAttestationChallengeResponse": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "challenge",
      "type": 11
    }
  ],
  "GetBalanceResponse": [
    {
      "fid": 1,
      "name": "balance",
      "struct": "Balance"
    }
  ],
  "GetBalanceSummaryResponseV2": [
    {
      "fid": 1,
      "name": "payInfo",
      "struct": "LinePayInfo"
    },
    {
      "fid": 2,
      "name": "payPromotions",
      "list": "LinePayPromotion"
    },
    {
      "fid": 4,
      "name": "pointInfo",
      "struct": "LinePointInfo"
    },
    {
      "fid": 5,
      "name": "balanceShortcutInfo",
      "struct": "BalanceShortcutInfo"
    }
  ],
  "GetBalanceSummaryV4WithPayV3Response": [
    {
      "fid": 1,
      "name": "payInfo",
      "struct": "LinePayInfoV3"
    },
    {
      "fid": 2,
      "name": "payPromotions",
      "list": "LinePayPromotion"
    },
    {
      "fid": 3,
      "name": "balanceShortcutInfo",
      "struct": "BalanceShortcutInfoV4"
    },
    {
      "fid": 4,
      "name": "pointInfo",
      "struct": "LinePointInfo"
    }
  ],
  "GetBirthdayEffectResponse": [
    {
      "fid": 1,
      "name": "effect",
      "struct": "HomeEffect"
    }
  ],
  "GetBleDeviceRequest": [
    {
      "fid": 1,
      "name": "serviceUuid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "psdi",
      "type": 11
    }
  ],
  "GetBuddyChatBarRequest": [
    {
      "fid": 1,
      "name": "buddyMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "chatBarRevision",
      "type": 10
    },
    {
      "fid": 3,
      "name": "richMenuId",
      "type": 11
    }
  ],
  "GetBuddyLiveRequest": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    }
  ],
  "GetBuddyLiveResponse": [
    {
      "fid": 1,
      "name": "info",
      "struct": "BuddyLive"
    },
    {
      "fid": 2,
      "name": "refreshedIn",
      "type": 10
    }
  ],
  "GetBuddyStatusBarV2Request": [
    {
      "fid": 1,
      "name": "botMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "revision",
      "type": 10
    }
  ],
  "GetCallStatusRequest": [
    {
      "fid": 1,
      "name": "basicSearchId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "otp",
      "type": 11
    }
  ],
  "GetCallStatusResponse": [
    {
      "fid": 1,
      "name": "isInsideBusinessHours",
      "type": 2
    },
    {
      "fid": 2,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "isCallSettingEnabled",
      "type": 2
    },
    {
      "fid": 4,
      "name": "isExpiredOtp",
      "type": 2
    },
    {
      "fid": 5,
      "name": "requireOtpInCallUrl",
      "type": 2
    }
  ],
  "GetCampaignRequest": [
    {
      "fid": 1,
      "name": "campaignType",
      "type": 11
    }
  ],
  "GetCampaignResponse": [
    {
      "fid": 1,
      "name": "campaignStatus",
      "struct": "NZ0_EnumC12188n"
    },
    {
      "fid": 2,
      "name": "campaignProperty",
      "struct": "CampaignProperty"
    },
    {
      "fid": 3,
      "name": "intervalDateTimeMillis",
      "type": 10
    }
  ],
  "GetChallengeForPaakAuthRequest": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    }
  ],
  "GetChallengeForPaakAuthResponse": [
    {
      "fid": 1,
      "name": "options",
      "struct": "o80_p80_j"
    }
  ],
  "GetChallengeForPrimaryRegRequest": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    }
  ],
  "GetChallengeForPrimaryRegResponse": [
    {
      "fid": 1,
      "name": "options",
      "struct": "PublicKeyCredentialCreationOptions"
    }
  ],
  "GetChannelContextRequest": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "GetChannelContextResponse": [
    {
      "fid": 1,
      "name": "channelContext",
      "struct": "n80_W70_a"
    }
  ],
  "GetChatappRequest": [
    {
      "fid": 1,
      "name": "chatappId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "language",
      "type": 11
    }
  ],
  "GetChatappResponse": [
    {
      "fid": 1,
      "name": "app",
      "struct": "Chatapp"
    }
  ],
  "GetChatsRequest": [
    {
      "fid": 1,
      "name": "chatMids",
      "list": 11
    },
    {
      "fid": 2,
      "name": "withMembers",
      "type": 2
    },
    {
      "fid": 3,
      "name": "withInvitees",
      "type": 2
    }
  ],
  "GetChatsResponse": [
    {
      "fid": 1,
      "name": "chats",
      "list": "Chat"
    }
  ],
  "GetCoinHistoryRequest": [
    {
      "fid": 1,
      "name": "appStoreCode",
      "struct": "jO0_EnumC27533B"
    },
    {
      "fid": 2,
      "name": "country",
      "type": 11
    },
    {
      "fid": 3,
      "name": "language",
      "type": 11
    },
    {
      "fid": 4,
      "name": "searchEndDate",
      "type": 11
    },
    {
      "fid": 5,
      "name": "offset",
      "type": 8
    },
    {
      "fid": 6,
      "name": "limit",
      "type": 8
    }
  ],
  "GetCoinHistoryResponse": [
    {
      "fid": 1,
      "name": "histories",
      "list": "CoinHistory"
    },
    {
      "fid": 2,
      "name": "balance",
      "struct": "Coin"
    },
    {
      "fid": 3,
      "name": "offset",
      "type": 8
    },
    {
      "fid": 4,
      "name": "hasNext",
      "type": 2
    }
  ],
  "GetCoinProductsRequest": [
    {
      "fid": 1,
      "name": "appStoreCode",
      "struct": "jO0_EnumC27533B"
    },
    {
      "fid": 2,
      "name": "country",
      "type": 11
    },
    {
      "fid": 3,
      "name": "language",
      "type": 11
    },
    {
      "fid": 4,
      "name": "pgCode",
      "struct": "jO0_EnumC27559z"
    }
  ],
  "GetCoinProductsResponse": [
    {
      "fid": 1,
      "name": "items",
      "list": "CoinProductItem"
    }
  ],
  "GetContactCalendarEventResponse": [
    {
      "fid": 1,
      "name": "targetUserMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "userType",
      "struct": "LN0_X0"
    },
    {
      "fid": 3,
      "name": "ContactCalendarEvents",
      "struct": "ContactCalendarEvents"
    },
    {
      "fid": 4,
      "name": "snapshotTimeMillis",
      "type": 10
    }
  ],
  "GetContactCalendarEventTarget": [
    {
      "fid": 1,
      "name": "targetUserMid",
      "type": 11
    }
  ],
  "GetContactCalendarEventsRequest": [
    {
      "fid": 1,
      "name": "targetUsers",
      "list": "GetContactCalendarEventTarget"
    },
    {
      "fid": 2,
      "name": "syncReason",
      "struct": "Pb1_V7"
    },
    {
      "fid": 3,
      "name": "requiredContactCalendarEvents",
      "set": "Pb1_EnumC13096n3"
    }
  ],
  "GetContactCalendarEventsResponse": [
    {
      "fid": 1,
      "name": "responses",
      "list": "GetContactCalendarEventResponse"
    }
  ],
  "GetContactV3Response": [
    {
      "fid": 1,
      "name": "targetUserMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "userType",
      "struct": "LN0_X0"
    },
    {
      "fid": 3,
      "name": "targetProfileDetail",
      "struct": "TargetProfileDetail"
    },
    {
      "fid": 4,
      "name": "friendDetail",
      "struct": "LN0_Z"
    },
    {
      "fid": 5,
      "name": "blockDetail",
      "struct": "LN0_V"
    },
    {
      "fid": 6,
      "name": "recommendationDetail",
      "struct": "LN0_y0"
    },
    {
      "fid": 7,
      "name": "notificationSettingEntry",
      "struct": "NotificationSettingEntry"
    }
  ],
  "GetContactV3Target": [
    {
      "fid": 1,
      "name": "targetUserMid",
      "type": 11
    }
  ],
  "GetContactsV3Request": [
    {
      "fid": 1,
      "name": "targetUsers",
      "list": "GetContactV3Target"
    },
    {
      "fid": 2,
      "name": "syncReason",
      "struct": "Pb1_V7"
    },
    {
      "fid": 3,
      "name": "checkUserStatusStrictly",
      "type": 2
    }
  ],
  "GetContactsV3Response": [
    {
      "fid": 1,
      "name": "responses",
      "list": "GetContactV3Response"
    }
  ],
  "I80_C26413m": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "simCard",
      "struct": "I80_B0"
    }
  ],
  "I80_C26414n": [
    {
      "fid": 1,
      "name": "countryCode",
      "type": 11
    },
    {
      "fid": 2,
      "name": "countryInEEA",
      "type": 2
    },
    {
      "fid": 3,
      "name": "countrySetOfEEA",
      "set": 11
    }
  ],
  "GetCountryInfoResponse": [
    {
      "fid": 1,
      "name": "countryCode",
      "type": 11
    },
    {
      "fid": 2,
      "name": "countryInEEA",
      "type": 2
    },
    {
      "fid": 3,
      "name": "countrySetOfEEA",
      "set": 11
    }
  ],
  "GetDisasterCasesResponse": [
    {
      "fid": 1,
      "name": "disasters",
      "list": "DisasterInfo"
    },
    {
      "fid": 2,
      "name": "messageTemplate",
      "list": 11
    },
    {
      "fid": 3,
      "name": "ttlInMillis",
      "type": 10
    }
  ],
  "GetE2EEKeyBackupCertificatesResponse": [
    {
      "fid": 1,
      "name": "urlHashList",
      "list": 11
    }
  ],
  "GetE2EEKeyBackupInfoResponse": [
    {
      "fid": 1,
      "name": "blobHeaderHash",
      "type": 11
    },
    {
      "fid": 2,
      "name": "blobPayloadHash",
      "type": 11
    },
    {
      "fid": 3,
      "name": "missingKeyIds",
      "set": 8
    },
    {
      "fid": 4,
      "name": "startTimeMillis",
      "type": 10
    },
    {
      "fid": 5,
      "name": "endTimeMillis",
      "type": 10
    }
  ],
  "GetExchangeKeyRequest": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    }
  ],
  "GetExchangeKeyResponse": [
    {
      "fid": 2,
      "name": "exchangeKey",
      "map": 11,
      "key": 11
    }
  ],
  "GetFollowBlacklistRequest": [
    {
      "fid": 1,
      "name": "cursor",
      "type": 11
    }
  ],
  "GetFollowBlacklistResponse": [
    {
      "fid": 1,
      "name": "profiles",
      "list": "FollowProfile"
    },
    {
      "fid": 2,
      "name": "cursor",
      "type": 11
    }
  ],
  "GetFollowersRequest": [
    {
      "fid": 1,
      "name": "followMid",
      "struct": "Pb1_A4"
    },
    {
      "fid": 2,
      "name": "cursor",
      "type": 11
    }
  ],
  "GetFollowersResponse": [
    {
      "fid": 1,
      "name": "profiles",
      "list": "FollowProfile"
    },
    {
      "fid": 2,
      "name": "cursor",
      "type": 11
    },
    {
      "fid": 3,
      "name": "followingCount",
      "type": 10
    },
    {
      "fid": 4,
      "name": "followerCount",
      "type": 10
    }
  ],
  "GetFollowingsRequest": [
    {
      "fid": 1,
      "name": "followMid",
      "struct": "Pb1_A4"
    },
    {
      "fid": 2,
      "name": "cursor",
      "type": 11
    }
  ],
  "GetFollowingsResponse": [
    {
      "fid": 1,
      "name": "profiles",
      "list": "FollowProfile"
    },
    {
      "fid": 2,
      "name": "cursor",
      "type": 11
    },
    {
      "fid": 3,
      "name": "followingCount",
      "type": 10
    },
    {
      "fid": 4,
      "name": "followerCount",
      "type": 10
    }
  ],
  "GetFontMetasRequest": [
    {
      "fid": 1,
      "name": "requestCause",
      "struct": "VR0_l"
    }
  ],
  "GetFontMetasResponse": [
    {
      "fid": 1,
      "name": "fontMetas",
      "list": "FontMeta"
    },
    {
      "fid": 2,
      "name": "ttlInSeconds",
      "type": 8
    }
  ],
  "GetFriendDetailResponse": [
    {
      "fid": 1,
      "name": "targetUserMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "friendDetail",
      "struct": "LN0_Z"
    }
  ],
  "GetFriendDetailTarget": [
    {
      "fid": 1,
      "name": "targetUserMid",
      "type": 11
    }
  ],
  "GetFriendDetailsRequest": [
    {
      "fid": 1,
      "name": "targetUsers",
      "list": "GetFriendDetailTarget"
    },
    {
      "fid": 2,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "GetFriendDetailsResponse": [
    {
      "fid": 1,
      "name": "responses",
      "list": "GetFriendDetailResponse"
    }
  ],
  "GetGnbBadgeStatusRequest": [
    {
      "fid": 1,
      "name": "uenRevision",
      "type": 11
    }
  ],
  "GetGnbBadgeStatusResponse": [
    {
      "fid": 1,
      "name": "uenRevision",
      "type": 11
    },
    {
      "fid": 2,
      "name": "badgeStatus",
      "struct": "NZ0_EnumC12170h"
    }
  ],
  "GetGoogleAdOptionsRequest": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "adScreen",
      "struct": "AdScreen"
    }
  ],
  "GetGoogleAdOptionsResponse": [
    {
      "fid": 1,
      "name": "showAd",
      "type": 2
    },
    {
      "fid": 2,
      "name": "contentUrls",
      "list": 11
    },
    {
      "fid": 3,
      "name": "customTargeting",
      "key": 11
    },
    {
      "fid": 4,
      "name": "clientCacheTtlSeconds",
      "type": 8
    }
  ],
  "GetGroupCallUrlInfoRequest": [
    {
      "fid": 1,
      "name": "urlId",
      "type": 11
    }
  ],
  "GetGroupCallUrlInfoResponse": [
    {
      "fid": 1,
      "name": "title",
      "type": 11
    },
    {
      "fid": 2,
      "name": "createdTimeMillis",
      "type": 10
    }
  ],
  "GetGroupCallUrlsResponse": [
    {
      "fid": 1,
      "name": "urls",
      "list": "GroupCallUrl"
    }
  ],
  "GetHomeFlexContentRequest": [
    {
      "fid": 1,
      "name": "supportedFlexVersion",
      "type": 8
    }
  ],
  "GetHomeFlexContentResponse": [
    {
      "fid": 1,
      "name": "placements",
      "list": "HomeTabPlacement"
    },
    {
      "fid": 2,
      "name": "expireTimeMillis",
      "type": 10
    },
    {
      "fid": 3,
      "name": "gnbBadgeId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "gnbBadgeExpireTimeMillis",
      "type": 10
    }
  ],
  "GetHomeServiceListResponse": [
    {
      "fid": 1,
      "name": "services",
      "list": "HomeService"
    },
    {
      "fid": 2,
      "name": "fixedServiceIds",
      "list": 8
    },
    {
      "fid": 3,
      "name": "pinnedServiceCandidateIds",
      "list": 8
    },
    {
      "fid": 4,
      "name": "categories",
      "list": "HomeCategory"
    },
    {
      "fid": 5,
      "name": "fixedServiceIdsV3",
      "list": 8
    },
    {
      "fid": 6,
      "name": "specificServiceId",
      "type": 8
    }
  ],
  "GetHomeServicesRequest": [
    {
      "fid": 1,
      "name": "ids",
      "list": 8
    }
  ],
  "GetHomeServicesResponse": [
    {
      "fid": 1,
      "name": "services",
      "list": "HomeService"
    }
  ],
  "GetIncentiveStatusResponse": [
    {
      "fid": 1,
      "name": "paypayPoint",
      "type": 8
    },
    {
      "fid": 2,
      "name": "incentiveCode",
      "type": 11
    },
    {
      "fid": 3,
      "name": "subscribedFromViral",
      "type": 2
    }
  ],
  "GetInvitationTicketUrlRequest": [
    {
      "fid": 2,
      "name": "mid",
      "type": 11
    }
  ],
  "GetInvitationTicketUrlResponse": [
    {
      "fid": 1,
      "name": "invitationURL",
      "type": 11
    }
  ],
  "GetJoinableSquareChatsRequest": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 10,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 11,
      "name": "limit",
      "type": 8
    }
  ],
  "GetJoinableSquareChatsResponse": [
    {
      "fid": 1,
      "name": "squareChats",
      "list": "SquareChat"
    },
    {
      "fid": 2,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "totalSquareChatCount",
      "type": 8
    },
    {
      "fid": 4,
      "name": "squareChatStatuses",
      "map": "SquareChatStatus",
      "key": 11
    }
  ],
  "GetJoinedMembershipByBotMidRequest": [
    {
      "fid": 1,
      "name": "botMid",
      "type": 11
    }
  ],
  "GetJoinedMembershipRequest": [
    {
      "fid": 1,
      "name": "uniqueKey",
      "type": 11
    }
  ],
  "GetJoinedSquareChatsRequest": [
    {
      "fid": 2,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "limit",
      "type": 8
    }
  ],
  "GetJoinedSquareChatsResponse": [
    {
      "fid": 1,
      "name": "chats",
      "list": "SquareChat"
    },
    {
      "fid": 2,
      "name": "chatMembers",
      "map": "SquareChatMember",
      "key": 11
    },
    {
      "fid": 3,
      "name": "statuses",
      "map": "SquareChatStatus",
      "key": 11
    },
    {
      "fid": 4,
      "name": "continuationToken",
      "type": 11
    }
  ],
  "GetJoinedSquaresRequest": [
    {
      "fid": 2,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "limit",
      "type": 8
    }
  ],
  "GetJoinedSquaresResponse": [
    {
      "fid": 1,
      "name": "squares",
      "list": "Square"
    },
    {
      "fid": 2,
      "name": "members",
      "map": "SquareMember",
      "key": 11
    },
    {
      "fid": 3,
      "name": "authorities",
      "map": "SquareAuthority",
      "key": 11
    },
    {
      "fid": 4,
      "name": "statuses",
      "map": "SquareStatus",
      "key": 11
    },
    {
      "fid": 5,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 6,
      "name": "noteStatuses",
      "map": "NoteStatus",
      "key": 11
    }
  ],
  "GetKeyBackupCertificatesV2Response": [
    {
      "fid": 1,
      "name": "urlHashList",
      "list": 11
    }
  ],
  "GetLFLSuggestionResponse": [
    {
      "fid": 1,
      "name": "majorVersion",
      "type": 11
    },
    {
      "fid": 2,
      "name": "minorVersion",
      "type": 11
    },
    {
      "fid": 3,
      "name": "clusterLink",
      "type": 11
    }
  ],
  "GetLiveTalkInfoForNonMemberRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "speakers",
      "list": 11
    }
  ],
  "GetLiveTalkInfoForNonMemberResponse": [
    {
      "fid": 1,
      "name": "chatName",
      "type": 11
    },
    {
      "fid": 2,
      "name": "chatImageObsHash",
      "type": 11
    },
    {
      "fid": 3,
      "name": "liveTalk",
      "struct": "LiveTalk"
    },
    {
      "fid": 4,
      "name": "speakers",
      "list": "LiveTalkSpeaker"
    },
    {
      "fid": 5,
      "name": "chatInvitationTicket",
      "type": 11
    }
  ],
  "GetLiveTalkInvitationUrlRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    }
  ],
  "GetLiveTalkInvitationUrlResponse": [
    {
      "fid": 1,
      "name": "invitationUrl",
      "type": 11
    }
  ],
  "GetLiveTalkSpeakersForNonMemberRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "speakers",
      "list": 11
    }
  ],
  "GetLiveTalkSpeakersForNonMemberResponse": [
    {
      "fid": 1,
      "name": "speakers",
      "list": "LiveTalkSpeaker"
    }
  ],
  "GetLoginActorContextRequest": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    }
  ],
  "GetLoginActorContextResponse": [
    {
      "fid": 1,
      "name": "applicationType",
      "type": 11
    },
    {
      "fid": 2,
      "name": "ipAddress",
      "type": 11
    },
    {
      "fid": 3,
      "name": "location",
      "type": 11
    }
  ],
  "GetMappedProfileIdsRequest": [
    {
      "fid": 1,
      "name": "targetUserMids",
      "list": 11
    }
  ],
  "GetMappedProfileIdsResponse": [
    {
      "fid": 1,
      "name": "mappings",
      "map": 11,
      "key": 11
    }
  ],
  "I80_C26415o": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "I80_C26416p": [
    {
      "fid": 1,
      "name": "maskedEmail",
      "type": 11
    }
  ],
  "GetMaskedEmailResponse": [
    {
      "fid": 1,
      "name": "maskedEmail",
      "type": 11
    }
  ],
  "GetMessageReactionsRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "messageId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "type",
      "struct": "MessageReactionType"
    },
    {
      "fid": 4,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 5,
      "name": "limit",
      "type": 8
    },
    {
      "fid": 6,
      "name": "threadMid",
      "type": 11
    }
  ],
  "GetMessageReactionsResponse": [
    {
      "fid": 1,
      "name": "reactions",
      "list": "SquareMessageReaction"
    },
    {
      "fid": 2,
      "name": "status",
      "struct": "SquareMessageReactionStatus"
    },
    {
      "fid": 3,
      "name": "continuationToken",
      "type": 11
    }
  ],
  "GetModuleLayoutV4Request": [
    {
      "fid": 2,
      "name": "etag",
      "type": 11
    }
  ],
  "GetModulesRequestV2": [
    {
      "fid": 1,
      "name": "etag",
      "type": 11
    },
    {
      "fid": 2,
      "name": "deviceAdId",
      "type": 11
    }
  ],
  "GetModulesRequestV3": [
    {
      "fid": 1,
      "name": "etag",
      "type": 11
    },
    {
      "fid": 2,
      "name": "tabIdentifier",
      "struct": "NZ0_EnumC12169g1"
    },
    {
      "fid": 3,
      "name": "deviceAdId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "agreedWithTargetingAdByMid",
      "type": 2
    }
  ],
  "GetModulesV4WithStatusRequest": [
    {
      "fid": 1,
      "name": "etag",
      "type": 11
    },
    {
      "fid": 2,
      "name": "subTabId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "deviceAdId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "agreedWithTargetingAdByMid",
      "type": 2
    },
    {
      "fid": 5,
      "name": "deviceId",
      "type": 11
    }
  ],
  "GetMusicSubscriptionStatusResponse": [
    {
      "fid": 1,
      "name": "validUntil",
      "type": 10
    },
    {
      "fid": 2,
      "name": "expired",
      "type": 2
    },
    {
      "fid": 3,
      "name": "isStickersPremiumEnabled",
      "type": 2
    }
  ],
  "GetMyAssetInformationV2Request": [
    {
      "fid": 1,
      "name": "refresh",
      "type": 2
    }
  ],
  "GetMyAssetInformationV2Response": [
    {
      "fid": 1,
      "name": "headerInfo",
      "struct": "HeaderInfo"
    },
    {
      "fid": 2,
      "name": "assetServiceInfos",
      "list": "AssetServiceInfo"
    },
    {
      "fid": 3,
      "name": "serviceDisclaimerInfo",
      "struct": "ServiceDisclaimerInfo"
    },
    {
      "fid": 4,
      "name": "pointInfo",
      "struct": "PointInfo"
    },
    {
      "fid": 5,
      "name": "linkRewardInfo",
      "struct": "LinkRewardInfo"
    },
    {
      "fid": 6,
      "name": "pocketMoneyInfo",
      "struct": "PocketMoneyInfo"
    },
    {
      "fid": 7,
      "name": "scoreInfo",
      "struct": "ScoreInfo"
    },
    {
      "fid": 8,
      "name": "timestamp",
      "type": 10
    }
  ],
  "GetMyChatappsRequest": [
    {
      "fid": 1,
      "name": "language",
      "type": 11
    },
    {
      "fid": 2,
      "name": "continuationToken",
      "type": 11
    }
  ],
  "GetMyChatappsResponse": [
    {
      "fid": 1,
      "name": "apps",
      "list": "MyChatapp"
    },
    {
      "fid": 2,
      "name": "continuationToken",
      "type": 11
    }
  ],
  "GetMyDashboardRequest": [
    {
      "fid": 1,
      "name": "tabIdentifier",
      "struct": "NZ0_EnumC12169g1"
    }
  ],
  "GetMyDashboardResponse": [
    {
      "fid": 1,
      "name": "responseStatus",
      "struct": "NZ0_W0"
    },
    {
      "fid": 2,
      "name": "messages",
      "list": "MyDashboardItem"
    },
    {
      "fid": 3,
      "name": "cacheTimeSec",
      "type": 8
    },
    {
      "fid": 4,
      "name": "cautionText",
      "type": 11
    }
  ],
  "GetNoteStatusRequest": [
    {
      "fid": 2,
      "name": "squareMid",
      "type": 11
    }
  ],
  "GetNoteStatusResponse": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "status",
      "struct": "NoteStatus"
    }
  ],
  "GetNotificationSettingsRequest": [
    {
      "fid": 1,
      "name": "chatMids",
      "set": 11
    },
    {
      "fid": 2,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "GetNotificationSettingsResponse": [
    {
      "fid": 1,
      "name": "notificationSettingEntries",
      "map": "NotificationSettingEntry",
      "key": 11
    }
  ],
  "I80_C26417q": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "GetPasswordHashingParametersForPwdRegRequest": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "GetPasswordHashingParametersForPwdRegResponse": [
    {
      "fid": 1,
      "name": "params",
      "struct": "PasswordHashingParameters"
    },
    {
      "fid": 2,
      "name": "passwordValidationRule",
      "list": "PasswordValidationRule"
    }
  ],
  "I80_C26418r": [
    {
      "fid": 1,
      "name": "params",
      "struct": "PasswordHashingParameters"
    },
    {
      "fid": 2,
      "name": "passwordValidationRule",
      "list": "PasswordValidationRule"
    }
  ],
  "GetPasswordHashingParametersForPwdVerifRequest": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "accountIdentifier",
      "struct": "AccountIdentifier"
    }
  ],
  "I80_C26419s": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "GetPasswordHashingParametersForPwdVerifResponse": [
    {
      "fid": 1,
      "name": "isV1HashRequired",
      "type": 2
    },
    {
      "fid": 2,
      "name": "v1HashParams",
      "struct": "V1PasswordHashingParameters"
    },
    {
      "fid": 3,
      "name": "hashParams",
      "struct": "PasswordHashingParameters"
    }
  ],
  "I80_C26420t": [
    {
      "fid": 1,
      "name": "isV1HashRequired",
      "type": 2
    },
    {
      "fid": 2,
      "name": "v1HashParams",
      "struct": "V1PasswordHashingParameters"
    },
    {
      "fid": 3,
      "name": "hashParams",
      "struct": "PasswordHashingParameters"
    }
  ],
  "GetPasswordHashingParametersRequest": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    }
  ],
  "GetPasswordHashingParametersResponse": [
    {
      "fid": 1,
      "name": "hmacKey",
      "type": 11
    },
    {
      "fid": 2,
      "name": "scryptParams",
      "struct": "ScryptParams"
    },
    {
      "fid": 3,
      "name": "passwordValidationRule",
      "list": "PasswordValidationRule"
    }
  ],
  "GetPhoneVerifMethodForRegistrationRequest": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "device",
      "struct": "Device"
    },
    {
      "fid": 3,
      "name": "userPhoneNumber",
      "struct": "UserPhoneNumber"
    }
  ],
  "GetPhoneVerifMethodForRegistrationResponse": [
    {
      "fid": 1,
      "name": "availableMethods",
      "list": 8
    },
    {
      "fid": 2,
      "name": "prettifiedPhoneNumber",
      "type": 11
    }
  ],
  "GetPhoneVerifMethodV2Request": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "device",
      "struct": "Device"
    },
    {
      "fid": 3,
      "name": "userPhoneNumber",
      "struct": "UserPhoneNumber"
    }
  ],
  "I80_C26421u": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "userPhoneNumber",
      "struct": "UserPhoneNumber"
    }
  ],
  "I80_C26422v": [
    {
      "fid": 1,
      "name": "availableMethods",
      "list": 8
    },
    {
      "fid": 3,
      "name": "prettifiedPhoneNumber",
      "type": 11
    }
  ],
  "GetPhoneVerifMethodV2Response": [
    {
      "fid": 1,
      "name": "availableMethods",
      "list": 8
    },
    {
      "fid": 3,
      "name": "prettifiedPhoneNumber",
      "type": 11
    }
  ],
  "GetPhotoboothBalanceResponse": [
    {
      "fid": 1,
      "name": "availableTickets",
      "type": 8
    },
    {
      "fid": 2,
      "name": "nextTicketAvailableAt",
      "type": 10
    }
  ],
  "GetPopularKeywordsResponse": [
    {
      "fid": 1,
      "name": "popularKeywords",
      "list": "PopularKeyword"
    },
    {
      "fid": 2,
      "name": "expiredAt",
      "type": 10
    }
  ],
  "GetPredefinedScenarioSetsRequest": [
    {
      "fid": 1,
      "name": "deviceIds",
      "list": 11
    }
  ],
  "GetPredefinedScenarioSetsResponse": [
    {
      "fid": 1,
      "name": "scenarioSets",
      "map": "ScenarioSet",
      "key": 11
    }
  ],
  "GetPremiumContextForMigResponse": [
    {
      "fid": 1,
      "name": "isPremiumActive",
      "type": 2
    },
    {
      "fid": 2,
      "name": "isPremiumBackupActive",
      "type": 2
    },
    {
      "fid": 3,
      "name": "premiumType",
      "struct": "T70_L"
    },
    {
      "fid": 4,
      "name": "availablePremiumTypes",
      "list": 8
    }
  ],
  "GetPremiumDataRetentionResponse": [
    {
      "fid": 1,
      "name": "dataRetentions",
      "list": "DataRetention"
    },
    {
      "fid": 2,
      "name": "noSyncUntil",
      "type": 10
    }
  ],
  "GetPremiumStatusResponse": [
    {
      "fid": 1,
      "name": "active",
      "type": 2
    },
    {
      "fid": 2,
      "name": "validUntil",
      "type": 10
    },
    {
      "fid": 3,
      "name": "updatedTime",
      "type": 10
    },
    {
      "fid": 4,
      "name": "freeTrialUsed",
      "type": 2
    },
    {
      "fid": 5,
      "name": "willExpire",
      "type": 2
    },
    {
      "fid": 6,
      "name": "newToYahooShopping",
      "type": 2
    },
    {
      "fid": 8,
      "name": "idLinked",
      "type": 2
    },
    {
      "fid": 9,
      "name": "onFreeTrial",
      "type": 2
    },
    {
      "fid": 10,
      "name": "duplicated",
      "type": 2
    },
    {
      "fid": 11,
      "name": "planType",
      "struct": "fN0_p"
    },
    {
      "fid": 12,
      "name": "noSyncUntil",
      "type": 10
    },
    {
      "fid": 13,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 14,
      "name": "currency",
      "type": 11
    },
    {
      "fid": 15,
      "name": "price",
      "type": 11
    },
    {
      "fid": 16,
      "name": "status",
      "struct": "fN0_H"
    },
    {
      "fid": 17,
      "name": "invitedByFriend",
      "type": 2
    },
    {
      "fid": 18,
      "name": "canceledProviders",
      "list": 8
    },
    {
      "fid": 19,
      "name": "nextPaymentTime",
      "type": 10
    }
  ],
  "GetPreviousMessagesV2Request": [
    {
      "fid": 1,
      "name": "messageBoxId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "endMessageId",
      "struct": "MessageBoxV2MessageId"
    },
    {
      "fid": 3,
      "name": "messagesCount",
      "type": 8
    },
    {
      "fid": 4,
      "name": "withReadCount",
      "type": 2
    },
    {
      "fid": 5,
      "name": "receivedOnly",
      "type": 2
    }
  ],
  "GetProductLatestVersionForUserRequest": [
    {
      "fid": 1,
      "name": "productType",
      "struct": "Ob1_O0"
    },
    {
      "fid": 2,
      "name": "productId",
      "type": 11
    }
  ],
  "GetProductLatestVersionForUserResponse": [
    {
      "fid": 1,
      "name": "latestVersion",
      "type": 10
    },
    {
      "fid": 2,
      "name": "latestVersionString",
      "type": 11
    }
  ],
  "GetProductRequest": [
    {
      "fid": 1,
      "name": "productType",
      "struct": "Ob1_O0"
    },
    {
      "fid": 2,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "carrierCode",
      "type": 11
    },
    {
      "fid": 4,
      "name": "saveBrowsingHistory",
      "type": 2
    }
  ],
  "GetProductResponse": [
    {
      "fid": 1,
      "name": "productDetail",
      "struct": "ProductDetail"
    }
  ],
  "GetProfilesRequest": [
    {
      "fid": 1,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "GetProfilesResponse": [
    {
      "fid": 1,
      "name": "profiles",
      "list": "Profile"
    }
  ],
  "GetPublishedMembershipsRequest": [
    {
      "fid": 1,
      "name": "basicSearchId",
      "type": 11
    }
  ],
  "GetQuickMenuResponse": [
    {
      "fid": 1,
      "name": "pointInfo",
      "struct": "QuickMenuPointInfo"
    },
    {
      "fid": 2,
      "name": "couponInfo",
      "struct": "QuickMenuCouponInfo"
    },
    {
      "fid": 3,
      "name": "myCardInfo",
      "struct": "QuickMenuMyCardInfo"
    }
  ],
  "GetRecommendationDetailResponse": [
    {
      "fid": 1,
      "name": "targetUserMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "recommendationOrNot",
      "struct": "LN0_y0"
    }
  ],
  "GetRecommendationDetailTarget": [
    {
      "fid": 1,
      "name": "targetUserMid",
      "type": 11
    }
  ],
  "GetRecommendationDetailsRequest": [
    {
      "fid": 1,
      "name": "targetUsers",
      "list": "GetRecommendationDetailTarget"
    },
    {
      "fid": 2,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "GetRecommendationDetailsResponse": [
    {
      "fid": 1,
      "name": "responses",
      "list": "GetRecommendationDetailResponse"
    }
  ],
  "GetRecommendationResponse": [
    {
      "fid": 1,
      "name": "results",
      "list": "ProductSearchSummary"
    },
    {
      "fid": 2,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "totalSize",
      "type": 10
    }
  ],
  "GetRepairElementsRequest": [
    {
      "fid": 1,
      "name": "profile",
      "type": 2
    },
    {
      "fid": 2,
      "name": "settings",
      "type": 2
    },
    {
      "fid": 3,
      "name": "configurations",
      "struct": "ConfigurationsParams"
    },
    {
      "fid": 4,
      "name": "numLocalJoinedGroups",
      "type": 8
    },
    {
      "fid": 5,
      "name": "numLocalInvitedGroups",
      "type": 8
    },
    {
      "fid": 6,
      "name": "numLocalFriends",
      "type": 8
    },
    {
      "fid": 7,
      "name": "numLocalRecommendations",
      "type": 8
    },
    {
      "fid": 8,
      "name": "numLocalBlockedFriends",
      "type": 8
    },
    {
      "fid": 9,
      "name": "numLocalBlockedRecommendations",
      "type": 8
    },
    {
      "fid": 10,
      "name": "localGroupMembers",
      "map": "RepairGroupMembers",
      "key": 11
    },
    {
      "fid": 11,
      "name": "syncReason",
      "struct": "Pb1_V7"
    },
    {
      "fid": 12,
      "name": "localProfileMappings",
      "map": 8,
      "key": 11
    }
  ],
  "GetRepairElementsResponse": [
    {
      "fid": 1,
      "name": "profile",
      "struct": "RepairTriggerProfileElement"
    },
    {
      "fid": 2,
      "name": "settings",
      "struct": "RepairTriggerSettingsElement"
    },
    {
      "fid": 3,
      "name": "configurations",
      "struct": "RepairTriggerConfigurationsElement"
    },
    {
      "fid": 4,
      "name": "numJoinedGroups",
      "struct": "RepairTriggerNumElement"
    },
    {
      "fid": 5,
      "name": "numInvitedGroups",
      "struct": "RepairTriggerNumElement"
    },
    {
      "fid": 6,
      "name": "numFriends",
      "struct": "RepairTriggerNumElement"
    },
    {
      "fid": 7,
      "name": "numRecommendations",
      "struct": "RepairTriggerNumElement"
    },
    {
      "fid": 8,
      "name": "numBlockedFriends",
      "struct": "RepairTriggerNumElement"
    },
    {
      "fid": 9,
      "name": "numBlockedRecommendations",
      "struct": "RepairTriggerNumElement"
    },
    {
      "fid": 10,
      "name": "groupMembers",
      "struct": "RepairTriggerGroupMembersElement"
    },
    {
      "fid": 11,
      "name": "profileMappings",
      "struct": "RepairTriggerProfileMappingListElement"
    }
  ],
  "GetRequest": [
    {
      "fid": 1,
      "name": "keyName",
      "type": 11
    },
    {
      "fid": 2,
      "name": "ns",
      "struct": "t80_h"
    }
  ],
  "GetResourceFileReponse": [
    {
      "fid": 1,
      "name": "tagClusterFileResponse",
      "struct": "GetTagClusterFileResponse"
    }
  ],
  "GetResourceFileRequest": [
    {
      "fid": 1,
      "name": "tagClusterFileRequest",
      "struct": "Ob1_C12642m0"
    },
    {
      "fid": 2,
      "name": "staging",
      "type": 2
    }
  ],
  "GetResponse": [
    {
      "fid": 1,
      "name": "value",
      "struct": "SettingValue"
    }
  ],
  "GetResponseStatusRequest": [
    {
      "fid": 1,
      "name": "botMid",
      "type": 11
    }
  ],
  "GetResponseStatusResponse": [
    {
      "fid": 1,
      "name": "displayedResponseStatus",
      "struct": "jf_EnumC27712a"
    }
  ],
  "GetSCCRequest": [
    {
      "fid": 1,
      "name": "basicSearchId",
      "type": 11
    }
  ],
  "I80_C26423w": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "I80_C26424x": [
    {
      "fid": 1,
      "name": "encryptionKey",
      "struct": "I80_y0"
    }
  ],
  "GetSeasonalEffectsResponse": [
    {
      "fid": 1,
      "name": "effects",
      "list": "HomeEffect"
    }
  ],
  "GetSecondAuthMethodResponse": [
    {
      "fid": 1,
      "name": "secondAuthMethod",
      "struct": "T70_e1"
    }
  ],
  "GetServiceShortcutMenuResponse": [
    {
      "fid": 1,
      "name": "revision",
      "type": 11
    },
    {
      "fid": 2,
      "name": "refreshTimeSec",
      "type": 8
    },
    {
      "fid": 3,
      "name": "expandable",
      "type": 2
    },
    {
      "fid": 4,
      "name": "serviceShortcuts",
      "list": "ServiceShortcut"
    },
    {
      "fid": 5,
      "name": "menuDescription",
      "type": 11
    },
    {
      "fid": 6,
      "name": "numberOfItemsInRow",
      "type": 8
    }
  ],
  "GetSessionContentBeforeMigCompletionResponse": [
    {
      "fid": 1,
      "name": "appTypeDifferentFromPrevDevice",
      "type": 2
    },
    {
      "fid": 2,
      "name": "e2eeKeyBackupServiceConfig",
      "type": 2
    },
    {
      "fid": 4,
      "name": "e2eeKeyBackupPeriodServiceConfig",
      "type": 8
    }
  ],
  "GetSmartChannelRecommendationsRequest": [
    {
      "fid": 1,
      "name": "maxResults",
      "type": 8
    },
    {
      "fid": 2,
      "name": "placement",
      "type": 11
    },
    {
      "fid": 3,
      "name": "testMode",
      "type": 2
    }
  ],
  "GetSmartChannelRecommendationsResponse": [
    {
      "fid": 1,
      "name": "smartChannelRecommendations",
      "list": "SmartChannelRecommendation"
    },
    {
      "fid": 2,
      "name": "minInterval",
      "type": 8
    },
    {
      "fid": 3,
      "name": "requestId",
      "type": 11
    }
  ],
  "GetSquareAuthoritiesRequest": [
    {
      "fid": 2,
      "name": "squareMids",
      "set": 11
    }
  ],
  "GetSquareAuthoritiesResponse": [
    {
      "fid": 1,
      "name": "authorities",
      "map": "SquareAuthority",
      "key": 11
    }
  ],
  "GetSquareAuthorityRequest": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    }
  ],
  "GetSquareAuthorityResponse": [
    {
      "fid": 1,
      "name": "authority",
      "struct": "SquareAuthority"
    }
  ],
  "GetSquareBotRequest": [
    {
      "fid": 1,
      "name": "botMid",
      "type": 11
    }
  ],
  "GetSquareBotResponse": [
    {
      "fid": 1,
      "name": "squareBot",
      "struct": "SquareBot"
    }
  ],
  "GetSquareCategoriesResponse": [
    {
      "fid": 1,
      "name": "categoryList",
      "list": "Category"
    }
  ],
  "GetSquareChatAnnouncementsRequest": [
    {
      "fid": 2,
      "name": "squareChatMid",
      "type": 11
    }
  ],
  "GetSquareChatAnnouncementsResponse": [
    {
      "fid": 1,
      "name": "announcements",
      "list": "SquareChatAnnouncement"
    }
  ],
  "GetSquareChatEmidRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    }
  ],
  "GetSquareChatEmidResponse": [
    {
      "fid": 1,
      "name": "squareChatEmid",
      "type": 11
    }
  ],
  "GetSquareChatFeatureSetRequest": [
    {
      "fid": 2,
      "name": "squareChatMid",
      "type": 11
    }
  ],
  "GetSquareChatFeatureSetResponse": [
    {
      "fid": 1,
      "name": "squareChatFeatureSet",
      "struct": "SquareChatFeatureSet"
    }
  ],
  "GetSquareChatMemberRequest": [
    {
      "fid": 2,
      "name": "squareMemberMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "squareChatMid",
      "type": 11
    }
  ],
  "GetSquareChatMemberResponse": [
    {
      "fid": 1,
      "name": "squareChatMember",
      "struct": "SquareChatMember"
    }
  ],
  "GetSquareChatMembersRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "limit",
      "type": 8
    }
  ],
  "GetSquareChatMembersResponse": [
    {
      "fid": 1,
      "name": "squareChatMembers",
      "list": "SquareMember"
    },
    {
      "fid": 2,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "contentsAttributes",
      "map": 8,
      "key": 11
    }
  ],
  "GetSquareChatRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    }
  ],
  "GetSquareChatResponse": [
    {
      "fid": 1,
      "name": "squareChat",
      "struct": "SquareChat"
    },
    {
      "fid": 2,
      "name": "squareChatMember",
      "struct": "SquareChatMember"
    },
    {
      "fid": 3,
      "name": "squareChatStatus",
      "struct": "SquareChatStatus"
    }
  ],
  "GetSquareChatStatusRequest": [
    {
      "fid": 2,
      "name": "squareChatMid",
      "type": 11
    }
  ],
  "GetSquareChatStatusResponse": [
    {
      "fid": 1,
      "name": "chatStatus",
      "struct": "SquareChatStatus"
    }
  ],
  "GetSquareEmidRequest": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    }
  ],
  "GetSquareEmidResponse": [
    {
      "fid": 1,
      "name": "squareEmid",
      "type": 11
    }
  ],
  "GetSquareFeatureSetRequest": [
    {
      "fid": 2,
      "name": "squareMid",
      "type": 11
    }
  ],
  "GetSquareFeatureSetResponse": [
    {
      "fid": 1,
      "name": "squareFeatureSet",
      "struct": "SquareFeatureSet"
    }
  ],
  "GetSquareInfoByChatMidRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    }
  ],
  "GetSquareInfoByChatMidResponse": [
    {
      "fid": 1,
      "name": "defaultChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "squareDesc",
      "type": 11
    }
  ],
  "GetSquareMemberRelationRequest": [
    {
      "fid": 2,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "targetSquareMemberMid",
      "type": 11
    }
  ],
  "GetSquareMemberRelationResponse": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "targetSquareMemberMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "relation",
      "struct": "SquareMemberRelation"
    }
  ],
  "GetSquareMemberRelationsRequest": [
    {
      "fid": 2,
      "name": "state",
      "struct": "SquareMemberRelationState"
    },
    {
      "fid": 3,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 4,
      "name": "limit",
      "type": 8
    }
  ],
  "GetSquareMemberRelationsResponse": [
    {
      "fid": 1,
      "name": "squareMembers",
      "list": "SquareMember"
    },
    {
      "fid": 2,
      "name": "relations",
      "map": "SquareMemberRelation",
      "key": 11
    },
    {
      "fid": 3,
      "name": "continuationToken",
      "type": 11
    }
  ],
  "GetSquareMemberRequest": [
    {
      "fid": 2,
      "name": "squareMemberMid",
      "type": 11
    }
  ],
  "GetSquareMemberResponse": [
    {
      "fid": 1,
      "name": "squareMember",
      "struct": "SquareMember"
    },
    {
      "fid": 2,
      "name": "relation",
      "struct": "SquareMemberRelation"
    },
    {
      "fid": 3,
      "name": "oneOnOneChatMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "contentsAttribute",
      "struct": "ContentsAttribute"
    }
  ],
  "GetSquareMembersBySquareRequest": [
    {
      "fid": 2,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "squareMemberMids",
      "set": 11
    }
  ],
  "GetSquareMembersBySquareResponse": [
    {
      "fid": 1,
      "name": "members",
      "list": "SquareMember"
    },
    {
      "fid": 2,
      "name": "contentsAttributes",
      "map": 8,
      "key": 11
    }
  ],
  "GetSquareMembersRequest": [
    {
      "fid": 2,
      "name": "mids",
      "set": 11
    }
  ],
  "GetSquareMembersResponse": [
    {
      "fid": 1,
      "name": "members",
      "map": "SquareMember",
      "key": 11
    }
  ],
  "GetSquareRequest": [
    {
      "fid": 2,
      "name": "mid",
      "type": 11
    }
  ],
  "GetSquareResponse": [
    {
      "fid": 1,
      "name": "square",
      "struct": "Square"
    },
    {
      "fid": 2,
      "name": "myMembership",
      "struct": "SquareMember"
    },
    {
      "fid": 3,
      "name": "squareAuthority",
      "struct": "SquareAuthority"
    },
    {
      "fid": 4,
      "name": "squareStatus",
      "struct": "SquareStatus"
    },
    {
      "fid": 5,
      "name": "squareFeatureSet",
      "struct": "SquareFeatureSet"
    },
    {
      "fid": 6,
      "name": "noteStatus",
      "struct": "NoteStatus"
    },
    {
      "fid": 7,
      "name": "extraInfo",
      "struct": "SquareExtraInfo"
    }
  ],
  "GetSquareStatusRequest": [
    {
      "fid": 2,
      "name": "squareMid",
      "type": 11
    }
  ],
  "GetSquareStatusResponse": [
    {
      "fid": 1,
      "name": "squareStatus",
      "struct": "SquareStatus"
    }
  ],
  "GetSquareThreadMidRequest": [
    {
      "fid": 1,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "messageId",
      "type": 11
    }
  ],
  "GetSquareThreadMidResponse": [
    {
      "fid": 1,
      "name": "threadMid",
      "type": 11
    }
  ],
  "GetSquareThreadRequest": [
    {
      "fid": 1,
      "name": "threadMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "includeRootMessage",
      "type": 2
    }
  ],
  "GetSquareThreadResponse": [
    {
      "fid": 1,
      "name": "squareThread",
      "struct": "SquareThread"
    },
    {
      "fid": 2,
      "name": "myThreadMember",
      "struct": "SquareThreadMember"
    },
    {
      "fid": 3,
      "name": "rootMessage",
      "struct": "SquareMessage"
    }
  ],
  "GetStudentInformationResponse": [
    {
      "fid": 1,
      "name": "studentInformation",
      "struct": "StudentInformation"
    },
    {
      "fid": 2,
      "name": "isValid",
      "type": 2
    }
  ],
  "GetSubscriptionPlansRequest": [
    {
      "fid": 1,
      "name": "subscriptionService",
      "struct": "Ob1_S1"
    },
    {
      "fid": 2,
      "name": "storeCode",
      "struct": "Ob1_K1"
    }
  ],
  "GetSubscriptionPlansResponse": [
    {
      "fid": 1,
      "name": "plans",
      "list": "SubscriptionPlan"
    }
  ],
  "GetSubscriptionStatusRequest": [
    {
      "fid": 1,
      "name": "includeOtherOwnedSubscriptions",
      "type": 2
    }
  ],
  "GetSubscriptionStatusResponse": [
    {
      "fid": 1,
      "name": "subscriptions",
      "map": "SubscriptionStatus",
      "key": 8
    },
    {
      "fid": 2,
      "name": "hasValidStudentInformation",
      "type": 2
    },
    {
      "fid": 3,
      "name": "otherOwnedSubscriptions",
      "key": 8
    }
  ],
  "GetSuggestDictionarySettingResponse": [
    {
      "fid": 1,
      "name": "results",
      "list": "SuggestDictionarySetting"
    }
  ],
  "GetSuggestResourcesV2Request": [
    {
      "fid": 1,
      "name": "productType",
      "struct": "Ob1_O0"
    },
    {
      "fid": 2,
      "name": "productIds",
      "list": 11
    }
  ],
  "GetSuggestResourcesV2Response": [
    {
      "fid": 1,
      "name": "suggestResources",
      "map": "SuggestResource",
      "key": 11
    }
  ],
  "GetSuggestTrialRecommendationResponse": [
    {
      "fid": 1,
      "name": "recommendations",
      "list": "SuggestTrialRecommendation"
    },
    {
      "fid": 2,
      "name": "expiresAt",
      "type": 10
    },
    {
      "fid": 3,
      "name": "recommendationGrouping",
      "type": 11
    }
  ],
  "GetTagClusterFileResponse": [
    {
      "fid": 1,
      "name": "path",
      "type": 11
    },
    {
      "fid": 2,
      "name": "updatedTimeMillis",
      "type": 10
    }
  ],
  "GetTaiwanBankBalanceRequest": [
    {
      "fid": 1,
      "name": "accessToken",
      "type": 11
    },
    {
      "fid": 2,
      "name": "authorizationCode",
      "type": 11
    },
    {
      "fid": 3,
      "name": "codeVerifier",
      "type": 11
    }
  ],
  "GetTaiwanBankBalanceResponse": [
    {
      "fid": 1,
      "name": "maintenaceText",
      "type": 11
    },
    {
      "fid": 2,
      "name": "lineBankPromotions",
      "list": "LineBankPromotion"
    },
    {
      "fid": 3,
      "name": "taiwanBankBalanceInfo",
      "struct": "TaiwanBankBalanceInfo"
    },
    {
      "fid": 4,
      "name": "lineBankShortcutInfo",
      "struct": "LineBankShortcutInfo"
    },
    {
      "fid": 5,
      "name": "loginParameters",
      "struct": "TaiwanBankLoginParameters"
    }
  ],
  "GetTargetProfileResponse": [
    {
      "fid": 1,
      "name": "targetUserMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "userType",
      "struct": "LN0_X0"
    },
    {
      "fid": 3,
      "name": "targetProfileDetail",
      "struct": "TargetProfileDetail"
    }
  ],
  "GetTargetProfileTarget": [
    {
      "fid": 1,
      "name": "targetUserMid",
      "type": 11
    }
  ],
  "GetTargetProfilesRequest": [
    {
      "fid": 1,
      "name": "targetUsers",
      "list": "GetTargetProfileTarget"
    },
    {
      "fid": 2,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "GetTargetProfilesResponse": [
    {
      "fid": 1,
      "name": "responses",
      "list": "GetTargetProfileResponse"
    }
  ],
  "GetTargetingPopupResponse": [
    {
      "fid": 1,
      "name": "targetingPopups",
      "list": "PopupProperty"
    },
    {
      "fid": 2,
      "name": "intervalTimeSec",
      "type": 8
    }
  ],
  "GetThaiBankBalanceRequest": [
    {
      "fid": 1,
      "name": "deviceId",
      "type": 11
    }
  ],
  "GetThaiBankBalanceResponse": [
    {
      "fid": 1,
      "name": "maintenaceText",
      "type": 11
    },
    {
      "fid": 2,
      "name": "thaiBankBalanceInfo",
      "struct": "ThaiBankBalanceInfo"
    },
    {
      "fid": 3,
      "name": "lineBankPromotions",
      "list": "LineBankPromotion"
    },
    {
      "fid": 4,
      "name": "lineBankShortcutInfo",
      "struct": "LineBankShortcutInfo"
    }
  ],
  "GetTotalCoinBalanceRequest": [
    {
      "fid": 1,
      "name": "appStoreCode",
      "struct": "jO0_EnumC27533B"
    }
  ],
  "GetTotalCoinBalanceResponse": [
    {
      "fid": 1,
      "name": "totalBalance",
      "type": 11
    },
    {
      "fid": 2,
      "name": "paidCoinBalance",
      "type": 11
    },
    {
      "fid": 3,
      "name": "freeCoinBalance",
      "type": 11
    },
    {
      "fid": 4,
      "name": "rewardCoinBalance",
      "type": 11
    },
    {
      "fid": 5,
      "name": "expectedAutoExchangedCoinBalance",
      "type": 11
    }
  ],
  "GetUserCollectionsRequest": [
    {
      "fid": 1,
      "name": "lastUpdatedTimeMillis",
      "type": 10
    },
    {
      "fid": 2,
      "name": "includeSummary",
      "type": 2
    },
    {
      "fid": 3,
      "name": "productType",
      "struct": "Ob1_O0"
    }
  ],
  "GetUserCollectionsResponse": [
    {
      "fid": 1,
      "name": "collections",
      "list": "Collection"
    },
    {
      "fid": 2,
      "name": "updated",
      "type": 2
    }
  ],
  "GetUserProfileResponse": [
    {
      "fid": 1,
      "name": "userProfile",
      "struct": "UserProfile"
    }
  ],
  "GetUserSettingsRequest": [
    {
      "fid": 1,
      "name": "requestedAttrs",
      "set": "SquareUserSettingsAttribute"
    }
  ],
  "GetUserSettingsResponse": [
    {
      "fid": 1,
      "name": "requestedAttrs",
      "set": 8
    },
    {
      "fid": 2,
      "name": "userSettings",
      "struct": "SquareUserSettings"
    }
  ],
  "GetUserVectorRequest": [
    {
      "fid": 1,
      "name": "majorVersion",
      "type": 11
    }
  ],
  "GetUserVectorResponse": [
    {
      "fid": 1,
      "name": "userVector",
      "list": 4
    },
    {
      "fid": 2,
      "name": "majorVersion",
      "type": 11
    },
    {
      "fid": 3,
      "name": "minorVersion",
      "type": 11
    }
  ],
  "GetUsersMappedByProfileRequest": [
    {
      "fid": 1,
      "name": "profileId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "GetUsersMappedByProfileResponse": [
    {
      "fid": 1,
      "name": "mappedMids",
      "list": 11
    }
  ],
  "GlobalEvent": [
    {
      "fid": 1,
      "name": "type",
      "struct": "Pb1_EnumC13209v5"
    },
    {
      "fid": 2,
      "name": "minDelayInMinutes",
      "type": 8
    },
    {
      "fid": 3,
      "name": "maxDelayInMinutes",
      "type": 8
    },
    {
      "fid": 4,
      "name": "createTimeMillis",
      "type": 10
    },
    {
      "fid": 5,
      "name": "maxDelayHardLimit",
      "type": 2
    }
  ],
  "GroupCall": [
    {
      "fid": 1,
      "name": "online",
      "type": 2
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "hostMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "memberMids",
      "list": 11
    },
    {
      "fid": 5,
      "name": "started",
      "type": 10
    },
    {
      "fid": 6,
      "name": "mediaType",
      "struct": "Pb1_EnumC13237x5"
    },
    {
      "fid": 7,
      "name": "protocol",
      "struct": "Pb1_EnumC13251y5"
    },
    {
      "fid": 8,
      "name": "maxAllowableMembers",
      "type": 8
    }
  ],
  "GroupCallRoute": [
    {
      "fid": 1,
      "name": "token",
      "type": 11
    },
    {
      "fid": 2,
      "name": "cscf",
      "struct": "CallHost"
    },
    {
      "fid": 3,
      "name": "mix",
      "struct": "CallHost"
    },
    {
      "fid": 4,
      "name": "hostMid",
      "type": 11
    },
    {
      "fid": 5,
      "name": "capabilities",
      "list": 11
    },
    {
      "fid": 6,
      "name": "proto",
      "struct": "Pb1_EnumC13251y5"
    },
    {
      "fid": 7,
      "name": "voipAddress",
      "type": 11
    },
    {
      "fid": 8,
      "name": "voipUdpPort",
      "type": 8
    },
    {
      "fid": 9,
      "name": "voipTcpPort",
      "type": 8
    },
    {
      "fid": 10,
      "name": "fromZone",
      "type": 11
    },
    {
      "fid": 11,
      "name": "commParam",
      "type": 11
    },
    {
      "fid": 12,
      "name": "polarisAddress",
      "type": 11
    },
    {
      "fid": 13,
      "name": "polarisUdpPort",
      "type": 8
    },
    {
      "fid": 14,
      "name": "polarisZone",
      "type": 11
    },
    {
      "fid": 15,
      "name": "orionAddress",
      "type": 11
    },
    {
      "fid": 16,
      "name": "voipAddress6",
      "type": 11
    },
    {
      "fid": 17,
      "name": "stnpk",
      "type": 11
    }
  ],
  "GroupCallUrl": [
    {
      "fid": 1,
      "name": "urlId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "title",
      "type": 11
    },
    {
      "fid": 3,
      "name": "createdTimeMillis",
      "type": 10
    }
  ],
  "GroupExtra": [
    {
      "fid": 1,
      "name": "creator",
      "type": 11
    },
    {
      "fid": 2,
      "name": "preventedJoinByTicket",
      "type": 2
    },
    {
      "fid": 3,
      "name": "invitationTicket",
      "type": 11
    },
    {
      "fid": 4,
      "name": "memberMids",
      "map": 10,
      "key": 11
    },
    {
      "fid": 5,
      "name": "inviteeMids",
      "map": 10,
      "key": 11
    },
    {
      "fid": 6,
      "name": "addFriendDisabled",
      "type": 2
    },
    {
      "fid": 7,
      "name": "ticketDisabled",
      "type": 2
    },
    {
      "fid": 8,
      "name": "autoName",
      "type": 2
    }
  ],
  "HeaderContent": [
    {
      "fid": 1,
      "name": "iconUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "iconAltText",
      "type": 11
    },
    {
      "fid": 3,
      "name": "linkUrl",
      "type": 11
    },
    {
      "fid": 4,
      "name": "title",
      "type": 11
    },
    {
      "fid": 5,
      "name": "animationImageUrl",
      "type": 11
    },
    {
      "fid": 6,
      "name": "tooltipText",
      "type": 11
    }
  ],
  "HeaderInfo": [
    {
      "fid": 1,
      "name": "totalBalance",
      "type": 11
    },
    {
      "fid": 2,
      "name": "currencyProperty",
      "struct": "CurrencyProperty"
    }
  ],
  "HideSquareMemberContentsRequest": [
    {
      "fid": 1,
      "name": "squareMemberMid",
      "type": 11
    }
  ],
  "HomeCategory": [
    {
      "fid": 1,
      "name": "id",
      "type": 8
    },
    {
      "fid": 2,
      "name": "title",
      "type": 11
    },
    {
      "fid": 3,
      "name": "ids",
      "list": 8
    }
  ],
  "HomeEffect": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "resourceUrl",
      "type": 11
    },
    {
      "fid": 3,
      "name": "checksum",
      "type": 11
    },
    {
      "fid": 4,
      "name": "startDate",
      "type": 10
    },
    {
      "fid": 5,
      "name": "endDate",
      "type": 10
    }
  ],
  "HomeService": [
    {
      "fid": 1,
      "name": "id",
      "type": 8
    },
    {
      "fid": 2,
      "name": "title",
      "type": 11
    },
    {
      "fid": 3,
      "name": "serviceEntryUrl",
      "type": 11
    },
    {
      "fid": 4,
      "name": "storeUrl",
      "type": 11
    },
    {
      "fid": 5,
      "name": "iconUrl",
      "type": 11
    },
    {
      "fid": 6,
      "name": "pictogramIconUrl",
      "type": 11
    },
    {
      "fid": 7,
      "name": "badgeUpdatedTimeMillis",
      "type": 10
    },
    {
      "fid": 8,
      "name": "badgeType",
      "struct": "Eg_EnumC8927a"
    },
    {
      "fid": 9,
      "name": "serviceDescription",
      "type": 11
    },
    {
      "fid": 10,
      "name": "iconThemeDisabled",
      "type": 2
    }
  ],
  "HomeTabPlacement": [
    {
      "fid": 1,
      "name": "placementTemplateId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "placementService",
      "type": 11
    },
    {
      "fid": 3,
      "name": "placementLogic",
      "type": 11
    },
    {
      "fid": 4,
      "name": "contents",
      "type": 11
    },
    {
      "fid": 5,
      "name": "crsPlacementImpressionTrackingUrl",
      "type": 11
    }
  ],
  "Icon": [
    {
      "fid": 1,
      "name": "darkModeUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "lightModeUrl",
      "type": 11
    }
  ],
  "IconDisplayRule": [
    {
      "fid": 1,
      "name": "rule",
      "type": 11
    },
    {
      "fid": 2,
      "name": "offset",
      "type": 8
    }
  ],
  "IdentifierConfirmationRequest": [
    {
      "fid": 1,
      "name": "metaData",
      "map": 11,
      "key": 11
    },
    {
      "fid": 2,
      "name": "forceRegistration",
      "type": 2
    },
    {
      "fid": 3,
      "name": "verificationCode",
      "type": 11
    }
  ],
  "IdentityCredentialRequest": [
    {
      "fid": 1,
      "name": "metaData",
      "map": 11,
      "key": 11
    },
    {
      "fid": 2,
      "name": "identityProvider",
      "struct": "IdentityProvider"
    },
    {
      "fid": 3,
      "name": "cipherKeyId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "cipherText",
      "type": 11
    },
    {
      "fid": 5,
      "name": "confirmationRequest",
      "struct": "IdentifierConfirmationRequest"
    }
  ],
  "IdentityCredentialResponse": [
    {
      "fid": 1,
      "name": "metaData",
      "map": 11,
      "key": 11
    },
    {
      "fid": 2,
      "name": "responseType",
      "struct": "Pb1_F5"
    },
    {
      "fid": 3,
      "name": "confirmationVerifier",
      "type": 11
    },
    {
      "fid": 4,
      "name": "timeoutInSeconds",
      "type": 10
    }
  ],
  "Image": [
    {
      "fid": 1,
      "name": "url",
      "type": 11
    },
    {
      "fid": 2,
      "name": "height",
      "type": 8
    },
    {
      "fid": 3,
      "name": "width",
      "type": 8
    }
  ],
  "ImageTextProperty": [
    {
      "fid": 1,
      "name": "status",
      "struct": "Ob1_EnumC12656r0"
    },
    {
      "fid": 2,
      "name": "plainText",
      "type": 11
    },
    {
      "fid": 3,
      "name": "nameTextMaxCharacterCount",
      "type": 8
    },
    {
      "fid": 4,
      "name": "encryptedText",
      "type": 11
    }
  ],
  "InstantNews": [
    {
      "fid": 1,
      "name": "newsId",
      "type": 10
    },
    {
      "fid": 2,
      "name": "newsService",
      "type": 11
    },
    {
      "fid": 3,
      "name": "ttlMillis",
      "type": 10
    },
    {
      "fid": 4,
      "name": "category",
      "type": 11
    },
    {
      "fid": 5,
      "name": "categoryBgColor",
      "type": 11
    },
    {
      "fid": 6,
      "name": "categoryColor",
      "type": 11
    },
    {
      "fid": 7,
      "name": "title",
      "type": 11
    },
    {
      "fid": 8,
      "name": "url",
      "type": 11
    },
    {
      "fid": 9,
      "name": "image",
      "type": 11
    }
  ],
  "InviteFriendsRequest": [
    {
      "fid": 1,
      "name": "campaignId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "invitees",
      "list": 11
    }
  ],
  "InviteFriendsResponse": [
    {
      "fid": 1,
      "name": "result",
      "struct": "fN0_EnumC24469a"
    }
  ],
  "InviteIntoChatRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "targetUserMids",
      "set": 11
    }
  ],
  "InviteIntoSquareChatRequest": [
    {
      "fid": 1,
      "name": "inviteeMids",
      "list": 11
    },
    {
      "fid": 2,
      "name": "squareChatMid",
      "type": 11
    }
  ],
  "InviteIntoSquareChatResponse": [
    {
      "fid": 1,
      "name": "inviteeMids",
      "list": 11
    }
  ],
  "InviteToChangeRoleRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "targetMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "targetRole",
      "struct": "LiveTalkRole"
    }
  ],
  "InviteToListenRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "targetMid",
      "type": 11
    }
  ],
  "InviteToLiveTalkRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "invitees",
      "list": 11
    }
  ],
  "InviteToSpeakRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "targetMid",
      "type": 11
    }
  ],
  "InviteToSpeakResponse": [
    {
      "fid": 1,
      "name": "inviteRequestId",
      "type": 11
    }
  ],
  "InviteToSquareRequest": [
    {
      "fid": 2,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "invitees",
      "list": 11
    },
    {
      "fid": 4,
      "name": "squareChatMid",
      "type": 11
    }
  ],
  "IpassTokenProperty": [
    {
      "fid": 1,
      "name": "token",
      "type": 11
    },
    {
      "fid": 2,
      "name": "tokenIssuedTimestamp",
      "type": 11
    }
  ],
  "IsProductForCollectionsRequest": [
    {
      "fid": 1,
      "name": "productType",
      "struct": "Ob1_O0"
    },
    {
      "fid": 2,
      "name": "productId",
      "type": 11
    }
  ],
  "IsProductForCollectionsResponse": [
    {
      "fid": 1,
      "name": "isAvailable",
      "type": 2
    }
  ],
  "IsStickerAvailableForCombinationStickerRequest": [
    {
      "fid": 1,
      "name": "packageId",
      "type": 11
    }
  ],
  "IsStickerAvailableForCombinationStickerResponse": [
    {
      "fid": 1,
      "name": "availableForCombinationSticker",
      "type": 2
    }
  ],
  "IssueBirthdayGiftTokenRequest": [
    {
      "fid": 1,
      "name": "recipientUserMid",
      "type": 11
    }
  ],
  "IssueBirthdayGiftTokenResponse": [
    {
      "fid": 1,
      "name": "giftAssociationToken",
      "type": 11
    }
  ],
  "IssueV3TokenForPrimaryRequest": [
    {
      "fid": 1,
      "name": "udid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "systemDisplayName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "modelName",
      "type": 11
    }
  ],
  "IssueV3TokenForPrimaryResponse": [
    {
      "fid": 1,
      "name": "accessToken",
      "type": 11
    },
    {
      "fid": 2,
      "name": "refreshToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "durationUntilRefreshInSec",
      "type": 10
    },
    {
      "fid": 4,
      "name": "refreshApiRetryPolicy",
      "struct": "RefreshApiRetryPolicy"
    },
    {
      "fid": 5,
      "name": "loginSessionId",
      "type": 11
    },
    {
      "fid": 6,
      "name": "tokenIssueTimeEpochSec",
      "type": 10
    },
    {
      "fid": 7,
      "name": "mid",
      "type": 11
    }
  ],
  "IssueWebAuthDetailsForSecondAuthResponse": [
    {
      "fid": 1,
      "name": "webAuthDetails",
      "struct": "WebAuthDetails"
    }
  ],
  "JoinChatByCallUrlRequest": [
    {
      "fid": 1,
      "name": "urlId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "reqSeq",
      "type": 8
    }
  ],
  "JoinChatByCallUrlResponse": [
    {
      "fid": 1,
      "name": "chat",
      "struct": "Chat"
    }
  ],
  "JoinLiveTalkRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "wantToSpeak",
      "type": 2
    },
    {
      "fid": 4,
      "name": "claimAdult",
      "struct": "BooleanState"
    }
  ],
  "JoinLiveTalkResponse": [
    {
      "fid": 1,
      "name": "hostMemberMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "memberSessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "token",
      "type": 11
    },
    {
      "fid": 4,
      "name": "proto",
      "type": 11
    },
    {
      "fid": 5,
      "name": "voipAddress",
      "type": 11
    },
    {
      "fid": 6,
      "name": "voipAddress6",
      "type": 11
    },
    {
      "fid": 7,
      "name": "voipUdpPort",
      "type": 8
    },
    {
      "fid": 8,
      "name": "voipTcpPort",
      "type": 8
    },
    {
      "fid": 9,
      "name": "fromZone",
      "type": 11
    },
    {
      "fid": 10,
      "name": "commParam",
      "type": 11
    },
    {
      "fid": 11,
      "name": "orionAddress",
      "type": 11
    },
    {
      "fid": 12,
      "name": "polarisAddress",
      "type": 11
    },
    {
      "fid": 13,
      "name": "polarisZone",
      "type": 11
    },
    {
      "fid": 14,
      "name": "polarisUdpPort",
      "type": 8
    },
    {
      "fid": 15,
      "name": "speaker",
      "type": 2
    }
  ],
  "JoinSquareChatRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    }
  ],
  "JoinSquareChatResponse": [
    {
      "fid": 1,
      "name": "squareChat",
      "struct": "SquareChat"
    },
    {
      "fid": 2,
      "name": "squareChatStatus",
      "struct": "SquareChatStatus"
    },
    {
      "fid": 3,
      "name": "squareChatMember",
      "struct": "SquareChatMember"
    }
  ],
  "JoinSquareRequest": [
    {
      "fid": 2,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "member",
      "struct": "SquareMember"
    },
    {
      "fid": 4,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 5,
      "name": "joinValue",
      "struct": "SquareJoinMethodValue"
    },
    {
      "fid": 6,
      "name": "claimAdult",
      "struct": "BooleanState"
    }
  ],
  "JoinSquareResponse": [
    {
      "fid": 1,
      "name": "square",
      "struct": "Square"
    },
    {
      "fid": 2,
      "name": "squareAuthority",
      "struct": "SquareAuthority"
    },
    {
      "fid": 3,
      "name": "squareStatus",
      "struct": "SquareStatus"
    },
    {
      "fid": 4,
      "name": "squareMember",
      "struct": "SquareMember"
    },
    {
      "fid": 5,
      "name": "squareFeatureSet",
      "struct": "SquareFeatureSet"
    },
    {
      "fid": 6,
      "name": "noteStatus",
      "struct": "NoteStatus"
    },
    {
      "fid": 7,
      "name": "squareChat",
      "struct": "SquareChat"
    },
    {
      "fid": 8,
      "name": "squareChatStatus",
      "struct": "SquareChatStatus"
    },
    {
      "fid": 9,
      "name": "squareChatMember",
      "struct": "SquareChatMember"
    }
  ],
  "JoinSquareThreadRequest": [
    {
      "fid": 1,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "threadMid",
      "type": 11
    }
  ],
  "JoinSquareThreadResponse": [
    {
      "fid": 1,
      "name": "threadMember",
      "struct": "SquareThreadMember"
    }
  ],
  "JoinedMemberships": [
    {
      "fid": 1,
      "name": "subscribing",
      "list": "MemberInfo"
    },
    {
      "fid": 2,
      "name": "expired",
      "list": "MemberInfo"
    }
  ],
  "KickOutLiveTalkParticipantsRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "target",
      "struct": "LiveTalkKickOutTarget"
    }
  ],
  "KickoutFromGroupCallRequest": [
    {
      "fid": 1,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "targetMids",
      "list": 11
    }
  ],
  "LFLClusterV2": [
    {
      "fid": 1,
      "name": "majorVersion",
      "type": 11
    },
    {
      "fid": 2,
      "name": "minorVersion",
      "type": 11
    },
    {
      "fid": 3,
      "name": "tags",
      "list": "Tag"
    },
    {
      "fid": 4,
      "name": "products",
      "list": "Product"
    }
  ],
  "LIFFMenuColor": [
    {
      "fid": 1,
      "name": "iconColor",
      "type": 8
    },
    {
      "fid": 2,
      "name": "statusBarColor",
      "struct": "Qj_EnumC13585b"
    },
    {
      "fid": 3,
      "name": "titleTextColor",
      "type": 8
    },
    {
      "fid": 4,
      "name": "titleSubtextColor",
      "type": 8
    },
    {
      "fid": 5,
      "name": "titleButtonColor",
      "type": 8
    },
    {
      "fid": 6,
      "name": "titleBackgroundColor",
      "type": 8
    },
    {
      "fid": 7,
      "name": "progressBarColor",
      "type": 8
    },
    {
      "fid": 8,
      "name": "progressBackgroundColor",
      "type": 8
    },
    {
      "fid": 9,
      "name": "titleButtonAreaBackgroundColor",
      "type": 8
    },
    {
      "fid": 10,
      "name": "titleButtonAreaBorderColor",
      "type": 8
    }
  ],
  "LIFFMenuColorSetting": [
    {
      "fid": 1,
      "name": "lightModeColor",
      "struct": "LIFFMenuColor"
    },
    {
      "fid": 2,
      "name": "darkModeColor",
      "struct": "LIFFMenuColor"
    }
  ],
  "LN0_A": [],
  "LN0_A0": [],
  "LN0_B": [],
  "LN0_B0": [],
  "LN0_C0": [],
  "LN0_C11270b": [],
  "LN0_C11274d": [
    {
      "fid": 1,
      "name": "invalid",
      "struct": "AddMetaInvalid"
    },
    {
      "fid": 2,
      "name": "byPhone",
      "struct": "AddMetaByPhone"
    },
    {
      "fid": 3,
      "name": "bySearchId",
      "struct": "AddMetaBySearchId"
    },
    {
      "fid": 4,
      "name": "byUserTicket",
      "struct": "AddMetaByUserTicket"
    },
    {
      "fid": 5,
      "name": "groupMemberList",
      "struct": "AddMetaGroupMemberList"
    },
    {
      "fid": 6,
      "name": "timelineCPF",
      "struct": "LN0_P"
    },
    {
      "fid": 7,
      "name": "smartChannelCPF",
      "struct": "LN0_L"
    },
    {
      "fid": 8,
      "name": "openchatCPF",
      "struct": "LN0_G"
    },
    {
      "fid": 9,
      "name": "beaconBanner",
      "struct": "LN0_C11282h"
    },
    {
      "fid": 10,
      "name": "friendRecommendation",
      "struct": "LN0_C11300q"
    },
    {
      "fid": 11,
      "name": "homeRecommendation",
      "struct": "LN0_C11307u"
    },
    {
      "fid": 12,
      "name": "shareContact",
      "struct": "AddMetaShareContact"
    },
    {
      "fid": 13,
      "name": "strangerMessage",
      "struct": "AddMetaStrangerMessage"
    },
    {
      "fid": 14,
      "name": "strangerCall",
      "struct": "AddMetaStrangerCall"
    },
    {
      "fid": 15,
      "name": "mentionInChat",
      "struct": "AddMetaMentionInChat"
    },
    {
      "fid": 16,
      "name": "timeline",
      "struct": "LN0_O"
    },
    {
      "fid": 17,
      "name": "unifiedSearch",
      "struct": "LN0_Q"
    },
    {
      "fid": 18,
      "name": "lineLab",
      "struct": "LN0_C11313x"
    },
    {
      "fid": 19,
      "name": "lineToCall",
      "struct": "LN0_A"
    },
    {
      "fid": 20,
      "name": "groupVideo",
      "struct": "AddMetaGroupVideoCall"
    },
    {
      "fid": 21,
      "name": "friendRequest",
      "struct": "LN0_r"
    },
    {
      "fid": 22,
      "name": "liveViewer",
      "struct": "LN0_C11315y"
    },
    {
      "fid": 23,
      "name": "lineThings",
      "struct": "LN0_C11316z"
    },
    {
      "fid": 24,
      "name": "mediaCapture",
      "struct": "LN0_B"
    },
    {
      "fid": 25,
      "name": "avatarOASetting",
      "struct": "LN0_C11280g"
    },
    {
      "fid": 26,
      "name": "urlScheme",
      "struct": "LN0_T"
    },
    {
      "fid": 27,
      "name": "addressBook",
      "struct": "LN0_C11276e"
    },
    {
      "fid": 28,
      "name": "unifiedSearchOATab",
      "struct": "LN0_S"
    },
    {
      "fid": 29,
      "name": "profileUndefined",
      "struct": "AddMetaProfileUndefined"
    },
    {
      "fid": 30,
      "name": "DEPRECATED_oaChatHeader",
      "struct": "LN0_F"
    },
    {
      "fid": 31,
      "name": "chatMenu",
      "struct": "LN0_C11294n"
    },
    {
      "fid": 32,
      "name": "chatHeader",
      "struct": "LN0_C11290l"
    },
    {
      "fid": 33,
      "name": "homeTabCPF",
      "struct": "LN0_C11309v"
    },
    {
      "fid": 34,
      "name": "chatList",
      "struct": "LN0_C11292m"
    },
    {
      "fid": 35,
      "name": "chatNote",
      "struct": "AddMetaChatNote"
    },
    {
      "fid": 36,
      "name": "chatNoteMenu",
      "struct": "AddMetaChatNoteMenu"
    },
    {
      "fid": 37,
      "name": "walletTabCPF",
      "struct": "LN0_U"
    },
    {
      "fid": 38,
      "name": "oaCall",
      "struct": "LN0_E"
    },
    {
      "fid": 39,
      "name": "searchIdInUnifiedSearch",
      "struct": "AddMetaSearchIdInUnifiedSearch"
    },
    {
      "fid": 40,
      "name": "newsDigestADCPF",
      "struct": "LN0_D"
    },
    {
      "fid": 41,
      "name": "albumCPF",
      "struct": "LN0_C11278f"
    },
    {
      "fid": 42,
      "name": "premiumAgreement",
      "struct": "LN0_H"
    }
  ],
  "LN0_C11276e": [],
  "LN0_C11278f": [],
  "LN0_C11280g": [],
  "LN0_C11282h": [],
  "LN0_C11290l": [],
  "LN0_C11292m": [],
  "LN0_C11294n": [],
  "LN0_C11300q": [],
  "LN0_C11307u": [],
  "LN0_C11308u0": [],
  "LN0_C11309v": [],
  "LN0_C11310v0": [],
  "LN0_C11312w0": [],
  "LN0_C11313x": [],
  "LN0_C11315y": [],
  "LN0_C11316z": [],
  "LN0_D": [],
  "LN0_E": [],
  "LN0_F": [],
  "LN0_G": [],
  "LN0_H": [],
  "LN0_L": [],
  "LN0_O": [],
  "LN0_P": [],
  "LN0_Q": [],
  "LN0_S": [],
  "LN0_T": [],
  "LN0_U": [],
  "LN0_V": [
    {
      "fid": 1,
      "name": "user",
      "struct": "UserBlockDetail"
    },
    {
      "fid": 2,
      "name": "bot",
      "struct": "BotBlockDetail"
    },
    {
      "fid": 3,
      "name": "notBlocked",
      "struct": "LN0_C11308u0"
    }
  ],
  "LN0_Z": [
    {
      "fid": 1,
      "name": "user",
      "struct": "UserFriendDetail"
    },
    {
      "fid": 2,
      "name": "bot",
      "struct": "BotFriendDetail"
    },
    {
      "fid": 3,
      "name": "notFriend",
      "struct": "LN0_C11310v0"
    }
  ],
  "LN0_r": [],
  "LN0_y0": [
    {
      "fid": 1,
      "name": "recommendationDetail",
      "struct": "RecommendationDetail"
    },
    {
      "fid": 2,
      "name": "notRecommended",
      "struct": "LN0_C11312w0"
    }
  ],
  "LN0_z0": [
    {
      "fid": 1,
      "name": "sharedChat",
      "struct": "RecommendationReasonSharedChat"
    },
    {
      "fid": 2,
      "name": "reverseFriendByUserId",
      "struct": "LN0_C0"
    },
    {
      "fid": 3,
      "name": "reverseFriendByQrCode",
      "struct": "LN0_B0"
    },
    {
      "fid": 4,
      "name": "reverseFriendByPhone",
      "struct": "LN0_A0"
    }
  ],
  "LatestProductByAuthorItem": [
    {
      "fid": 1,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "version",
      "type": 10
    },
    {
      "fid": 4,
      "name": "newFlag",
      "type": 2
    },
    {
      "fid": 5,
      "name": "productResourceType",
      "struct": "Ob1_I0"
    },
    {
      "fid": 6,
      "name": "popupLayer",
      "struct": "Ob1_B0"
    }
  ],
  "LatestProductsByAuthorRequest": [
    {
      "fid": 1,
      "name": "productType",
      "struct": "Ob1_O0"
    },
    {
      "fid": 2,
      "name": "authorId",
      "type": 10
    },
    {
      "fid": 3,
      "name": "limit",
      "type": 8
    }
  ],
  "LatestProductsByAuthorResponse": [
    {
      "fid": 1,
      "name": "authorId",
      "type": 10
    },
    {
      "fid": 2,
      "name": "author",
      "type": 11
    },
    {
      "fid": 3,
      "name": "items",
      "list": "LatestProductByAuthorItem"
    }
  ],
  "LeaveSquareChatRequest": [
    {
      "fid": 2,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "sayGoodbye",
      "type": 2
    },
    {
      "fid": 4,
      "name": "squareChatMemberRevision",
      "type": 10
    }
  ],
  "LeaveSquareRequest": [
    {
      "fid": 2,
      "name": "squareMid",
      "type": 11
    }
  ],
  "LeaveSquareThreadRequest": [
    {
      "fid": 1,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "threadMid",
      "type": 11
    }
  ],
  "LeaveSquareThreadResponse": [
    {
      "fid": 1,
      "name": "threadMember",
      "struct": "SquareThreadMember"
    }
  ],
  "LeftSquareMember": [
    {
      "fid": 1,
      "name": "squareMemberMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "profileImageObsHash",
      "type": 11
    },
    {
      "fid": 4,
      "name": "updatedAt",
      "type": 10
    }
  ],
  "LiffAdvertisingId": [
    {
      "fid": 1,
      "name": "advertisingId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "tracking",
      "type": 2
    },
    {
      "fid": 3,
      "name": "att",
      "struct": "Qj_EnumC13584a"
    },
    {
      "fid": 4,
      "name": "skAdNetwork",
      "struct": "SKAdNetwork"
    }
  ],
  "LiffChatContext": [
    {
      "fid": 1,
      "name": "chatMid",
      "type": 11
    }
  ],
  "LiffDeviceSetting": [
    {
      "fid": 1,
      "name": "videoAutoPlayAllowed",
      "type": 2
    },
    {
      "fid": 2,
      "name": "advertisingId",
      "struct": "LiffAdvertisingId"
    }
  ],
  "LiffErrorConsentRequired": [
    {
      "fid": 1,
      "name": "channelId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "consentUrl",
      "type": 11
    }
  ],
  "LiffErrorPermanentLinkInvalidRequest": [
    {
      "fid": 1,
      "name": "liffId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "fallbackUrl",
      "type": 11
    }
  ],
  "LiffFIDOExternalService": [
    {
      "fid": 1,
      "name": "rpId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "rpApiBaseUrl",
      "type": 11
    }
  ],
  "LiffSquareChatContext": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    }
  ],
  "LiffView": [
    {
      "fid": 1,
      "name": "type",
      "type": 11
    },
    {
      "fid": 2,
      "name": "url",
      "type": 11
    },
    {
      "fid": 4,
      "name": "titleTextColor",
      "type": 8
    },
    {
      "fid": 5,
      "name": "titleBackgroundColor",
      "type": 8
    },
    {
      "fid": 6,
      "name": "titleIconUrl",
      "type": 11
    },
    {
      "fid": 7,
      "name": "titleSubtextColor",
      "type": 8
    },
    {
      "fid": 8,
      "name": "titleButtonColor",
      "type": 8
    },
    {
      "fid": 9,
      "name": "progressBarColor",
      "type": 8
    },
    {
      "fid": 10,
      "name": "progressBackgroundColor",
      "type": 8
    },
    {
      "fid": 11,
      "name": "trustedDomain",
      "type": 2
    },
    {
      "fid": 12,
      "name": "suspendable",
      "type": 2
    },
    {
      "fid": 13,
      "name": "maxBrightness",
      "type": 2
    },
    {
      "fid": 14,
      "name": "titleButtonAreaBackgroundColor",
      "type": 8
    },
    {
      "fid": 15,
      "name": "titleButtonAreaBorderColor",
      "type": 8
    },
    {
      "fid": 16,
      "name": "suspendableV2",
      "type": 2
    },
    {
      "fid": 17,
      "name": "menuStyle",
      "struct": "Qj_EnumC13606x"
    },
    {
      "fid": 18,
      "name": "moduleMode",
      "type": 2
    },
    {
      "fid": 19,
      "name": "pinToHomeServiceId",
      "type": 8
    },
    {
      "fid": 20,
      "name": "menuColorSetting",
      "struct": "LIFFMenuColorSetting"
    },
    {
      "fid": 21,
      "name": "showPinInduction",
      "type": 2
    },
    {
      "fid": 22,
      "name": "appName",
      "type": 11
    },
    {
      "fid": 23,
      "name": "adaptableColorSchemes",
      "set": 8
    },
    {
      "fid": 24,
      "name": "provider",
      "struct": "Provider"
    },
    {
      "fid": 25,
      "name": "basicAuthAllowed",
      "type": 2
    },
    {
      "fid": 26,
      "name": "siriDonationAllowed",
      "type": 2
    },
    {
      "fid": 27,
      "name": "transitionToNonLiffWithoutPopupAllowed",
      "type": 2
    },
    {
      "fid": 28,
      "name": "urlHistoryAllowed",
      "type": 2
    },
    {
      "fid": 29,
      "name": "shrinkHeaderDisabled",
      "type": 2
    },
    {
      "fid": 30,
      "name": "skipWebRTCPermissionPopupAllowed",
      "type": 2
    },
    {
      "fid": 31,
      "name": "useGmaSdkAllowed",
      "type": 2
    },
    {
      "fid": 32,
      "name": "useMinimizeButtonAllowed",
      "type": 2
    }
  ],
  "LiffViewRequest": [
    {
      "fid": 1,
      "name": "liffId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "context",
      "struct": "Qj_C13595l"
    },
    {
      "fid": 3,
      "name": "lang",
      "type": 11
    },
    {
      "fid": 4,
      "name": "deviceSetting",
      "struct": "LiffDeviceSetting"
    },
    {
      "fid": 5,
      "name": "msit",
      "type": 11
    },
    {
      "fid": 6,
      "name": "subsequentLiff",
      "type": 2
    },
    {
      "fid": 7,
      "name": "domain",
      "type": 11
    }
  ],
  "LiffViewResponse": [
    {
      "fid": 1,
      "name": "view",
      "struct": "LiffView"
    },
    {
      "fid": 2,
      "name": "contextToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "accessToken",
      "type": 11
    },
    {
      "fid": 4,
      "name": "featureToken",
      "type": 11
    },
    {
      "fid": 5,
      "name": "features",
      "list": 8
    },
    {
      "fid": 6,
      "name": "channelId",
      "type": 11
    },
    {
      "fid": 7,
      "name": "idToken",
      "type": 11
    },
    {
      "fid": 8,
      "name": "scopes",
      "list": 11
    },
    {
      "fid": 9,
      "name": "launchOptions",
      "list": 8
    },
    {
      "fid": 10,
      "name": "permanentLinkPattern",
      "struct": "Qj_a0"
    },
    {
      "fid": 11,
      "name": "subLiffView",
      "struct": "SubLiffView"
    },
    {
      "fid": 12,
      "name": "revisions",
      "map": 8,
      "key": 8
    },
    {
      "fid": 13,
      "name": "accessTokenExpiresIn",
      "type": 10
    },
    {
      "fid": 14,
      "name": "accessTokenExpiresInWithRoom",
      "type": 10
    },
    {
      "fid": 15,
      "name": "liffId",
      "type": 11
    },
    {
      "fid": 16,
      "name": "miniDomainAllowed",
      "type": 2
    },
    {
      "fid": 17,
      "name": "miniAppId",
      "type": 11
    },
    {
      "fid": 18,
      "name": "miniHistoryServiceId",
      "type": 8
    },
    {
      "fid": 19,
      "name": "addToHomeV2Allowed",
      "type": 2
    },
    {
      "fid": 20,
      "name": "addToHomeV2LineSchemeAllowed",
      "type": 2
    },
    {
      "fid": 21,
      "name": "fido",
      "struct": "Qj_C13602t"
    },
    {
      "fid": 22,
      "name": "omitLiffReferrer",
      "type": 2
    }
  ],
  "LiffViewWithoutUserContextRequest": [
    {
      "fid": 1,
      "name": "liffId",
      "type": 11
    }
  ],
  "LiffWebLoginRequest": [
    {
      "fid": 1,
      "name": "hookedFullUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionString",
      "type": 11
    },
    {
      "fid": 3,
      "name": "context",
      "struct": "Qj_C13595l"
    },
    {
      "fid": 4,
      "name": "deviceSetting",
      "struct": "LiffDeviceSetting"
    }
  ],
  "LiffWebLoginResponse": [
    {
      "fid": 1,
      "name": "returnUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionString",
      "type": 11
    },
    {
      "fid": 3,
      "name": "liffId",
      "type": 11
    }
  ],
  "LineBankBalanceShortcut": [
    {
      "fid": 1,
      "name": "iconPosition",
      "type": 8
    },
    {
      "fid": 2,
      "name": "iconUrl",
      "type": 11
    },
    {
      "fid": 3,
      "name": "iconText",
      "type": 11
    },
    {
      "fid": 4,
      "name": "iconAltText",
      "type": 11
    },
    {
      "fid": 5,
      "name": "iconType",
      "struct": "NZ0_EnumC12154b1"
    },
    {
      "fid": 6,
      "name": "linkUrl",
      "type": 11
    },
    {
      "fid": 7,
      "name": "tsTargetId",
      "type": 11
    },
    {
      "fid": 8,
      "name": "userGuidePopupInfo",
      "struct": "ShortcutUserGuidePopupInfo"
    }
  ],
  "LineBankPromotion": [
    {
      "fid": 1,
      "name": "mainText",
      "type": 11
    },
    {
      "fid": 2,
      "name": "linkUrl",
      "type": 11
    },
    {
      "fid": 3,
      "name": "tsTargetId",
      "type": 11
    }
  ],
  "LineBankShortcutInfo": [
    {
      "fid": 1,
      "name": "mainShortcuts",
      "list": "LineBankBalanceShortcut"
    },
    {
      "fid": 2,
      "name": "subShortcuts",
      "list": "LineBankBalanceShortcut"
    }
  ],
  "LinePayInfo": [
    {
      "fid": 1,
      "name": "balanceAmount",
      "type": 11
    },
    {
      "fid": 2,
      "name": "currencyProperty",
      "struct": "CurrencyProperty"
    },
    {
      "fid": 3,
      "name": "payMemberStatus",
      "struct": "NZ0_EnumC12195p0"
    },
    {
      "fid": 4,
      "name": "applicationUrl",
      "type": 11
    },
    {
      "fid": 5,
      "name": "chargeUrl",
      "type": 11
    },
    {
      "fid": 6,
      "name": "payMemberGrade",
      "struct": "NZ0_EnumC12192o0"
    },
    {
      "fid": 7,
      "name": "country",
      "type": 11
    },
    {
      "fid": 8,
      "name": "referenceNumber",
      "type": 11
    },
    {
      "fid": 9,
      "name": "ipassTokenProperty",
      "struct": "IpassTokenProperty"
    },
    {
      "fid": 10,
      "name": "iconUrl",
      "type": 11
    },
    {
      "fid": 11,
      "name": "iconAltText",
      "type": 11
    },
    {
      "fid": 12,
      "name": "iconLinkUrl",
      "type": 11
    },
    {
      "fid": 13,
      "name": "suspendedText",
      "type": 11
    },
    {
      "fid": 14,
      "name": "responseStatus",
      "struct": "NZ0_W0"
    }
  ],
  "LinePayInfoV3": [
    {
      "fid": 1,
      "name": "availableBalance",
      "type": 11
    },
    {
      "fid": 2,
      "name": "availableBalanceString",
      "type": 11
    },
    {
      "fid": 3,
      "name": "currencyProperty",
      "struct": "CurrencyProperty"
    },
    {
      "fid": 4,
      "name": "payMemberStatus",
      "struct": "NZ0_EnumC12195p0"
    },
    {
      "fid": 5,
      "name": "payMemberGrade",
      "struct": "NZ0_EnumC12192o0"
    },
    {
      "fid": 6,
      "name": "country",
      "type": 11
    },
    {
      "fid": 7,
      "name": "applicationUrl",
      "type": 11
    },
    {
      "fid": 8,
      "name": "iconAltText",
      "type": 11
    },
    {
      "fid": 9,
      "name": "iconLinkUrl",
      "type": 11
    },
    {
      "fid": 10,
      "name": "suspendedText",
      "type": 11
    },
    {
      "fid": 11,
      "name": "responseStatus",
      "struct": "NZ0_W0"
    }
  ],
  "LinePayPromotion": [
    {
      "fid": 1,
      "name": "mainText",
      "type": 11
    },
    {
      "fid": 2,
      "name": "subText",
      "type": 11
    },
    {
      "fid": 3,
      "name": "buttonText",
      "type": 11
    },
    {
      "fid": 4,
      "name": "iconUrl",
      "type": 11
    },
    {
      "fid": 5,
      "name": "linkUrl",
      "type": 11
    },
    {
      "fid": 6,
      "name": "tsTargetId",
      "type": 11
    }
  ],
  "LinePointInfo": [
    {
      "fid": 1,
      "name": "balanceAmount",
      "type": 11
    },
    {
      "fid": 2,
      "name": "applicationUrl",
      "type": 11
    },
    {
      "fid": 3,
      "name": "iconUrl",
      "type": 11
    },
    {
      "fid": 4,
      "name": "displayText",
      "type": 11
    },
    {
      "fid": 5,
      "name": "responseStatus",
      "struct": "NZ0_W0"
    }
  ],
  "LinkRewardInfo": [
    {
      "fid": 1,
      "name": "assetServiceInfo",
      "struct": "AssetServiceInfo"
    },
    {
      "fid": 2,
      "name": "autoConversion",
      "type": 2
    },
    {
      "fid": 3,
      "name": "backgroundColorCode",
      "type": 11
    }
  ],
  "LiveTalk": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "title",
      "type": 11
    },
    {
      "fid": 4,
      "name": "type",
      "struct": "LiveTalkType"
    },
    {
      "fid": 5,
      "name": "speakerSetting",
      "struct": "LiveTalkSpeakerSetting"
    },
    {
      "fid": 6,
      "name": "allowRequestToSpeak",
      "type": 2
    },
    {
      "fid": 7,
      "name": "hostMemberMid",
      "type": 11
    },
    {
      "fid": 8,
      "name": "announcement",
      "type": 11
    },
    {
      "fid": 9,
      "name": "participantCount",
      "type": 8
    },
    {
      "fid": 10,
      "name": "revision",
      "type": 10
    },
    {
      "fid": 11,
      "name": "startedAt",
      "type": 10
    }
  ],
  "LiveTalkEvent": [
    {
      "fid": 1,
      "name": "type",
      "struct": "LiveTalkEventType"
    },
    {
      "fid": 2,
      "name": "payload",
      "struct": "LiveTalkEventPayload"
    },
    {
      "fid": 3,
      "name": "revision",
      "type": 10
    }
  ],
  "LiveTalkEventNotifiedUpdateLiveTalkAllowRequestToSpeak": [
    {
      "fid": 1,
      "name": "allowRequestToSpeak",
      "type": 2
    }
  ],
  "LiveTalkEventNotifiedUpdateLiveTalkAnnouncement": [
    {
      "fid": 1,
      "name": "announcement",
      "type": 11
    }
  ],
  "LiveTalkEventNotifiedUpdateLiveTalkTitle": [
    {
      "fid": 1,
      "name": "title",
      "type": 11
    }
  ],
  "LiveTalkEventNotifiedUpdateSquareMember": [
    {
      "fid": 1,
      "name": "squareMemberMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "profileImageObsHash",
      "type": 11
    },
    {
      "fid": 4,
      "name": "role",
      "struct": "SquareMemberRole"
    }
  ],
  "LiveTalkEventNotifiedUpdateSquareMemberRole": [
    {
      "fid": 1,
      "name": "squareMemberMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "role",
      "struct": "SquareMemberRole"
    }
  ],
  "LiveTalkExtraInfo": [
    {
      "fid": 1,
      "name": "saturnResponse",
      "type": 11
    }
  ],
  "LiveTalkParticipant": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    }
  ],
  "LiveTalkSpeaker": [
    {
      "fid": 1,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 2,
      "name": "profileImageObsHash",
      "type": 11
    },
    {
      "fid": 3,
      "name": "role",
      "struct": "SquareMemberRole"
    }
  ],
  "LiveTalkSubscriptionNotification": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    }
  ],
  "Locale": [
    {
      "fid": 1,
      "name": "language",
      "type": 11
    },
    {
      "fid": 2,
      "name": "country",
      "type": 11
    }
  ],
  "Location": [
    {
      "fid": 1,
      "name": "title",
      "type": 11
    },
    {
      "fid": 2,
      "name": "address",
      "type": 11
    },
    {
      "fid": 3,
      "name": "latitude",
      "type": 4
    },
    {
      "fid": 4,
      "name": "longitude",
      "type": 4
    },
    {
      "fid": 5,
      "name": "phone",
      "type": 11
    },
    {
      "fid": 6,
      "name": "categoryId",
      "type": 11
    },
    {
      "fid": 7,
      "name": "provider",
      "struct": "Pb1_D6"
    },
    {
      "fid": 8,
      "name": "accuracy",
      "struct": "GeolocationAccuracy"
    },
    {
      "fid": 9,
      "name": "altitudeMeters",
      "type": 4
    }
  ],
  "LocationDebugInfo": [
    {
      "fid": 1,
      "name": "poiInfo",
      "struct": "PoiInfo"
    }
  ],
  "LookupAvailableEapRequest": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "LookupAvailableEapResponse": [
    {
      "fid": 1,
      "name": "availableEap",
      "list": 8
    }
  ],
  "LpPromotionProperty": [
    {
      "fid": 1,
      "name": "landingPageUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "label",
      "type": 11
    },
    {
      "fid": 3,
      "name": "buttonLabel",
      "type": 11
    }
  ],
  "MainPopup": [
    {
      "fid": 1,
      "name": "imageObsHash",
      "type": 11
    },
    {
      "fid": 2,
      "name": "button",
      "struct": "Button"
    }
  ],
  "ManualRepairRequest": [
    {
      "fid": 1,
      "name": "syncToken",
      "type": 11
    },
    {
      "fid": 2,
      "name": "limit",
      "type": 8
    },
    {
      "fid": 3,
      "name": "continuationToken",
      "type": 11
    }
  ],
  "ManualRepairResponse": [
    {
      "fid": 1,
      "name": "events",
      "list": "SquareEvent"
    },
    {
      "fid": 2,
      "name": "syncToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "continuationToken",
      "type": 11
    }
  ],
  "MapProfileToUsersRequest": [
    {
      "fid": 1,
      "name": "profileId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "targetMids",
      "list": 11
    }
  ],
  "MapProfileToUsersResponse": [
    {
      "fid": 1,
      "name": "mappedMids",
      "list": 11
    }
  ],
  "MarkAsReadRequest": [
    {
      "fid": 2,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "messageId",
      "type": 11
    },
    {
      "fid": 5,
      "name": "threadMid",
      "type": 11
    }
  ],
  "MarkChatsAsReadRequest": [
    {
      "fid": 2,
      "name": "chatMids",
      "set": 11
    }
  ],
  "MarkThreadsAsReadRequest": [
    {
      "fid": 1,
      "name": "chatMid",
      "type": 11
    }
  ],
  "MemberInfo": [
    {
      "fid": 1,
      "name": "membership",
      "struct": "Membership"
    },
    {
      "fid": 2,
      "name": "memberNo",
      "type": 8
    },
    {
      "fid": 3,
      "name": "isJoining",
      "type": 2
    },
    {
      "fid": 4,
      "name": "isSubscribing",
      "type": 2
    },
    {
      "fid": 5,
      "name": "validUntil",
      "type": 10
    },
    {
      "fid": 6,
      "name": "billingItemName",
      "type": 11
    }
  ],
  "Membership": [
    {
      "fid": 1,
      "name": "membershipId",
      "type": 10
    },
    {
      "fid": 2,
      "name": "uniqueKey",
      "type": 11
    },
    {
      "fid": 3,
      "name": "title",
      "type": 11
    },
    {
      "fid": 4,
      "name": "membershipDescription",
      "type": 11
    },
    {
      "fid": 5,
      "name": "benefits",
      "type": 11
    },
    {
      "fid": 6,
      "name": "isInAppPurchase",
      "type": 2
    },
    {
      "fid": 7,
      "name": "paymentType",
      "struct": "og_G"
    },
    {
      "fid": 8,
      "name": "isPublished",
      "type": 2
    },
    {
      "fid": 9,
      "name": "isFullMember",
      "type": 2
    },
    {
      "fid": 10,
      "name": "price",
      "type": 11
    },
    {
      "fid": 11,
      "name": "currency",
      "type": 11
    },
    {
      "fid": 12,
      "name": "membershipStatus",
      "struct": "og_E"
    },
    {
      "fid": 13,
      "name": "bot",
      "struct": "Bot"
    },
    {
      "fid": 14,
      "name": "closeDate",
      "type": 10
    },
    {
      "fid": 15,
      "name": "membershipCardUrl",
      "type": 11
    },
    {
      "fid": 16,
      "name": "openchatUrl",
      "type": 11
    }
  ],
  "MentionableBot": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "profileImageObsHash",
      "type": 11
    },
    {
      "fid": 4,
      "name": "squareMid",
      "type": 11
    }
  ],
  "MentionableSquareMember": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "profileImageObsHash",
      "type": 11
    },
    {
      "fid": 4,
      "name": "role",
      "struct": "SquareMemberRole"
    },
    {
      "fid": 5,
      "name": "squareMid",
      "type": 11
    }
  ],
  "Message": [
    {
      "fid": 1,
      "name": "from",
      "type": 11
    },
    {
      "fid": 2,
      "name": "to",
      "type": 11
    },
    {
      "fid": 3,
      "name": "toType",
      "struct": "MIDType"
    },
    {
      "fid": 4,
      "name": "id",
      "type": 11
    },
    {
      "fid": 5,
      "name": "createdTime",
      "type": 10
    },
    {
      "fid": 6,
      "name": "deliveredTime",
      "type": 10
    },
    {
      "fid": 10,
      "name": "text",
      "type": 11
    },
    {
      "fid": 11,
      "name": "location",
      "struct": "Location"
    },
    {
      "fid": 14,
      "name": "hasContent",
      "type": 2
    },
    {
      "fid": 15,
      "name": "contentType",
      "struct": "ContentType"
    },
    {
      "fid": 17,
      "name": "contentPreview",
      "type": 11
    },
    {
      "fid": 18,
      "name": "contentMetadata",
      "map": 11,
      "key": 11
    },
    {
      "fid": 19,
      "name": "sessionId",
      "type": 3
    },
    {
      "fid": 20,
      "name": "chunks",
      "list": 11
    },
    {
      "fid": 21,
      "name": "relatedMessageId",
      "type": 11
    },
    {
      "fid": 22,
      "name": "messageRelationType",
      "struct": "Pb1_EnumC13015h6"
    },
    {
      "fid": 23,
      "name": "readCount",
      "type": 8
    },
    {
      "fid": 24,
      "name": "relatedMessageServiceCode",
      "struct": "Pb1_E7"
    },
    {
      "fid": 25,
      "name": "appExtensionType",
      "struct": "Pb1_B"
    },
    {
      "fid": 27,
      "name": "reactions",
      "list": "Reaction"
    }
  ],
  "MessageBoxList": [
    {
      "fid": 1,
      "name": "messageBoxes",
      "list": "ExtendedMessageBox"
    },
    {
      "fid": 2,
      "name": "hasNext",
      "type": 2
    }
  ],
  "MessageBoxListRequest": [
    {
      "fid": 1,
      "name": "minChatId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "maxChatId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "activeOnly",
      "type": 2
    },
    {
      "fid": 4,
      "name": "messageBoxCountLimit",
      "type": 8
    },
    {
      "fid": 5,
      "name": "withUnreadCount",
      "type": 2
    },
    {
      "fid": 6,
      "name": "lastMessagesPerMessageBoxCount",
      "type": 8
    },
    {
      "fid": 7,
      "name": "unreadOnly",
      "type": 2
    }
  ],
  "MessageBoxV2MessageId": [
    {
      "fid": 1,
      "name": "deliveredTime",
      "type": 10
    },
    {
      "fid": 2,
      "name": "messageId",
      "type": 10
    }
  ],
  "MessageSummary": [
    {
      "fid": 1,
      "name": "summary",
      "list": 11
    },
    {
      "fid": 2,
      "name": "keywords",
      "list": 11
    },
    {
      "fid": 3,
      "name": "range",
      "struct": "MessageSummaryRange"
    },
    {
      "fid": 4,
      "name": "detailedSummary",
      "list": 11
    }
  ],
  "MessageSummaryContent": [
    {
      "fid": 1,
      "name": "summary",
      "list": 11
    },
    {
      "fid": 2,
      "name": "keywords",
      "list": 11
    },
    {
      "fid": 3,
      "name": "range",
      "struct": "MessageSummaryRange"
    }
  ],
  "MessageSummaryRange": [
    {
      "fid": 1,
      "name": "from",
      "type": 10
    },
    {
      "fid": 2,
      "name": "to",
      "type": 10
    }
  ],
  "MessageVisibility": [
    {
      "fid": 1,
      "name": "showJoinMessage",
      "type": 2
    },
    {
      "fid": 2,
      "name": "showLeaveMessage",
      "type": 2
    },
    {
      "fid": 3,
      "name": "showKickoutMessage",
      "type": 2
    }
  ],
  "MigratePrimaryUsingQrCodeRequest": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "nonce",
      "type": 11
    },
    {
      "fid": 3,
      "name": "newDevice",
      "struct": "h80_Y70_a"
    }
  ],
  "MigratePrimaryUsingQrCodeResponse": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "tokenV3IssueResult",
      "struct": "TokenV3IssueResult"
    },
    {
      "fid": 3,
      "name": "tokenV1IssueResult",
      "struct": "TokenV1IssueResult"
    },
    {
      "fid": 4,
      "name": "accountCountryCode",
      "struct": "h80_X70_a"
    },
    {
      "fid": 5,
      "name": "formattedPhoneNumbers",
      "struct": "FormattedPhoneNumbers"
    }
  ],
  "MigratePrimaryWithTokenV3Response": [
    {
      "fid": 1,
      "name": "authToken",
      "type": 11
    },
    {
      "fid": 2,
      "name": "tokenV3IssueResult",
      "struct": "TokenV3IssueResult"
    },
    {
      "fid": 3,
      "name": "countryCode",
      "type": 11
    },
    {
      "fid": 4,
      "name": "prettifiedFormatPhoneNumber",
      "type": 11
    },
    {
      "fid": 5,
      "name": "localFormatPhoneNumber",
      "type": 11
    },
    {
      "fid": 6,
      "name": "mid",
      "type": 11
    }
  ],
  "ModuleResponse": [
    {
      "fid": 1,
      "name": "moduleInstance",
      "struct": "NZ0_C12206t0"
    }
  ],
  "ModuleWithStatusResponse": [
    {
      "fid": 1,
      "name": "moduleInstance",
      "struct": "NZ0_C12221y0"
    }
  ],
  "MyChatapp": [
    {
      "fid": 1,
      "name": "app",
      "struct": "Chatapp"
    },
    {
      "fid": 2,
      "name": "category",
      "struct": "zf_EnumC40715c"
    },
    {
      "fid": 3,
      "name": "priority",
      "type": 10
    }
  ],
  "MyDashboardItem": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "messageText",
      "type": 11
    },
    {
      "fid": 4,
      "name": "icon",
      "struct": "MyDashboardMessageIcon"
    },
    {
      "fid": 5,
      "name": "linkUrl",
      "type": 11
    },
    {
      "fid": 6,
      "name": "exposedAt",
      "type": 10
    },
    {
      "fid": 7,
      "name": "expiredAt",
      "type": 10
    },
    {
      "fid": 8,
      "name": "order",
      "type": 8
    },
    {
      "fid": 9,
      "name": "targetWrsModelId",
      "type": 11
    },
    {
      "fid": 10,
      "name": "templateId",
      "type": 11
    },
    {
      "fid": 11,
      "name": "fullMessageText",
      "type": 11
    },
    {
      "fid": 12,
      "name": "templateCautionText",
      "type": 11
    }
  ],
  "MyDashboardMessageIcon": [
    {
      "fid": 1,
      "name": "walletTabIconUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "assetTabIconUrl",
      "type": 11
    },
    {
      "fid": 3,
      "name": "iconAltText",
      "type": 11
    }
  ],
  "NZ0_C12150a0": [],
  "NZ0_C12152b": [],
  "NZ0_C12155c": [],
  "NZ0_C12206t0": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "templateName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "fields",
      "map": 11,
      "key": 11
    },
    {
      "fid": 4,
      "name": "elements",
      "list": "_any"
    },
    {
      "fid": 5,
      "name": "etag",
      "type": 11
    },
    {
      "fid": 6,
      "name": "refreshTimeSec",
      "type": 8
    },
    {
      "fid": 7,
      "name": "name",
      "type": 11
    },
    {
      "fid": 8,
      "name": "recommendable",
      "type": 2
    },
    {
      "fid": 9,
      "name": "recommendedModelId",
      "type": 11
    },
    {
      "fid": 10,
      "name": "flexContent",
      "type": 11
    },
    {
      "fid": 11,
      "name": "categories",
      "list": "_any"
    },
    {
      "fid": 12,
      "name": "headers",
      "list": "_any"
    }
  ],
  "NZ0_C12208u": [],
  "NZ0_C12209u0": [
    {
      "fid": 1,
      "name": "fixedModules",
      "list": "NZ0_C12206t0"
    },
    {
      "fid": 2,
      "name": "etag",
      "type": 11
    },
    {
      "fid": 3,
      "name": "refreshTimeSec",
      "type": 8
    },
    {
      "fid": 4,
      "name": "recommendedModules",
      "list": "NZ0_C12206t0"
    }
  ],
  "NZ0_C12212v0": [
    {
      "fid": 1,
      "name": "topTab",
      "struct": "TopTab"
    },
    {
      "fid": 2,
      "name": "subTabs",
      "list": "SubTab"
    },
    {
      "fid": 3,
      "name": "forceSelectedSubTabInfo",
      "struct": "ForceSelectedSubTabInfo"
    },
    {
      "fid": 4,
      "name": "refreshTimeSec",
      "type": 8
    },
    {
      "fid": 6,
      "name": "etag",
      "type": 11
    }
  ],
  "NZ0_C12214w": [],
  "NZ0_C12221y0": [
    {
      "fid": 1,
      "name": "status",
      "struct": "NZ0_EnumC12218x0"
    },
    {
      "fid": 2,
      "name": "id",
      "type": 11
    },
    {
      "fid": 3,
      "name": "templateName",
      "type": 11
    },
    {
      "fid": 4,
      "name": "etag",
      "type": 11
    },
    {
      "fid": 5,
      "name": "refreshTimeSec",
      "type": 8
    },
    {
      "fid": 6,
      "name": "name",
      "type": 11
    },
    {
      "fid": 7,
      "name": "recommendable",
      "type": 2
    },
    {
      "fid": 8,
      "name": "recommendedModelId",
      "type": 11
    },
    {
      "fid": 9,
      "name": "fields",
      "map": 11,
      "key": 11
    },
    {
      "fid": 10,
      "name": "elements",
      "list": "_any"
    },
    {
      "fid": 11,
      "name": "categories",
      "list": "_any"
    },
    {
      "fid": 12,
      "name": "headers",
      "list": "_any"
    }
  ],
  "NZ0_C12224z0": [
    {
      "fid": 1,
      "name": "etag",
      "type": 11
    },
    {
      "fid": 2,
      "name": "refreshTimeSec",
      "type": 8
    },
    {
      "fid": 3,
      "name": "fixedModules",
      "list": "NZ0_C12221y0"
    },
    {
      "fid": 4,
      "name": "recommendedModules",
      "list": "NZ0_C12221y0"
    }
  ],
  "NZ0_D": [
    {
      "fid": 1,
      "name": "moduleLayoutV4",
      "struct": "NZ0_C12212v0"
    },
    {
      "fid": 2,
      "name": "notModified",
      "struct": "NZ0_G0"
    },
    {
      "fid": 3,
      "name": "notFound",
      "struct": "NZ0_F0"
    }
  ],
  "NZ0_E": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "etag",
      "type": 11
    },
    {
      "fid": 3,
      "name": "recommendedModelId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "deviceAdId",
      "type": 11
    },
    {
      "fid": 5,
      "name": "agreedWithTargetingAdByMid",
      "type": 2
    },
    {
      "fid": 6,
      "name": "deviceId",
      "type": 11
    }
  ],
  "NZ0_F": [
    {
      "fid": 1,
      "name": "moduleResponse",
      "struct": "ModuleResponse"
    },
    {
      "fid": 2,
      "name": "notModified",
      "struct": "NZ0_G0"
    },
    {
      "fid": 3,
      "name": "notFound",
      "struct": "NZ0_F0"
    }
  ],
  "NZ0_F0": [],
  "NZ0_G": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "etag",
      "type": 11
    },
    {
      "fid": 3,
      "name": "recommendedModelId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "deviceAdId",
      "type": 11
    },
    {
      "fid": 5,
      "name": "agreedWithTargetingAdByMid",
      "type": 2
    },
    {
      "fid": 6,
      "name": "deviceId",
      "type": 11
    }
  ],
  "NZ0_G0": [],
  "NZ0_H": [
    {
      "fid": 1,
      "name": "moduleResponse",
      "struct": "ModuleWithStatusResponse"
    },
    {
      "fid": 2,
      "name": "notModified",
      "struct": "NZ0_G0"
    },
    {
      "fid": 3,
      "name": "notFound",
      "struct": "NZ0_F0"
    }
  ],
  "NZ0_K": [
    {
      "fid": 1,
      "name": "moduleAggregationResponse",
      "struct": "NZ0_C12209u0"
    },
    {
      "fid": 2,
      "name": "notModified",
      "struct": "NZ0_G0"
    }
  ],
  "NZ0_M": [
    {
      "fid": 1,
      "name": "moduleAggregationResponse",
      "struct": "NZ0_C12224z0"
    },
    {
      "fid": 2,
      "name": "notModified",
      "struct": "NZ0_G0"
    }
  ],
  "NZ0_S": [],
  "NZ0_U": [],
  "NearbyEntry": [
    {
      "fid": 1,
      "name": "emid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "distance",
      "type": 4
    },
    {
      "fid": 3,
      "name": "lastUpdatedInSec",
      "type": 8
    },
    {
      "fid": 4,
      "name": "property",
      "map": 11,
      "key": 11
    },
    {
      "fid": 5,
      "name": "profile",
      "struct": "Profile"
    }
  ],
  "NoBidCallback": [
    {
      "fid": 1,
      "name": "impEventUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "vimpEventUrl",
      "type": 11
    },
    {
      "fid": 3,
      "name": "imp100pEventUrl",
      "type": 11
    }
  ],
  "NoteStatus": [
    {
      "fid": 1,
      "name": "noteCount",
      "type": 8
    },
    {
      "fid": 2,
      "name": "latestCreatedAt",
      "type": 10
    }
  ],
  "NotificationSetting": [
    {
      "fid": 1,
      "name": "mute",
      "type": 2
    }
  ],
  "NotificationSettingEntry": [
    {
      "fid": 1,
      "name": "notificationSetting",
      "struct": "NotificationSetting"
    }
  ],
  "NotifyChatAdEntryRequest": [
    {
      "fid": 1,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "scenarioId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "sdata",
      "type": 11
    }
  ],
  "NotifyDeviceConnectionRequest": [
    {
      "fid": 1,
      "name": "deviceId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "connectionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "connectionType",
      "struct": "do0_EnumC23148f"
    },
    {
      "fid": 4,
      "name": "code",
      "struct": "do0_EnumC23147e"
    },
    {
      "fid": 5,
      "name": "errorReason",
      "type": 11
    },
    {
      "fid": 6,
      "name": "startTime",
      "type": 10
    },
    {
      "fid": 7,
      "name": "endTime",
      "type": 10
    }
  ],
  "NotifyDeviceConnectionResponse": [
    {
      "fid": 1,
      "name": "latestOffset",
      "type": 10
    }
  ],
  "NotifyDeviceDisconnectionRequest": [
    {
      "fid": 1,
      "name": "deviceId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "connectionId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "disconnectedTime",
      "type": 10
    }
  ],
  "NotifyOATalkroomEventsRequest": [
    {
      "fid": 1,
      "name": "events",
      "list": "OATalkroomEvent"
    }
  ],
  "NotifyScenarioExecutedRequest": [
    {
      "fid": 2,
      "name": "scenarioResults",
      "list": "do0_F"
    }
  ],
  "OATalkroomEvent": [
    {
      "fid": 1,
      "name": "eventId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "type",
      "struct": "kf_p"
    },
    {
      "fid": 3,
      "name": "context",
      "struct": "OATalkroomEventContext"
    },
    {
      "fid": 4,
      "name": "content",
      "struct": "kf_m"
    }
  ],
  "OATalkroomEventContext": [
    {
      "fid": 1,
      "name": "timestampMillis",
      "type": 10
    },
    {
      "fid": 2,
      "name": "botMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "userMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "os",
      "struct": "kf_o"
    },
    {
      "fid": 5,
      "name": "osVersion",
      "type": 11
    },
    {
      "fid": 6,
      "name": "appVersion",
      "type": 11
    },
    {
      "fid": 7,
      "name": "region",
      "type": 11
    }
  ],
  "OaAddFriendArea": [
    {
      "fid": 1,
      "name": "text",
      "type": 11
    }
  ],
  "Ob1_C12606a0": [],
  "Ob1_C12608b": [],
  "Ob1_C12618e0": [
    {
      "fid": 1,
      "name": "subscriptionService",
      "struct": "Ob1_S1"
    },
    {
      "fid": 2,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "limit",
      "type": 8
    },
    {
      "fid": 4,
      "name": "productType",
      "struct": "Ob1_O0"
    }
  ],
  "Ob1_C12621f0": [
    {
      "fid": 1,
      "name": "history",
      "list": "SubscriptionSlotHistory"
    },
    {
      "fid": 2,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "totalSize",
      "type": 10
    }
  ],
  "Ob1_C12630i0": [],
  "Ob1_C12637k1": [],
  "Ob1_C12642m0": [],
  "Ob1_C12649o1": [],
  "Ob1_C12660s1": [],
  "Ob1_E": [
    {
      "fid": 1,
      "name": "stickerSummary",
      "struct": "_any"
    }
  ],
  "Ob1_G": [],
  "Ob1_H0": [
    {
      "fid": 1,
      "name": "lpPromotionProperty",
      "struct": "_any"
    }
  ],
  "Ob1_I0": [
    {
      "fid": 1,
      "name": "stickerResourceType",
      "type": 8
    },
    {
      "fid": 2,
      "name": "themeResourceType",
      "type": 8
    },
    {
      "fid": 3,
      "name": "sticonResourceType",
      "type": 8
    }
  ],
  "Ob1_L": [
    {
      "fid": 1,
      "name": "productTypes",
      "set": "Ob1_O0"
    },
    {
      "fid": 2,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "limit",
      "type": 8
    },
    {
      "fid": 4,
      "name": "shopFilter",
      "struct": "ShopFilter"
    }
  ],
  "Ob1_M": [
    {
      "fid": 1,
      "name": "browsingHistory",
      "list": "BrowsingHistory"
    },
    {
      "fid": 2,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "totalSize",
      "type": 8
    }
  ],
  "Ob1_N": [],
  "Ob1_P0": [
    {
      "fid": 1,
      "name": "stickerSummary",
      "struct": "StickerSummary"
    },
    {
      "fid": 2,
      "name": "themeSummary",
      "struct": "ThemeSummary"
    },
    {
      "fid": 3,
      "name": "sticonSummary",
      "struct": "SticonSummary"
    }
  ],
  "Ob1_U": [
    {
      "fid": 1,
      "name": "productType",
      "struct": "Ob1_O0"
    },
    {
      "fid": 2,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "limit",
      "type": 8
    },
    {
      "fid": 4,
      "name": "subscriptionService",
      "struct": "Ob1_S1"
    },
    {
      "fid": 5,
      "name": "sortType",
      "struct": "Ob1_V1"
    }
  ],
  "Ob1_V": [
    {
      "fid": 1,
      "name": "products",
      "list": "ProductSummary"
    },
    {
      "fid": 2,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "totalSize",
      "type": 10
    },
    {
      "fid": 4,
      "name": "maxSlotCount",
      "type": 8
    }
  ],
  "Ob1_W": [
    {
      "fid": 1,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 2,
      "name": "limit",
      "type": 8
    },
    {
      "fid": 3,
      "name": "productType",
      "struct": "Ob1_O0"
    },
    {
      "fid": 4,
      "name": "recommendationType",
      "struct": "Ob1_EnumC12631i1"
    },
    {
      "fid": 5,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 6,
      "name": "subtypes",
      "set": 8
    },
    {
      "fid": 7,
      "name": "shouldShuffle",
      "type": 2
    },
    {
      "fid": 8,
      "name": "includeStickerIds",
      "type": 2
    },
    {
      "fid": 9,
      "name": "shopFilter",
      "struct": "ShopFilter"
    }
  ],
  "Ob1_W0": [
    {
      "fid": 1,
      "name": "promotionBuddyInfo",
      "struct": "PromotionBuddyInfo"
    },
    {
      "fid": 2,
      "name": "promotionInstallInfo",
      "struct": "PromotionInstallInfo"
    },
    {
      "fid": 3,
      "name": "promotionMissionInfo",
      "struct": "PromotionMissionInfo"
    }
  ],
  "OkButton": [
    {
      "fid": 1,
      "name": "text",
      "type": 11
    }
  ],
  "OpenSessionRequest": [
    {
      "fid": 1,
      "name": "metaData",
      "map": 11,
      "key": 11
    }
  ],
  "OpenSessionResponse": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "OperationResponse": [
    {
      "fid": 1,
      "name": "operations",
      "list": "Pb1_C13154r6"
    },
    {
      "fid": 2,
      "name": "hasMoreOps",
      "type": 2
    },
    {
      "fid": 3,
      "name": "globalEvents",
      "struct": "TGlobalEvents"
    },
    {
      "fid": 4,
      "name": "individualEvents",
      "struct": "TIndividualEvents"
    }
  ],
  "OrderInfo": [
    {
      "fid": 1,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "orderId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "confirmUrl",
      "type": 11
    },
    {
      "fid": 4,
      "name": "bot",
      "struct": "Bot"
    }
  ],
  "P70_k": [],
  "PaidCallDialing": [
    {
      "fid": 1,
      "name": "type",
      "struct": "PaidCallType"
    },
    {
      "fid": 2,
      "name": "dialedNumber",
      "type": 11
    },
    {
      "fid": 3,
      "name": "serviceDomain",
      "type": 11
    },
    {
      "fid": 4,
      "name": "productType",
      "struct": "Pb1_EnumC13196u6"
    },
    {
      "fid": 5,
      "name": "productName",
      "type": 11
    },
    {
      "fid": 6,
      "name": "multipleProduct",
      "type": 2
    },
    {
      "fid": 7,
      "name": "callerIdStatus",
      "struct": "Pb1_EnumC13238x6"
    },
    {
      "fid": 10,
      "name": "balance",
      "type": 8
    },
    {
      "fid": 11,
      "name": "unit",
      "type": 11
    },
    {
      "fid": 12,
      "name": "rate",
      "type": 8
    },
    {
      "fid": 13,
      "name": "displayCode",
      "type": 11
    },
    {
      "fid": 14,
      "name": "calledNumber",
      "type": 11
    },
    {
      "fid": 15,
      "name": "calleeNationalNumber",
      "type": 11
    },
    {
      "fid": 16,
      "name": "calleeCallingCode",
      "type": 11
    },
    {
      "fid": 17,
      "name": "rateDivision",
      "type": 11
    },
    {
      "fid": 20,
      "name": "adMaxMin",
      "type": 8
    },
    {
      "fid": 21,
      "name": "adRemains",
      "type": 8
    },
    {
      "fid": 22,
      "name": "adSessionId",
      "type": 11
    }
  ],
  "PaidCallResponse": [
    {
      "fid": 1,
      "name": "host",
      "struct": "CallHost"
    },
    {
      "fid": 2,
      "name": "dialing",
      "struct": "PaidCallDialing"
    },
    {
      "fid": 3,
      "name": "token",
      "type": 11
    },
    {
      "fid": 4,
      "name": "spotItems",
      "list": "SpotItem"
    }
  ],
  "PartialFullSyncResponse": [
    {
      "fid": 1,
      "name": "targetCategories",
      "map": 10,
      "key": 8
    }
  ],
  "PasswordHashingParameters": [
    {
      "fid": 1,
      "name": "hmacKey",
      "type": 11
    },
    {
      "fid": 2,
      "name": "scryptParams",
      "struct": "ScryptParams"
    }
  ],
  "PasswordValidationRule": [
    {
      "fid": 1,
      "name": "type",
      "struct": "c80_EnumC18292e"
    },
    {
      "fid": 2,
      "name": "pattern",
      "list": 11
    },
    {
      "fid": 3,
      "name": "clientNoticeMessage",
      "type": 11
    }
  ],
  "PaymentAuthenticationInfo": [
    {
      "fid": 1,
      "name": "authToken",
      "type": 11
    },
    {
      "fid": 2,
      "name": "confirmMessage",
      "type": 11
    }
  ],
  "PaymentEligibleFriendStatus": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "status",
      "struct": "r80_EnumC34367g"
    }
  ],
  "PaymentLineCardInfo": [
    {
      "fid": 1,
      "name": "designCode",
      "type": 11
    },
    {
      "fid": 2,
      "name": "imageUrl",
      "type": 11
    }
  ],
  "PaymentLineCardIssueForm": [
    {
      "fid": 1,
      "name": "requiredTermsOfServiceBundle",
      "struct": "r80_e0"
    },
    {
      "fid": 2,
      "name": "availableLineCards",
      "list": "PaymentLineCardInfo"
    }
  ],
  "PaymentRequiredAgreementsInfo": [
    {
      "fid": 1,
      "name": "title",
      "type": 11
    },
    {
      "fid": 2,
      "name": "desc",
      "type": 11
    },
    {
      "fid": 3,
      "name": "linkName",
      "type": 11
    },
    {
      "fid": 4,
      "name": "linkUrl",
      "type": 11
    },
    {
      "fid": 5,
      "name": "newAgreements",
      "list": 11
    }
  ],
  "PaymentReservationResult": [
    {
      "fid": 1,
      "name": "orderId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "confirmUrl",
      "type": 11
    },
    {
      "fid": 3,
      "name": "extras",
      "map": 11,
      "key": 11
    }
  ],
  "PaymentTradeInfo": [
    {
      "fid": 1,
      "name": "chargeRequestId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "chargeRequestType",
      "struct": "r80_g0"
    },
    {
      "fid": 3,
      "name": "chargeRequestYmdt",
      "type": 10
    },
    {
      "fid": 4,
      "name": "tradeNumber",
      "type": 11
    },
    {
      "fid": 7,
      "name": "agencyNo",
      "type": 11
    },
    {
      "fid": 8,
      "name": "confirmNo",
      "type": 11
    },
    {
      "fid": 9,
      "name": "expireYmd",
      "type": 10
    },
    {
      "fid": 10,
      "name": "moneyAmount",
      "struct": "DisplayMoney"
    },
    {
      "fid": 11,
      "name": "completeYmdt",
      "type": 10
    },
    {
      "fid": 12,
      "name": "paymentProcessCorp",
      "type": 11
    },
    {
      "fid": 13,
      "name": "status",
      "struct": "r80_h0"
    },
    {
      "fid": 14,
      "name": "helpUrl",
      "type": 11
    },
    {
      "fid": 15,
      "name": "guideMessage",
      "type": 11
    }
  ],
  "Pb1_A4": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "eMid",
      "type": 11
    }
  ],
  "Pb1_A6": [],
  "Pb1_B3": [],
  "Pb1_C12916a5": [
    {
      "fid": 1,
      "name": "wrappedNonce",
      "type": 11
    },
    {
      "fid": 2,
      "name": "kdfParameter1",
      "type": 11
    },
    {
      "fid": 3,
      "name": "kdfParameter2",
      "type": 11
    }
  ],
  "Pb1_C12938c": [
    {
      "fid": 1,
      "name": "message",
      "struct": "AbuseReport"
    },
    {
      "fid": 2,
      "name": "lineMeeting",
      "struct": "AbuseReportLineMeeting"
    }
  ],
  "Pb1_C12946c7": [],
  "Pb1_C12953d0": [
    {
      "fid": 2,
      "name": "verifier",
      "type": 11
    },
    {
      "fid": 3,
      "name": "pinCode",
      "type": 11
    },
    {
      "fid": 4,
      "name": "errorCode",
      "struct": "ErrorCode"
    },
    {
      "fid": 5,
      "name": "publicKey",
      "struct": "Pb1_C13097n4"
    },
    {
      "fid": 6,
      "name": "encryptedKeyChain",
      "type": 11
    },
    {
      "fid": 7,
      "name": "hashKeyChain",
      "type": 11
    }
  ],
  "Pb1_C12980f": [],
  "Pb1_C12996g1": [],
  "Pb1_C13008h": [],
  "Pb1_C13019ha": [],
  "Pb1_C13042j5": [],
  "Pb1_C13070l5": [],
  "Pb1_C13097n4": [
    {
      "fid": 1,
      "name": "version",
      "type": 8
    },
    {
      "fid": 2,
      "name": "keyId",
      "type": 8
    },
    {
      "fid": 4,
      "name": "keyData",
      "type": 11
    },
    {
      "fid": 5,
      "name": "createdTime",
      "type": 10
    }
  ],
  "Pb1_C13113o6": [
    {
      "fid": 1,
      "name": "callRoute",
      "struct": "CallRoute"
    },
    {
      "fid": 2,
      "name": "paidCallResponse",
      "struct": "PaidCallResponse"
    }
  ],
  "Pb1_C13114o7": [],
  "Pb1_C13126p5": [],
  "Pb1_C13131pa": [],
  "Pb1_C13150r2": [],
  "Pb1_C13154r6": [
    {
      "fid": 1,
      "name": "revision",
      "type": 10
    },
    {
      "fid": 2,
      "name": "createdTime",
      "type": 10
    },
    {
      "fid": 3,
      "name": "type",
      "struct": "OpType"
    },
    {
      "fid": 4,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 5,
      "name": "checksum",
      "type": 11
    },
    {
      "fid": 7,
      "name": "status",
      "struct": "Pb1_EnumC13127p6"
    },
    {
      "fid": 10,
      "name": "param1",
      "type": 11
    },
    {
      "fid": 11,
      "name": "param2",
      "type": 11
    },
    {
      "fid": 12,
      "name": "param3",
      "type": 11
    },
    {
      "fid": 20,
      "name": "message",
      "struct": "Message"
    }
  ],
  "Pb1_C13155r7": [
    {
      "fid": 1,
      "name": "restoreClaim",
      "type": 11
    }
  ],
  "Pb1_C13169s7": [
    {
      "fid": 1,
      "name": "recoveryKey",
      "type": 11
    },
    {
      "fid": 2,
      "name": "blobPayload",
      "type": 11
    }
  ],
  "Pb1_C13183t7": [],
  "Pb1_C13190u0": [
    {
      "fid": 1,
      "name": "rich",
      "struct": "BuddyRichMenuChatBarItem"
    },
    {
      "fid": 2,
      "name": "widgetList",
      "struct": "BuddyWidgetListCharBarItem"
    },
    {
      "fid": 3,
      "name": "web",
      "struct": "BuddyWebChatBarItem"
    }
  ],
  "Pb1_C13202uc": [],
  "Pb1_C13208v4": [
    {
      "fid": 1,
      "name": "groupExtra",
      "struct": "GroupExtra"
    },
    {
      "fid": 2,
      "name": "peerExtra",
      "struct": "Pb1_A6"
    }
  ],
  "Pb1_C13254y8": [],
  "Pb1_C13263z3": [
    {
      "fid": 1,
      "name": "blobHeader",
      "type": 11
    },
    {
      "fid": 2,
      "name": "blobPayload",
      "type": 11
    },
    {
      "fid": 3,
      "name": "reason",
      "struct": "Pb1_A3"
    }
  ],
  "Pb1_Ca": [],
  "Pb1_E3": [
    {
      "fid": 1,
      "name": "blobHeader",
      "type": 11
    },
    {
      "fid": 2,
      "name": "payloadDataList",
      "list": "Pb1_X5"
    }
  ],
  "Pb1_Ea": [],
  "Pb1_F3": [],
  "Pb1_H3": [],
  "Pb1_I3": [],
  "Pb1_Ia": [],
  "Pb1_J5": [],
  "Pb1_K3": [],
  "Pb1_M3": [],
  "Pb1_O": [],
  "Pb1_O3": [],
  "Pb1_P9": [],
  "Pb1_Q8": [],
  "Pb1_S5": [],
  "Pb1_Sb": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "encryptedKeyChain",
      "type": 11
    },
    {
      "fid": 3,
      "name": "hashKeyChain",
      "type": 11
    }
  ],
  "Pb1_U1": [],
  "Pb1_U3": [
    {
      "fid": 1,
      "name": "keyVersion",
      "type": 8
    },
    {
      "fid": 2,
      "name": "groupKeyId",
      "type": 8
    },
    {
      "fid": 3,
      "name": "creator",
      "type": 11
    },
    {
      "fid": 4,
      "name": "creatorKeyId",
      "type": 8
    },
    {
      "fid": 5,
      "name": "receiver",
      "type": 11
    },
    {
      "fid": 6,
      "name": "receiverKeyId",
      "type": 8
    },
    {
      "fid": 7,
      "name": "encryptedSharedKey",
      "type": 11
    },
    {
      "fid": 8,
      "name": "allowedTypes",
      "set": 8
    },
    {
      "fid": 9,
      "name": "specVersion",
      "type": 8
    }
  ],
  "Pb1_V3": [
    {
      "fid": 1,
      "name": "version",
      "type": 8
    },
    {
      "fid": 2,
      "name": "keyId",
      "type": 8
    },
    {
      "fid": 4,
      "name": "publicKey",
      "type": 11
    },
    {
      "fid": 5,
      "name": "privateKey",
      "type": 11
    },
    {
      "fid": 6,
      "name": "createdTime",
      "type": 10
    }
  ],
  "Pb1_W4": [],
  "Pb1_W5": [
    {
      "fid": 1,
      "name": "e2ee",
      "struct": "E2EEMetadata"
    },
    {
      "fid": 2,
      "name": "singleValue",
      "struct": "SingleValueMetadata"
    }
  ],
  "Pb1_W6": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "publicKey",
      "struct": "Pb1_C13097n4"
    },
    {
      "fid": 3,
      "name": "blobPayload",
      "type": 11
    }
  ],
  "Pb1_X": [
    {
      "fid": 1,
      "name": "verifier",
      "type": 11
    },
    {
      "fid": 2,
      "name": "publicKey",
      "struct": "Pb1_C13097n4"
    },
    {
      "fid": 3,
      "name": "encryptedKeyChain",
      "type": 11
    },
    {
      "fid": 4,
      "name": "hashKeyChain",
      "type": 11
    },
    {
      "fid": 5,
      "name": "errorCode",
      "struct": "ErrorCode"
    }
  ],
  "Pb1_X5": [
    {
      "fid": 1,
      "name": "metadata",
      "struct": "Pb1_W5"
    },
    {
      "fid": 2,
      "name": "blobPayload",
      "type": 11
    }
  ],
  "Pb1_X7": [
    {
      "fid": 1,
      "name": "operationResponse",
      "struct": "OperationResponse"
    },
    {
      "fid": 2,
      "name": "fullSyncResponse",
      "struct": "FullSyncResponse"
    },
    {
      "fid": 3,
      "name": "partialFullSyncResponse",
      "struct": "PartialFullSyncResponse"
    }
  ],
  "Pb1_Y4": [],
  "Pb1_Za": [],
  "Pb1_Zc": [],
  "Pb1_ad": [
    {
      "fid": 1,
      "name": "title",
      "type": 11
    }
  ],
  "Pb1_cd": [],
  "PendingAgreementsResponse": [
    {
      "fid": 1,
      "name": "pendingAgreements",
      "list": 8
    }
  ],
  "PermitLoginRequest": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "metaData",
      "map": 11,
      "key": 11
    }
  ],
  "PermitLoginResponse": [
    {
      "fid": 1,
      "name": "oneTimeToken",
      "type": 11
    }
  ],
  "PhoneVerificationResult": [
    {
      "fid": 1,
      "name": "verificationResult",
      "struct": "VerificationResult"
    },
    {
      "fid": 2,
      "name": "accountMigrationCheckType",
      "struct": "Pb1_EnumC13022i"
    },
    {
      "fid": 3,
      "name": "recommendAddFriends",
      "type": 2
    }
  ],
  "PocketMoneyInfo": [
    {
      "fid": 1,
      "name": "assetServiceInfo",
      "struct": "AssetServiceInfo"
    },
    {
      "fid": 2,
      "name": "displayType",
      "struct": "NZ0_I0"
    },
    {
      "fid": 3,
      "name": "productType",
      "struct": "NZ0_K0"
    },
    {
      "fid": 4,
      "name": "refinanceText",
      "type": 11
    }
  ],
  "PoiInfo": [
    {
      "fid": 1,
      "name": "poiId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "poiRealm",
      "struct": "Pb1_F6"
    }
  ],
  "PointInfo": [
    {
      "fid": 1,
      "name": "assetServiceInfo",
      "struct": "AssetServiceInfo"
    }
  ],
  "PopularKeyword": [
    {
      "fid": 1,
      "name": "value",
      "type": 11
    },
    {
      "fid": 2,
      "name": "highlighted",
      "type": 2
    },
    {
      "fid": 3,
      "name": "id",
      "type": 10
    }
  ],
  "Popup": [
    {
      "fid": 1,
      "name": "id",
      "type": 10
    },
    {
      "fid": 2,
      "name": "country",
      "type": 11
    },
    {
      "fid": 3,
      "name": "name",
      "type": 11
    },
    {
      "fid": 4,
      "name": "type",
      "struct": "PopupType"
    },
    {
      "fid": 5,
      "name": "content",
      "struct": "PopupContent"
    },
    {
      "fid": 6,
      "name": "activated",
      "type": 2
    },
    {
      "fid": 7,
      "name": "revision",
      "type": 10
    },
    {
      "fid": 8,
      "name": "startsAt",
      "type": 10
    },
    {
      "fid": 9,
      "name": "endsAt",
      "type": 10
    },
    {
      "fid": 10,
      "name": "createdAt",
      "type": 10
    }
  ],
  "PopupContent": [
    {
      "fid": 1,
      "name": "mainPopUp",
      "struct": "MainPopup"
    },
    {
      "fid": 2,
      "name": "chatroomPopup",
      "struct": "ChatroomPopup"
    }
  ],
  "PopupProperty": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "name",
      "type": 11
    },
    {
      "fid": 3,
      "name": "startDateTimeMillis",
      "type": 10
    },
    {
      "fid": 4,
      "name": "endDateTimeMillis",
      "type": 10
    },
    {
      "fid": 5,
      "name": "popupContents",
      "list": "PopupContent"
    },
    {
      "fid": 6,
      "name": "wrsCampaignId",
      "type": 11
    },
    {
      "fid": 7,
      "name": "optOut",
      "type": 2
    },
    {
      "fid": 8,
      "name": "layoutSize",
      "struct": "NZ0_N0"
    }
  ],
  "Price": [
    {
      "fid": 1,
      "name": "currency",
      "type": 11
    },
    {
      "fid": 2,
      "name": "amount",
      "type": 11
    },
    {
      "fid": 3,
      "name": "priceString",
      "type": 11
    }
  ],
  "Priority": [
    {
      "fid": 1,
      "name": "value",
      "type": 10
    }
  ],
  "Product": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "productVersion",
      "type": 10
    },
    {
      "fid": 3,
      "name": "productDetails",
      "struct": "AR0_o"
    }
  ],
  "ProductDetail": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "billingItemId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "type",
      "type": 11
    },
    {
      "fid": 4,
      "name": "subtype",
      "struct": "Ob1_X1"
    },
    {
      "fid": 5,
      "name": "billingCpId",
      "type": 11
    },
    {
      "fid": 11,
      "name": "name",
      "type": 11
    },
    {
      "fid": 12,
      "name": "author",
      "type": 11
    },
    {
      "fid": 13,
      "name": "details",
      "type": 11
    },
    {
      "fid": 14,
      "name": "copyright",
      "type": 11
    },
    {
      "fid": 15,
      "name": "notice",
      "type": 11
    },
    {
      "fid": 16,
      "name": "promotionInfo",
      "struct": "PromotionInfo"
    },
    {
      "fid": 21,
      "name": "latestVersion",
      "type": 10
    },
    {
      "fid": 22,
      "name": "latestVersionString",
      "type": 11
    },
    {
      "fid": 23,
      "name": "version",
      "type": 10
    },
    {
      "fid": 24,
      "name": "versionString",
      "type": 11
    },
    {
      "fid": 25,
      "name": "applicationVersionRange",
      "struct": "ApplicationVersionRange"
    },
    {
      "fid": 31,
      "name": "owned",
      "type": 2
    },
    {
      "fid": 32,
      "name": "grantedByDefault",
      "type": 2
    },
    {
      "fid": 41,
      "name": "validFor",
      "type": 8
    },
    {
      "fid": 42,
      "name": "validUntil",
      "type": 10
    },
    {
      "fid": 51,
      "name": "onSale",
      "type": 2
    },
    {
      "fid": 52,
      "name": "salesFlags",
      "set": 11
    },
    {
      "fid": 53,
      "name": "availableForPresent",
      "type": 2
    },
    {
      "fid": 54,
      "name": "availableForMyself",
      "type": 2
    },
    {
      "fid": 61,
      "name": "priceTier",
      "type": 8
    },
    {
      "fid": 62,
      "name": "price",
      "struct": "Price"
    },
    {
      "fid": 63,
      "name": "priceInLineCoin",
      "type": 11
    },
    {
      "fid": 64,
      "name": "localizedPrice",
      "struct": "Price"
    },
    {
      "fid": 91,
      "name": "images",
      "key": 11
    },
    {
      "fid": 92,
      "name": "attributes",
      "map": 11,
      "key": 11
    },
    {
      "fid": 93,
      "name": "authorId",
      "type": 11
    },
    {
      "fid": 94,
      "name": "stickerResourceType",
      "struct": "StickerResourceType"
    },
    {
      "fid": 95,
      "name": "productProperty",
      "struct": "jp_naver_line_shop_protocol_thrift_ProductProperty"
    },
    {
      "fid": 96,
      "name": "productSalesState",
      "struct": "Ob1_J0"
    },
    {
      "fid": 97,
      "name": "installedTime",
      "type": 10
    },
    {
      "fid": 101,
      "name": "wishProperty",
      "struct": "ProductWishProperty"
    },
    {
      "fid": 102,
      "name": "subscriptionProperty",
      "struct": "ProductSubscriptionProperty"
    },
    {
      "fid": 103,
      "name": "productPromotionProperty",
      "struct": "Ob1_H0"
    },
    {
      "fid": 104,
      "name": "availableInCountry",
      "type": 2
    },
    {
      "fid": 105,
      "name": "editorsPickBanners",
      "list": "EditorsPickBannerForClient"
    },
    {
      "fid": 106,
      "name": "ableToBeGivenAsPresent",
      "type": 2
    },
    {
      "fid": 107,
      "name": "madeWithStickerMaker",
      "type": 2
    },
    {
      "fid": 108,
      "name": "customDownloadButtonLabel",
      "type": 11
    }
  ],
  "ProductList": [
    {
      "fid": 1,
      "name": "productList",
      "list": "ProductDetail"
    },
    {
      "fid": 2,
      "name": "offset",
      "type": 8
    },
    {
      "fid": 3,
      "name": "totalSize",
      "type": 8
    },
    {
      "fid": 11,
      "name": "title",
      "type": 11
    }
  ],
  "ProductListByAuthorRequest": [
    {
      "fid": 1,
      "name": "productType",
      "struct": "Ob1_O0"
    },
    {
      "fid": 2,
      "name": "authorId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "offset",
      "type": 8
    },
    {
      "fid": 4,
      "name": "limit",
      "type": 8
    },
    {
      "fid": 5,
      "name": "shopFilter",
      "struct": "ShopFilter"
    },
    {
      "fid": 6,
      "name": "includeStickerIds",
      "type": 2
    },
    {
      "fid": 7,
      "name": "additionalProductTypes",
      "list": 8
    },
    {
      "fid": 8,
      "name": "showcaseType",
      "struct": "Ob1_EnumC12666u1"
    }
  ],
  "ProductSearchSummary": [],
  "ProductSubscriptionProperty": [
    {
      "fid": 1,
      "name": "availableForSubscribe",
      "type": 2
    },
    {
      "fid": 2,
      "name": "subscriptionAvailability",
      "struct": "Ob1_D0"
    }
  ],
  "ProductSummary": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 11,
      "name": "name",
      "type": 11
    },
    {
      "fid": 21,
      "name": "latestVersion",
      "type": 10
    },
    {
      "fid": 25,
      "name": "applicationVersionRange",
      "struct": "ApplicationVersionRange"
    },
    {
      "fid": 32,
      "name": "grantedByDefault",
      "type": 2
    },
    {
      "fid": 92,
      "name": "attributes",
      "map": 11,
      "key": 11
    },
    {
      "fid": 93,
      "name": "productTypeSummary",
      "struct": "Ob1_P0"
    },
    {
      "fid": 94,
      "name": "validUntil",
      "type": 10
    },
    {
      "fid": 95,
      "name": "validFor",
      "type": 8
    },
    {
      "fid": 96,
      "name": "installedTime",
      "type": 10
    },
    {
      "fid": 97,
      "name": "availability",
      "struct": "Ob1_D0"
    },
    {
      "fid": 98,
      "name": "authorId",
      "type": 11
    },
    {
      "fid": 99,
      "name": "canAutoDownload",
      "type": 2
    },
    {
      "fid": 100,
      "name": "promotionInfo",
      "struct": "PromotionInfo"
    }
  ],
  "ProductSummaryForAutoSuggest": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "version",
      "type": 10
    },
    {
      "fid": 3,
      "name": "name",
      "type": 11
    },
    {
      "fid": 4,
      "name": "stickerResourceType",
      "struct": "StickerResourceType"
    },
    {
      "fid": 5,
      "name": "suggestVersion",
      "type": 10
    },
    {
      "fid": 6,
      "name": "popupLayer",
      "struct": "Ob1_B0"
    },
    {
      "fid": 7,
      "name": "type",
      "struct": "Ob1_O0"
    },
    {
      "fid": 8,
      "name": "resourceType",
      "struct": "Ob1_I0"
    },
    {
      "fid": 9,
      "name": "stickerSize",
      "struct": "Ob1_C1"
    }
  ],
  "ProductSummaryList": [
    {
      "fid": 1,
      "name": "productList",
      "list": "ProductSummary"
    },
    {
      "fid": 2,
      "name": "offset",
      "type": 8
    },
    {
      "fid": 3,
      "name": "totalSize",
      "type": 8
    }
  ],
  "ProductValidationRequest": [
    {
      "fid": 1,
      "name": "validationScheme",
      "struct": "ProductValidationScheme"
    },
    {
      "fid": 10,
      "name": "authCode",
      "type": 11
    }
  ],
  "ProductValidationResult": [
    {
      "fid": 1,
      "name": "validated",
      "type": 2
    }
  ],
  "ProductValidationScheme": [
    {
      "fid": 10,
      "name": "key",
      "type": 11
    },
    {
      "fid": 11,
      "name": "offset",
      "type": 10
    },
    {
      "fid": 12,
      "name": "size",
      "type": 10
    }
  ],
  "ProductWishProperty": [
    {
      "fid": 1,
      "name": "totalCount",
      "type": 10
    }
  ],
  "Profile": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "userid",
      "type": 11
    },
    {
      "fid": 10,
      "name": "phone",
      "type": 11
    },
    {
      "fid": 11,
      "name": "email",
      "type": 11
    },
    {
      "fid": 12,
      "name": "regionCode",
      "type": 11
    },
    {
      "fid": 20,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 21,
      "name": "phoneticName",
      "type": 11
    },
    {
      "fid": 22,
      "name": "pictureStatus",
      "type": 11
    },
    {
      "fid": 23,
      "name": "thumbnailUrl",
      "type": 11
    },
    {
      "fid": 24,
      "name": "statusMessage",
      "type": 11
    },
    {
      "fid": 31,
      "name": "allowSearchByUserid",
      "type": 2
    },
    {
      "fid": 32,
      "name": "allowSearchByEmail",
      "type": 2
    },
    {
      "fid": 33,
      "name": "picturePath",
      "type": 11
    },
    {
      "fid": 34,
      "name": "musicProfile",
      "type": 11
    },
    {
      "fid": 35,
      "name": "videoProfile",
      "type": 11
    },
    {
      "fid": 36,
      "name": "statusMessageContentMetadata",
      "map": 11,
      "key": 11
    },
    {
      "fid": 37,
      "name": "avatarProfile",
      "struct": "AvatarProfile"
    },
    {
      "fid": 38,
      "name": "nftProfile",
      "type": 2
    },
    {
      "fid": 39,
      "name": "pictureSource",
      "struct": "Pb1_N6"
    },
    {
      "fid": 40,
      "name": "profileId",
      "type": 11
    },
    {
      "fid": 41,
      "name": "profileType",
      "struct": "Pb1_O6"
    },
    {
      "fid": 42,
      "name": "createdTimeMillis",
      "type": 10
    }
  ],
  "ProfileContent": [
    {
      "fid": 1,
      "name": "value",
      "type": 11
    },
    {
      "fid": 2,
      "name": "meta",
      "map": 11,
      "key": 11
    }
  ],
  "ProfileRefererContent": [
    {
      "fid": 1,
      "name": "oatQueryParameters",
      "map": 11,
      "key": 11
    }
  ],
  "PromotionBuddyDetail": [
    {
      "fid": 1,
      "name": "searchId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "contactStatus",
      "struct": "ContactStatus"
    },
    {
      "fid": 3,
      "name": "name",
      "type": 11
    },
    {
      "fid": 4,
      "name": "pictureUrl",
      "type": 11
    },
    {
      "fid": 5,
      "name": "statusMessage",
      "type": 11
    },
    {
      "fid": 6,
      "name": "brandType",
      "struct": "Ob1_EnumC12641m"
    }
  ],
  "PromotionBuddyInfo": [
    {
      "fid": 1,
      "name": "buddyMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "promotionBuddyDetail",
      "struct": "PromotionBuddyDetail"
    },
    {
      "fid": 3,
      "name": "showBanner",
      "type": 2
    }
  ],
  "PromotionInfo": [
    {
      "fid": 1,
      "name": "promotionType",
      "struct": "Ob1_EnumC12610b1"
    },
    {
      "fid": 2,
      "name": "promotionDetail",
      "struct": "Ob1_W0"
    },
    {
      "fid": 51,
      "name": "buddyInfo",
      "struct": "PromotionBuddyInfo"
    }
  ],
  "PromotionInstallInfo": [
    {
      "fid": 1,
      "name": "downloadUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "customUrlSchema",
      "type": 11
    }
  ],
  "PromotionMissionInfo": [
    {
      "fid": 1,
      "name": "promotionMissionType",
      "struct": "Ob1_EnumC12607a1"
    },
    {
      "fid": 2,
      "name": "missionCompleted",
      "type": 2
    },
    {
      "fid": 3,
      "name": "downloadUrl",
      "type": 11
    },
    {
      "fid": 4,
      "name": "customUrlSchema",
      "type": 11
    },
    {
      "fid": 5,
      "name": "oaMid",
      "type": 11
    }
  ],
  "Provider": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "name",
      "type": 11
    },
    {
      "fid": 3,
      "name": "providerPageUrl",
      "type": 11
    }
  ],
  "PublicKeyCredentialCreationOptions": [
    {
      "fid": 1,
      "name": "rp",
      "struct": "PublicKeyCredentialRpEntity"
    },
    {
      "fid": 2,
      "name": "user",
      "struct": "PublicKeyCredentialUserEntity"
    },
    {
      "fid": 3,
      "name": "challenge",
      "type": 11
    },
    {
      "fid": 4,
      "name": "pubKeyCredParams",
      "list": "PublicKeyCredentialParameters"
    },
    {
      "fid": 5,
      "name": "timeout",
      "type": 10
    },
    {
      "fid": 6,
      "name": "excludeCredentials",
      "set": "PublicKeyCredentialDescriptor"
    },
    {
      "fid": 7,
      "name": "authenticatorSelection",
      "struct": "AuthenticatorSelectionCriteria"
    },
    {
      "fid": 8,
      "name": "attestation",
      "type": 11
    },
    {
      "fid": 9,
      "name": "extensions",
      "struct": "AuthenticationExtensionsClientInputs"
    }
  ],
  "PublicKeyCredentialDescriptor": [
    {
      "fid": 1,
      "name": "type",
      "type": 11
    },
    {
      "fid": 2,
      "name": "id",
      "type": 11
    },
    {
      "fid": 3,
      "name": "transports",
      "set": 11
    }
  ],
  "PublicKeyCredentialParameters": [
    {
      "fid": 1,
      "name": "type",
      "type": 11
    },
    {
      "fid": 2,
      "name": "alg",
      "type": 8
    }
  ],
  "PublicKeyCredentialRequestOptions": [
    {
      "fid": 1,
      "name": "challenge",
      "type": 11
    },
    {
      "fid": 2,
      "name": "timeout",
      "type": 10
    },
    {
      "fid": 3,
      "name": "rpId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "allowCredentials",
      "set": "PublicKeyCredentialDescriptor"
    },
    {
      "fid": 5,
      "name": "userVerification",
      "type": 11
    },
    {
      "fid": 6,
      "name": "extensions",
      "struct": "AuthenticationExtensionsClientInputs"
    }
  ],
  "PublicKeyCredentialRpEntity": [
    {
      "fid": 1,
      "name": "name",
      "type": 11
    },
    {
      "fid": 2,
      "name": "icon",
      "type": 11
    },
    {
      "fid": 3,
      "name": "id",
      "type": 11
    }
  ],
  "PublicKeyCredentialUserEntity": [
    {
      "fid": 1,
      "name": "name",
      "type": 11
    },
    {
      "fid": 2,
      "name": "icon",
      "type": 11
    },
    {
      "fid": 3,
      "name": "id",
      "type": 11
    },
    {
      "fid": 4,
      "name": "displayName",
      "type": 11
    }
  ],
  "PurchaseEnabledRequest": [
    {
      "fid": 1,
      "name": "uniqueKey",
      "type": 11
    }
  ],
  "PurchaseOrder": [
    {
      "fid": 1,
      "name": "shopId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 5,
      "name": "recipientMid",
      "type": 11
    },
    {
      "fid": 11,
      "name": "price",
      "struct": "Price"
    },
    {
      "fid": 12,
      "name": "enableLinePointAutoExchange",
      "type": 2
    },
    {
      "fid": 21,
      "name": "locale",
      "struct": "Locale"
    },
    {
      "fid": 31,
      "name": "presentAttributes",
      "map": 11,
      "key": 11
    }
  ],
  "PurchaseOrderResponse": [
    {
      "fid": 1,
      "name": "orderId",
      "type": 11
    },
    {
      "fid": 11,
      "name": "attributes",
      "map": 11,
      "key": 11
    },
    {
      "fid": 12,
      "name": "billingConfirmUrl",
      "type": 11
    }
  ],
  "PurchaseRecord": [
    {
      "fid": 1,
      "name": "productDetail",
      "struct": "ProductDetail"
    },
    {
      "fid": 11,
      "name": "purchasedTime",
      "type": 10
    },
    {
      "fid": 21,
      "name": "giver",
      "type": 11
    },
    {
      "fid": 22,
      "name": "recipient",
      "type": 11
    },
    {
      "fid": 31,
      "name": "purchasedPrice",
      "struct": "Price"
    }
  ],
  "PurchaseRecordList": [
    {
      "fid": 1,
      "name": "purchaseRecords",
      "list": "PurchaseRecord"
    },
    {
      "fid": 2,
      "name": "offset",
      "type": 8
    },
    {
      "fid": 3,
      "name": "totalSize",
      "type": 8
    }
  ],
  "PurchaseSubscriptionRequest": [
    {
      "fid": 1,
      "name": "billingItemId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "subscriptionService",
      "struct": "Ob1_S1"
    },
    {
      "fid": 3,
      "name": "storeCode",
      "struct": "Ob1_K1"
    },
    {
      "fid": 4,
      "name": "storeOrderId",
      "type": 11
    },
    {
      "fid": 5,
      "name": "outsideAppPurchase",
      "type": 2
    },
    {
      "fid": 6,
      "name": "unavailableItemPurchase",
      "type": 2
    }
  ],
  "PurchaseSubscriptionResponse": [
    {
      "fid": 1,
      "name": "result",
      "struct": "Ob1_M1"
    },
    {
      "fid": 2,
      "name": "orderId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "confirmUrl",
      "type": 11
    }
  ],
  "PushRecvReport": [
    {
      "fid": 1,
      "name": "pushTrackingId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "recvTimestamp",
      "type": 10
    },
    {
      "fid": 3,
      "name": "battery",
      "type": 8
    },
    {
      "fid": 4,
      "name": "batteryMode",
      "struct": "Pb1_EnumC13009h0"
    },
    {
      "fid": 5,
      "name": "clientNetworkType",
      "struct": "Pb1_EnumC12998g3"
    },
    {
      "fid": 6,
      "name": "carrierCode",
      "type": 11
    },
    {
      "fid": 7,
      "name": "displayTimestamp",
      "type": 10
    }
  ],
  "PutE2eeKeyRequest": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "e2eeKey",
      "map": 11,
      "key": 11
    }
  ],
  "Q70_l": [],
  "Q70_o": [],
  "Qj_C13595l": [
    {
      "fid": 1,
      "name": "none",
      "struct": "_any"
    },
    {
      "fid": 2,
      "name": "chat",
      "struct": "LiffChatContext"
    },
    {
      "fid": 3,
      "name": "squareChat",
      "struct": "LiffSquareChatContext"
    }
  ],
  "Qj_C13599p": [
    {
      "fid": 3,
      "name": "consentRequired",
      "struct": "LiffErrorConsentRequired"
    },
    {
      "fid": 4,
      "name": "permanentLinkInvalidRequest",
      "struct": "LiffErrorPermanentLinkInvalidRequest"
    }
  ],
  "Qj_C13602t": [
    {
      "fid": 1,
      "name": "externalService",
      "struct": "_any"
    }
  ],
  "Qj_C13607y": [],
  "QuickMenuCouponInfo": [
    {
      "fid": 1,
      "name": "couponCount",
      "type": 11
    },
    {
      "fid": 2,
      "name": "mainText",
      "type": 11
    },
    {
      "fid": 3,
      "name": "linkUrl",
      "type": 11
    },
    {
      "fid": 4,
      "name": "iconUrl",
      "type": 11
    },
    {
      "fid": 5,
      "name": "targetId",
      "type": 11
    },
    {
      "fid": 6,
      "name": "targetName",
      "type": 11
    },
    {
      "fid": 7,
      "name": "responseStatus",
      "struct": "NZ0_W0"
    },
    {
      "fid": 8,
      "name": "darkModeIconUrl",
      "type": 11
    }
  ],
  "QuickMenuMyCardInfo": [
    {
      "fid": 1,
      "name": "myCardItems",
      "list": "QuickMenuMyCardItem"
    },
    {
      "fid": 2,
      "name": "responseStatus",
      "struct": "NZ0_W0"
    }
  ],
  "QuickMenuMyCardItem": [
    {
      "fid": 1,
      "name": "itemType",
      "struct": "NZ0_S0"
    },
    {
      "fid": 2,
      "name": "mainText",
      "type": 11
    },
    {
      "fid": 3,
      "name": "linkUrl",
      "type": 11
    },
    {
      "fid": 4,
      "name": "iconUrl",
      "type": 11
    },
    {
      "fid": 5,
      "name": "targetId",
      "type": 11
    },
    {
      "fid": 6,
      "name": "targetName",
      "type": 11
    },
    {
      "fid": 7,
      "name": "darkModeIconUrl",
      "type": 11
    }
  ],
  "QuickMenuPointInfo": [
    {
      "fid": 1,
      "name": "balance",
      "type": 11
    },
    {
      "fid": 2,
      "name": "linkUrl",
      "type": 11
    },
    {
      "fid": 3,
      "name": "iconUrl",
      "type": 11
    },
    {
      "fid": 4,
      "name": "targetId",
      "type": 11
    },
    {
      "fid": 5,
      "name": "targetName",
      "type": 11
    },
    {
      "fid": 6,
      "name": "responseStatus",
      "struct": "NZ0_W0"
    }
  ],
  "R70_a": [],
  "R70_c": [],
  "R70_d": [],
  "R70_t": [],
  "RSAEncryptedLoginInfo": [
    {
      "fid": 1,
      "name": "loginId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "loginPassword",
      "type": 11
    }
  ],
  "RSAEncryptedPassword": [
    {
      "fid": 1,
      "name": "encrypted",
      "type": 11
    },
    {
      "fid": 2,
      "name": "keyName",
      "type": 11
    }
  ],
  "RSAKey": [
    {
      "fid": 1,
      "name": "keynm",
      "type": 11
    },
    {
      "fid": 2,
      "name": "nvalue",
      "type": 11
    },
    {
      "fid": 3,
      "name": "evalue",
      "type": 11
    },
    {
      "fid": 4,
      "name": "sessionKey",
      "type": 11
    }
  ],
  "ReactRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "messageId",
      "type": 10
    },
    {
      "fid": 3,
      "name": "reactionType",
      "struct": "ReactionType"
    }
  ],
  "ReactToMessageRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "messageId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "reactionType",
      "struct": "MessageReactionType"
    },
    {
      "fid": 5,
      "name": "threadMid",
      "type": 11
    }
  ],
  "ReactToMessageResponse": [
    {
      "fid": 1,
      "name": "reaction",
      "struct": "SquareMessageReaction"
    },
    {
      "fid": 2,
      "name": "status",
      "struct": "SquareMessageReactionStatus"
    }
  ],
  "Reaction": [
    {
      "fid": 1,
      "name": "fromUserMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "atMillis",
      "type": 10
    },
    {
      "fid": 3,
      "name": "reactionType",
      "struct": "ReactionType"
    }
  ],
  "ReactionType": [
    {
      "fid": 1,
      "name": "predefinedReactionType",
      "struct": "MessageReactionType"
    }
  ],
  "RecommendationDetail": [
    {
      "fid": 1,
      "name": "createdTime",
      "type": 10
    },
    {
      "fid": 2,
      "name": "reasons",
      "list": "LN0_z0"
    },
    {
      "fid": 4,
      "name": "hidden",
      "type": 2
    }
  ],
  "RecommendationReasonSharedChat": [
    {
      "fid": 1,
      "name": "chatMid",
      "type": 11
    }
  ],
  "RefreshAccessTokenRequest": [
    {
      "fid": 1,
      "name": "refreshToken",
      "type": 11
    }
  ],
  "RefreshAccessTokenResponse": [
    {
      "fid": 1,
      "name": "accessToken",
      "type": 11
    },
    {
      "fid": 2,
      "name": "durationUntilRefreshInSec",
      "type": 10
    },
    {
      "fid": 3,
      "name": "retryPolicy",
      "struct": "RetryPolicy"
    },
    {
      "fid": 4,
      "name": "tokenIssueTimeEpochSec",
      "type": 10
    },
    {
      "fid": 5,
      "name": "refreshToken",
      "type": 11
    }
  ],
  "RefreshApiRetryPolicy": [
    {
      "fid": 1,
      "name": "initialDelayInMillis",
      "type": 10
    },
    {
      "fid": 2,
      "name": "maxDelayInMillis",
      "type": 10
    },
    {
      "fid": 3,
      "name": "multiplier",
      "type": 4
    },
    {
      "fid": 4,
      "name": "jitterRate",
      "type": 4
    }
  ],
  "RefreshSubscriptionsRequest": [
    {
      "fid": 2,
      "name": "subscriptions",
      "list": 10
    }
  ],
  "RefreshSubscriptionsResponse": [
    {
      "fid": 1,
      "name": "ttlMillis",
      "type": 10
    },
    {
      "fid": 2,
      "name": "subscriptionStates",
      "map": "SubscriptionState",
      "key": 10
    }
  ],
  "RegPublicKeyCredential": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "type",
      "type": 11
    },
    {
      "fid": 3,
      "name": "response",
      "struct": "AuthenticatorAttestationResponse"
    },
    {
      "fid": 4,
      "name": "extensionResults",
      "struct": "AuthenticationExtensionsClientOutputs"
    }
  ],
  "RegisterCampaignRewardRequest": [
    {
      "fid": 1,
      "name": "campaignId",
      "type": 11
    }
  ],
  "RegisterCampaignRewardResponse": [
    {
      "fid": 1,
      "name": "campaignStatus",
      "struct": "NZ0_EnumC12188n"
    },
    {
      "fid": 2,
      "name": "resultPopupProperty",
      "struct": "ResultPopupProperty"
    },
    {
      "fid": 3,
      "name": "errorMessage",
      "type": 11
    },
    {
      "fid": 4,
      "name": "registeredId",
      "type": 11
    },
    {
      "fid": 5,
      "name": "registeredDateTimeMillis",
      "type": 10
    },
    {
      "fid": 6,
      "name": "redirectUrlWithoutResultPopup",
      "type": 11
    }
  ],
  "RegisterE2EEPublicKeyV2Response": [
    {
      "fid": 1,
      "name": "publicKey",
      "struct": "Pb1_C13097n4"
    },
    {
      "fid": 2,
      "name": "isMasterKeyConflict",
      "type": 2
    }
  ],
  "RegisterPrimaryCredentialRequest": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "credential",
      "struct": "R70_p80_m"
    }
  ],
  "RegisterPrimaryWithTokenV3Response": [
    {
      "fid": 1,
      "name": "authToken",
      "type": 11
    },
    {
      "fid": 2,
      "name": "tokenV3IssueResult",
      "struct": "TokenV3IssueResult"
    },
    {
      "fid": 3,
      "name": "mid",
      "type": 11
    }
  ],
  "I80_q0": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "encryptionKey",
      "struct": "I80_y0"
    }
  ],
  "RegularBadge": [
    {
      "fid": 1,
      "name": "label",
      "type": 11
    },
    {
      "fid": 2,
      "name": "color",
      "type": 11
    }
  ],
  "ReissueChatTicketRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "groupMid",
      "type": 11
    }
  ],
  "ReissueChatTicketResponse": [
    {
      "fid": 1,
      "name": "ticketId",
      "type": 11
    }
  ],
  "RejectChatInvitationRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    }
  ],
  "RejectSpeakersRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "targetMids",
      "set": 11
    }
  ],
  "RejectSquareMembersRequest": [
    {
      "fid": 2,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "requestedMemberMids",
      "list": 11
    }
  ],
  "RejectSquareMembersResponse": [
    {
      "fid": 1,
      "name": "rejectedMembers",
      "list": "SquareMember"
    },
    {
      "fid": 2,
      "name": "status",
      "struct": "SquareStatus"
    }
  ],
  "RejectToSpeakRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "inviteRequestId",
      "type": 11
    }
  ],
  "RemoveFollowerRequest": [
    {
      "fid": 1,
      "name": "followMid",
      "struct": "Pb1_A4"
    }
  ],
  "RemoveFromFollowBlacklistRequest": [
    {
      "fid": 1,
      "name": "followMid",
      "struct": "Pb1_A4"
    }
  ],
  "RemoveItemFromCollectionRequest": [
    {
      "fid": 1,
      "name": "collectionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "itemId",
      "type": 11
    }
  ],
  "RemoveLiveTalkSubscriptionRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    }
  ],
  "RemoveProductFromSubscriptionSlotRequest": [
    {
      "fid": 1,
      "name": "productType",
      "struct": "Ob1_O0"
    },
    {
      "fid": 2,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "subscriptionService",
      "struct": "Ob1_S1"
    },
    {
      "fid": 4,
      "name": "productIds",
      "set": 11
    }
  ],
  "RemoveProductFromSubscriptionSlotResponse": [
    {
      "fid": 1,
      "name": "result",
      "struct": "Ob1_U1"
    }
  ],
  "RemoveSubscriptionsRequest": [
    {
      "fid": 2,
      "name": "unsubscriptions",
      "list": 10
    }
  ],
  "RepairGroupMembers": [
    {
      "fid": 1,
      "name": "numMembers",
      "type": 8
    },
    {
      "fid": 3,
      "name": "invalidGroup",
      "type": 2
    }
  ],
  "RepairProfileMappingMembers": [
    {
      "fid": 1,
      "name": "matched",
      "type": 2
    },
    {
      "fid": 2,
      "name": "numMembers",
      "type": 8
    }
  ],
  "RepairTriggerConfigurationsElement": [
    {
      "fid": 1,
      "name": "serverConfigurations",
      "struct": "Configurations"
    },
    {
      "fid": 2,
      "name": "nextCallIntervalMinutes",
      "type": 8
    }
  ],
  "RepairTriggerGroupMembersElement": [
    {
      "fid": 1,
      "name": "matchedGroups",
      "map": "RepairGroupMembers",
      "key": 11
    },
    {
      "fid": 2,
      "name": "mismatchedGroups",
      "map": "RepairGroupMembers",
      "key": 11
    },
    {
      "fid": 3,
      "name": "nextCallIntervalMinutes",
      "type": 8
    }
  ],
  "RepairTriggerNumElement": [
    {
      "fid": 1,
      "name": "matched",
      "type": 2
    },
    {
      "fid": 2,
      "name": "numValue",
      "type": 8
    },
    {
      "fid": 3,
      "name": "nextCallIntervalMinutes",
      "type": 8
    }
  ],
  "RepairTriggerProfileElement": [
    {
      "fid": 1,
      "name": "serverProfile",
      "struct": "Profile"
    },
    {
      "fid": 2,
      "name": "nextCallIntervalMinutes",
      "type": 8
    },
    {
      "fid": 3,
      "name": "serverMultiProfiles",
      "list": "Profile"
    }
  ],
  "RepairTriggerProfileMappingListElement": [
    {
      "fid": 1,
      "name": "profileMappings",
      "map": "RepairProfileMappingMembers",
      "key": 11
    },
    {
      "fid": 2,
      "name": "nextCallIntervalMinutes",
      "type": 8
    }
  ],
  "RepairTriggerSettingsElement": [
    {
      "fid": 1,
      "name": "serverSettings",
      "struct": "Settings"
    },
    {
      "fid": 2,
      "name": "nextCallIntervalMinutes",
      "type": 8
    }
  ],
  "ReportAbuseExRequest": [
    {
      "fid": 1,
      "name": "abuseReportEntry",
      "struct": "Pb1_C12938c"
    }
  ],
  "ReportLiveTalkRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "reportType",
      "struct": "LiveTalkReportType"
    }
  ],
  "ReportLiveTalkSpeakerRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "speakerMemberMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "reportType",
      "struct": "LiveTalkReportType"
    }
  ],
  "ReportMessageSummaryRequest": [
    {
      "fid": 1,
      "name": "chatEmid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "messageSummaryRangeTo",
      "type": 10
    },
    {
      "fid": 3,
      "name": "reportType",
      "struct": "MessageSummaryReportType"
    }
  ],
  "ReportRefreshedAccessTokenRequest": [
    {
      "fid": 1,
      "name": "accessToken",
      "type": 11
    }
  ],
  "ReportSquareChatRequest": [
    {
      "fid": 2,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 5,
      "name": "reportType",
      "struct": "ReportType"
    },
    {
      "fid": 6,
      "name": "otherReason",
      "type": 11
    }
  ],
  "ReportSquareMemberRequest": [
    {
      "fid": 2,
      "name": "squareMemberMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "reportType",
      "struct": "ReportType"
    },
    {
      "fid": 4,
      "name": "otherReason",
      "type": 11
    },
    {
      "fid": 5,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 6,
      "name": "threadMid",
      "type": 11
    }
  ],
  "ReportSquareMessageRequest": [
    {
      "fid": 2,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "squareMessageId",
      "type": 11
    },
    {
      "fid": 5,
      "name": "reportType",
      "struct": "ReportType"
    },
    {
      "fid": 6,
      "name": "otherReason",
      "type": 11
    },
    {
      "fid": 7,
      "name": "threadMid",
      "type": 11
    }
  ],
  "ReportSquareRequest": [
    {
      "fid": 2,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "reportType",
      "struct": "ReportType"
    },
    {
      "fid": 4,
      "name": "otherReason",
      "type": 11
    }
  ],
  "ReqToSendPhonePinCodeRequest": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "userPhoneNumber",
      "struct": "UserPhoneNumber"
    },
    {
      "fid": 3,
      "name": "verifMethod",
      "struct": "T70_K"
    }
  ],
  "I80_s0": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "userPhoneNumber",
      "struct": "UserPhoneNumber"
    },
    {
      "fid": 3,
      "name": "verifMethod",
      "struct": "I80_EnumC26425y"
    }
  ],
  "I80_t0": [
    {
      "fid": 1,
      "name": "availableMethods",
      "list": 8
    }
  ],
  "ReqToSendPhonePinCodeResponse": [
    {
      "fid": 1,
      "name": "availableMethods",
      "list": 8
    }
  ],
  "RequestToListenRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    }
  ],
  "I80_u0": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "email",
      "type": 11
    }
  ],
  "RequestToSendPasswordSetVerificationEmailResponse": [
    {
      "fid": 1,
      "name": "timeoutMinutes",
      "type": 10
    }
  ],
  "RequestToSpeakRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    }
  ],
  "RequestTokenResponse": [
    {
      "fid": 1,
      "name": "requestToken",
      "type": 11
    },
    {
      "fid": 2,
      "name": "returnUrl",
      "type": 11
    }
  ],
  "ReserveInfo": [
    {
      "fid": 1,
      "name": "purchaseEnabledStatus",
      "struct": "og_I"
    },
    {
      "fid": 2,
      "name": "orderInfo",
      "struct": "OrderInfo"
    }
  ],
  "ReserveRequest": [
    {
      "fid": 1,
      "name": "uniqueKey",
      "type": 11
    }
  ],
  "ReserveSubscriptionPurchaseRequest": [
    {
      "fid": 1,
      "name": "billingItemId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "storeCode",
      "struct": "fN0_G"
    },
    {
      "fid": 3,
      "name": "addOaFriend",
      "type": 2
    },
    {
      "fid": 4,
      "name": "entryPoint",
      "type": 11
    },
    {
      "fid": 5,
      "name": "campaignId",
      "type": 11
    },
    {
      "fid": 6,
      "name": "invitationId",
      "type": 11
    }
  ],
  "ReserveSubscriptionPurchaseResponse": [
    {
      "fid": 1,
      "name": "result",
      "struct": "fN0_F"
    },
    {
      "fid": 2,
      "name": "orderId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "confirmUrl",
      "type": 11
    }
  ],
  "I80_w0": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "I80_x0": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "tokenV3IssueResult",
      "struct": "TokenV3IssueResult"
    },
    {
      "fid": 3,
      "name": "tokenV1IssueResult",
      "struct": "TokenV1IssueResult"
    },
    {
      "fid": 4,
      "name": "accountCountryCode",
      "struct": "I80_X70_a"
    },
    {
      "fid": 5,
      "name": "formattedPhoneNumbers",
      "struct": "FormattedPhoneNumbers"
    }
  ],
  "ResultPopupProperty": [
    {
      "fid": 1,
      "name": "iconUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "text",
      "type": 11
    },
    {
      "fid": 3,
      "name": "closeButtonText",
      "type": 11
    },
    {
      "fid": 4,
      "name": "linkButtonText",
      "type": 11
    },
    {
      "fid": 5,
      "name": "linkButtonForwardUrl",
      "type": 11
    },
    {
      "fid": 6,
      "name": "eventButton",
      "struct": "EventButton"
    },
    {
      "fid": 7,
      "name": "oaAddfreindArea",
      "struct": "OaAddFriendArea"
    }
  ],
  "RetrieveRequestTokenWithDocomoV2Response": [
    {
      "fid": 1,
      "name": "loginRedirectUrl",
      "type": 11
    }
  ],
  "RetryPolicy": [
    {
      "fid": 1,
      "name": "initialDelayInMillis",
      "type": 10
    },
    {
      "fid": 2,
      "name": "maxDelayInMillis",
      "type": 10
    },
    {
      "fid": 3,
      "name": "multiplier",
      "type": 4
    },
    {
      "fid": 4,
      "name": "jitterRate",
      "type": 4
    }
  ],
  "RevokeTokensRequest": [
    {
      "fid": 1,
      "name": "accessTokens",
      "list": 11
    }
  ],
  "RichContent": [
    {
      "fid": 1,
      "name": "callback",
      "struct": "Callback"
    },
    {
      "fid": 2,
      "name": "noBidCallback",
      "struct": "NoBidCallback"
    },
    {
      "fid": 3,
      "name": "ttl",
      "type": 10
    },
    {
      "fid": 4,
      "name": "muteSupported",
      "type": 2
    },
    {
      "fid": 5,
      "name": "voteSupported",
      "type": 2
    },
    {
      "fid": 6,
      "name": "priority",
      "struct": "Priority"
    },
    {
      "fid": 7,
      "name": "richFormatPayload",
      "struct": "Uf_t"
    }
  ],
  "RichImage": [
    {
      "fid": 1,
      "name": "url",
      "type": 11
    }
  ],
  "RichItem": [
    {
      "fid": 1,
      "name": "eyeCatchMessage",
      "type": 11
    },
    {
      "fid": 2,
      "name": "message",
      "type": 11
    },
    {
      "fid": 3,
      "name": "animationLayer",
      "struct": "AnimationLayer"
    },
    {
      "fid": 4,
      "name": "thumbnailLayer",
      "struct": "ThumbnailLayer"
    },
    {
      "fid": 5,
      "name": "linkUrl",
      "type": 11
    },
    {
      "fid": 6,
      "name": "fallbackUrl",
      "type": 11
    }
  ],
  "RichString": [
    {
      "fid": 1,
      "name": "content",
      "type": 11
    },
    {
      "fid": 2,
      "name": "meta",
      "map": 11,
      "key": 11
    }
  ],
  "RichmenuCoordinates": [
    {
      "fid": 1,
      "name": "x",
      "type": 4
    },
    {
      "fid": 2,
      "name": "y",
      "type": 4
    }
  ],
  "RichmenuEvent": [
    {
      "fid": 1,
      "name": "type",
      "struct": "kf_u"
    },
    {
      "fid": 2,
      "name": "richmenuId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "coordinates",
      "struct": "RichmenuCoordinates"
    },
    {
      "fid": 4,
      "name": "areaIndex",
      "type": 8
    },
    {
      "fid": 5,
      "name": "clickUrl",
      "type": 11
    },
    {
      "fid": 6,
      "name": "clickAction",
      "struct": "kf_r"
    }
  ],
  "RingbackTone": [
    {
      "fid": 1,
      "name": "uuid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "trackId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "title",
      "type": 11
    },
    {
      "fid": 4,
      "name": "oid",
      "type": 11
    },
    {
      "fid": 5,
      "name": "tids",
      "map": 11,
      "key": 11
    },
    {
      "fid": 6,
      "name": "sid",
      "type": 11
    },
    {
      "fid": 7,
      "name": "artist",
      "type": 11
    },
    {
      "fid": 8,
      "name": "channelId",
      "type": 11
    }
  ],
  "Ringtone": [
    {
      "fid": 1,
      "name": "title",
      "type": 11
    },
    {
      "fid": 2,
      "name": "artist",
      "type": 11
    },
    {
      "fid": 3,
      "name": "oid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "channelId",
      "type": 11
    }
  ],
  "Room": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "createdTime",
      "type": 10
    },
    {
      "fid": 10,
      "name": "contacts",
      "list": "Contact"
    },
    {
      "fid": 31,
      "name": "notificationDisabled",
      "type": 2
    },
    {
      "fid": 40,
      "name": "memberMids",
      "list": 11
    }
  ],
  "Rssi": [
    {
      "fid": 1,
      "name": "value",
      "type": 8
    }
  ],
  "S70_b": [],
  "S70_k": [],
  "SCC": [
    {
      "fid": 1,
      "name": "businessName",
      "type": 11
    },
    {
      "fid": 2,
      "name": "tel",
      "type": 11
    },
    {
      "fid": 3,
      "name": "email",
      "type": 11
    },
    {
      "fid": 4,
      "name": "url",
      "type": 11
    },
    {
      "fid": 5,
      "name": "address",
      "type": 11
    },
    {
      "fid": 6,
      "name": "personName",
      "type": 11
    },
    {
      "fid": 7,
      "name": "memo",
      "type": 11
    }
  ],
  "SIMInfo": [
    {
      "fid": 1,
      "name": "phoneNumber",
      "type": 11
    },
    {
      "fid": 2,
      "name": "countryCode",
      "type": 11
    }
  ],
  "SKAdNetwork": [
    {
      "fid": 1,
      "name": "identifiers",
      "type": 11
    },
    {
      "fid": 2,
      "name": "version",
      "type": 11
    }
  ],
  "I80_y0": [
    {
      "fid": 1,
      "name": "keyMaterial",
      "type": 11
    }
  ],
  "SaveStudentInformationRequest": [
    {
      "fid": 1,
      "name": "studentInformation",
      "struct": "StudentInformation"
    }
  ],
  "Scenario": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "trigger",
      "struct": "do0_I"
    },
    {
      "fid": 3,
      "name": "actions",
      "list": "do0_C23141D"
    }
  ],
  "ScenarioSet": [
    {
      "fid": 1,
      "name": "scenarios",
      "list": "Scenario"
    },
    {
      "fid": 2,
      "name": "autoClose",
      "type": 2
    },
    {
      "fid": 3,
      "name": "suppressionInterval",
      "type": 10
    },
    {
      "fid": 4,
      "name": "revision",
      "type": 10
    },
    {
      "fid": 5,
      "name": "modifiedTime",
      "type": 10
    }
  ],
  "ScoreInfo": [
    {
      "fid": 1,
      "name": "assetServiceInfo",
      "struct": "AssetServiceInfo"
    }
  ],
  "ScryptParams": [
    {
      "fid": 1,
      "name": "salt",
      "type": 11
    },
    {
      "fid": 2,
      "name": "nrp",
      "type": 11
    },
    {
      "fid": 3,
      "name": "dkLen",
      "type": 10
    }
  ],
  "SearchSquareChatMembersRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "searchOption",
      "struct": "SquareChatMemberSearchOption"
    },
    {
      "fid": 3,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 4,
      "name": "limit",
      "type": 8
    }
  ],
  "SearchSquareChatMembersResponse": [
    {
      "fid": 1,
      "name": "members",
      "list": "SquareMember"
    },
    {
      "fid": 2,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "totalCount",
      "type": 8
    }
  ],
  "SearchSquareChatMentionablesRequest": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "searchOption",
      "struct": "SquareChatMentionableSearchOption"
    },
    {
      "fid": 3,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 4,
      "name": "limit",
      "type": 8
    }
  ],
  "SearchSquareChatMentionablesResponse": [
    {
      "fid": 1,
      "name": "mentionables",
      "list": "Mentionable"
    },
    {
      "fid": 2,
      "name": "continuationToken",
      "type": 11
    }
  ],
  "SearchSquareMembersRequest": [
    {
      "fid": 2,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "searchOption",
      "struct": "SquareMemberSearchOption"
    },
    {
      "fid": 4,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 5,
      "name": "limit",
      "type": 8
    }
  ],
  "SearchSquareMembersResponse": [
    {
      "fid": 1,
      "name": "members",
      "list": "SquareMember"
    },
    {
      "fid": 2,
      "name": "revision",
      "type": 10
    },
    {
      "fid": 3,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 4,
      "name": "totalCount",
      "type": 8
    }
  ],
  "SearchSquaresRequest": [
    {
      "fid": 2,
      "name": "query",
      "type": 11
    },
    {
      "fid": 3,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 4,
      "name": "limit",
      "type": 8
    }
  ],
  "SearchSquaresResponse": [
    {
      "fid": 1,
      "name": "squares",
      "list": "Square"
    },
    {
      "fid": 2,
      "name": "squareStatuses",
      "map": "SquareStatus",
      "key": 11
    },
    {
      "fid": 3,
      "name": "myMemberships",
      "map": "SquareMember",
      "key": 11
    },
    {
      "fid": 4,
      "name": "continuationToken",
      "type": 11
    },
    {
      "fid": 5,
      "name": "noteStatuses",
      "map": "NoteStatus",
      "key": 11
    }
  ],
  "SecurityCenterResult": [
    {
      "fid": 1,
      "name": "uri",
      "type": 11
    },
    {
      "fid": 2,
      "name": "token",
      "type": 11
    },
    {
      "fid": 3,
      "name": "cookiePath",
      "type": 11
    },
    {
      "fid": 4,
      "name": "skip",
      "type": 2
    }
  ],
  "SendEncryptedE2EEKeyRequest": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "encryptedSecureChannelPayload",
      "struct": "h80_Z70_a"
    }
  ],
  "SendMessageRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "squareMessage",
      "struct": "SquareMessage"
    }
  ],
  "SendMessageResponse": [
    {
      "fid": 1,
      "name": "createdSquareMessage",
      "struct": "SquareMessage"
    }
  ],
  "SendPostbackRequest": [
    {
      "fid": 1,
      "name": "messageId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "url",
      "type": 11
    },
    {
      "fid": 3,
      "name": "chatMID",
      "type": 11
    },
    {
      "fid": 4,
      "name": "originMID",
      "type": 11
    }
  ],
  "SendSquareThreadMessageRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "threadMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "threadMessage",
      "struct": "SquareMessage"
    }
  ],
  "SendSquareThreadMessageResponse": [
    {
      "fid": 1,
      "name": "createdThreadMessage",
      "struct": "SquareMessage"
    }
  ],
  "ServiceDisclaimerInfo": [
    {
      "fid": 1,
      "name": "disclaimerText",
      "type": 11
    },
    {
      "fid": 2,
      "name": "popupTitle",
      "type": 11
    },
    {
      "fid": 3,
      "name": "popupText",
      "type": 11
    }
  ],
  "ServiceShortcut": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "name",
      "type": 11
    },
    {
      "fid": 3,
      "name": "serviceEntryUrl",
      "type": 11
    },
    {
      "fid": 4,
      "name": "pictogramIconUrl",
      "type": 11
    },
    {
      "fid": 5,
      "name": "storeUrl",
      "type": 11
    },
    {
      "fid": 6,
      "name": "badgeActiveUntilTimestamp",
      "type": 11
    },
    {
      "fid": 7,
      "name": "recommendedModelId",
      "type": 11
    },
    {
      "fid": 8,
      "name": "eventIcon",
      "struct": "Icon"
    },
    {
      "fid": 9,
      "name": "coloredPictogramIcon",
      "struct": "Icon"
    },
    {
      "fid": 10,
      "name": "customBadgeLabel",
      "struct": "CustomBadgeLabel"
    }
  ],
  "SetChatHiddenStatusRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "lastMessageId",
      "type": 10
    },
    {
      "fid": 4,
      "name": "hidden",
      "type": 2
    }
  ],
  "I80_z0": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "password",
      "type": 11
    }
  ],
  "SetHashedPasswordRequest": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "password",
      "type": 11
    }
  ],
  "SetPasswordRequest": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "hashedPassword",
      "type": 11
    }
  ],
  "SetRequest": [
    {
      "fid": 1,
      "name": "keyName",
      "type": 11
    },
    {
      "fid": 2,
      "name": "value",
      "struct": "t80_p"
    },
    {
      "fid": 3,
      "name": "clientTimestampMillis",
      "type": 10
    },
    {
      "fid": 4,
      "name": "ns",
      "struct": "t80_h"
    },
    {
      "fid": 5,
      "name": "transactionId",
      "type": 11
    },
    {
      "fid": 6,
      "name": "updateReason",
      "struct": "UpdateReason"
    }
  ],
  "SetResponse": [
    {
      "fid": 1,
      "name": "value",
      "struct": "SettingValue"
    },
    {
      "fid": 2,
      "name": "updateTransactionId",
      "type": 11
    }
  ],
  "SettingValue": [
    {
      "fid": 1,
      "name": "value",
      "struct": "t80_p"
    },
    {
      "fid": 2,
      "name": "updateTimeMillis",
      "type": 10
    },
    {
      "fid": 3,
      "name": "scope",
      "struct": "t80_i"
    },
    {
      "fid": 4,
      "name": "scopeKey",
      "type": 11
    }
  ],
  "Settings": [
    {
      "fid": 10,
      "name": "notificationEnable",
      "type": 2
    },
    {
      "fid": 11,
      "name": "notificationMuteExpiration",
      "type": 10
    },
    {
      "fid": 12,
      "name": "notificationNewMessage",
      "type": 2
    },
    {
      "fid": 13,
      "name": "notificationGroupInvitation",
      "type": 2
    },
    {
      "fid": 14,
      "name": "notificationShowMessage",
      "type": 2
    },
    {
      "fid": 15,
      "name": "notificationIncomingCall",
      "type": 2
    },
    {
      "fid": 16,
      "name": "notificationSoundMessage",
      "type": 11
    },
    {
      "fid": 17,
      "name": "notificationSoundGroup",
      "type": 11
    },
    {
      "fid": 18,
      "name": "notificationDisabledWithSub",
      "type": 2
    },
    {
      "fid": 19,
      "name": "notificationPayment",
      "type": 2
    },
    {
      "fid": 20,
      "name": "privacySyncContacts",
      "type": 2
    },
    {
      "fid": 21,
      "name": "privacySearchByPhoneNumber",
      "type": 2
    },
    {
      "fid": 22,
      "name": "privacySearchByUserid",
      "type": 2
    },
    {
      "fid": 23,
      "name": "privacySearchByEmail",
      "type": 2
    },
    {
      "fid": 24,
      "name": "privacyAllowSecondaryDeviceLogin",
      "type": 2
    },
    {
      "fid": 25,
      "name": "privacyProfileImagePostToMyhome",
      "type": 2
    },
    {
      "fid": 26,
      "name": "privacyReceiveMessagesFromNotFriend",
      "type": 2
    },
    {
      "fid": 27,
      "name": "privacyAgreeUseLineCoinToPaidCall",
      "type": 2
    },
    {
      "fid": 28,
      "name": "privacyAgreeUsePaidCall",
      "type": 2
    },
    {
      "fid": 29,
      "name": "privacyAllowFriendRequest",
      "type": 2
    },
    {
      "fid": 30,
      "name": "contactMyTicket",
      "type": 11
    },
    {
      "fid": 40,
      "name": "identityProvider",
      "struct": "IdentityProvider"
    },
    {
      "fid": 41,
      "name": "identityIdentifier",
      "type": 11
    },
    {
      "fid": 42,
      "name": "snsAccounts",
      "map": 11,
      "key": 8
    },
    {
      "fid": 43,
      "name": "phoneRegistration",
      "type": 2
    },
    {
      "fid": 44,
      "name": "emailConfirmationStatus",
      "struct": "EmailConfirmationStatus"
    },
    {
      "fid": 45,
      "name": "accountMigrationPincodeType",
      "struct": "AccountMigrationPincodeType"
    },
    {
      "fid": 46,
      "name": "enforcedInputAccountMigrationPincode",
      "type": 2
    },
    {
      "fid": 47,
      "name": "securityCenterSettingsType",
      "struct": "AccountMigrationPincodeType"
    },
    {
      "fid": 48,
      "name": "allowUnregistrationSecondaryDevice",
      "type": 2
    },
    {
      "fid": 49,
      "name": "pwlessPrimaryCredentialRegistration",
      "type": 2
    },
    {
      "fid": 50,
      "name": "preferenceLocale",
      "type": 11
    },
    {
      "fid": 60,
      "name": "customModes",
      "map": 11,
      "key": 8
    },
    {
      "fid": 61,
      "name": "e2eeEnable",
      "type": 2
    },
    {
      "fid": 62,
      "name": "hitokotoBackupRequested",
      "type": 2
    },
    {
      "fid": 63,
      "name": "privacyProfileMusicPostToMyhome",
      "type": 2
    },
    {
      "fid": 65,
      "name": "privacyAllowNearby",
      "type": 2
    },
    {
      "fid": 66,
      "name": "agreementNearbyTime",
      "type": 10
    },
    {
      "fid": 67,
      "name": "agreementSquareTime",
      "type": 10
    },
    {
      "fid": 68,
      "name": "notificationMention",
      "type": 2
    },
    {
      "fid": 69,
      "name": "botUseAgreementAcceptedAt",
      "type": 10
    },
    {
      "fid": 70,
      "name": "agreementShakeFunction",
      "type": 10
    },
    {
      "fid": 71,
      "name": "agreementMobileContactName",
      "type": 10
    },
    {
      "fid": 72,
      "name": "notificationThumbnail",
      "type": 2
    },
    {
      "fid": 73,
      "name": "agreementSoundToText",
      "type": 10
    },
    {
      "fid": 74,
      "name": "privacyPolicyVersion",
      "type": 11
    },
    {
      "fid": 75,
      "name": "agreementAdByWebAccess",
      "type": 10
    },
    {
      "fid": 76,
      "name": "agreementPhoneNumberMatching",
      "type": 10
    },
    {
      "fid": 77,
      "name": "agreementCommunicationInfo",
      "type": 10
    },
    {
      "fid": 78,
      "name": "privacySharePersonalInfoToFriends",
      "struct": "Pb1_I6"
    },
    {
      "fid": 79,
      "name": "agreementThingsWirelessCommunication",
      "type": 10
    },
    {
      "fid": 80,
      "name": "agreementGdpr",
      "type": 10
    },
    {
      "fid": 81,
      "name": "privacyStatusMessageHistory",
      "struct": "Pb1_S7"
    },
    {
      "fid": 82,
      "name": "agreementProvideLocation",
      "type": 10
    },
    {
      "fid": 83,
      "name": "agreementBeacon",
      "type": 10
    },
    {
      "fid": 85,
      "name": "privacyAllowProfileHistory",
      "struct": "Pb1_M6"
    },
    {
      "fid": 86,
      "name": "agreementContentsSuggest",
      "type": 10
    },
    {
      "fid": 87,
      "name": "agreementContentsSuggestDataCollection",
      "type": 10
    },
    {
      "fid": 88,
      "name": "privacyAgeResult",
      "struct": "Pb1_gd"
    },
    {
      "fid": 89,
      "name": "privacyAgeResultReceived",
      "type": 2
    },
    {
      "fid": 90,
      "name": "agreementOcrImageCollection",
      "type": 10
    },
    {
      "fid": 91,
      "name": "privacyAllowFollow",
      "type": 2
    },
    {
      "fid": 92,
      "name": "privacyShowFollowList",
      "type": 2
    },
    {
      "fid": 93,
      "name": "notificationBadgeTalkOnly",
      "type": 2
    },
    {
      "fid": 94,
      "name": "agreementIcna",
      "type": 10
    },
    {
      "fid": 95,
      "name": "notificationReaction",
      "type": 2
    },
    {
      "fid": 96,
      "name": "agreementMid",
      "type": 10
    },
    {
      "fid": 97,
      "name": "homeNotificationNewFriend",
      "type": 2
    },
    {
      "fid": 98,
      "name": "homeNotificationFavoriteFriendUpdate",
      "type": 2
    },
    {
      "fid": 99,
      "name": "homeNotificationGroupMemberUpdate",
      "type": 2
    },
    {
      "fid": 100,
      "name": "homeNotificationBirthday",
      "type": 2
    },
    {
      "fid": 101,
      "name": "eapAllowedToConnect",
      "map": 2,
      "key": 8
    },
    {
      "fid": 102,
      "name": "agreementLineOutUse",
      "type": 10
    },
    {
      "fid": 103,
      "name": "agreementLineOutProvideInfo",
      "type": 10
    },
    {
      "fid": 104,
      "name": "notificationShowProfileImage",
      "type": 2
    },
    {
      "fid": 105,
      "name": "agreementPdpa",
      "type": 10
    },
    {
      "fid": 106,
      "name": "agreementLocationVersion",
      "type": 11
    },
    {
      "fid": 107,
      "name": "zhdPageAllowedToShow",
      "type": 2
    },
    {
      "fid": 108,
      "name": "agreementSnowAiAvatar",
      "type": 10
    },
    {
      "fid": 109,
      "name": "eapOnlyAccountTargetCountry",
      "type": 2
    },
    {
      "fid": 110,
      "name": "agreementLypPremiumAlbum",
      "type": 10
    },
    {
      "fid": 112,
      "name": "agreementLypPremiumAlbumVersion",
      "type": 10
    },
    {
      "fid": 113,
      "name": "agreementAlbumUsageData",
      "type": 10
    },
    {
      "fid": 114,
      "name": "agreementAlbumUsageDataVersion",
      "type": 10
    },
    {
      "fid": 115,
      "name": "agreementLypPremiumBackup",
      "type": 10
    },
    {
      "fid": 116,
      "name": "agreementLypPremiumBackupVersion",
      "type": 10
    },
    {
      "fid": 117,
      "name": "agreementOaAiAssistant",
      "type": 10
    },
    {
      "fid": 118,
      "name": "agreementOaAiAssistantVersion",
      "type": 10
    },
    {
      "fid": 119,
      "name": "agreementLypPremiumMultiProfile",
      "type": 10
    },
    {
      "fid": 120,
      "name": "agreementLypPremiumMultiProfileVersion",
      "type": 10
    }
  ],
  "ShareTargetPickerResultRequest": [
    {
      "fid": 1,
      "name": "ott",
      "type": 11
    },
    {
      "fid": 2,
      "name": "liffId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "resultCode",
      "struct": "Qj_e0"
    },
    {
      "fid": 4,
      "name": "resultDescription",
      "type": 11
    }
  ],
  "ShopFilter": [
    {
      "fid": 1,
      "name": "productAvailabilities",
      "set": 8
    },
    {
      "fid": 2,
      "name": "stickerSizes",
      "set": 8
    },
    {
      "fid": 3,
      "name": "popupLayers",
      "set": 8
    }
  ],
  "ShortcutUserGuidePopupInfo": [
    {
      "fid": 1,
      "name": "popupTitle",
      "type": 11
    },
    {
      "fid": 2,
      "name": "popupText",
      "type": 11
    },
    {
      "fid": 3,
      "name": "revisionTimeMillis",
      "type": 10
    }
  ],
  "ShouldShowWelcomeStickerBannerResponse": [
    {
      "fid": 1,
      "name": "shouldShowBanner",
      "type": 2
    }
  ],
  "I80_B0": [
    {
      "fid": 1,
      "name": "countryCode",
      "type": 11
    },
    {
      "fid": 2,
      "name": "hni",
      "type": 11
    },
    {
      "fid": 3,
      "name": "carrierName",
      "type": 11
    }
  ],
  "SimCard": [
    {
      "fid": 1,
      "name": "countryCode",
      "type": 11
    },
    {
      "fid": 2,
      "name": "hni",
      "type": 11
    },
    {
      "fid": 3,
      "name": "carrierName",
      "type": 11
    }
  ],
  "SingleValueMetadata": [
    {
      "fid": 1,
      "name": "type",
      "struct": "Pb1_K7"
    }
  ],
  "SleepAction": [
    {
      "fid": 1,
      "name": "sleepMillis",
      "type": 10
    }
  ],
  "SmartChannelRecommendation": [
    {
      "fid": 1,
      "name": "minDisplayDuration",
      "type": 8
    },
    {
      "fid": 2,
      "name": "title",
      "type": 11
    },
    {
      "fid": 3,
      "name": "descriptionText",
      "type": 11
    },
    {
      "fid": 4,
      "name": "labelText",
      "type": 11
    },
    {
      "fid": 5,
      "name": "imageUrl",
      "type": 11
    },
    {
      "fid": 6,
      "name": "bgColorCode",
      "type": 11
    },
    {
      "fid": 7,
      "name": "linkUrl",
      "type": 11
    },
    {
      "fid": 8,
      "name": "impEventUrl",
      "type": 11
    },
    {
      "fid": 9,
      "name": "clickEventUrl",
      "type": 11
    },
    {
      "fid": 10,
      "name": "muteEventUrl",
      "type": 11
    },
    {
      "fid": 11,
      "name": "upvoteEventUrl",
      "type": 11
    },
    {
      "fid": 12,
      "name": "downvoteEventUrl",
      "type": 11
    },
    {
      "fid": 13,
      "name": "template",
      "struct": "SmartChannelRecommendationTemplate"
    }
  ],
  "SmartChannelRecommendationTemplate": [
    {
      "fid": 1,
      "name": "type",
      "type": 11
    },
    {
      "fid": 2,
      "name": "bgColorName",
      "type": 11
    }
  ],
  "SocialLogin": [
    {
      "fid": 1,
      "name": "type",
      "struct": "T70_j1"
    },
    {
      "fid": 2,
      "name": "accessToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "countryCode",
      "type": 11
    }
  ],
  "SpotItem": [
    {
      "fid": 2,
      "name": "name",
      "type": 11
    },
    {
      "fid": 3,
      "name": "phone",
      "type": 11
    },
    {
      "fid": 4,
      "name": "category",
      "struct": "SpotCategory"
    },
    {
      "fid": 5,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 6,
      "name": "countryAreaCode",
      "type": 11
    },
    {
      "fid": 10,
      "name": "freePhoneCallable",
      "type": 2
    }
  ],
  "Square": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "name",
      "type": 11
    },
    {
      "fid": 3,
      "name": "welcomeMessage",
      "type": 11
    },
    {
      "fid": 4,
      "name": "profileImageObsHash",
      "type": 11
    },
    {
      "fid": 5,
      "name": "desc",
      "type": 11
    },
    {
      "fid": 6,
      "name": "searchable",
      "type": 2
    },
    {
      "fid": 7,
      "name": "type",
      "struct": "SquareType"
    },
    {
      "fid": 8,
      "name": "categoryId",
      "type": 8
    },
    {
      "fid": 9,
      "name": "invitationURL",
      "type": 11
    },
    {
      "fid": 10,
      "name": "revision",
      "type": 10
    },
    {
      "fid": 11,
      "name": "ableToUseInvitationTicket",
      "type": 2
    },
    {
      "fid": 12,
      "name": "state",
      "struct": "SquareState"
    },
    {
      "fid": 13,
      "name": "emblems",
      "list": "SquareEmblem"
    },
    {
      "fid": 14,
      "name": "joinMethod",
      "struct": "SquareJoinMethod"
    },
    {
      "fid": 15,
      "name": "adultOnly",
      "struct": "BooleanState"
    },
    {
      "fid": 16,
      "name": "svcTags",
      "list": 11
    },
    {
      "fid": 17,
      "name": "createdAt",
      "type": 10
    }
  ],
  "SquareAuthority": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "updateSquareProfile",
      "struct": "SquareMemberRole"
    },
    {
      "fid": 3,
      "name": "inviteNewMember",
      "struct": "SquareMemberRole"
    },
    {
      "fid": 4,
      "name": "approveJoinRequest",
      "struct": "SquareMemberRole"
    },
    {
      "fid": 5,
      "name": "createPost",
      "struct": "SquareMemberRole"
    },
    {
      "fid": 6,
      "name": "createOpenSquareChat",
      "struct": "SquareMemberRole"
    },
    {
      "fid": 7,
      "name": "deleteSquareChatOrPost",
      "struct": "SquareMemberRole"
    },
    {
      "fid": 8,
      "name": "removeSquareMember",
      "struct": "SquareMemberRole"
    },
    {
      "fid": 9,
      "name": "grantRole",
      "struct": "SquareMemberRole"
    },
    {
      "fid": 10,
      "name": "enableInvitationTicket",
      "struct": "SquareMemberRole"
    },
    {
      "fid": 11,
      "name": "revision",
      "type": 10
    },
    {
      "fid": 12,
      "name": "createSquareChatAnnouncement",
      "struct": "SquareMemberRole"
    },
    {
      "fid": 13,
      "name": "updateMaxChatMemberCount",
      "struct": "SquareMemberRole"
    },
    {
      "fid": 14,
      "name": "useReadonlyDefaultChat",
      "struct": "SquareMemberRole"
    },
    {
      "fid": 15,
      "name": "sendAllMention",
      "struct": "SquareMemberRole"
    }
  ],
  "SquareBot": [
    {
      "fid": 1,
      "name": "botMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "active",
      "type": 2
    },
    {
      "fid": 3,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 4,
      "name": "profileImageObsHash",
      "type": 11
    },
    {
      "fid": 5,
      "name": "iconType",
      "type": 8
    },
    {
      "fid": 6,
      "name": "lastModifiedAt",
      "type": 10
    },
    {
      "fid": 7,
      "name": "expiredIn",
      "type": 10
    }
  ],
  "SquareChat": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "type",
      "struct": "SquareChatType"
    },
    {
      "fid": 4,
      "name": "name",
      "type": 11
    },
    {
      "fid": 5,
      "name": "chatImageObsHash",
      "type": 11
    },
    {
      "fid": 6,
      "name": "squareChatRevision",
      "type": 10
    },
    {
      "fid": 7,
      "name": "maxMemberCount",
      "type": 8
    },
    {
      "fid": 8,
      "name": "state",
      "struct": "SquareChatState"
    },
    {
      "fid": 9,
      "name": "invitationUrl",
      "type": 11
    },
    {
      "fid": 10,
      "name": "messageVisibility",
      "struct": "MessageVisibility"
    },
    {
      "fid": 11,
      "name": "ableToSearchMessage",
      "struct": "BooleanState"
    }
  ],
  "SquareChatAnnouncement": [
    {
      "fid": 1,
      "name": "announcementSeq",
      "type": 10
    },
    {
      "fid": 2,
      "name": "type",
      "type": 8
    },
    {
      "fid": 3,
      "name": "contents",
      "struct": "SquareChatAnnouncementContents"
    },
    {
      "fid": 4,
      "name": "createdAt",
      "type": 10
    },
    {
      "fid": 5,
      "name": "creator",
      "type": 11
    }
  ],
  "SquareChatFeature": [
    {
      "fid": 1,
      "name": "controlState",
      "struct": "SquareChatFeatureControlState"
    },
    {
      "fid": 2,
      "name": "booleanValue",
      "struct": "BooleanState"
    }
  ],
  "SquareChatFeatureSet": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "revision",
      "type": 10
    },
    {
      "fid": 11,
      "name": "disableUpdateMaxChatMemberCount",
      "struct": "SquareChatFeature"
    },
    {
      "fid": 12,
      "name": "disableMarkAsReadEvent",
      "struct": "SquareChatFeature"
    }
  ],
  "SquareChatMember": [
    {
      "fid": 1,
      "name": "squareMemberMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "revision",
      "type": 10
    },
    {
      "fid": 4,
      "name": "membershipState",
      "struct": "SquareChatMembershipState"
    },
    {
      "fid": 5,
      "name": "notificationForMessage",
      "type": 2
    },
    {
      "fid": 6,
      "name": "notificationForNewMember",
      "type": 2
    }
  ],
  "SquareChatMemberSearchOption": [
    {
      "fid": 1,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 2,
      "name": "includingMe",
      "type": 2
    }
  ],
  "SquareChatMentionableSearchOption": [
    {
      "fid": 1,
      "name": "displayName",
      "type": 11
    }
  ],
  "SquareChatStatus": [
    {
      "fid": 3,
      "name": "lastMessage",
      "struct": "SquareMessage"
    },
    {
      "fid": 4,
      "name": "senderDisplayName",
      "type": 11
    },
    {
      "fid": 5,
      "name": "otherStatus",
      "struct": "SquareChatStatusWithoutMessage"
    }
  ],
  "SquareChatStatusWithoutMessage": [
    {
      "fid": 1,
      "name": "memberCount",
      "type": 8
    },
    {
      "fid": 2,
      "name": "unreadMessageCount",
      "type": 8
    },
    {
      "fid": 3,
      "name": "markedAsReadMessageId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "mentionedMessageId",
      "type": 11
    },
    {
      "fid": 5,
      "name": "notifiedMessageType",
      "struct": "NotifiedMessageType"
    },
    {
      "fid": 6,
      "name": "badges",
      "list": 8
    }
  ],
  "SquareCleanScore": [
    {
      "fid": 1,
      "name": "score",
      "type": 4
    }
  ],
  "SquareEvent": [
    {
      "fid": 2,
      "name": "createdTime",
      "type": 10
    },
    {
      "fid": 3,
      "name": "type",
      "struct": "SquareEventType"
    },
    {
      "fid": 4,
      "name": "payload",
      "struct": "SquareEventPayload"
    },
    {
      "fid": 5,
      "name": "syncToken",
      "type": 11
    },
    {
      "fid": 6,
      "name": "eventStatus",
      "struct": "SquareEventStatus"
    }
  ],
  "SquareEventChatPopup": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "popupId",
      "type": 10
    },
    {
      "fid": 3,
      "name": "flexJson",
      "type": 11
    },
    {
      "fid": 4,
      "name": "button",
      "struct": "ButtonContent"
    }
  ],
  "SquareEventMutateMessage": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareMessage",
      "struct": "SquareMessage"
    },
    {
      "fid": 3,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 4,
      "name": "senderDisplayName",
      "type": 11
    },
    {
      "fid": 5,
      "name": "threadMid",
      "type": 11
    }
  ],
  "SquareEventNotificationJoinRequest": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "requestMemberName",
      "type": 11
    },
    {
      "fid": 4,
      "name": "profileImageObsHash",
      "type": 11
    }
  ],
  "SquareEventNotificationLiveTalk": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "liveTalkInvitationTicket",
      "type": 11
    },
    {
      "fid": 3,
      "name": "squareChatName",
      "type": 11
    },
    {
      "fid": 4,
      "name": "chatImageObsHash",
      "type": 11
    }
  ],
  "SquareEventNotificationMemberUpdate": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "profileImageObsHash",
      "type": 11
    }
  ],
  "SquareEventNotificationMessage": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareMessage",
      "struct": "SquareMessage"
    },
    {
      "fid": 3,
      "name": "senderDisplayName",
      "type": 11
    },
    {
      "fid": 4,
      "name": "unreadCount",
      "type": 8
    },
    {
      "fid": 5,
      "name": "requiredToFetchChatEvents",
      "type": 2
    },
    {
      "fid": 6,
      "name": "mentionedMessageId",
      "type": 11
    },
    {
      "fid": 7,
      "name": "notifiedMessageType",
      "struct": "NotifiedMessageType"
    },
    {
      "fid": 8,
      "name": "reqSeq",
      "type": 8
    }
  ],
  "SquareEventNotificationMessageReaction": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "messageId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "squareChatName",
      "type": 11
    },
    {
      "fid": 4,
      "name": "reactorName",
      "type": 11
    },
    {
      "fid": 5,
      "name": "thumbnailObsHash",
      "type": 11
    },
    {
      "fid": 6,
      "name": "messageText",
      "type": 11
    },
    {
      "fid": 7,
      "name": "type",
      "struct": "MessageReactionType"
    }
  ],
  "SquareEventNotificationNewChatMember": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareChatName",
      "type": 11
    }
  ],
  "SquareEventNotificationPost": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "notificationPostType",
      "struct": "NotificationPostType"
    },
    {
      "fid": 3,
      "name": "thumbnailObsHash",
      "type": 11
    },
    {
      "fid": 4,
      "name": "text",
      "type": 11
    },
    {
      "fid": 5,
      "name": "actionUri",
      "type": 11
    }
  ],
  "SquareEventNotificationPostAnnouncement": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "squareProfileImageObsHash",
      "type": 11
    },
    {
      "fid": 4,
      "name": "actionUri",
      "type": 11
    }
  ],
  "SquareEventNotificationSquareChatDelete": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareChatName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "profileImageObsHash",
      "type": 11
    }
  ],
  "SquareEventNotificationSquareDelete": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "profileImageObsHash",
      "type": 11
    }
  ],
  "SquareEventNotificationThreadMessage": [
    {
      "fid": 1,
      "name": "threadMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "squareMessage",
      "struct": "SquareMessage"
    },
    {
      "fid": 4,
      "name": "senderDisplayName",
      "type": 11
    },
    {
      "fid": 5,
      "name": "unreadCount",
      "type": 10
    },
    {
      "fid": 6,
      "name": "totalMessageCount",
      "type": 10
    },
    {
      "fid": 7,
      "name": "threadRootMessageId",
      "type": 11
    }
  ],
  "SquareEventNotificationThreadMessageReaction": [
    {
      "fid": 1,
      "name": "threadMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "messageId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "squareChatName",
      "type": 11
    },
    {
      "fid": 5,
      "name": "reactorName",
      "type": 11
    },
    {
      "fid": 6,
      "name": "thumbnailObsHash",
      "type": 11
    }
  ],
  "SquareEventNotifiedAddBot": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareMember",
      "struct": "SquareMember"
    },
    {
      "fid": 3,
      "name": "botMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "botDisplayName",
      "type": 11
    }
  ],
  "SquareEventNotifiedCreateSquareChatMember": [
    {
      "fid": 1,
      "name": "chat",
      "struct": "SquareChat"
    },
    {
      "fid": 2,
      "name": "chatStatus",
      "struct": "SquareChatStatus"
    },
    {
      "fid": 3,
      "name": "chatMember",
      "struct": "SquareChatMember"
    },
    {
      "fid": 4,
      "name": "joinedAt",
      "type": 10
    },
    {
      "fid": 5,
      "name": "peerSquareMember",
      "struct": "SquareMember"
    },
    {
      "fid": 6,
      "name": "squareChatFeatureSet",
      "struct": "SquareChatFeatureSet"
    }
  ],
  "SquareEventNotifiedCreateSquareMember": [
    {
      "fid": 1,
      "name": "square",
      "struct": "Square"
    },
    {
      "fid": 2,
      "name": "squareAuthority",
      "struct": "SquareAuthority"
    },
    {
      "fid": 3,
      "name": "squareStatus",
      "struct": "SquareStatus"
    },
    {
      "fid": 4,
      "name": "squareMember",
      "struct": "SquareMember"
    },
    {
      "fid": 5,
      "name": "squareFeatureSet",
      "struct": "SquareFeatureSet"
    },
    {
      "fid": 6,
      "name": "noteStatus",
      "struct": "NoteStatus"
    }
  ],
  "SquareEventNotifiedDeleteSquareChat": [
    {
      "fid": 1,
      "name": "squareChat",
      "struct": "SquareChat"
    }
  ],
  "SquareEventNotifiedDestroyMessage": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "messageId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "threadMid",
      "type": 11
    }
  ],
  "SquareEventNotifiedInviteIntoSquareChat": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "invitees",
      "list": "SquareMember"
    },
    {
      "fid": 3,
      "name": "invitor",
      "struct": "SquareMember"
    },
    {
      "fid": 4,
      "name": "invitorRelation",
      "struct": "SquareMemberRelation"
    }
  ],
  "SquareEventNotifiedJoinSquareChat": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "joinedMember",
      "struct": "SquareMember"
    }
  ],
  "SquareEventNotifiedKickoutFromSquare": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "kickees",
      "list": "SquareMember"
    },
    {
      "fid": 3,
      "name": "kicker",
      "struct": "SquareMember"
    }
  ],
  "SquareEventNotifiedLeaveSquareChat": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareMemberMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "sayGoodbye",
      "type": 2
    },
    {
      "fid": 4,
      "name": "squareMember",
      "struct": "SquareMember"
    }
  ],
  "SquareEventNotifiedMarkAsRead": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sMemberMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "messageId",
      "type": 11
    }
  ],
  "SquareEventNotifiedRemoveBot": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareMember",
      "struct": "SquareMember"
    },
    {
      "fid": 3,
      "name": "botMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "botDisplayName",
      "type": 11
    }
  ],
  "SquareEventNotifiedShutdownSquare": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "square",
      "struct": "Square"
    }
  ],
  "SquareEventNotifiedSystemMessage": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "text",
      "type": 11
    },
    {
      "fid": 3,
      "name": "messageKey",
      "type": 11
    }
  ],
  "SquareEventNotifiedUpdateLiveTalk": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "liveTalkOnAir",
      "type": 2
    }
  ],
  "SquareEventNotifiedUpdateLiveTalkInfo": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "liveTalk",
      "struct": "LiveTalk"
    },
    {
      "fid": 3,
      "name": "liveTalkOnAir",
      "type": 2
    }
  ],
  "SquareEventNotifiedUpdateMessageStatus": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "messageId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "messageStatus",
      "struct": "SquareMessageStatus"
    },
    {
      "fid": 4,
      "name": "threadMid",
      "type": 11
    }
  ],
  "SquareEventNotifiedUpdateReadonlyChat": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "readonly",
      "type": 2
    }
  ],
  "SquareEventNotifiedUpdateSquare": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "square",
      "struct": "Square"
    }
  ],
  "SquareEventNotifiedUpdateSquareAuthority": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareAuthority",
      "struct": "SquareAuthority"
    }
  ],
  "SquareEventNotifiedUpdateSquareChat": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "squareChat",
      "struct": "SquareChat"
    }
  ],
  "SquareEventNotifiedUpdateSquareChatAnnouncement": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "announcementSeq",
      "type": 10
    }
  ],
  "SquareEventNotifiedUpdateSquareChatFeatureSet": [
    {
      "fid": 1,
      "name": "squareChatFeatureSet",
      "struct": "SquareChatFeatureSet"
    }
  ],
  "SquareEventNotifiedUpdateSquareChatMaxMemberCount": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "maxMemberCount",
      "type": 8
    },
    {
      "fid": 3,
      "name": "editor",
      "struct": "SquareMember"
    }
  ],
  "SquareEventNotifiedUpdateSquareChatMember": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "squareChatMember",
      "struct": "SquareChatMember"
    }
  ],
  "SquareEventNotifiedUpdateSquareChatProfileImage": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "editor",
      "struct": "SquareMember"
    }
  ],
  "SquareEventNotifiedUpdateSquareChatProfileName": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "editor",
      "struct": "SquareMember"
    },
    {
      "fid": 3,
      "name": "updatedChatName",
      "type": 11
    }
  ],
  "SquareEventNotifiedUpdateSquareChatStatus": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "statusWithoutMessage",
      "struct": "SquareChatStatusWithoutMessage"
    }
  ],
  "SquareEventNotifiedUpdateSquareFeatureSet": [
    {
      "fid": 1,
      "name": "squareFeatureSet",
      "struct": "SquareFeatureSet"
    }
  ],
  "SquareEventNotifiedUpdateSquareMember": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareMemberMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "squareMember",
      "struct": "SquareMember"
    }
  ],
  "SquareEventNotifiedUpdateSquareMemberProfile": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareMember",
      "struct": "SquareMember"
    }
  ],
  "SquareEventNotifiedUpdateSquareMemberRelation": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "myMemberMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "targetSquareMemberMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "squareMemberRelation",
      "struct": "SquareMemberRelation"
    }
  ],
  "SquareEventNotifiedUpdateSquareNoteStatus": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "noteStatus",
      "struct": "NoteStatus"
    }
  ],
  "SquareEventNotifiedUpdateSquareStatus": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareStatus",
      "struct": "SquareStatus"
    }
  ],
  "SquareEventNotifiedUpdateThread": [
    {
      "fid": 1,
      "name": "squareThread",
      "struct": "SquareThread"
    }
  ],
  "SquareEventNotifiedUpdateThreadMember": [
    {
      "fid": 1,
      "name": "threadMember",
      "struct": "SquareThreadMember"
    },
    {
      "fid": 2,
      "name": "squareThread",
      "struct": "SquareThread"
    },
    {
      "fid": 3,
      "name": "threadRootMessage",
      "struct": "SquareMessage"
    },
    {
      "fid": 4,
      "name": "totalMessageCount",
      "type": 10
    },
    {
      "fid": 5,
      "name": "lastMessage",
      "struct": "SquareMessage"
    },
    {
      "fid": 6,
      "name": "lastMessageSenderDisplayName",
      "type": 11
    }
  ],
  "SquareEventNotifiedUpdateThreadRootMessage": [
    {
      "fid": 1,
      "name": "squareThread",
      "struct": "SquareThread"
    }
  ],
  "SquareEventNotifiedUpdateThreadRootMessageStatus": [
    {
      "fid": 1,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "threadMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "threadRootMessageId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "totalMessageCount",
      "type": 10
    },
    {
      "fid": 5,
      "name": "lastMessageAt",
      "type": 10
    }
  ],
  "SquareEventNotifiedUpdateThreadStatus": [
    {
      "fid": 1,
      "name": "threadMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "unreadCount",
      "type": 10
    },
    {
      "fid": 4,
      "name": "markAsReadMessageId",
      "type": 11
    }
  ],
  "SquareEventReceiveMessage": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareMessage",
      "struct": "SquareMessage"
    },
    {
      "fid": 3,
      "name": "senderDisplayName",
      "type": 11
    },
    {
      "fid": 4,
      "name": "messageReactionStatus",
      "struct": "SquareMessageReactionStatus"
    },
    {
      "fid": 5,
      "name": "senderRevision",
      "type": 10
    },
    {
      "fid": 6,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 7,
      "name": "threadMid",
      "type": 11
    },
    {
      "fid": 8,
      "name": "threadTotalMessageCount",
      "type": 10
    },
    {
      "fid": 9,
      "name": "threadLastMessageAt",
      "type": 10
    },
    {
      "fid": 10,
      "name": "contentsAttribute",
      "struct": "ContentsAttribute"
    }
  ],
  "SquareEventSendMessage": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareMessage",
      "struct": "SquareMessage"
    },
    {
      "fid": 3,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 4,
      "name": "senderDisplayName",
      "type": 11
    },
    {
      "fid": 5,
      "name": "messageReactionStatus",
      "struct": "SquareMessageReactionStatus"
    },
    {
      "fid": 6,
      "name": "threadMid",
      "type": 11
    },
    {
      "fid": 7,
      "name": "threadTotalMessageCount",
      "type": 10
    },
    {
      "fid": 8,
      "name": "threadLastMessageAt",
      "type": 10
    }
  ],
  "SquareExtraInfo": [
    {
      "fid": 1,
      "name": "country",
      "type": 11
    }
  ],
  "SquareFeature": [
    {
      "fid": 1,
      "name": "controlState",
      "struct": "SquareFeatureControlState"
    },
    {
      "fid": 2,
      "name": "booleanValue",
      "struct": "BooleanState"
    }
  ],
  "SquareFeatureSet": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "revision",
      "type": 10
    },
    {
      "fid": 11,
      "name": "creatingSecretSquareChat",
      "struct": "SquareFeature"
    },
    {
      "fid": 12,
      "name": "invitingIntoOpenSquareChat",
      "struct": "SquareFeature"
    },
    {
      "fid": 13,
      "name": "creatingSquareChat",
      "struct": "SquareFeature"
    },
    {
      "fid": 14,
      "name": "readonlyDefaultChat",
      "struct": "SquareFeature"
    },
    {
      "fid": 15,
      "name": "showingAdvertisement",
      "struct": "SquareFeature"
    },
    {
      "fid": 16,
      "name": "delegateJoinToPlug",
      "struct": "SquareFeature"
    },
    {
      "fid": 17,
      "name": "delegateKickOutToPlug",
      "struct": "SquareFeature"
    },
    {
      "fid": 18,
      "name": "disableUpdateJoinMethod",
      "struct": "SquareFeature"
    },
    {
      "fid": 19,
      "name": "disableTransferAdmin",
      "struct": "SquareFeature"
    },
    {
      "fid": 20,
      "name": "creatingLiveTalk",
      "struct": "SquareFeature"
    },
    {
      "fid": 21,
      "name": "disableUpdateSearchable",
      "struct": "SquareFeature"
    },
    {
      "fid": 22,
      "name": "summarizingMessages",
      "struct": "SquareFeature"
    },
    {
      "fid": 23,
      "name": "creatingSquareThread",
      "struct": "SquareFeature"
    },
    {
      "fid": 24,
      "name": "enableSquareThread",
      "struct": "SquareFeature"
    },
    {
      "fid": 25,
      "name": "disableChangeRoleCoAdmin",
      "struct": "SquareFeature"
    }
  ],
  "SquareInfo": [
    {
      "fid": 1,
      "name": "square",
      "struct": "Square"
    },
    {
      "fid": 2,
      "name": "squareStatus",
      "struct": "SquareStatus"
    },
    {
      "fid": 3,
      "name": "squareNoteStatus",
      "struct": "NoteStatus"
    }
  ],
  "SquareJoinMethod": [
    {
      "fid": 1,
      "name": "type",
      "struct": "SquareJoinMethodType"
    },
    {
      "fid": 2,
      "name": "value",
      "struct": "SquareJoinMethodValue"
    }
  ],
  "SquareJoinMethodValue": [
    {
      "fid": 1,
      "name": "approvalValue",
      "struct": "ApprovalValue"
    },
    {
      "fid": 2,
      "name": "codeValue",
      "struct": "CodeValue"
    }
  ],
  "SquareMember": [
    {
      "fid": 1,
      "name": "squareMemberMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 4,
      "name": "profileImageObsHash",
      "type": 11
    },
    {
      "fid": 5,
      "name": "ableToReceiveMessage",
      "type": 2
    },
    {
      "fid": 7,
      "name": "membershipState",
      "struct": "SquareMembershipState"
    },
    {
      "fid": 8,
      "name": "role",
      "struct": "SquareMemberRole"
    },
    {
      "fid": 9,
      "name": "revision",
      "type": 10
    },
    {
      "fid": 10,
      "name": "preference",
      "struct": "SquarePreference"
    },
    {
      "fid": 11,
      "name": "joinMessage",
      "type": 11
    },
    {
      "fid": 12,
      "name": "createdAt",
      "type": 10
    }
  ],
  "SquareMemberRelation": [
    {
      "fid": 1,
      "name": "state",
      "struct": "SquareMemberRelationState"
    },
    {
      "fid": 2,
      "name": "revision",
      "type": 10
    }
  ],
  "SquareMemberSearchOption": [
    {
      "fid": 1,
      "name": "membershipState",
      "struct": "SquareMembershipState"
    },
    {
      "fid": 2,
      "name": "memberRoles",
      "set": "SquareMemberRole"
    },
    {
      "fid": 3,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 4,
      "name": "ableToReceiveMessage",
      "struct": "BooleanState"
    },
    {
      "fid": 5,
      "name": "ableToReceiveFriendRequest",
      "struct": "BooleanState"
    },
    {
      "fid": 6,
      "name": "chatMidToExcludeMembers",
      "type": 11
    },
    {
      "fid": 7,
      "name": "includingMe",
      "type": 2
    },
    {
      "fid": 8,
      "name": "excludeBlockedMembers",
      "type": 2
    },
    {
      "fid": 9,
      "name": "includingMeOnlyMatch",
      "type": 2
    }
  ],
  "SquareMessage": [
    {
      "fid": 1,
      "name": "message",
      "struct": "Message"
    },
    {
      "fid": 3,
      "name": "fromType",
      "struct": "MIDType"
    },
    {
      "fid": 4,
      "name": "squareMessageRevision",
      "type": 10
    },
    {
      "fid": 5,
      "name": "state",
      "struct": "SquareMessageState"
    },
    {
      "fid": 6,
      "name": "threadInfo",
      "struct": "SquareMessageThreadInfo"
    }
  ],
  "SquareMessageInfo": [
    {
      "fid": 1,
      "name": "message",
      "struct": "SquareMessage"
    },
    {
      "fid": 2,
      "name": "square",
      "struct": "Square"
    },
    {
      "fid": 3,
      "name": "chat",
      "struct": "SquareChat"
    },
    {
      "fid": 4,
      "name": "sender",
      "struct": "SquareMember"
    }
  ],
  "SquareMessageReaction": [
    {
      "fid": 1,
      "name": "type",
      "struct": "MessageReactionType"
    },
    {
      "fid": 2,
      "name": "reactor",
      "struct": "SquareMember"
    },
    {
      "fid": 3,
      "name": "createdAt",
      "type": 10
    },
    {
      "fid": 4,
      "name": "updatedAt",
      "type": 10
    }
  ],
  "SquareMessageReactionStatus": [
    {
      "fid": 1,
      "name": "totalCount",
      "type": 8
    },
    {
      "fid": 2,
      "name": "countByReactionType",
      "map": 8,
      "key": 8
    },
    {
      "fid": 3,
      "name": "myReaction",
      "struct": "SquareMessageReaction"
    }
  ],
  "SquareMessageStatus": [
    {
      "fid": 1,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "globalMessageId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "type",
      "struct": "MessageStatusType"
    },
    {
      "fid": 4,
      "name": "contents",
      "struct": "MessageStatusContents"
    },
    {
      "fid": 5,
      "name": "publishedAt",
      "type": 10
    },
    {
      "fid": 6,
      "name": "squareChatThreadMid",
      "type": 11
    }
  ],
  "SquareMessageThreadInfo": [
    {
      "fid": 1,
      "name": "chatThreadMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "threadRoot",
      "type": 2
    }
  ],
  "SquareMetadata": [
    {
      "fid": 1,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "excluded",
      "set": 8
    },
    {
      "fid": 3,
      "name": "revision",
      "type": 10
    },
    {
      "fid": 4,
      "name": "noAd",
      "type": 2
    },
    {
      "fid": 5,
      "name": "updatedAt",
      "type": 10
    }
  ],
  "SquarePreference": [
    {
      "fid": 1,
      "name": "favoriteTimestamp",
      "type": 10
    },
    {
      "fid": 2,
      "name": "notiForNewJoinRequest",
      "type": 2
    }
  ],
  "SquareStatus": [
    {
      "fid": 1,
      "name": "memberCount",
      "type": 8
    },
    {
      "fid": 2,
      "name": "joinRequestCount",
      "type": 8
    },
    {
      "fid": 3,
      "name": "lastJoinRequestAt",
      "type": 10
    },
    {
      "fid": 4,
      "name": "openChatCount",
      "type": 8
    }
  ],
  "SquareThread": [
    {
      "fid": 1,
      "name": "threadMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "messageId",
      "type": 11
    },
    {
      "fid": 5,
      "name": "state",
      "struct": "SquareThreadState"
    },
    {
      "fid": 6,
      "name": "expiresAt",
      "type": 10
    },
    {
      "fid": 7,
      "name": "readOnlyAt",
      "type": 10
    },
    {
      "fid": 8,
      "name": "revision",
      "type": 10
    }
  ],
  "SquareThreadMember": [
    {
      "fid": 1,
      "name": "squareMemberMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "threadMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "revision",
      "type": 10
    },
    {
      "fid": 5,
      "name": "membershipState",
      "struct": "SquareThreadMembershipState"
    }
  ],
  "SquareUserSettings": [
    {
      "fid": 1,
      "name": "liveTalkNotification",
      "struct": "BooleanState"
    }
  ],
  "SquareVisibility": [
    {
      "fid": 1,
      "name": "common",
      "type": 2
    },
    {
      "fid": 2,
      "name": "search",
      "type": 2
    }
  ],
  "StartPhotoboothRequest": [
    {
      "fid": 1,
      "name": "chatMid",
      "type": 11
    }
  ],
  "StartPhotoboothResponse": [
    {
      "fid": 1,
      "name": "photoboothSessionId",
      "type": 11
    }
  ],
  "I80_C0": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "modelName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "deviceUid",
      "type": 11
    }
  ],
  "I80_D0": [
    {
      "fid": 1,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 2,
      "name": "availableAuthFactors",
      "list": 8
    }
  ],
  "Sticker": [
    {
      "fid": 1,
      "name": "stickerId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "resourceType",
      "struct": "StickerResourceType"
    },
    {
      "fid": 3,
      "name": "popupLayer",
      "struct": "zR0_EnumC40578c"
    }
  ],
  "StickerDisplayData": [
    {
      "fid": 1,
      "name": "stickerHash",
      "type": 11
    },
    {
      "fid": 2,
      "name": "stickerResourceType",
      "struct": "StickerResourceType"
    },
    {
      "fid": 3,
      "name": "nameTextProperty",
      "struct": "ImageTextProperty"
    },
    {
      "fid": 4,
      "name": "popupLayer",
      "struct": "Ob1_B0"
    },
    {
      "fid": 5,
      "name": "stickerSize",
      "struct": "Ob1_C1"
    },
    {
      "fid": 6,
      "name": "productAvailability",
      "struct": "Ob1_D0"
    },
    {
      "fid": 7,
      "name": "height",
      "type": 8
    },
    {
      "fid": 8,
      "name": "width",
      "type": 8
    },
    {
      "fid": 9,
      "name": "version",
      "type": 10
    },
    {
      "fid": 10,
      "name": "availableForCombinationSticker",
      "type": 2
    }
  ],
  "StickerIdRange": [
    {
      "fid": 1,
      "name": "start",
      "type": 10
    },
    {
      "fid": 2,
      "name": "size",
      "type": 8
    }
  ],
  "StickerLayout": [
    {
      "fid": 1,
      "name": "layoutInfo",
      "struct": "StickerLayoutInfo"
    },
    {
      "fid": 2,
      "name": "stickerInfo",
      "struct": "StickerLayoutStickerInfo"
    }
  ],
  "StickerLayoutInfo": [
    {
      "fid": 1,
      "name": "width",
      "type": 4
    },
    {
      "fid": 2,
      "name": "height",
      "type": 4
    },
    {
      "fid": 3,
      "name": "rotation",
      "type": 4
    },
    {
      "fid": 4,
      "name": "x",
      "type": 4
    },
    {
      "fid": 5,
      "name": "y",
      "type": 4
    }
  ],
  "StickerLayoutStickerInfo": [
    {
      "fid": 1,
      "name": "stickerId",
      "type": 10
    },
    {
      "fid": 2,
      "name": "productId",
      "type": 10
    },
    {
      "fid": 3,
      "name": "stickerHash",
      "type": 11
    },
    {
      "fid": 4,
      "name": "stickerOptions",
      "type": 11
    },
    {
      "fid": 5,
      "name": "stickerVersion",
      "type": 10
    }
  ],
  "StickerProperty": [
    {
      "fid": 1,
      "name": "hasAnimation",
      "type": 2
    },
    {
      "fid": 2,
      "name": "hasSound",
      "type": 2
    },
    {
      "fid": 3,
      "name": "hasPopup",
      "type": 2
    },
    {
      "fid": 4,
      "name": "stickerResourceType",
      "struct": "StickerResourceType"
    },
    {
      "fid": 5,
      "name": "stickerOptions",
      "type": 11
    },
    {
      "fid": 6,
      "name": "compactStickerOptions",
      "type": 8
    },
    {
      "fid": 7,
      "name": "stickerHash",
      "type": 11
    },
    {
      "fid": 9,
      "name": "stickerIds",
      "list": 11
    },
    {
      "fid": 10,
      "name": "nameTextProperty",
      "struct": "ImageTextProperty"
    },
    {
      "fid": 11,
      "name": "availableForPhotoEdit",
      "type": 2
    },
    {
      "fid": 12,
      "name": "stickerDefaultTexts",
      "map": 11,
      "key": 11
    },
    {
      "fid": 13,
      "name": "stickerSize",
      "struct": "Ob1_C1"
    },
    {
      "fid": 14,
      "name": "popupLayer",
      "struct": "Ob1_B0"
    },
    {
      "fid": 15,
      "name": "cpdProduct",
      "type": 2
    },
    {
      "fid": 16,
      "name": "availableForCombinationSticker",
      "type": 2
    }
  ],
  "StickerSummary": [
    {
      "fid": 1,
      "name": "stickerIdRanges",
      "list": "StickerIdRange"
    },
    {
      "fid": 2,
      "name": "suggestVersion",
      "type": 10
    },
    {
      "fid": 3,
      "name": "stickerHash",
      "type": 11
    },
    {
      "fid": 4,
      "name": "defaultDisplayOnKeyboard",
      "type": 2
    },
    {
      "fid": 5,
      "name": "stickerResourceType",
      "struct": "StickerResourceType"
    },
    {
      "fid": 6,
      "name": "nameTextProperty",
      "struct": "ImageTextProperty"
    },
    {
      "fid": 7,
      "name": "availableForPhotoEdit",
      "type": 2
    },
    {
      "fid": 8,
      "name": "popupLayer",
      "struct": "Ob1_B0"
    },
    {
      "fid": 9,
      "name": "stickerSize",
      "struct": "Ob1_C1"
    },
    {
      "fid": 10,
      "name": "availableForCombinationSticker",
      "type": 2
    }
  ],
  "SticonProperty": [
    {
      "fid": 2,
      "name": "sticonIds",
      "list": 11
    },
    {
      "fid": 3,
      "name": "availableForPhotoEdit",
      "type": 2
    },
    {
      "fid": 4,
      "name": "sticonResourceType",
      "struct": "Ob1_F1"
    },
    {
      "fid": 5,
      "name": "endPageMainImages"
    }
  ],
  "SticonSummary": [
    {
      "fid": 1,
      "name": "suggestVersion",
      "type": 10
    },
    {
      "fid": 2,
      "name": "availableForPhotoEdit",
      "type": 2
    },
    {
      "fid": 3,
      "name": "sticonResourceType",
      "struct": "Ob1_F1"
    }
  ],
  "StopBundleSubscriptionRequest": [
    {
      "fid": 1,
      "name": "subscriptionService",
      "struct": "Ob1_S1"
    },
    {
      "fid": 2,
      "name": "storeCode",
      "struct": "Ob1_K1"
    }
  ],
  "StopBundleSubscriptionResponse": [
    {
      "fid": 1,
      "name": "result",
      "struct": "Ob1_J1"
    }
  ],
  "StopNotificationAction": [
    {
      "fid": 1,
      "name": "serviceUuid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "characteristicUuid",
      "type": 11
    }
  ],
  "StudentInformation": [
    {
      "fid": 1,
      "name": "schoolName",
      "type": 11
    },
    {
      "fid": 2,
      "name": "graduationDate",
      "type": 11
    }
  ],
  "SubLiffView": [
    {
      "fid": 1,
      "name": "presentationType",
      "struct": "Qj_i0"
    },
    {
      "fid": 2,
      "name": "url",
      "type": 11
    },
    {
      "fid": 3,
      "name": "maxBrightness",
      "type": 2
    },
    {
      "fid": 4,
      "name": "menuColorSetting",
      "struct": "LIFFMenuColorSetting"
    },
    {
      "fid": 5,
      "name": "closeButtonPosition",
      "struct": "Qj_h0"
    },
    {
      "fid": 6,
      "name": "closeButtonLabel",
      "type": 11
    },
    {
      "fid": 7,
      "name": "skipWebRTCPermissionPopupAllowed",
      "type": 2
    }
  ],
  "SubTab": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "name",
      "type": 11
    },
    {
      "fid": 3,
      "name": "badgeInfo",
      "struct": "BadgeInfo"
    },
    {
      "fid": 4,
      "name": "tooltipInfo",
      "struct": "TooltipInfo"
    },
    {
      "fid": 5,
      "name": "modulesOrder",
      "list": 11
    },
    {
      "fid": 6,
      "name": "wrsSubTabModelId",
      "type": 11
    }
  ],
  "SubWindowResultRequest": [
    {
      "fid": 1,
      "name": "msit",
      "type": 11
    },
    {
      "fid": 2,
      "name": "mstVerifier",
      "type": 11
    }
  ],
  "SubscriptionNotification": [
    {
      "fid": 1,
      "name": "subscriptionId",
      "type": 10
    }
  ],
  "SubscriptionPlan": [
    {
      "fid": 1,
      "name": "billingItemId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "subscriptionService",
      "struct": "Ob1_S1"
    },
    {
      "fid": 3,
      "name": "target",
      "struct": "Ob1_P1"
    },
    {
      "fid": 4,
      "name": "type",
      "struct": "Ob1_R1"
    },
    {
      "fid": 5,
      "name": "period",
      "type": 11
    },
    {
      "fid": 6,
      "name": "freeTrial",
      "type": 11
    },
    {
      "fid": 7,
      "name": "localizedName",
      "type": 11
    },
    {
      "fid": 8,
      "name": "price",
      "struct": "Price"
    },
    {
      "fid": 9,
      "name": "availability",
      "struct": "Ob1_O1"
    },
    {
      "fid": 10,
      "name": "cpId",
      "type": 11
    },
    {
      "fid": 11,
      "name": "nameKey",
      "type": 11
    },
    {
      "fid": 12,
      "name": "tier",
      "struct": "Ob1_Q1"
    }
  ],
  "SubscriptionSlotHistory": [
    {
      "fid": 1,
      "name": "product",
      "struct": "ProductSearchSummary"
    },
    {
      "fid": 2,
      "name": "addedTime",
      "type": 10
    },
    {
      "fid": 3,
      "name": "removedTime",
      "type": 10
    }
  ],
  "SubscriptionState": [
    {
      "fid": 1,
      "name": "subscriptionId",
      "type": 10
    },
    {
      "fid": 2,
      "name": "ttlMillis",
      "type": 10
    }
  ],
  "SubscriptionStatus": [
    {
      "fid": 1,
      "name": "billingItemId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "subscriptionService",
      "struct": "Ob1_S1"
    },
    {
      "fid": 3,
      "name": "period",
      "type": 11
    },
    {
      "fid": 4,
      "name": "localizedName",
      "type": 11
    },
    {
      "fid": 5,
      "name": "freeTrial",
      "type": 2
    },
    {
      "fid": 6,
      "name": "expired",
      "type": 2
    },
    {
      "fid": 7,
      "name": "validUntil",
      "type": 10
    },
    {
      "fid": 8,
      "name": "maxSlotCount",
      "type": 8
    },
    {
      "fid": 9,
      "name": "target",
      "struct": "Ob1_P1"
    },
    {
      "fid": 10,
      "name": "type",
      "struct": "Ob1_R1"
    },
    {
      "fid": 11,
      "name": "storeCode",
      "struct": "Ob1_K1"
    },
    {
      "fid": 12,
      "name": "nameKey",
      "type": 11
    },
    {
      "fid": 13,
      "name": "tier",
      "struct": "Ob1_Q1"
    },
    {
      "fid": 14,
      "name": "accountHold",
      "type": 2
    },
    {
      "fid": 15,
      "name": "maxSlotCountsByProductType",
      "map": 8,
      "key": 8
    },
    {
      "fid": 16,
      "name": "agreementAccepted",
      "type": 2
    },
    {
      "fid": 17,
      "name": "originalValidUntil",
      "type": 10
    }
  ],
  "SuggestDictionarySetting": [
    {
      "fid": 1,
      "name": "language",
      "type": 11
    },
    {
      "fid": 2,
      "name": "name",
      "type": 11
    },
    {
      "fid": 3,
      "name": "preload",
      "type": 2
    },
    {
      "fid": 4,
      "name": "suggestResource",
      "struct": "SuggestResource"
    },
    {
      "fid": 5,
      "name": "patch",
      "map": 11,
      "key": 10
    },
    {
      "fid": 6,
      "name": "suggestTagResource",
      "struct": "SuggestResource"
    },
    {
      "fid": 7,
      "name": "tagPatch",
      "map": 11,
      "key": 10
    },
    {
      "fid": 8,
      "name": "corpusResource",
      "struct": "SuggestResource"
    }
  ],
  "SuggestResource": [
    {
      "fid": 1,
      "name": "dataUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "version",
      "type": 10
    },
    {
      "fid": 3,
      "name": "updatedTime",
      "type": 10
    }
  ],
  "SuggestTag": [
    {
      "fid": 1,
      "name": "tagId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "weight",
      "type": 4
    }
  ],
  "SuggestTrialRecommendation": [
    {
      "fid": 1,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "productVersion",
      "type": 10
    },
    {
      "fid": 3,
      "name": "productName",
      "type": 11
    },
    {
      "fid": 4,
      "name": "resource",
      "struct": "zR0_C40580e"
    },
    {
      "fid": 5,
      "name": "tags",
      "list": "SuggestTag"
    }
  ],
  "SyncRequest": [
    {
      "fid": 1,
      "name": "lastRevision",
      "type": 10
    },
    {
      "fid": 2,
      "name": "count",
      "type": 8
    },
    {
      "fid": 3,
      "name": "lastGlobalRevision",
      "type": 10
    },
    {
      "fid": 4,
      "name": "lastIndividualRevision",
      "type": 10
    },
    {
      "fid": 5,
      "name": "fullSyncRequestReason",
      "struct": "Pb1_J4"
    },
    {
      "fid": 6,
      "name": "lastPartialFullSyncs",
      "map": 10,
      "key": 8
    }
  ],
  "SyncSquareMembersRequest": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "squareMembers",
      "map": 10,
      "key": 11
    }
  ],
  "SyncSquareMembersResponse": [
    {
      "fid": 1,
      "name": "updatedSquareMembers",
      "list": "SquareMember"
    }
  ],
  "T70_C14398f": [],
  "T70_g1": [],
  "T70_o1": [],
  "T70_s1": [],
  "TGlobalEvents": [
    {
      "fid": 1,
      "name": "events",
      "map": "GlobalEvent",
      "key": 8
    },
    {
      "fid": 2,
      "name": "lastRevision",
      "type": 10
    }
  ],
  "TIndividualEvents": [
    {
      "fid": 1,
      "name": "events",
      "set": 8
    },
    {
      "fid": 2,
      "name": "lastRevision",
      "type": 10
    }
  ],
  "TMessageReadRange": [
    {
      "fid": 1,
      "name": "chatId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "ranges",
      "key": 11
    }
  ],
  "TMessageReadRangeEntry": [
    {
      "fid": 1,
      "name": "startMessageId",
      "type": 10
    },
    {
      "fid": 2,
      "name": "endMessageId",
      "type": 10
    },
    {
      "fid": 3,
      "name": "startTime",
      "type": 10
    },
    {
      "fid": 4,
      "name": "endTime",
      "type": 10
    }
  ],
  "Tag": [
    {
      "fid": 1,
      "name": "tagId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "candidates",
      "list": "Candidate"
    }
  ],
  "TaiwanBankAgreementRequiredPopupInfo": [
    {
      "fid": 1,
      "name": "popupTitle",
      "type": 11
    },
    {
      "fid": 2,
      "name": "popupContent",
      "type": 11
    }
  ],
  "TaiwanBankBalanceInfo": [
    {
      "fid": 1,
      "name": "bankUser",
      "type": 2
    },
    {
      "fid": 2,
      "name": "balance",
      "type": 10
    },
    {
      "fid": 3,
      "name": "accessToken",
      "type": 11
    },
    {
      "fid": 4,
      "name": "accessTokenExpiresInSecond",
      "type": 8
    },
    {
      "fid": 5,
      "name": "balanceLinkUrl",
      "type": 11
    },
    {
      "fid": 6,
      "name": "balanceDisplay",
      "type": 2
    },
    {
      "fid": 7,
      "name": "agreedToShowBalance",
      "type": 2
    },
    {
      "fid": 8,
      "name": "agreementRequiredPopupInfo",
      "struct": "TaiwanBankAgreementRequiredPopupInfo"
    }
  ],
  "TaiwanBankLoginParameters": [
    {
      "fid": 1,
      "name": "loginScheme",
      "type": 11
    },
    {
      "fid": 2,
      "name": "type",
      "type": 11
    },
    {
      "fid": 3,
      "name": "action",
      "type": 11
    },
    {
      "fid": 4,
      "name": "scope",
      "type": 11
    },
    {
      "fid": 5,
      "name": "responseType",
      "type": 11
    },
    {
      "fid": 6,
      "name": "codeChallengeMethod",
      "type": 11
    },
    {
      "fid": 7,
      "name": "clientId",
      "type": 11
    }
  ],
  "TalkroomEnterReferer": [
    {
      "fid": 1,
      "name": "urlScheme",
      "type": 11
    },
    {
      "fid": 2,
      "name": "type",
      "struct": "kf_x"
    },
    {
      "fid": 3,
      "name": "content",
      "struct": "kf_w"
    }
  ],
  "TalkroomEvent": [
    {
      "fid": 1,
      "name": "type",
      "struct": "kf_z"
    },
    {
      "fid": 2,
      "name": "referer",
      "struct": "TalkroomEnterReferer"
    }
  ],
  "TargetProfileDetail": [
    {
      "fid": 1,
      "name": "snapshotTimeMillis",
      "type": 10
    },
    {
      "fid": 2,
      "name": "profileName",
      "type": 11
    },
    {
      "fid": 3,
      "name": "picturePath",
      "type": 11
    },
    {
      "fid": 4,
      "name": "statusMessage",
      "struct": "RichString"
    },
    {
      "fid": 5,
      "name": "musicProfile",
      "type": 11
    },
    {
      "fid": 6,
      "name": "videoProfile",
      "type": 11
    },
    {
      "fid": 7,
      "name": "avatarProfile",
      "struct": "AvatarProfile"
    },
    {
      "fid": 8,
      "name": "pictureSource",
      "struct": "Pb1_N6"
    },
    {
      "fid": 9,
      "name": "pictureStatus",
      "type": 11
    },
    {
      "fid": 10,
      "name": "profileId",
      "type": 11
    }
  ],
  "TermsAgreementExtraInfo": [
    {
      "fid": 1,
      "name": "termsType",
      "struct": "TermsType"
    },
    {
      "fid": 2,
      "name": "termsVersion",
      "type": 8
    },
    {
      "fid": 3,
      "name": "lanUrl",
      "type": 11
    }
  ],
  "TextButton": [
    {
      "fid": 1,
      "name": "text",
      "type": 11
    }
  ],
  "TextMessageAnnouncementContents": [
    {
      "fid": 1,
      "name": "messageId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "text",
      "type": 11
    },
    {
      "fid": 3,
      "name": "senderSquareMemberMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "createdAt",
      "type": 10
    }
  ],
  "ThaiBankBalanceInfo": [
    {
      "fid": 1,
      "name": "bankUser",
      "type": 2
    },
    {
      "fid": 2,
      "name": "balanceDisplay",
      "type": 2
    },
    {
      "fid": 3,
      "name": "balance",
      "type": 4
    },
    {
      "fid": 4,
      "name": "balanceLinkUrl",
      "type": 11
    }
  ],
  "ThemeProperty": [
    {
      "fid": 1,
      "name": "thumbnailUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "themeResourceType",
      "struct": "Ob1_c2"
    }
  ],
  "ThemeSummary": [
    {
      "fid": 1,
      "name": "imagePath",
      "type": 11
    },
    {
      "fid": 2,
      "name": "version",
      "type": 10
    },
    {
      "fid": 3,
      "name": "versionString",
      "type": 11
    }
  ],
  "ThingsDevice": [
    {
      "fid": 1,
      "name": "deviceId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "actionUri",
      "type": 11
    },
    {
      "fid": 3,
      "name": "botMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "productType",
      "struct": "do0_EnumC23139B"
    },
    {
      "fid": 5,
      "name": "providerName",
      "type": 11
    },
    {
      "fid": 6,
      "name": "profileImageLocation",
      "type": 11
    },
    {
      "fid": 7,
      "name": "channelIdList",
      "list": 11
    },
    {
      "fid": 8,
      "name": "targetABCEngineVersion",
      "type": 6
    },
    {
      "fid": 9,
      "name": "serviceUuid",
      "type": 11
    },
    {
      "fid": 10,
      "name": "bondingRequired",
      "type": 2
    }
  ],
  "ThingsOperation": [
    {
      "fid": 1,
      "name": "deviceId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "offset",
      "type": 10
    },
    {
      "fid": 3,
      "name": "action",
      "struct": "do0_C23138A"
    }
  ],
  "ThumbnailLayer": [
    {
      "fid": 1,
      "name": "frontThumbnailImage",
      "struct": "RichImage"
    },
    {
      "fid": 2,
      "name": "backgroundThumbnailImage",
      "struct": "RichImage"
    }
  ],
  "Ticket": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 10,
      "name": "expirationTime",
      "type": 10
    },
    {
      "fid": 21,
      "name": "maxUseCount",
      "type": 8
    }
  ],
  "TokenV1IssueResult": [
    {
      "fid": 1,
      "name": "tokenSecret",
      "type": 11
    }
  ],
  "TokenV3IssueResult": [
    {
      "fid": 1,
      "name": "accessToken",
      "type": 11
    },
    {
      "fid": 2,
      "name": "refreshToken",
      "type": 11
    },
    {
      "fid": 3,
      "name": "durationUntilRefreshInSec",
      "type": 10
    },
    {
      "fid": 4,
      "name": "refreshApiRetryPolicy",
      "struct": "RefreshApiRetryPolicy"
    },
    {
      "fid": 5,
      "name": "loginSessionId",
      "type": 11
    },
    {
      "fid": 6,
      "name": "tokenIssueTimeEpochSec",
      "type": 10
    }
  ],
  "Tooltip": [
    {
      "fid": 1,
      "name": "text",
      "type": 11
    },
    {
      "fid": 2,
      "name": "revisionTimeMillis",
      "type": 10
    }
  ],
  "TooltipInfo": [
    {
      "fid": 1,
      "name": "text",
      "type": 11
    },
    {
      "fid": 2,
      "name": "tooltipRevision",
      "type": 10
    }
  ],
  "TopTab": [
    {
      "fid": 1,
      "name": "id",
      "type": 11
    },
    {
      "fid": 2,
      "name": "modulesOrder",
      "list": 11
    }
  ],
  "TryAgainLaterExtraInfo": [
    {
      "fid": 1,
      "name": "blockSecs",
      "type": 8
    }
  ],
  "U70_a": [],
  "U70_t": [],
  "U70_v": [],
  "UEN": [
    {
      "fid": 1,
      "name": "revision",
      "type": 10
    }
  ],
  "Uf_C14856C": [
    {
      "fid": 1,
      "name": "uen",
      "struct": "UEN"
    },
    {
      "fid": 2,
      "name": "beacon",
      "struct": "Beacon"
    }
  ],
  "Uf_C14864f": [
    {
      "fid": 1,
      "name": "regularBadge",
      "struct": "RegularBadge"
    },
    {
      "fid": 2,
      "name": "urgentBadge",
      "struct": "UrgentBadge"
    }
  ],
  "Uf_p": [
    {
      "fid": 1,
      "name": "ad",
      "struct": "AD"
    },
    {
      "fid": 2,
      "name": "content",
      "struct": "Content"
    },
    {
      "fid": 3,
      "name": "richContent",
      "struct": "RichContent"
    }
  ],
  "Uf_t": [
    {
      "fid": 1,
      "name": "typeA",
      "struct": "RichItem"
    },
    {
      "fid": 2,
      "name": "typeB",
      "struct": "RichItem"
    }
  ],
  "UnfollowRequest": [
    {
      "fid": 1,
      "name": "followMid",
      "struct": "Pb1_A4"
    }
  ],
  "UnhideSquareMemberContentsRequest": [
    {
      "fid": 1,
      "name": "squareMemberMid",
      "type": 11
    }
  ],
  "UnregisterAvailabilityInfo": [
    {
      "fid": 1,
      "name": "result",
      "struct": "r80_m0"
    },
    {
      "fid": 2,
      "name": "message",
      "type": 11
    }
  ],
  "UnsendMessageRequest": [
    {
      "fid": 2,
      "name": "squareChatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "messageId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "threadMid",
      "type": 11
    }
  ],
  "UnsendMessageResponse": [
    {
      "fid": 1,
      "name": "unsentMessage",
      "struct": "SquareMessage"
    }
  ],
  "UpdateChatRequest": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "chat",
      "struct": "Chat"
    },
    {
      "fid": 3,
      "name": "updatedAttribute",
      "struct": "Pb1_O2"
    }
  ],
  "UpdateGroupCallUrlRequest": [
    {
      "fid": 1,
      "name": "urlId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "targetAttribute",
      "struct": "Pb1_ad"
    }
  ],
  "UpdateLiveTalkAttrsRequest": [
    {
      "fid": 1,
      "name": "updatedAttrs",
      "set": "LiveTalkAttribute"
    },
    {
      "fid": 2,
      "name": "liveTalk",
      "struct": "LiveTalk"
    }
  ],
  "UpdatePasswordRequest": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "hashedPassword",
      "type": 11
    }
  ],
  "UpdateProfileAttributesRequest": [
    {
      "fid": 1,
      "name": "profileAttributes",
      "map": "ProfileContent",
      "key": 8
    }
  ],
  "UpdateReason": [
    {
      "fid": 1,
      "name": "type",
      "struct": "t80_r"
    },
    {
      "fid": 2,
      "name": "detail",
      "type": 11
    }
  ],
  "UpdateSafetyStatusRequest": [
    {
      "fid": 1,
      "name": "disasterId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "safetyStatus",
      "struct": "vh_m"
    },
    {
      "fid": 3,
      "name": "message",
      "type": 11
    }
  ],
  "UpdateSquareAuthorityRequest": [
    {
      "fid": 2,
      "name": "updateAttributes",
      "set": "SquareAuthorityAttribute"
    },
    {
      "fid": 3,
      "name": "authority",
      "struct": "SquareAuthority"
    }
  ],
  "UpdateSquareAuthorityResponse": [
    {
      "fid": 1,
      "name": "updatdAttributes",
      "set": 8
    },
    {
      "fid": 2,
      "name": "authority",
      "struct": "SquareAuthority"
    }
  ],
  "UpdateSquareChatMemberRequest": [
    {
      "fid": 2,
      "name": "updatedAttrs",
      "set": "SquareChatMemberAttribute"
    },
    {
      "fid": 3,
      "name": "chatMember",
      "struct": "SquareChatMember"
    }
  ],
  "UpdateSquareChatMemberResponse": [
    {
      "fid": 1,
      "name": "updatedChatMember",
      "struct": "SquareChatMember"
    }
  ],
  "UpdateSquareChatRequest": [
    {
      "fid": 2,
      "name": "updatedAttrs",
      "set": "SquareChatAttribute"
    },
    {
      "fid": 3,
      "name": "squareChat",
      "struct": "SquareChat"
    }
  ],
  "UpdateSquareChatResponse": [
    {
      "fid": 1,
      "name": "updatedAttrs",
      "set": 8
    },
    {
      "fid": 2,
      "name": "squareChat",
      "struct": "SquareChat"
    }
  ],
  "UpdateSquareFeatureSetRequest": [
    {
      "fid": 2,
      "name": "updateAttributes",
      "set": "SquareFeatureSetAttribute"
    },
    {
      "fid": 3,
      "name": "squareFeatureSet",
      "struct": "SquareFeatureSet"
    }
  ],
  "UpdateSquareFeatureSetResponse": [
    {
      "fid": 1,
      "name": "updateAttributes",
      "set": 8
    },
    {
      "fid": 2,
      "name": "squareFeatureSet",
      "struct": "SquareFeatureSet"
    }
  ],
  "UpdateSquareMemberRelationRequest": [
    {
      "fid": 2,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "targetSquareMemberMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "updatedAttrs",
      "set": 8
    },
    {
      "fid": 5,
      "name": "relation",
      "struct": "SquareMemberRelation"
    }
  ],
  "UpdateSquareMemberRelationResponse": [
    {
      "fid": 1,
      "name": "squareMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "targetSquareMemberMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "updatedAttrs",
      "set": 8
    },
    {
      "fid": 4,
      "name": "relation",
      "struct": "SquareMemberRelation"
    }
  ],
  "UpdateSquareMemberRequest": [
    {
      "fid": 2,
      "name": "updatedAttrs",
      "set": "SquareMemberAttribute"
    },
    {
      "fid": 3,
      "name": "updatedPreferenceAttrs",
      "set": "SquarePreferenceAttribute"
    },
    {
      "fid": 4,
      "name": "squareMember",
      "struct": "SquareMember"
    }
  ],
  "UpdateSquareMemberResponse": [
    {
      "fid": 1,
      "name": "updatedAttrs",
      "set": 8
    },
    {
      "fid": 2,
      "name": "squareMember",
      "struct": "SquareMember"
    },
    {
      "fid": 3,
      "name": "updatedPreferenceAttrs",
      "set": 8
    }
  ],
  "UpdateSquareMembersRequest": [
    {
      "fid": 2,
      "name": "updatedAttrs",
      "set": "SquareMemberAttribute"
    },
    {
      "fid": 3,
      "name": "members",
      "list": "SquareMember"
    }
  ],
  "UpdateSquareMembersResponse": [
    {
      "fid": 1,
      "name": "updatedAttrs",
      "set": 8
    },
    {
      "fid": 2,
      "name": "editor",
      "struct": "SquareMember"
    },
    {
      "fid": 3,
      "name": "members",
      "map": "SquareMember",
      "key": 11
    }
  ],
  "UpdateSquareRequest": [
    {
      "fid": 2,
      "name": "updatedAttrs",
      "set": "SquareAttribute"
    },
    {
      "fid": 3,
      "name": "square",
      "struct": "Square"
    }
  ],
  "UpdateSquareResponse": [
    {
      "fid": 1,
      "name": "updatedAttrs",
      "set": 8
    },
    {
      "fid": 2,
      "name": "square",
      "struct": "Square"
    }
  ],
  "UpdateUserSettingsRequest": [
    {
      "fid": 1,
      "name": "updatedAttrs",
      "set": "SquareUserSettingsAttribute"
    },
    {
      "fid": 2,
      "name": "userSettings",
      "struct": "SquareUserSettings"
    }
  ],
  "UrgentBadge": [
    {
      "fid": 1,
      "name": "bgColor",
      "type": 11
    },
    {
      "fid": 2,
      "name": "label",
      "type": 11
    },
    {
      "fid": 3,
      "name": "color",
      "type": 11
    }
  ],
  "UrlButton": [
    {
      "fid": 1,
      "name": "text",
      "type": 11
    },
    {
      "fid": 2,
      "name": "url",
      "type": 11
    }
  ],
  "UsePhotoboothTicketRequest": [
    {
      "fid": 1,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "photoboothSessionId",
      "type": 11
    }
  ],
  "UsePhotoboothTicketResponse": [
    {
      "fid": 1,
      "name": "signedTicketJwt",
      "type": 11
    }
  ],
  "UserBlockDetail": [
    {
      "fid": 3,
      "name": "deletedFromBlockList",
      "type": 2
    }
  ],
  "UserDevice": [
    {
      "fid": 1,
      "name": "device",
      "struct": "ThingsDevice"
    },
    {
      "fid": 2,
      "name": "deviceDisplayName",
      "type": 11
    }
  ],
  "UserFriendDetail": [
    {
      "fid": 1,
      "name": "createdTime",
      "type": 10
    },
    {
      "fid": 3,
      "name": "overriddenName",
      "type": 11
    },
    {
      "fid": 4,
      "name": "favoriteTime",
      "type": 10
    },
    {
      "fid": 6,
      "name": "hidden",
      "type": 2
    },
    {
      "fid": 7,
      "name": "ringtone",
      "type": 11
    },
    {
      "fid": 8,
      "name": "ringbackTone",
      "type": 11
    }
  ],
  "UserPhoneNumber": [
    {
      "fid": 1,
      "name": "phoneNumber",
      "type": 11
    },
    {
      "fid": 2,
      "name": "countryCode",
      "type": 11
    }
  ],
  "UserProfile": [
    {
      "fid": 1,
      "name": "displayName",
      "type": 11
    },
    {
      "fid": 2,
      "name": "profileImageUrl",
      "type": 11
    }
  ],
  "UserRestrictionExtraInfo": [
    {
      "fid": 1,
      "name": "linkUrl",
      "type": 11
    }
  ],
  "V1PasswordHashingParameters": [
    {
      "fid": 1,
      "name": "aesKey",
      "type": 11
    },
    {
      "fid": 2,
      "name": "salt",
      "type": 11
    }
  ],
  "VerificationSessionData": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "method",
      "struct": "VerificationMethod"
    },
    {
      "fid": 3,
      "name": "callback",
      "type": 11
    },
    {
      "fid": 4,
      "name": "normalizedPhone",
      "type": 11
    },
    {
      "fid": 5,
      "name": "countryCode",
      "type": 11
    },
    {
      "fid": 6,
      "name": "nationalSignificantNumber",
      "type": 11
    },
    {
      "fid": 7,
      "name": "availableVerificationMethods",
      "list": "VerificationMethod"
    }
  ],
  "VerifyAccountUsingHashedPwdRequest": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "accountIdentifier",
      "struct": "AccountIdentifier"
    },
    {
      "fid": 3,
      "name": "v1HashedPassword",
      "type": 11
    },
    {
      "fid": 4,
      "name": "clientHashedPassword",
      "type": 11
    }
  ],
  "I80_E0": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "v1HashedPassword",
      "type": 11
    },
    {
      "fid": 3,
      "name": "clientHashedPassword",
      "type": 11
    }
  ],
  "VerifyAccountUsingHashedPwdResponse": [
    {
      "fid": 1,
      "name": "userProfile",
      "struct": "UserProfile"
    }
  ],
  "VerifyAssertionRequest": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "credentialId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "assertionObject",
      "type": 11
    },
    {
      "fid": 4,
      "name": "clientDataJSON",
      "type": 11
    }
  ],
  "VerifyAttestationRequest": [
    {
      "fid": 1,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "attestationObject",
      "type": 11
    },
    {
      "fid": 3,
      "name": "clientDataJSON",
      "type": 11
    }
  ],
  "VerifyEapLoginRequest": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "eapLogin",
      "struct": "EapLogin"
    }
  ],
  "I80_G0": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "eapLogin",
      "struct": "EapLogin"
    }
  ],
  "VerifyEapLoginResponse": [
    {
      "fid": 1,
      "name": "accountExists",
      "type": 2
    }
  ],
  "I80_H0": [
    {
      "fid": 1,
      "name": "userProfile",
      "struct": "I80_V70_a"
    }
  ],
  "VerifyPhonePinCodeRequest": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "userPhoneNumber",
      "struct": "UserPhoneNumber"
    },
    {
      "fid": 3,
      "name": "pinCode",
      "type": 11
    }
  ],
  "I80_I0": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "userPhoneNumber",
      "struct": "UserPhoneNumber"
    },
    {
      "fid": 3,
      "name": "pinCode",
      "type": 11
    }
  ],
  "VerifyPhonePinCodeResponse": [
    {
      "fid": 1,
      "name": "accountExist",
      "type": 2
    },
    {
      "fid": 2,
      "name": "sameUdidFromAccount",
      "type": 2
    },
    {
      "fid": 3,
      "name": "allowedToRegister",
      "type": 2
    },
    {
      "fid": 11,
      "name": "userProfile",
      "struct": "UserProfile"
    }
  ],
  "I80_J0": [
    {
      "fid": 1,
      "name": "userProfile",
      "struct": "I80_V70_a"
    }
  ],
  "VerifyPinCodeRequest": [
    {
      "fid": 1,
      "name": "pinCode",
      "type": 11
    }
  ],
  "VerifyQrCodeRequest": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "metaData",
      "map": 11,
      "key": 11
    }
  ],
  "VerifySocialLoginResponse": [
    {
      "fid": 2,
      "name": "accountExist",
      "type": 2
    },
    {
      "fid": 11,
      "name": "userProfile",
      "struct": "UserProfile"
    },
    {
      "fid": 12,
      "name": "sameUdidFromAccount",
      "type": 2
    }
  ],
  "I80_K0": [
    {
      "fid": 1,
      "name": "baseUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "token",
      "type": 11
    }
  ],
  "WebAuthDetails": [
    {
      "fid": 1,
      "name": "baseUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "token",
      "type": 11
    }
  ],
  "WebLoginRequest": [
    {
      "fid": 1,
      "name": "hookedFullUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "sessionString",
      "type": 11
    },
    {
      "fid": 3,
      "name": "fromIAB",
      "type": 2
    },
    {
      "fid": 4,
      "name": "sourceApplication",
      "type": 11
    }
  ],
  "WebLoginResponse": [
    {
      "fid": 1,
      "name": "returnUrl",
      "type": 11
    },
    {
      "fid": 2,
      "name": "optionalReturnUrl",
      "type": 11
    },
    {
      "fid": 3,
      "name": "redirectConfirmationPageUrl",
      "type": 11
    }
  ],
  "WifiSignal": [
    {
      "fid": 2,
      "name": "ssid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "bssid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "wifiStandard",
      "type": 11
    },
    {
      "fid": 5,
      "name": "frequency",
      "type": 4
    },
    {
      "fid": 10,
      "name": "lastSeenTimestamp",
      "type": 10
    },
    {
      "fid": 11,
      "name": "rssi",
      "type": 8
    }
  ],
  "Z70_a": [
    {
      "fid": 1,
      "name": "recoveryKey",
      "type": 11
    },
    {
      "fid": 2,
      "name": "backupBlobPayload",
      "type": 11
    }
  ],
  "ZQ0_b": [],
  "acceptChatInvitationByTicket_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "AcceptChatInvitationByTicketRequest"
    }
  ],
  "acceptChatInvitationByTicket_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_C12980f"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "acceptChatInvitation_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "AcceptChatInvitationRequest"
    }
  ],
  "acceptChatInvitation_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_C13008h"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "SquareService_acceptSpeakers_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "AcceptSpeakersResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_acceptToChangeRole_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "AcceptToChangeRoleResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_acceptToListen_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "AcceptToListenResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_acceptToSpeak_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "AcceptToSpeakResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_acquireLiveTalk_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "AcquireLiveTalkResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_cancelToSpeak_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "CancelToSpeakResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_fetchLiveTalkEvents_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "FetchLiveTalkEventsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_findLiveTalkByInvitationTicket_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "FindLiveTalkByInvitationTicketResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_forceEndLiveTalk_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ForceEndLiveTalkResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getLiveTalkInfoForNonMember_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetLiveTalkInfoForNonMemberResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getLiveTalkInvitationUrl_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetLiveTalkInvitationUrlResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getLiveTalkSpeakersForNonMember_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetLiveTalkSpeakersForNonMemberResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareInfoByChatMid_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareInfoByChatMidResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_inviteToChangeRole_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "InviteToChangeRoleResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_inviteToListen_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "InviteToListenResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_inviteToLiveTalk_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "InviteToLiveTalkResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_inviteToSpeak_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "InviteToSpeakResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_joinLiveTalk_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "JoinLiveTalkResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_kickOutLiveTalkParticipants_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "KickOutLiveTalkParticipantsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_rejectSpeakers_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RejectSpeakersResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_rejectToSpeak_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RejectToSpeakResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_removeLiveTalkSubscription_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RemoveLiveTalkSubscriptionResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_reportLiveTalk_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ReportLiveTalkResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_reportLiveTalkSpeaker_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ReportLiveTalkSpeakerResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_requestToListen_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RequestToListenResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_requestToSpeak_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RequestToSpeakResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_updateLiveTalkAttrs_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "UpdateLiveTalkAttrsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_acceptSpeakers_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "AcceptSpeakersRequest"
    }
  ],
  "SquareService_acceptToChangeRole_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "AcceptToChangeRoleRequest"
    }
  ],
  "SquareService_acceptToListen_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "AcceptToListenRequest"
    }
  ],
  "SquareService_acceptToSpeak_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "AcceptToSpeakRequest"
    }
  ],
  "SquareService_acquireLiveTalk_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "AcquireLiveTalkRequest"
    }
  ],
  "SquareService_cancelToSpeak_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "CancelToSpeakRequest"
    }
  ],
  "SquareService_fetchLiveTalkEvents_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "FetchLiveTalkEventsRequest"
    }
  ],
  "SquareService_findLiveTalkByInvitationTicket_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "FindLiveTalkByInvitationTicketRequest"
    }
  ],
  "SquareService_forceEndLiveTalk_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ForceEndLiveTalkRequest"
    }
  ],
  "SquareService_getLiveTalkInfoForNonMember_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetLiveTalkInfoForNonMemberRequest"
    }
  ],
  "SquareService_getLiveTalkInvitationUrl_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetLiveTalkInvitationUrlRequest"
    }
  ],
  "SquareService_getLiveTalkSpeakersForNonMember_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetLiveTalkSpeakersForNonMemberRequest"
    }
  ],
  "SquareService_getSquareInfoByChatMid_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareInfoByChatMidRequest"
    }
  ],
  "SquareService_inviteToChangeRole_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "InviteToChangeRoleRequest"
    }
  ],
  "SquareService_inviteToListen_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "InviteToListenRequest"
    }
  ],
  "SquareService_inviteToLiveTalk_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "InviteToLiveTalkRequest"
    }
  ],
  "SquareService_inviteToSpeak_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "InviteToSpeakRequest"
    }
  ],
  "SquareService_joinLiveTalk_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "JoinLiveTalkRequest"
    }
  ],
  "SquareService_kickOutLiveTalkParticipants_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "KickOutLiveTalkParticipantsRequest"
    }
  ],
  "SquareService_rejectSpeakers_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "RejectSpeakersRequest"
    }
  ],
  "SquareService_rejectToSpeak_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "RejectToSpeakRequest"
    }
  ],
  "SquareService_removeLiveTalkSubscription_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "RemoveLiveTalkSubscriptionRequest"
    }
  ],
  "SquareService_reportLiveTalk_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ReportLiveTalkRequest"
    }
  ],
  "SquareService_reportLiveTalkSpeaker_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ReportLiveTalkSpeakerRequest"
    }
  ],
  "SquareService_requestToListen_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "RequestToListenRequest"
    }
  ],
  "SquareService_requestToSpeak_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "RequestToSpeakRequest"
    }
  ],
  "SquareService_updateLiveTalkAttrs_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "UpdateLiveTalkAttrsRequest"
    }
  ],
  "acquireCallRoute_args": [
    {
      "fid": 2,
      "name": "to",
      "type": 11
    },
    {
      "fid": 3,
      "name": "callType",
      "struct": "Pb1_D4"
    },
    {
      "fid": 4,
      "name": "fromEnvInfo",
      "map": 11,
      "key": 11
    }
  ],
  "acquireCallRoute_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "CallRoute"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "acquireEncryptedAccessToken_args": [
    {
      "fid": 2,
      "name": "featureType",
      "struct": "Pb1_EnumC13222w4"
    }
  ],
  "acquireEncryptedAccessToken_result": [
    {
      "fid": 0,
      "name": "success",
      "type": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "acquireGroupCallRoute_args": [
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "mediaType",
      "struct": "Pb1_EnumC13237x5"
    },
    {
      "fid": 4,
      "name": "isInitialHost",
      "type": 2
    },
    {
      "fid": 5,
      "name": "capabilities",
      "list": 11
    }
  ],
  "acquireGroupCallRoute_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GroupCallRoute"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "acquireOACallRoute_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "AcquireOACallRouteRequest"
    }
  ],
  "acquireOACallRoute_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "AcquireOACallRouteResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "acquirePaidCallRoute_args": [
    {
      "fid": 2,
      "name": "paidCallType",
      "struct": "PaidCallType"
    },
    {
      "fid": 3,
      "name": "dialedNumber",
      "type": 11
    },
    {
      "fid": 4,
      "name": "language",
      "type": 11
    },
    {
      "fid": 5,
      "name": "networkCode",
      "type": 11
    },
    {
      "fid": 6,
      "name": "disableCallerId",
      "type": 2
    },
    {
      "fid": 7,
      "name": "referer",
      "type": 11
    },
    {
      "fid": 8,
      "name": "adSessionId",
      "type": 11
    }
  ],
  "acquirePaidCallRoute_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "PaidCallResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "activateSubscription_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ActivateSubscriptionRequest"
    }
  ],
  "activateSubscription_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "MembershipException"
    }
  ],
  "adTypeOptOutClickEvent_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "AdTypeOptOutClickEventRequest"
    }
  ],
  "adTypeOptOutClickEvent_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "NZ0_C12152b"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "addFriendByMid_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "AddFriendByMidRequest"
    }
  ],
  "addFriendByMid_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "LN0_C11270b"
    },
    {
      "fid": 1,
      "name": "be",
      "struct": "RejectedException"
    },
    {
      "fid": 2,
      "name": "ce",
      "struct": "ServerFailureException"
    },
    {
      "fid": 3,
      "name": "te",
      "struct": "TalkException"
    }
  ],
  "addItemToCollection_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "AddItemToCollectionRequest"
    }
  ],
  "addItemToCollection_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Ob1_C12608b"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "CollectionException"
    }
  ],
  "addOaFriend_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "NZ0_C12155c"
    }
  ],
  "addOaFriend_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "AddOaFriendResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "addProductToSubscriptionSlot_args": [
    {
      "fid": 2,
      "name": "req",
      "struct": "AddProductToSubscriptionSlotRequest"
    }
  ],
  "addProductToSubscriptionSlot_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "AddProductToSubscriptionSlotResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "addThemeToSubscriptionSlot_args": [
    {
      "fid": 2,
      "name": "req",
      "struct": "AddThemeToSubscriptionSlotRequest"
    }
  ],
  "addThemeToSubscriptionSlot_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "AddThemeToSubscriptionSlotResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "addToFollowBlacklist_args": [
    {
      "fid": 2,
      "name": "addToFollowBlacklistRequest",
      "struct": "AddToFollowBlacklistRequest"
    }
  ],
  "addToFollowBlacklist_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "SquareService_agreeToTerms_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "AgreeToTermsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_approveSquareMembers_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ApproveSquareMembersResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_checkJoinCode_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "CheckJoinCodeResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_createSquareChatAnnouncement_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "CreateSquareChatAnnouncementResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_createSquareChat_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "CreateSquareChatResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_createSquare_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "CreateSquareResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_deleteSquareChatAnnouncement_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "DeleteSquareChatAnnouncementResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_deleteSquareChat_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "DeleteSquareChatResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_deleteSquare_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "DeleteSquareResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_destroyMessage_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "DestroyMessageResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_destroyMessages_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "DestroyMessagesResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_fetchMyEvents_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "FetchMyEventsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_fetchSquareChatEvents_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "FetchSquareChatEventsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_findSquareByEmid_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "FindSquareByEmidResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_findSquareByInvitationTicket_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "FindSquareByInvitationTicketResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_findSquareByInvitationTicketV2_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "FindSquareByInvitationTicketV2Response"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getGoogleAdOptions_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetGoogleAdOptionsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getInvitationTicketUrl_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetInvitationTicketUrlResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getJoinableSquareChats_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetJoinableSquareChatsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getJoinedSquareChats_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetJoinedSquareChatsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getJoinedSquares_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetJoinedSquaresResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getMessageReactions_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetMessageReactionsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getNoteStatus_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetNoteStatusResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getPopularKeywords_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetPopularKeywordsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareAuthorities_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareAuthoritiesResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareAuthority_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareAuthorityResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getCategories_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareCategoriesResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareChatAnnouncements_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareChatAnnouncementsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareChatEmid_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareChatEmidResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareChatFeatureSet_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareChatFeatureSetResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareChatMember_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareChatMemberResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareChatMembers_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareChatMembersResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareChat_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareChatResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareChatStatus_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareChatStatusResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareEmid_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareEmidResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareFeatureSet_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareFeatureSetResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareMemberRelation_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareMemberRelationResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareMemberRelations_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareMemberRelationsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareMember_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareMemberResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareMembersBySquare_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareMembersBySquareResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareMembers_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareMembersResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquare_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareStatus_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareStatusResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareThreadMid_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareThreadMidResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getSquareThread_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareThreadResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_getUserSettings_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetUserSettingsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_hideSquareMemberContents_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "HideSquareMemberContentsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_inviteIntoSquareChat_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "InviteIntoSquareChatResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_inviteToSquare_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "InviteToSquareResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_joinSquareChat_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "JoinSquareChatResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_joinSquare_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "JoinSquareResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_joinSquareThread_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "JoinSquareThreadResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_leaveSquareChat_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "LeaveSquareChatResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_leaveSquare_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "LeaveSquareResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_leaveSquareThread_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "LeaveSquareThreadResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_manualRepair_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ManualRepairResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_markAsRead_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "MarkAsReadResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_markChatsAsRead_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "MarkChatsAsReadResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_markThreadsAsRead_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "MarkThreadsAsReadResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_reactToMessage_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ReactToMessageResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_refreshSubscriptions_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RefreshSubscriptionsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_rejectSquareMembers_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RejectSquareMembersResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_removeSubscriptions_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RemoveSubscriptionsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_reportMessageSummary_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ReportMessageSummaryResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_reportSquareChat_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ReportSquareChatResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_reportSquareMember_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ReportSquareMemberResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_reportSquareMessage_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ReportSquareMessageResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_reportSquare_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ReportSquareResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_searchSquareChatMembers_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "SearchSquareChatMembersResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_searchSquareChatMentionables_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "SearchSquareChatMentionablesResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_searchSquareMembers_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "SearchSquareMembersResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_searchSquares_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "SearchSquaresResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_sendMessage_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "SendMessageResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_sendSquareThreadMessage_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "SendSquareThreadMessageResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_syncSquareMembers_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "SyncSquareMembersResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_unhideSquareMemberContents_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "UnhideSquareMemberContentsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_unsendMessage_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "UnsendMessageResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_updateSquareAuthority_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "UpdateSquareAuthorityResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_updateSquareChatMember_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "UpdateSquareChatMemberResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_updateSquareChat_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "UpdateSquareChatResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_updateSquareFeatureSet_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "UpdateSquareFeatureSetResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_updateSquareMemberRelation_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "UpdateSquareMemberRelationResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_updateSquareMember_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "UpdateSquareMemberResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_updateSquareMembers_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "UpdateSquareMembersResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_updateSquare_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "UpdateSquareResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_updateUserSettings_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "UpdateUserSettingsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SquareException"
    }
  ],
  "SquareService_agreeToTerms_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "AgreeToTermsRequest"
    }
  ],
  "SquareService_approveSquareMembers_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ApproveSquareMembersRequest"
    }
  ],
  "SquareService_checkJoinCode_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "CheckJoinCodeRequest"
    }
  ],
  "SquareService_createSquareChatAnnouncement_args": [
    {
      "fid": 1,
      "name": "createSquareChatAnnouncementRequest",
      "struct": "CreateSquareChatAnnouncementRequest"
    }
  ],
  "SquareService_createSquareChat_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "CreateSquareChatRequest"
    }
  ],
  "SquareService_createSquare_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "CreateSquareRequest"
    }
  ],
  "SquareService_deleteSquareChatAnnouncement_args": [
    {
      "fid": 1,
      "name": "deleteSquareChatAnnouncementRequest",
      "struct": "DeleteSquareChatAnnouncementRequest"
    }
  ],
  "SquareService_deleteSquareChat_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "DeleteSquareChatRequest"
    }
  ],
  "SquareService_deleteSquare_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "DeleteSquareRequest"
    }
  ],
  "SquareService_destroyMessage_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "DestroyMessageRequest"
    }
  ],
  "SquareService_destroyMessages_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "DestroyMessagesRequest"
    }
  ],
  "SquareService_fetchMyEvents_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "FetchMyEventsRequest"
    }
  ],
  "SquareService_fetchSquareChatEvents_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "FetchSquareChatEventsRequest"
    }
  ],
  "SquareService_findSquareByEmid_args": [
    {
      "fid": 1,
      "name": "findSquareByEmidRequest",
      "struct": "FindSquareByEmidRequest"
    }
  ],
  "SquareService_findSquareByInvitationTicket_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "FindSquareByInvitationTicketRequest"
    }
  ],
  "SquareService_findSquareByInvitationTicketV2_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "FindSquareByInvitationTicketV2Request"
    }
  ],
  "SquareService_getGoogleAdOptions_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetGoogleAdOptionsRequest"
    }
  ],
  "SquareService_getInvitationTicketUrl_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetInvitationTicketUrlRequest"
    }
  ],
  "SquareService_getJoinableSquareChats_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetJoinableSquareChatsRequest"
    }
  ],
  "SquareService_getJoinedSquareChats_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetJoinedSquareChatsRequest"
    }
  ],
  "SquareService_getJoinedSquares_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetJoinedSquaresRequest"
    }
  ],
  "SquareService_getMessageReactions_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetMessageReactionsRequest"
    }
  ],
  "SquareService_getNoteStatus_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetNoteStatusRequest"
    }
  ],
  "SquareService_getPopularKeywords_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetPopularKeywordsRequest"
    }
  ],
  "SquareService_getSquareAuthorities_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareAuthoritiesRequest"
    }
  ],
  "SquareService_getSquareAuthority_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareAuthorityRequest"
    }
  ],
  "SquareService_getCategories_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareCategoriesRequest"
    }
  ],
  "SquareService_getSquareChatAnnouncements_args": [
    {
      "fid": 1,
      "name": "getSquareChatAnnouncementsRequest",
      "struct": "GetSquareChatAnnouncementsRequest"
    }
  ],
  "SquareService_getSquareChatEmid_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareChatEmidRequest"
    }
  ],
  "SquareService_getSquareChatFeatureSet_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareChatFeatureSetRequest"
    }
  ],
  "SquareService_getSquareChatMember_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareChatMemberRequest"
    }
  ],
  "SquareService_getSquareChatMembers_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareChatMembersRequest"
    }
  ],
  "SquareService_getSquareChat_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareChatRequest"
    }
  ],
  "SquareService_getSquareChatStatus_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareChatStatusRequest"
    }
  ],
  "SquareService_getSquareEmid_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareEmidRequest"
    }
  ],
  "SquareService_getSquareFeatureSet_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareFeatureSetRequest"
    }
  ],
  "SquareService_getSquareMemberRelation_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareMemberRelationRequest"
    }
  ],
  "SquareService_getSquareMemberRelations_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareMemberRelationsRequest"
    }
  ],
  "SquareService_getSquareMember_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareMemberRequest"
    }
  ],
  "SquareService_getSquareMembersBySquare_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareMembersBySquareRequest"
    }
  ],
  "SquareService_getSquareMembers_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareMembersRequest"
    }
  ],
  "SquareService_getSquare_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareRequest"
    }
  ],
  "SquareService_getSquareStatus_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareStatusRequest"
    }
  ],
  "SquareService_getSquareThreadMid_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareThreadMidRequest"
    }
  ],
  "SquareService_getSquareThread_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSquareThreadRequest"
    }
  ],
  "SquareService_getUserSettings_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetUserSettingsRequest"
    }
  ],
  "SquareService_hideSquareMemberContents_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "HideSquareMemberContentsRequest"
    }
  ],
  "SquareService_inviteIntoSquareChat_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "InviteIntoSquareChatRequest"
    }
  ],
  "SquareService_inviteToSquare_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "InviteToSquareRequest"
    }
  ],
  "SquareService_joinSquareChat_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "JoinSquareChatRequest"
    }
  ],
  "SquareService_joinSquare_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "JoinSquareRequest"
    }
  ],
  "SquareService_joinSquareThread_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "JoinSquareThreadRequest"
    }
  ],
  "SquareService_leaveSquareChat_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "LeaveSquareChatRequest"
    }
  ],
  "SquareService_leaveSquare_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "LeaveSquareRequest"
    }
  ],
  "SquareService_leaveSquareThread_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "LeaveSquareThreadRequest"
    }
  ],
  "SquareService_manualRepair_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ManualRepairRequest"
    }
  ],
  "SquareService_markAsRead_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "MarkAsReadRequest"
    }
  ],
  "SquareService_markChatsAsRead_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "MarkChatsAsReadRequest"
    }
  ],
  "SquareService_markThreadsAsRead_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "MarkThreadsAsReadRequest"
    }
  ],
  "SquareService_reactToMessage_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ReactToMessageRequest"
    }
  ],
  "SquareService_refreshSubscriptions_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "RefreshSubscriptionsRequest"
    }
  ],
  "SquareService_rejectSquareMembers_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "RejectSquareMembersRequest"
    }
  ],
  "SquareService_removeSubscriptions_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "RemoveSubscriptionsRequest"
    }
  ],
  "SquareService_reportMessageSummary_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ReportMessageSummaryRequest"
    }
  ],
  "SquareService_reportSquareChat_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ReportSquareChatRequest"
    }
  ],
  "SquareService_reportSquareMember_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ReportSquareMemberRequest"
    }
  ],
  "SquareService_reportSquareMessage_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ReportSquareMessageRequest"
    }
  ],
  "SquareService_reportSquare_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ReportSquareRequest"
    }
  ],
  "SquareService_searchSquareChatMembers_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "SearchSquareChatMembersRequest"
    }
  ],
  "SquareService_searchSquareChatMentionables_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "SearchSquareChatMentionablesRequest"
    }
  ],
  "SquareService_searchSquareMembers_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "SearchSquareMembersRequest"
    }
  ],
  "SquareService_searchSquares_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "SearchSquaresRequest"
    }
  ],
  "SquareService_sendMessage_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "SendMessageRequest"
    }
  ],
  "SquareService_sendSquareThreadMessage_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "SendSquareThreadMessageRequest"
    }
  ],
  "SquareService_syncSquareMembers_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "SyncSquareMembersRequest"
    }
  ],
  "SquareService_unhideSquareMemberContents_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "UnhideSquareMemberContentsRequest"
    }
  ],
  "SquareService_unsendMessage_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "UnsendMessageRequest"
    }
  ],
  "SquareService_updateSquareAuthority_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "UpdateSquareAuthorityRequest"
    }
  ],
  "SquareService_updateSquareChatMember_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "UpdateSquareChatMemberRequest"
    }
  ],
  "SquareService_updateSquareChat_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "UpdateSquareChatRequest"
    }
  ],
  "SquareService_updateSquareFeatureSet_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "UpdateSquareFeatureSetRequest"
    }
  ],
  "SquareService_updateSquareMemberRelation_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "UpdateSquareMemberRelationRequest"
    }
  ],
  "SquareService_updateSquareMember_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "UpdateSquareMemberRequest"
    }
  ],
  "SquareService_updateSquareMembers_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "UpdateSquareMembersRequest"
    }
  ],
  "SquareService_updateSquare_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "UpdateSquareRequest"
    }
  ],
  "SquareService_updateUserSettings_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "UpdateUserSettingsRequest"
    }
  ],
  "approveChannelAndIssueChannelToken_args": [
    {
      "fid": 1,
      "name": "channelId",
      "type": 11
    }
  ],
  "approveChannelAndIssueChannelToken_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ChannelToken"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ChannelException"
    }
  ],
  "authenticateUsingBankAccountEx_args": [
    {
      "fid": 1,
      "name": "type",
      "struct": "r80_EnumC34362b"
    },
    {
      "fid": 2,
      "name": "bankId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "bankBranchId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "realAccountNo",
      "type": 11
    },
    {
      "fid": 5,
      "name": "accountProductCode",
      "struct": "r80_EnumC34361a"
    },
    {
      "fid": 6,
      "name": "authToken",
      "type": 11
    }
  ],
  "authenticateUsingBankAccountEx_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "PaymentAuthenticationInfo"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PaymentException"
    }
  ],
  "authenticateWithPaak_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "AuthenticateWithPaakRequest"
    }
  ],
  "authenticateWithPaak_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "o80_C32273b"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SecondaryPwlessLoginException"
    }
  ],
  "blockContact_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "id",
      "type": 11
    }
  ],
  "blockContact_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "blockRecommendation_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "targetMid",
      "type": 11
    }
  ],
  "blockRecommendation_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "bulkFollow_args": [
    {
      "fid": 2,
      "name": "bulkFollowRequest",
      "struct": "BulkFollowRequest"
    }
  ],
  "bulkFollow_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_C12996g1"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "bulkGetSetting_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "BulkGetRequest"
    }
  ],
  "bulkGetSetting_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "s80_t80_b"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SettingsException"
    }
  ],
  "bulkSetSetting_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "s80_t80_c"
    }
  ],
  "bulkSetSetting_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "s80_t80_d"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SettingsException"
    }
  ],
  "buyMustbuyProduct_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "BuyMustbuyRequest"
    }
  ],
  "buyMustbuyProduct_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "canCreateCombinationSticker_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "CanCreateCombinationStickerRequest"
    }
  ],
  "canCreateCombinationSticker_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "CanCreateCombinationStickerResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "canReceivePresent_args": [
    {
      "fid": 2,
      "name": "shopId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "locale",
      "struct": "Locale"
    },
    {
      "fid": 5,
      "name": "recipientMid",
      "type": 11
    }
  ],
  "canReceivePresent_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "cancelChatInvitation_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "CancelChatInvitationRequest"
    }
  ],
  "cancelChatInvitation_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_U1"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "cancelPaakAuth_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "CancelPaakAuthRequest"
    }
  ],
  "cancelPaakAuth_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "o80_d"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SecondaryPwlessLoginException"
    }
  ],
  "cancelPaakAuthentication_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "CancelPaakAuthenticationRequest"
    }
  ],
  "cancelPaakAuthentication_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "n80_d"
    },
    {
      "fid": 1,
      "name": "cpae",
      "struct": "ChannelPaakAuthnException"
    },
    {
      "fid": 2,
      "name": "tae",
      "struct": "TokenAuthException"
    }
  ],
  "cancelPinCode_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "CancelPinCodeRequest"
    }
  ],
  "cancelPinCode_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "q80_C33650b"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SecondaryQrCodeException"
    }
  ],
  "cancelReaction_args": [
    {
      "fid": 1,
      "name": "cancelReactionRequest",
      "struct": "CancelReactionRequest"
    }
  ],
  "cancelReaction_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "changeSubscription_args": [
    {
      "fid": 2,
      "name": "req",
      "struct": "YN0_Ob1_r"
    }
  ],
  "changeSubscription_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ChangeSubscriptionResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "changeVerificationMethod_args": [
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "method",
      "struct": "VerificationMethod"
    }
  ],
  "changeVerificationMethod_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "VerificationSessionData"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "checkCanUnregisterEx_args": [
    {
      "fid": 1,
      "name": "type",
      "struct": "r80_n0"
    }
  ],
  "checkCanUnregisterEx_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "UnregisterAvailabilityInfo"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PaymentException"
    }
  ],
  "I80_C26370F": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_C26396d"
    }
  ],
  "checkEmailAssigned_args": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "accountIdentifier",
      "struct": "AccountIdentifier"
    }
  ],
  "checkEmailAssigned_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "CheckEmailAssignedResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "I80_C26371G": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_C26398e"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    }
  ],
  "checkIfEncryptedE2EEKeyReceived_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "CheckIfEncryptedE2EEKeyReceivedRequest"
    }
  ],
  "checkIfEncryptedE2EEKeyReceived_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "CheckIfEncryptedE2EEKeyReceivedResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PrimaryQrCodeMigrationException"
    }
  ],
  "I80_C26372H": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_C26400f"
    }
  ],
  "checkIfPasswordSetVerificationEmailVerified_args": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "checkIfPasswordSetVerificationEmailVerified_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "T70_C14398f"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "I80_C26373I": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_C26402g"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    }
  ],
  "checkIfPhonePinCodeMsgVerified_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "CheckIfPhonePinCodeMsgVerifiedRequest"
    }
  ],
  "checkIfPhonePinCodeMsgVerified_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "CheckIfPhonePinCodeMsgVerifiedResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "checkOperationTimeEx_args": [
    {
      "fid": 1,
      "name": "type",
      "struct": "r80_EnumC34368h"
    },
    {
      "fid": 2,
      "name": "lpAccountNo",
      "type": 11
    },
    {
      "fid": 3,
      "name": "channelType",
      "struct": "r80_EnumC34371k"
    }
  ],
  "checkOperationTimeEx_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "CheckOperationResult"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PaymentException"
    }
  ],
  "checkUserAgeAfterApprovalWithDocomoV2_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "CheckUserAgeAfterApprovalWithDocomoV2Request"
    }
  ],
  "checkUserAgeAfterApprovalWithDocomoV2_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "CheckUserAgeAfterApprovalWithDocomoV2Response"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "checkUserAgeWithDocomoV2_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "CheckUserAgeWithDocomoV2Request"
    }
  ],
  "checkUserAgeWithDocomoV2_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "CheckUserAgeWithDocomoV2Response"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "checkUserAge_args": [
    {
      "fid": 2,
      "name": "carrier",
      "struct": "CarrierCode"
    },
    {
      "fid": 3,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "verifier",
      "type": 11
    },
    {
      "fid": 5,
      "name": "standardAge",
      "type": 8
    }
  ],
  "checkUserAge_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_gd"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "clearRingbackTone_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "clearRingtone_args": [
    {
      "fid": 1,
      "name": "oid",
      "type": 11
    }
  ],
  "clearRingtone_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "AcceptSpeakersResponse": [],
  "AcceptToChangeRoleResponse": [],
  "AcceptToListenResponse": [],
  "AcceptToSpeakResponse": [],
  "AgreeToTermsResponse": [],
  "AllNonMemberLiveTalkParticipants": [],
  "CancelToSpeakResponse": [],
  "DeleteSquareChatAnnouncementResponse": [],
  "DeleteSquareChatResponse": [],
  "DeleteSquareResponse": [],
  "DestroyMessageResponse": [],
  "DestroyMessagesResponse": [],
  "ForceEndLiveTalkResponse": [],
  "GetPopularKeywordsRequest": [],
  "GetSquareCategoriesRequest": [],
  "HideSquareMemberContentsResponse": [],
  "InviteToChangeRoleResponse": [],
  "InviteToListenResponse": [],
  "InviteToLiveTalkResponse": [],
  "InviteToSquareResponse": [],
  "KickOutLiveTalkParticipantsResponse": [],
  "LeaveSquareChatResponse": [],
  "LeaveSquareResponse": [],
  "LiveTalkEventPayload": [
    {
      "fid": 1,
      "name": "notifiedUpdateLiveTalkTitle",
      "struct": "LiveTalkEventNotifiedUpdateLiveTalkTitle"
    },
    {
      "fid": 2,
      "name": "notifiedUpdateLiveTalkAnnouncement",
      "struct": "LiveTalkEventNotifiedUpdateLiveTalkAnnouncement"
    },
    {
      "fid": 3,
      "name": "notifiedUpdateSquareMemberRole",
      "struct": "LiveTalkEventNotifiedUpdateSquareMemberRole"
    },
    {
      "fid": 4,
      "name": "notifiedUpdateLiveTalkAllowRequestToSpeak",
      "struct": "LiveTalkEventNotifiedUpdateLiveTalkAllowRequestToSpeak"
    },
    {
      "fid": 5,
      "name": "notifiedUpdateSquareMember",
      "struct": "LiveTalkEventNotifiedUpdateSquareMember"
    }
  ],
  "LiveTalkKickOutTarget": [
    {
      "fid": 1,
      "name": "liveTalkParticipant",
      "struct": "LiveTalkParticipant"
    },
    {
      "fid": 2,
      "name": "allNonMemberLiveTalkParticipants",
      "struct": "AllNonMemberLiveTalkParticipants"
    }
  ],
  "MarkAsReadResponse": [],
  "MarkChatsAsReadResponse": [],
  "MarkThreadsAsReadResponse": [],
  "RejectSpeakersResponse": [],
  "RejectToSpeakResponse": [],
  "RemoveLiveTalkSubscriptionResponse": [],
  "RemoveSubscriptionsResponse": [],
  "ReportLiveTalkResponse": [],
  "ReportLiveTalkSpeakerResponse": [],
  "ReportMessageSummaryResponse": [],
  "ReportSquareChatResponse": [],
  "ReportSquareMemberResponse": [],
  "ReportSquareMessageResponse": [],
  "ReportSquareResponse": [],
  "RequestToListenResponse": [],
  "RequestToSpeakResponse": [],
  "SquareEventPayload": [
    {
      "fid": 1,
      "name": "receiveMessage",
      "struct": "SquareEventReceiveMessage"
    },
    {
      "fid": 2,
      "name": "sendMessage",
      "struct": "SquareEventSendMessage"
    },
    {
      "fid": 3,
      "name": "notifiedJoinSquareChat",
      "struct": "SquareEventNotifiedJoinSquareChat"
    },
    {
      "fid": 4,
      "name": "notifiedInviteIntoSquareChat",
      "struct": "SquareEventNotifiedInviteIntoSquareChat"
    },
    {
      "fid": 5,
      "name": "notifiedLeaveSquareChat",
      "struct": "SquareEventNotifiedLeaveSquareChat"
    },
    {
      "fid": 6,
      "name": "notifiedDestroyMessage",
      "struct": "SquareEventNotifiedDestroyMessage"
    },
    {
      "fid": 7,
      "name": "notifiedMarkAsRead",
      "struct": "SquareEventNotifiedMarkAsRead"
    },
    {
      "fid": 8,
      "name": "notifiedUpdateSquareMemberProfile",
      "struct": "SquareEventNotifiedUpdateSquareMemberProfile"
    },
    {
      "fid": 9,
      "name": "notifiedUpdateSquare",
      "struct": "SquareEventNotifiedUpdateSquare"
    },
    {
      "fid": 10,
      "name": "notifiedUpdateSquareMember",
      "struct": "SquareEventNotifiedUpdateSquareMember"
    },
    {
      "fid": 11,
      "name": "notifiedUpdateSquareChat",
      "struct": "SquareEventNotifiedUpdateSquareChat"
    },
    {
      "fid": 12,
      "name": "notifiedUpdateSquareChatMember",
      "struct": "SquareEventNotifiedUpdateSquareChatMember"
    },
    {
      "fid": 13,
      "name": "notifiedUpdateSquareAuthority",
      "struct": "SquareEventNotifiedUpdateSquareAuthority"
    },
    {
      "fid": 14,
      "name": "notifiedUpdateSquareStatus",
      "struct": "SquareEventNotifiedUpdateSquareStatus"
    },
    {
      "fid": 15,
      "name": "notifiedUpdateSquareChatStatus",
      "struct": "SquareEventNotifiedUpdateSquareChatStatus"
    },
    {
      "fid": 16,
      "name": "notifiedCreateSquareMember",
      "struct": "SquareEventNotifiedCreateSquareMember"
    },
    {
      "fid": 17,
      "name": "notifiedCreateSquareChatMember",
      "struct": "SquareEventNotifiedCreateSquareChatMember"
    },
    {
      "fid": 18,
      "name": "notifiedUpdateSquareMemberRelation",
      "struct": "SquareEventNotifiedUpdateSquareMemberRelation"
    },
    {
      "fid": 19,
      "name": "notifiedShutdownSquare",
      "struct": "SquareEventNotifiedShutdownSquare"
    },
    {
      "fid": 20,
      "name": "notifiedKickoutFromSquare",
      "struct": "SquareEventNotifiedKickoutFromSquare"
    },
    {
      "fid": 21,
      "name": "notifiedDeleteSquareChat",
      "struct": "SquareEventNotifiedDeleteSquareChat"
    },
    {
      "fid": 22,
      "name": "notificationJoinRequest",
      "struct": "SquareEventNotificationJoinRequest"
    },
    {
      "fid": 23,
      "name": "notificationJoined",
      "struct": "SquareEventNotificationMemberUpdate"
    },
    {
      "fid": 24,
      "name": "notificationPromoteCoadmin",
      "struct": "SquareEventNotificationMemberUpdate"
    },
    {
      "fid": 25,
      "name": "notificationPromoteAdmin",
      "struct": "SquareEventNotificationMemberUpdate"
    },
    {
      "fid": 26,
      "name": "notificationDemoteMember",
      "struct": "SquareEventNotificationMemberUpdate"
    },
    {
      "fid": 27,
      "name": "notificationKickedOut",
      "struct": "SquareEventNotificationMemberUpdate"
    },
    {
      "fid": 28,
      "name": "notificationSquareDelete",
      "struct": "SquareEventNotificationSquareDelete"
    },
    {
      "fid": 29,
      "name": "notificationSquareChatDelete",
      "struct": "SquareEventNotificationSquareChatDelete"
    },
    {
      "fid": 30,
      "name": "notificationMessage",
      "struct": "SquareEventNotificationMessage"
    },
    {
      "fid": 31,
      "name": "notifiedUpdateSquareChatProfileName",
      "struct": "SquareEventNotifiedUpdateSquareChatProfileName"
    },
    {
      "fid": 32,
      "name": "notifiedUpdateSquareChatProfileImage",
      "struct": "SquareEventNotifiedUpdateSquareChatProfileImage"
    },
    {
      "fid": 33,
      "name": "notifiedUpdateSquareFeatureSet",
      "struct": "SquareEventNotifiedUpdateSquareFeatureSet"
    },
    {
      "fid": 34,
      "name": "notifiedAddBot",
      "struct": "SquareEventNotifiedAddBot"
    },
    {
      "fid": 35,
      "name": "notifiedRemoveBot",
      "struct": "SquareEventNotifiedRemoveBot"
    },
    {
      "fid": 36,
      "name": "notifiedUpdateSquareNoteStatus",
      "struct": "SquareEventNotifiedUpdateSquareNoteStatus"
    },
    {
      "fid": 37,
      "name": "notifiedUpdateSquareChatAnnouncement",
      "struct": "SquareEventNotifiedUpdateSquareChatAnnouncement"
    },
    {
      "fid": 38,
      "name": "notifiedUpdateSquareChatMaxMemberCount",
      "struct": "SquareEventNotifiedUpdateSquareChatMaxMemberCount"
    },
    {
      "fid": 39,
      "name": "notificationPostAnnouncement",
      "struct": "SquareEventNotificationPostAnnouncement"
    },
    {
      "fid": 40,
      "name": "notificationPost",
      "struct": "SquareEventNotificationPost"
    },
    {
      "fid": 41,
      "name": "mutateMessage",
      "struct": "SquareEventMutateMessage"
    },
    {
      "fid": 42,
      "name": "notificationNewChatMember",
      "struct": "SquareEventNotificationNewChatMember"
    },
    {
      "fid": 43,
      "name": "notifiedUpdateReadonlyChat",
      "struct": "SquareEventNotifiedUpdateReadonlyChat"
    },
    {
      "fid": 44,
      "name": "notifiedUpdateMessageStatus",
      "struct": "SquareEventNotifiedUpdateMessageStatus"
    },
    {
      "fid": 45,
      "name": "notificationMessageReaction",
      "struct": "SquareEventNotificationMessageReaction"
    },
    {
      "fid": 46,
      "name": "chatPopup",
      "struct": "SquareEventChatPopup"
    },
    {
      "fid": 47,
      "name": "notifiedSystemMessage",
      "struct": "SquareEventNotifiedSystemMessage"
    },
    {
      "fid": 48,
      "name": "notifiedUpdateSquareChatFeatureSet",
      "struct": "SquareEventNotifiedUpdateSquareChatFeatureSet"
    },
    {
      "fid": 49,
      "name": "notifiedUpdateLiveTalkInfo",
      "struct": "SquareEventNotifiedUpdateLiveTalkInfo"
    },
    {
      "fid": 50,
      "name": "notifiedUpdateLiveTalk",
      "struct": "SquareEventNotifiedUpdateLiveTalk"
    },
    {
      "fid": 51,
      "name": "notificationLiveTalk",
      "struct": "SquareEventNotificationLiveTalk"
    },
    {
      "fid": 52,
      "name": "notificationThreadMessage",
      "struct": "SquareEventNotificationThreadMessage"
    },
    {
      "fid": 53,
      "name": "notificationThreadMessageReaction",
      "struct": "SquareEventNotificationThreadMessageReaction"
    },
    {
      "fid": 54,
      "name": "notifiedUpdateThread",
      "struct": "SquareEventNotifiedUpdateThread"
    },
    {
      "fid": 55,
      "name": "notifiedUpdateThreadStatus",
      "struct": "SquareEventNotifiedUpdateThreadStatus"
    },
    {
      "fid": 56,
      "name": "notifiedUpdateThreadMember",
      "struct": "SquareEventNotifiedUpdateThreadMember"
    },
    {
      "fid": 57,
      "name": "notifiedUpdateThreadRootMessage",
      "struct": "SquareEventNotifiedUpdateThreadRootMessage"
    },
    {
      "fid": 58,
      "name": "notifiedUpdateThreadRootMessageStatus",
      "struct": "SquareEventNotifiedUpdateThreadRootMessageStatus"
    }
  ],
  "UnhideSquareMemberContentsResponse": [],
  "UpdateLiveTalkAttrsResponse": [],
  "UpdateUserSettingsResponse": [],
  "ButtonBGColor": [
    {
      "fid": 1,
      "name": "custom",
      "struct": "CustomColor"
    },
    {
      "fid": 2,
      "name": "defaultGradient",
      "struct": "DefaultGradientColor"
    }
  ],
  "ButtonContent": [
    {
      "fid": 1,
      "name": "urlButton",
      "struct": "UrlButton"
    },
    {
      "fid": 2,
      "name": "textButton",
      "struct": "TextButton"
    },
    {
      "fid": 3,
      "name": "okButton",
      "struct": "OkButton"
    }
  ],
  "DefaultGradientColor": [],
  "ErrorExtraInfo": [
    {
      "fid": 1,
      "name": "preconditionFailedExtraInfo",
      "type": 8
    },
    {
      "fid": 2,
      "name": "userRestrictionInfo",
      "struct": "UserRestrictionExtraInfo"
    },
    {
      "fid": 3,
      "name": "tryAgainLaterExtraInfo",
      "struct": "TryAgainLaterExtraInfo"
    },
    {
      "fid": 4,
      "name": "liveTalkExtraInfo",
      "struct": "LiveTalkExtraInfo"
    },
    {
      "fid": 5,
      "name": "termsAgreementExtraInfo",
      "struct": "TermsAgreementExtraInfo"
    }
  ],
  "Mentionable": [
    {
      "fid": 1,
      "name": "squareMember",
      "struct": "MentionableSquareMember"
    },
    {
      "fid": 2,
      "name": "bot",
      "struct": "MentionableBot"
    }
  ],
  "MessageStatusContents": [
    {
      "fid": 1,
      "name": "messageReactionStatus",
      "struct": "_any"
    }
  ],
  "SquareActivityScore": [
    {
      "fid": 1,
      "name": "cleanScore",
      "struct": "_any"
    }
  ],
  "SquareChatAnnouncementContents": [
    {
      "fid": 1,
      "name": "textMessageAnnouncementContents",
      "struct": "TextMessageAnnouncementContents"
    }
  ],
  "TargetChats": [
    {
      "fid": 1,
      "name": "mids",
      "set": 11
    },
    {
      "fid": 2,
      "name": "categories",
      "set": 11
    },
    {
      "fid": 3,
      "name": "channelId",
      "type": 8
    }
  ],
  "TargetUsers": [
    {
      "fid": 1,
      "name": "mids",
      "set": 11
    }
  ],
  "TermsAgreement": [
    {
      "fid": 1,
      "name": "aiQnABot",
      "struct": "_any"
    }
  ],
  "confirmIdentifier_args": [
    {
      "fid": 2,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "request",
      "struct": "IdentityCredentialRequest"
    }
  ],
  "confirmIdentifier_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "IdentityCredentialResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "connectEapAccount_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ConnectEapAccountRequest"
    }
  ],
  "connectEapAccount_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Q70_l"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AccountEapConnectException"
    }
  ],
  "createChatRoomAnnouncement_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "chatRoomMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "type",
      "struct": "Pb1_X2"
    },
    {
      "fid": 4,
      "name": "contents",
      "struct": "ChatRoomAnnouncementContents"
    }
  ],
  "createChatRoomAnnouncement_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ChatRoomAnnouncement"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "createChat_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "CreateChatRequest"
    }
  ],
  "createChat_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "CreateChatResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "createCollectionForUser_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "YN0_Ob1_A"
    }
  ],
  "createCollectionForUser_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "YN0_Ob1_B"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "CollectionException"
    }
  ],
  "createCombinationSticker_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "YN0_Ob1_C"
    }
  ],
  "createCombinationSticker_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "YN0_Ob1_D"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "createE2EEKeyBackupEnforced_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "Pb1_C13263z3"
    }
  ],
  "createE2EEKeyBackupEnforced_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_B3"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "E2EEKeyBackupException"
    }
  ],
  "createGroupCallUrl_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "CreateGroupCallUrlRequest"
    }
  ],
  "createGroupCallUrl_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "CreateGroupCallUrlResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "createLifetimeKeyBackup_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "Pb1_E3"
    }
  ],
  "createLifetimeKeyBackup_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_F3"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "E2EEKeyBackupException"
    }
  ],
  "createMultiProfile_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "CreateMultiProfileRequest"
    }
  ],
  "createMultiProfile_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "CreateMultiProfileResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "createRoomV2_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "contactIds",
      "list": 11
    }
  ],
  "createRoomV2_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Room"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "createSession_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "h80_C25643c"
    }
  ],
  "I80_C26365A": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_C26404h"
    }
  ],
  "createSession_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "CreateSessionResponse"
    },
    {
      "fid": 1,
      "name": "pqme",
      "struct": "PrimaryQrCodeMigrationException"
    },
    {
      "fid": 2,
      "name": "tae",
      "struct": "TokenAuthException"
    }
  ],
  "I80_C26366B": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_C26406i"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    },
    {
      "fid": 2,
      "name": "tae",
      "struct": "TokenAuthException"
    }
  ],
  "decryptFollowEMid_args": [
    {
      "fid": 2,
      "name": "eMid",
      "type": 11
    }
  ],
  "decryptFollowEMid_result": [
    {
      "fid": 0,
      "name": "success",
      "type": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "deleteE2EEKeyBackup_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "Pb1_H3"
    }
  ],
  "deleteE2EEKeyBackup_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_I3"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "E2EEKeyBackupException"
    }
  ],
  "deleteGroupCallUrl_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "DeleteGroupCallUrlRequest"
    }
  ],
  "deleteGroupCallUrl_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_K3"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "deleteMultiProfile_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "DeleteMultiProfileRequest"
    }
  ],
  "deleteMultiProfile_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "gN0_C25147d"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "deleteOtherFromChat_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "DeleteOtherFromChatRequest"
    }
  ],
  "deleteOtherFromChat_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_M3"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "deletePrimaryCredential_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "R70_c"
    }
  ],
  "deletePrimaryCredential_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "R70_d"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PwlessCredentialException"
    }
  ],
  "deleteSafetyStatus_args": [
    {
      "fid": 1,
      "name": "req",
      "struct": "DeleteSafetyStatusRequest"
    }
  ],
  "deleteSafetyStatus_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "vh_Fg_b"
    }
  ],
  "deleteSelfFromChat_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "DeleteSelfFromChatRequest"
    }
  ],
  "deleteSelfFromChat_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_O3"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "determineMediaMessageFlow_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "DetermineMediaMessageFlowRequest"
    }
  ],
  "determineMediaMessageFlow_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "DetermineMediaMessageFlowResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "disableNearby_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "disconnectEapAccount_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "DisconnectEapAccountRequest"
    }
  ],
  "disconnectEapAccount_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Q70_o"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AccountEapConnectException"
    }
  ],
  "do0_C23138A": [
    {
      "fid": 1,
      "name": "connectDevice",
      "struct": "ConnectDeviceOperation"
    },
    {
      "fid": 2,
      "name": "executeOnetimeScenario",
      "struct": "ExecuteOnetimeScenarioOperation"
    }
  ],
  "do0_C23141D": [
    {
      "fid": 1,
      "name": "gattRead",
      "struct": "GattReadAction"
    },
    {
      "fid": 2,
      "name": "gattWrite",
      "struct": "do0_C23158p"
    },
    {
      "fid": 3,
      "name": "sleep",
      "struct": "SleepAction"
    },
    {
      "fid": 4,
      "name": "disconnect",
      "struct": "do0_C23153k"
    },
    {
      "fid": 5,
      "name": "stopNotification",
      "struct": "StopNotificationAction"
    }
  ],
  "do0_C23142E": [
    {
      "fid": 1,
      "name": "voidResult",
      "struct": "do0_m0"
    },
    {
      "fid": 2,
      "name": "binaryResult",
      "struct": "do0_C23143a"
    }
  ],
  "do0_C23143a": [
    {
      "fid": 1,
      "name": "bytes",
      "type": 11
    }
  ],
  "do0_C23152j": [],
  "do0_C23153k": [],
  "do0_C23158p": [
    {
      "fid": 1,
      "name": "serviceUuid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "characteristicUuid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "data",
      "type": 11
    }
  ],
  "do0_C23161t": [],
  "do0_C23165x": [],
  "do0_C23167z": [],
  "do0_F": [
    {
      "fid": 1,
      "name": "scenarioId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "deviceId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "revision",
      "type": 10
    },
    {
      "fid": 4,
      "name": "startTime",
      "type": 10
    },
    {
      "fid": 5,
      "name": "endTime",
      "type": 10
    },
    {
      "fid": 6,
      "name": "code",
      "struct": "do0_G"
    },
    {
      "fid": 7,
      "name": "errorReason",
      "type": 11
    },
    {
      "fid": 8,
      "name": "bleNotificationPayload",
      "type": 11
    },
    {
      "fid": 9,
      "name": "actionResults",
      "list": "do0_C23142E"
    },
    {
      "fid": 10,
      "name": "connectionId",
      "type": 11
    }
  ],
  "do0_I": [
    {
      "fid": 1,
      "name": "immediate",
      "struct": "do0_C23161t"
    },
    {
      "fid": 2,
      "name": "bleNotificationReceived",
      "struct": "BleNotificationReceivedTrigger"
    }
  ],
  "do0_V": [],
  "do0_X": [],
  "do0_m0": [],
  "editItemsInCollection_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "YN0_Ob1_F"
    }
  ],
  "editItemsInCollection_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "YN0_Ob1_G"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "CollectionException"
    }
  ],
  "enablePointForOneTimeKey_args": [
    {
      "fid": 1,
      "name": "usePoint",
      "type": 2
    }
  ],
  "enablePointForOneTimeKey_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "PaymentException"
    }
  ],
  "establishE2EESession_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "YN0_Ob1_J"
    }
  ],
  "establishE2EESession_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "YN0_Ob1_K"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "existPinCode_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "S70_b"
    }
  ],
  "existPinCode_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ExistPinCodeResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SecondAuthFactorPinCodeException"
    }
  ],
  "fN0_C24471c": [],
  "fN0_C24473e": [],
  "fN0_C24475g": [],
  "fN0_C24476h": [],
  "fetchOperations_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "FetchOperationsRequest"
    }
  ],
  "fetchOperations_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "FetchOperationsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ThingsException"
    }
  ],
  "fetchPhonePinCodeMsg_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "FetchPhonePinCodeMsgRequest"
    }
  ],
  "fetchPhonePinCodeMsg_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "FetchPhonePinCodeMsgResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "findAndAddContactByMetaTag_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Contact"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "findAndAddContactsByMid_result": [
    {
      "fid": 0,
      "name": "success",
      "map": "Contact",
      "key": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "findAndAddContactsByPhone_result": [
    {
      "fid": 0,
      "name": "success",
      "map": "Contact",
      "key": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "findAndAddContactsByUserid_result": [
    {
      "fid": 0,
      "name": "success",
      "map": "Contact",
      "key": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "findBuddyContactsByQuery_args": [
    {
      "fid": 2,
      "name": "language",
      "type": 11
    },
    {
      "fid": 3,
      "name": "country",
      "type": 11
    },
    {
      "fid": 4,
      "name": "query",
      "type": 11
    },
    {
      "fid": 5,
      "name": "fromIndex",
      "type": 8
    },
    {
      "fid": 6,
      "name": "count",
      "type": 8
    },
    {
      "fid": 7,
      "name": "requestSource",
      "struct": "Pb1_F0"
    }
  ],
  "findBuddyContactsByQuery_result": [
    {
      "fid": 0,
      "name": "success",
      "list": "BuddySearchResult"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "findChatByTicket_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "FindChatByTicketRequest"
    }
  ],
  "findChatByTicket_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "FindChatByTicketResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "findContactByUserTicket_args": [
    {
      "fid": 2,
      "name": "ticketIdWithTag",
      "type": 11
    }
  ],
  "findContactByUserTicket_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Contact"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "findContactByUserid_args": [
    {
      "fid": 2,
      "name": "searchId",
      "type": 11
    }
  ],
  "findContactByUserid_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Contact"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "findContactsByPhone_args": [
    {
      "fid": 2,
      "name": "phones",
      "set": 11
    }
  ],
  "findContactsByPhone_result": [
    {
      "fid": 0,
      "name": "success",
      "map": "Contact",
      "key": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "finishUpdateVerification_args": [
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    }
  ],
  "finishUpdateVerification_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "follow_args": [
    {
      "fid": 2,
      "name": "followRequest",
      "struct": "FollowRequest"
    }
  ],
  "follow_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "gN0_C25143G": [],
  "gN0_C25147d": [],
  "generateUserTicket_args": [
    {
      "fid": 3,
      "name": "expirationTime",
      "type": 10
    },
    {
      "fid": 4,
      "name": "maxUseCount",
      "type": 8
    }
  ],
  "generateUserTicket_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Ticket"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getAccessToken_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetAccessTokenRequest"
    }
  ],
  "getAccessToken_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetAccessTokenResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getAccountBalanceAsync_args": [
    {
      "fid": 1,
      "name": "requestToken",
      "type": 11
    },
    {
      "fid": 2,
      "name": "accountId",
      "type": 11
    }
  ],
  "getAccountBalanceAsync_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "PaymentException"
    }
  ],
  "I80_C26374J": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_C26410k"
    }
  ],
  "getAcctVerifMethod_args": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "accountIdentifier",
      "struct": "AccountIdentifier"
    }
  ],
  "getAcctVerifMethod_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetAcctVerifMethodResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "I80_C26375K": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_C26412l"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    }
  ],
  "getAllChatMids_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetAllChatMidsRequest"
    },
    {
      "fid": 2,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "getAllChatMids_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetAllChatMidsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getAllContactIds_args": [
    {
      "fid": 1,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "getAllContactIds_result": [
    {
      "fid": 0,
      "name": "success",
      "list": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getAllowedRegistrationMethod_args": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "countryCode",
      "type": 11
    }
  ],
  "getAllowedRegistrationMethod_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetAllowedRegistrationMethodResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "getAnalyticsInfo_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "AnalyticsInfo"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getApprovedChannels_args": [
    {
      "fid": 2,
      "name": "lastSynced",
      "type": 10
    },
    {
      "fid": 3,
      "name": "locale",
      "type": 11
    }
  ],
  "getApprovedChannels_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ApprovedChannelInfos"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ChannelException"
    }
  ],
  "getAssertionChallenge_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "m80_l"
    }
  ],
  "getAssertionChallenge_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetAssertionChallengeResponse"
    },
    {
      "fid": 1,
      "name": "deviceAttestationException",
      "struct": "m80_b"
    },
    {
      "fid": 2,
      "name": "attestationRequiredException",
      "struct": "m80_C30146a"
    }
  ],
  "getAttestationChallenge_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "m80_n"
    }
  ],
  "getAttestationChallenge_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetAttestationChallengeResponse"
    },
    {
      "fid": 1,
      "name": "deviceAttestationException",
      "struct": "m80_b"
    }
  ],
  "getAuthRSAKey_args": [
    {
      "fid": 2,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "identityProvider",
      "struct": "IdentityProvider"
    }
  ],
  "getAuthRSAKey_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RSAKey"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getAuthorsLatestProducts_args": [
    {
      "fid": 2,
      "name": "latestProductsByAuthorRequest",
      "struct": "LatestProductsByAuthorRequest"
    }
  ],
  "getAuthorsLatestProducts_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "LatestProductsByAuthorResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getAutoSuggestionShowcase_args": [
    {
      "fid": 2,
      "name": "autoSuggestionShowcaseRequest",
      "struct": "AutoSuggestionShowcaseRequest"
    }
  ],
  "getAutoSuggestionShowcase_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "AutoSuggestionShowcaseResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getBalanceSummaryV2_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "NZ0_C12208u"
    }
  ],
  "getBalanceSummaryV2_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetBalanceSummaryResponseV2"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "getBalanceSummaryV4WithPayV3_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "NZ0_C12214w"
    }
  ],
  "getBalanceSummaryV4WithPayV3_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetBalanceSummaryV4WithPayV3Response"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "getBalance_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ZQ0_b"
    }
  ],
  "getBalance_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetBalanceResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PointException"
    }
  ],
  "getBankBranches_args": [
    {
      "fid": 1,
      "name": "financialCorpId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "query",
      "type": 11
    },
    {
      "fid": 3,
      "name": "startNum",
      "type": 8
    },
    {
      "fid": 4,
      "name": "count",
      "type": 8
    }
  ],
  "getBankBranches_result": [
    {
      "fid": 0,
      "name": "success",
      "list": "BankBranchInfo"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PaymentException"
    }
  ],
  "getBanners_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "BannerRequest"
    }
  ],
  "getBanners_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "BannerResponse"
    }
  ],
  "getBirthdayEffect_args": [
    {
      "fid": 1,
      "name": "req",
      "struct": "Eh_C8933a"
    }
  ],
  "getBirthdayEffect_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetBirthdayEffectResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "Eh_Fg_b"
    }
  ],
  "getBleDevice_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetBleDeviceRequest"
    }
  ],
  "getBleDevice_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ThingsDevice"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ThingsException"
    }
  ],
  "getBleProducts_result": [
    {
      "fid": 0,
      "name": "success",
      "list": "BleProduct"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ThingsException"
    }
  ],
  "getBlockedContactIds_args": [
    {
      "fid": 1,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "getBlockedContactIds_result": [
    {
      "fid": 0,
      "name": "success",
      "list": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getBlockedRecommendationIds_args": [
    {
      "fid": 1,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "getBlockedRecommendationIds_result": [
    {
      "fid": 0,
      "name": "success",
      "list": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getBrowsingHistory_args": [
    {
      "fid": 2,
      "name": "getBrowsingHistoryRequest",
      "struct": "YN0_Ob1_L"
    }
  ],
  "getBrowsingHistory_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "YN0_Ob1_M"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getBuddyChatBarV2_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetBuddyChatBarRequest"
    }
  ],
  "getBuddyChatBarV2_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "BuddyChatBar"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getBuddyDetailWithPersonal_args": [
    {
      "fid": 1,
      "name": "buddyMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "attributeSet",
      "set": "Pb1_D0"
    }
  ],
  "getBuddyDetailWithPersonal_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "BuddyDetailWithPersonal"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getBuddyDetail_args": [
    {
      "fid": 4,
      "name": "buddyMid",
      "type": 11
    }
  ],
  "getBuddyDetail_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "BuddyDetail"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getBuddyLive_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetBuddyLiveRequest"
    }
  ],
  "getBuddyLive_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetBuddyLiveResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getBuddyOnAir_args": [
    {
      "fid": 4,
      "name": "buddyMid",
      "type": 11
    }
  ],
  "getBuddyOnAir_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "BuddyOnAir"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getBuddyStatusBarV2_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetBuddyStatusBarV2Request"
    }
  ],
  "getBuddyStatusBarV2_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "BuddyStatusBar"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getCallStatus_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetCallStatusRequest"
    }
  ],
  "getCallStatus_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetCallStatusResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "OaChatException"
    }
  ],
  "getCampaign_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetCampaignRequest"
    }
  ],
  "getCampaign_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetCampaignResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "getChallengeForPaakAuth_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetChallengeForPaakAuthRequest"
    }
  ],
  "getChallengeForPaakAuth_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetChallengeForPaakAuthResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SecondaryPwlessLoginException"
    }
  ],
  "getChallengeForPrimaryReg_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetChallengeForPrimaryRegRequest"
    }
  ],
  "getChallengeForPrimaryReg_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetChallengeForPrimaryRegResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PwlessCredentialException"
    }
  ],
  "getChannelContext_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetChannelContextRequest"
    }
  ],
  "getChannelContext_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetChannelContextResponse"
    },
    {
      "fid": 1,
      "name": "cpae",
      "struct": "ChannelPaakAuthnException"
    },
    {
      "fid": 2,
      "name": "tae",
      "struct": "TokenAuthException"
    }
  ],
  "getChannelInfo_args": [
    {
      "fid": 2,
      "name": "channelId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "locale",
      "type": 11
    }
  ],
  "getChannelInfo_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ChannelInfo"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ChannelException"
    }
  ],
  "getChannelNotificationSettings_args": [
    {
      "fid": 1,
      "name": "locale",
      "type": 11
    }
  ],
  "getChannelNotificationSettings_result": [
    {
      "fid": 0,
      "name": "success",
      "list": "ChannelNotificationSetting"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ChannelException"
    }
  ],
  "getChannelSettings_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ChannelSettings"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ChannelException"
    }
  ],
  "getChatEffectMetaList_args": [
    {
      "fid": 1,
      "name": "categories",
      "set": "Pb1_Q2"
    }
  ],
  "getChatEffectMetaList_result": [
    {
      "fid": 0,
      "name": "success",
      "list": "ChatEffectMeta"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getChatRoomAnnouncementsBulk_args": [
    {
      "fid": 2,
      "name": "chatRoomMids",
      "list": 11
    },
    {
      "fid": 3,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "getChatRoomAnnouncementsBulk_result": [
    {
      "fid": 0,
      "name": "success",
      "key": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getChatRoomAnnouncements_args": [
    {
      "fid": 2,
      "name": "chatRoomMid",
      "type": 11
    }
  ],
  "getChatRoomAnnouncements_result": [
    {
      "fid": 0,
      "name": "success",
      "list": "ChatRoomAnnouncement"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getChatRoomBGMs_args": [
    {
      "fid": 2,
      "name": "chatRoomMids",
      "set": 11
    },
    {
      "fid": 3,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "getChatRoomBGMs_result": [
    {
      "fid": 0,
      "name": "success",
      "map": "ChatRoomBGM",
      "key": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getChatapp_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetChatappRequest"
    }
  ],
  "getChatapp_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetChatappResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ChatappException"
    }
  ],
  "getChats_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetChatsRequest"
    },
    {
      "fid": 2,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "getChats_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetChatsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getCoinProducts_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetCoinProductsRequest"
    }
  ],
  "getCoinProducts_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetCoinProductsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "CoinException"
    }
  ],
  "getCoinPurchaseHistory_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetCoinHistoryRequest"
    }
  ],
  "getCoinPurchaseHistory_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetCoinHistoryResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "CoinException"
    }
  ],
  "getCoinUseAndRefundHistory_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetCoinHistoryRequest"
    }
  ],
  "getCoinUseAndRefundHistory_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetCoinHistoryResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "CoinException"
    }
  ],
  "getCommonDomains_args": [
    {
      "fid": 1,
      "name": "lastSynced",
      "type": 10
    }
  ],
  "getCommonDomains_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ChannelDomains"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ChannelException"
    }
  ],
  "getConfigurations_args": [
    {
      "fid": 2,
      "name": "revision",
      "type": 10
    },
    {
      "fid": 3,
      "name": "regionOfUsim",
      "type": 11
    },
    {
      "fid": 4,
      "name": "regionOfTelephone",
      "type": 11
    },
    {
      "fid": 5,
      "name": "regionOfLocale",
      "type": 11
    },
    {
      "fid": 6,
      "name": "carrier",
      "type": 11
    },
    {
      "fid": 7,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "getConfigurations_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Configurations"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getContactCalendarEvents_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetContactCalendarEventsRequest"
    }
  ],
  "getContactCalendarEvents_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetContactCalendarEventsResponse"
    },
    {
      "fid": 1,
      "name": "re",
      "struct": "RejectedException"
    },
    {
      "fid": 2,
      "name": "sfe",
      "struct": "ServerFailureException"
    },
    {
      "fid": 3,
      "name": "te",
      "struct": "TalkException"
    },
    {
      "fid": 4,
      "name": "ere",
      "struct": "ExcessiveRequestItemException"
    }
  ],
  "getContact_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Contact"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getContactsV3_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetContactsV3Request"
    }
  ],
  "getContactsV3_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetContactsV3Response"
    },
    {
      "fid": 1,
      "name": "be",
      "struct": "RejectedException"
    },
    {
      "fid": 2,
      "name": "ce",
      "struct": "ServerFailureException"
    },
    {
      "fid": 3,
      "name": "te",
      "struct": "TalkException"
    },
    {
      "fid": 4,
      "name": "ere",
      "struct": "ExcessiveRequestItemException"
    }
  ],
  "getContacts_result": [
    {
      "fid": 0,
      "name": "success",
      "list": "Contact"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getCountries_args": [
    {
      "fid": 2,
      "name": "countryGroup",
      "struct": "Pb1_EnumC13221w3"
    }
  ],
  "getCountries_result": [
    {
      "fid": 0,
      "name": "success",
      "set": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "I80_C26376L": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_C26413m"
    }
  ],
  "getCountryInfo_args": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 11,
      "name": "simCard",
      "struct": "SimCard"
    }
  ],
  "getCountryInfo_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetCountryInfoResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "I80_C26377M": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_C26414n"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    }
  ],
  "getCountryWithRequestIp_result": [
    {
      "fid": 0,
      "name": "success",
      "type": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getDataRetention_args": [
    {
      "fid": 1,
      "name": "req",
      "struct": "fN0_C24473e"
    }
  ],
  "getDataRetention_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetPremiumDataRetentionResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PremiumException"
    }
  ],
  "getDestinationUrl_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "DestinationLIFFRequest"
    }
  ],
  "getDestinationUrl_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "DestinationLIFFResponse"
    },
    {
      "fid": 1,
      "name": "liffException",
      "struct": "LiffException"
    }
  ],
  "getDisasterCases_args": [
    {
      "fid": 1,
      "name": "req",
      "struct": "vh_C37633d"
    }
  ],
  "getDisasterCases_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetDisasterCasesResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "vh_Fg_b"
    }
  ],
  "getE2EEGroupSharedKey_args": [
    {
      "fid": 2,
      "name": "keyVersion",
      "type": 8
    },
    {
      "fid": 3,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "groupKeyId",
      "type": 8
    }
  ],
  "getE2EEGroupSharedKey_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_U3"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getE2EEKeyBackupCertificates_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "Pb1_W4"
    }
  ],
  "getE2EEKeyBackupCertificates_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetE2EEKeyBackupCertificatesResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "E2EEKeyBackupException"
    }
  ],
  "getE2EEKeyBackupInfo_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "Pb1_Y4"
    }
  ],
  "getE2EEKeyBackupInfo_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetE2EEKeyBackupInfoResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "E2EEKeyBackupException"
    }
  ],
  "getE2EEPublicKey_args": [
    {
      "fid": 2,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "keyVersion",
      "type": 8
    },
    {
      "fid": 4,
      "name": "keyId",
      "type": 8
    }
  ],
  "getE2EEPublicKey_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_C13097n4"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getE2EEPublicKeys_result": [
    {
      "fid": 0,
      "name": "success",
      "list": "Pb1_C13097n4"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getEncryptedIdentityV3_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_C12916a5"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getExchangeKey_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetExchangeKeyRequest"
    }
  ],
  "getExchangeKey_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetExchangeKeyResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SecondaryPwlessLoginException"
    }
  ],
  "getExtendedProfile_args": [
    {
      "fid": 1,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "getExtendedProfile_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ExtendedProfile"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getFollowBlacklist_args": [
    {
      "fid": 2,
      "name": "getFollowBlacklistRequest",
      "struct": "GetFollowBlacklistRequest"
    }
  ],
  "getFollowBlacklist_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetFollowBlacklistResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getFollowers_args": [
    {
      "fid": 2,
      "name": "getFollowersRequest",
      "struct": "GetFollowersRequest"
    }
  ],
  "getFollowers_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetFollowersResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getFollowings_args": [
    {
      "fid": 2,
      "name": "getFollowingsRequest",
      "struct": "GetFollowingsRequest"
    }
  ],
  "getFollowings_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetFollowingsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getFontMetas_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetFontMetasRequest"
    }
  ],
  "getFontMetas_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetFontMetasResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getFriendDetails_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetFriendDetailsRequest"
    }
  ],
  "getFriendDetails_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetFriendDetailsResponse"
    },
    {
      "fid": 1,
      "name": "re",
      "struct": "RejectedException"
    },
    {
      "fid": 2,
      "name": "sfe",
      "struct": "ServerFailureException"
    },
    {
      "fid": 3,
      "name": "te",
      "struct": "TalkException"
    },
    {
      "fid": 4,
      "name": "ere",
      "struct": "ExcessiveRequestItemException"
    }
  ],
  "getFriendRequests_args": [
    {
      "fid": 1,
      "name": "direction",
      "struct": "Pb1_F4"
    },
    {
      "fid": 2,
      "name": "lastSeenSeqId",
      "type": 10
    }
  ],
  "getFriendRequests_result": [
    {
      "fid": 0,
      "name": "success",
      "list": "FriendRequest"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getGnbBadgeStatus_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetGnbBadgeStatusRequest"
    }
  ],
  "getGnbBadgeStatus_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetGnbBadgeStatusResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "getGroupCallUrlInfo_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "GetGroupCallUrlInfoRequest"
    }
  ],
  "getGroupCallUrlInfo_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetGroupCallUrlInfoResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getGroupCallUrls_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "Pb1_C13042j5"
    }
  ],
  "getGroupCallUrls_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetGroupCallUrlsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getGroupCall_args": [
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    }
  ],
  "getGroupCall_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GroupCall"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getHomeFlexContent_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetHomeFlexContentRequest"
    }
  ],
  "getHomeFlexContent_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetHomeFlexContentResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "Dg_Fg_b"
    }
  ],
  "getHomeServiceList_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "Eg_C8928b"
    }
  ],
  "getHomeServiceList_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetHomeServiceListResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "Eg_Fg_b"
    }
  ],
  "getHomeServices_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetHomeServicesRequest"
    }
  ],
  "getHomeServices_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetHomeServicesResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "Eg_Fg_b"
    }
  ],
  "getIncentiveStatus_args": [
    {
      "fid": 1,
      "name": "req",
      "struct": "fN0_C24471c"
    }
  ],
  "getIncentiveStatus_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetIncentiveStatusResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PremiumException"
    }
  ],
  "getInstantNews_args": [
    {
      "fid": 1,
      "name": "region",
      "type": 11
    },
    {
      "fid": 2,
      "name": "location",
      "struct": "Location"
    }
  ],
  "getInstantNews_result": [
    {
      "fid": 0,
      "name": "success",
      "list": "InstantNews"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getJoinedMembershipByBotMid_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetJoinedMembershipByBotMidRequest"
    }
  ],
  "getJoinedMembershipByBotMid_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "MemberInfo"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "MembershipException"
    }
  ],
  "getJoinedMembership_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetJoinedMembershipRequest"
    }
  ],
  "getJoinedMembership_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "MemberInfo"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "MembershipException"
    }
  ],
  "getJoinedMemberships_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "JoinedMemberships"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "MembershipException"
    }
  ],
  "getKeyBackupCertificatesV2_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "Pb1_C13070l5"
    }
  ],
  "getKeyBackupCertificatesV2_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetKeyBackupCertificatesV2Response"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "E2EEKeyBackupException"
    }
  ],
  "getLFLSuggestion_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "AR0_b"
    }
  ],
  "getLFLSuggestion_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetLFLSuggestionResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "LFLPremiumException"
    }
  ],
  "getLastE2EEGroupSharedKey_args": [
    {
      "fid": 2,
      "name": "keyVersion",
      "type": 8
    },
    {
      "fid": 3,
      "name": "chatMid",
      "type": 11
    }
  ],
  "getLastE2EEGroupSharedKey_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_U3"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getLastE2EEPublicKeys_args": [
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    }
  ],
  "getLastE2EEPublicKeys_result": [
    {
      "fid": 0,
      "name": "success",
      "map": "Pb1_C13097n4",
      "key": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getLastOpRevision_result": [
    {
      "fid": 0,
      "name": "success",
      "type": 10
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getLiffViewWithoutUserContext_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "LiffViewWithoutUserContextRequest"
    }
  ],
  "getLiffViewWithoutUserContext_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "LiffViewResponse"
    },
    {
      "fid": 1,
      "name": "liffException",
      "struct": "LiffException"
    },
    {
      "fid": 2,
      "name": "talkException",
      "struct": "TalkException"
    }
  ],
  "getLineCardIssueForm_args": [
    {
      "fid": 1,
      "name": "resolutionType",
      "struct": "r80_EnumC34372l"
    }
  ],
  "getLineCardIssueForm_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "PaymentLineCardIssueForm"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PaymentException"
    }
  ],
  "getLinkedDevices_result": [
    {
      "fid": 0,
      "name": "success",
      "list": "UserDevice"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ThingsException"
    }
  ],
  "getLoginActorContext_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetLoginActorContextRequest"
    }
  ],
  "getLoginActorContext_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetLoginActorContextResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SecondaryQrCodeException"
    }
  ],
  "getMappedProfileIds_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetMappedProfileIdsRequest"
    }
  ],
  "getMappedProfileIds_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetMappedProfileIdsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "I80_C26378N": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_C26415o"
    }
  ],
  "getMaskedEmail_args": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "accountIdentifier",
      "struct": "AccountIdentifier"
    }
  ],
  "getMaskedEmail_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetMaskedEmailResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "I80_C26379O": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_C26416p"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    }
  ],
  "getMessageBoxes_args": [
    {
      "fid": 2,
      "name": "messageBoxListRequest",
      "struct": "MessageBoxListRequest"
    },
    {
      "fid": 3,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "getMessageBoxes_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "MessageBoxList"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getMessageReadRange_args": [
    {
      "fid": 2,
      "name": "chatIds",
      "list": 11
    },
    {
      "fid": 3,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "getMessageReadRange_result": [
    {
      "fid": 0,
      "name": "success",
      "list": "TMessageReadRange"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getModuleLayoutV4_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetModuleLayoutV4Request"
    }
  ],
  "getModuleLayoutV4_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "NZ0_D"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "getModuleWithStatus_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "NZ0_G"
    }
  ],
  "getModuleWithStatus_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "NZ0_H"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "getModule_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "NZ0_E"
    }
  ],
  "getModule_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "NZ0_F"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "getModulesV2_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetModulesRequestV2"
    }
  ],
  "getModulesV2_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "NZ0_K"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "getModulesV3_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetModulesRequestV3"
    }
  ],
  "getModulesV3_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "NZ0_K"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "getModulesV4WithStatus_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetModulesV4WithStatusRequest"
    }
  ],
  "getModulesV4WithStatus_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "NZ0_M"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "getMusicSubscriptionStatus_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "YN0_Ob1_N"
    }
  ],
  "getMusicSubscriptionStatus_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "YN0_Ob1_O"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getMyAssetInformationV2_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetMyAssetInformationV2Request"
    }
  ],
  "getMyAssetInformationV2_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetMyAssetInformationV2Response"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "getMyChatapps_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetMyChatappsRequest"
    }
  ],
  "getMyChatapps_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetMyChatappsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ChatappException"
    }
  ],
  "getMyDashboard_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetMyDashboardRequest"
    }
  ],
  "getMyDashboard_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetMyDashboardResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "getNewlyReleasedBuddyIds_args": [
    {
      "fid": 3,
      "name": "country",
      "type": 11
    }
  ],
  "getNewlyReleasedBuddyIds_result": [
    {
      "fid": 0,
      "name": "success",
      "map": 10,
      "key": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getNotificationSettings_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetNotificationSettingsRequest"
    }
  ],
  "getNotificationSettings_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetNotificationSettingsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getOwnedProductSummaries_args": [
    {
      "fid": 2,
      "name": "shopId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "offset",
      "type": 8
    },
    {
      "fid": 4,
      "name": "limit",
      "type": 8
    },
    {
      "fid": 5,
      "name": "locale",
      "struct": "Locale"
    }
  ],
  "getOwnedProductSummaries_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "YN0_Ob1_N0"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getPasswordHashingParameter_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetPasswordHashingParametersRequest"
    }
  ],
  "getPasswordHashingParameter_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetPasswordHashingParametersResponse"
    },
    {
      "fid": 1,
      "name": "pue",
      "struct": "PasswordUpdateException"
    },
    {
      "fid": 2,
      "name": "tae",
      "struct": "TokenAuthException"
    }
  ],
  "getPasswordHashingParametersForPwdReg_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetPasswordHashingParametersForPwdRegRequest"
    }
  ],
  "I80_C26380P": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_C26417q"
    }
  ],
  "getPasswordHashingParametersForPwdReg_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetPasswordHashingParametersForPwdRegResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "I80_C26381Q": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_C26418r"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    }
  ],
  "getPasswordHashingParametersForPwdVerif_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetPasswordHashingParametersForPwdVerifRequest"
    }
  ],
  "I80_C26382S": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_C26419s"
    }
  ],
  "getPasswordHashingParametersForPwdVerif_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetPasswordHashingParametersForPwdVerifResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "I80_C26383T": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_C26420t"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    }
  ],
  "getPaymentUrlByKey_args": [
    {
      "fid": 1,
      "name": "key",
      "type": 11
    }
  ],
  "getPaymentUrlByKey_result": [
    {
      "fid": 0,
      "name": "success",
      "type": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PaymentException"
    }
  ],
  "getPendingAgreements_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "PendingAgreementsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getPhoneVerifMethodForRegistration_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetPhoneVerifMethodForRegistrationRequest"
    }
  ],
  "getPhoneVerifMethodForRegistration_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetPhoneVerifMethodForRegistrationResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "getPhoneVerifMethodV2_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetPhoneVerifMethodV2Request"
    }
  ],
  "I80_C26384U": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_C26421u"
    }
  ],
  "getPhoneVerifMethodV2_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetPhoneVerifMethodV2Response"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "I80_C26385V": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_C26422v"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    }
  ],
  "getPhotoboothBalance_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "Pb1_C13126p5"
    }
  ],
  "getPhotoboothBalance_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetPhotoboothBalanceResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getPredefinedScenarioSets_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetPredefinedScenarioSetsRequest"
    }
  ],
  "getPredefinedScenarioSets_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetPredefinedScenarioSetsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ThingsException"
    }
  ],
  "getPrefetchableBanners_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "BannerRequest"
    }
  ],
  "getPrefetchableBanners_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "BannerResponse"
    }
  ],
  "getPremiumStatusForUpgrade_args": [
    {
      "fid": 1,
      "name": "req",
      "struct": "fN0_C24475g"
    }
  ],
  "getPremiumStatusForUpgrade_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetPremiumStatusResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PremiumException"
    }
  ],
  "getPremiumStatus_args": [
    {
      "fid": 1,
      "name": "req",
      "struct": "fN0_C24476h"
    }
  ],
  "getPremiumStatus_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetPremiumStatusResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PremiumException"
    }
  ],
  "getPreviousMessagesV2WithRequest_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "GetPreviousMessagesV2Request"
    },
    {
      "fid": 3,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "getPreviousMessagesV2WithRequest_result": [
    {
      "fid": 0,
      "name": "success",
      "list": "Message"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getProductByVersion_args": [
    {
      "fid": 2,
      "name": "shopId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "productVersion",
      "type": 10
    },
    {
      "fid": 5,
      "name": "locale",
      "struct": "Locale"
    }
  ],
  "getProductByVersion_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "YN0_Ob1_E0"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getProductLatestVersionForUser_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "YN0_Ob1_P"
    }
  ],
  "getProductLatestVersionForUser_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "YN0_Ob1_Q"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getProductSummariesInSubscriptionSlots_args": [
    {
      "fid": 2,
      "name": "req",
      "struct": "YN0_Ob1_U"
    }
  ],
  "getProductSummariesInSubscriptionSlots_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "YN0_Ob1_V"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getProductV2_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "YN0_Ob1_S"
    }
  ],
  "getProductV2_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "YN0_Ob1_T"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getProductValidationScheme_args": [
    {
      "fid": 2,
      "name": "shopId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "productVersion",
      "type": 10
    }
  ],
  "getProductValidationScheme_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "YN0_Ob1_S0"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getProductsByAuthor_args": [
    {
      "fid": 2,
      "name": "productListByAuthorRequest",
      "struct": "YN0_Ob1_G0"
    }
  ],
  "getProductsByAuthor_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "YN0_Ob1_F0"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getProfile_args": [
    {
      "fid": 1,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "getProfile_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Profile"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getPromotedBuddyContacts_args": [
    {
      "fid": 2,
      "name": "language",
      "type": 11
    },
    {
      "fid": 3,
      "name": "country",
      "type": 11
    }
  ],
  "getPromotedBuddyContacts_result": [
    {
      "fid": 0,
      "name": "success",
      "list": "Contact"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getPublishedMemberships_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetPublishedMembershipsRequest"
    }
  ],
  "getPublishedMemberships_result": [
    {
      "fid": 0,
      "name": "success",
      "list": "Membership"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "MembershipException"
    }
  ],
  "getPurchaseEnabledStatus_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "PurchaseEnabledRequest"
    }
  ],
  "getPurchaseEnabledStatus_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "og_I"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "MembershipException"
    }
  ],
  "getPurchasedProducts_args": [
    {
      "fid": 2,
      "name": "shopId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "offset",
      "type": 8
    },
    {
      "fid": 4,
      "name": "limit",
      "type": 8
    },
    {
      "fid": 5,
      "name": "locale",
      "struct": "Locale"
    }
  ],
  "getPurchasedProducts_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "PurchaseRecordList"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getQuickMenu_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "NZ0_S"
    }
  ],
  "getQuickMenu_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetQuickMenuResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "getRSAKeyInfo_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RSAKey"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getReceivedPresents_args": [
    {
      "fid": 2,
      "name": "shopId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "offset",
      "type": 8
    },
    {
      "fid": 4,
      "name": "limit",
      "type": 8
    },
    {
      "fid": 5,
      "name": "locale",
      "struct": "Locale"
    }
  ],
  "getReceivedPresents_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "PurchaseRecordList"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getRecentFriendRequests_args": [
    {
      "fid": 1,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "getRecentFriendRequests_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "FriendRequestsInfo"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getRecommendationDetails_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetRecommendationDetailsRequest"
    }
  ],
  "getRecommendationDetails_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetRecommendationDetailsResponse"
    },
    {
      "fid": 1,
      "name": "re",
      "struct": "RejectedException"
    },
    {
      "fid": 2,
      "name": "sfe",
      "struct": "ServerFailureException"
    },
    {
      "fid": 3,
      "name": "te",
      "struct": "TalkException"
    },
    {
      "fid": 4,
      "name": "ere",
      "struct": "ExcessiveRequestItemException"
    }
  ],
  "getRecommendationIds_args": [
    {
      "fid": 1,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "getRecommendationIds_result": [
    {
      "fid": 0,
      "name": "success",
      "list": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getRecommendationList_args": [
    {
      "fid": 2,
      "name": "getRecommendationRequest",
      "struct": "YN0_Ob1_W"
    }
  ],
  "getRecommendationList_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSuggestTrialRecommendationResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SuggestTrialException"
    }
  ],
  "getRepairElements_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetRepairElementsRequest"
    }
  ],
  "getRepairElements_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetRepairElementsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getRequiredAgreements_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "PaymentRequiredAgreementsInfo"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PaymentException"
    }
  ],
  "getResourceFile_args": [
    {
      "fid": 2,
      "name": "req",
      "struct": "YN0_Ob1_Z"
    }
  ],
  "getResourceFile_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "YN0_Ob1_Y"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getResponseStatus_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetResponseStatusRequest"
    }
  ],
  "getResponseStatus_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetResponseStatusResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "OaChatException"
    }
  ],
  "getReturnUrlWithRequestTokenForAutoLogin_args": [
    {
      "fid": 2,
      "name": "webLoginRequest",
      "struct": "WebLoginRequest"
    }
  ],
  "getReturnUrlWithRequestTokenForAutoLogin_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "WebLoginResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ChannelException"
    }
  ],
  "getReturnUrlWithRequestTokenForMultiLiffLogin_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "LiffWebLoginRequest"
    }
  ],
  "getReturnUrlWithRequestTokenForMultiLiffLogin_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "LiffWebLoginResponse"
    },
    {
      "fid": 1,
      "name": "liffException",
      "struct": "LiffException"
    },
    {
      "fid": 2,
      "name": "channelException",
      "struct": "LiffChannelException"
    },
    {
      "fid": 3,
      "name": "talkException",
      "struct": "TalkException"
    }
  ],
  "getRingbackTone_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RingbackTone"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getRingtone_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Ringtone"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getRoomsV2_args": [
    {
      "fid": 2,
      "name": "roomIds",
      "list": 11
    }
  ],
  "getRoomsV2_result": [
    {
      "fid": 0,
      "name": "success",
      "list": "Room"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getSCC_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSCCRequest"
    }
  ],
  "getSCC_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "SCC"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "MembershipException"
    }
  ],
  "I80_C26386W": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_C26423w"
    }
  ],
  "I80_C26387X": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_C26424x"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    }
  ],
  "getSeasonalEffects_args": [
    {
      "fid": 1,
      "name": "req",
      "struct": "Eh_C8935c"
    }
  ],
  "getSeasonalEffects_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSeasonalEffectsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "Eh_Fg_b"
    }
  ],
  "getSecondAuthMethod_args": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "getSecondAuthMethod_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSecondAuthMethodResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "getSentPresents_args": [
    {
      "fid": 2,
      "name": "shopId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "offset",
      "type": 8
    },
    {
      "fid": 4,
      "name": "limit",
      "type": 8
    },
    {
      "fid": 5,
      "name": "locale",
      "struct": "Locale"
    }
  ],
  "getSentPresents_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "PurchaseRecordList"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getServerTime_result": [
    {
      "fid": 0,
      "name": "success",
      "type": 10
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getServiceShortcutMenu_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "NZ0_U"
    }
  ],
  "getServiceShortcutMenu_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetServiceShortcutMenuResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "getSessionContentBeforeMigCompletion_args": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "getSessionContentBeforeMigCompletion_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSessionContentBeforeMigCompletionResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "getSettingsAttributes2_args": [
    {
      "fid": 2,
      "name": "attributesToRetrieve",
      "set": "SettingsAttributeEx"
    }
  ],
  "getSettingsAttributes2_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Settings"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getSettingsAttributes_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Settings"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getSettings_args": [
    {
      "fid": 1,
      "name": "syncReason",
      "struct": "Pb1_V7"
    }
  ],
  "getSettings_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Settings"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getSmartChannelRecommendations_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetSmartChannelRecommendationsRequest"
    }
  ],
  "getSmartChannelRecommendations_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSmartChannelRecommendationsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "getSquareBot_args": [
    {
      "fid": 1,
      "name": "req",
      "struct": "GetSquareBotRequest"
    }
  ],
  "getSquareBot_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSquareBotResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "BotException"
    }
  ],
  "getStudentInformation_args": [
    {
      "fid": 2,
      "name": "req",
      "struct": "Ob1_C12606a0"
    }
  ],
  "getStudentInformation_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetStudentInformationResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getSubscriptionPlans_args": [
    {
      "fid": 2,
      "name": "req",
      "struct": "GetSubscriptionPlansRequest"
    }
  ],
  "getSubscriptionPlans_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSubscriptionPlansResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getSubscriptionSlotHistory_args": [
    {
      "fid": 2,
      "name": "req",
      "struct": "Ob1_C12618e0"
    }
  ],
  "getSubscriptionSlotHistory_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Ob1_C12621f0"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getSubscriptionStatus_args": [
    {
      "fid": 2,
      "name": "req",
      "struct": "GetSubscriptionStatusRequest"
    }
  ],
  "getSubscriptionStatus_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSubscriptionStatusResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getSuggestDictionarySetting_args": [
    {
      "fid": 2,
      "name": "req",
      "struct": "Ob1_C12630i0"
    }
  ],
  "getSuggestDictionarySetting_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSuggestDictionarySettingResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getSuggestResourcesV2_args": [
    {
      "fid": 2,
      "name": "req",
      "struct": "GetSuggestResourcesV2Request"
    }
  ],
  "getSuggestResourcesV2_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetSuggestResourcesV2Response"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "getTaiwanBankBalance_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetTaiwanBankBalanceRequest"
    }
  ],
  "getTaiwanBankBalance_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetTaiwanBankBalanceResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "getTargetProfiles_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetTargetProfilesRequest"
    }
  ],
  "getTargetProfiles_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetTargetProfilesResponse"
    },
    {
      "fid": 1,
      "name": "re",
      "struct": "RejectedException"
    },
    {
      "fid": 2,
      "name": "sfe",
      "struct": "ServerFailureException"
    },
    {
      "fid": 3,
      "name": "te",
      "struct": "TalkException"
    },
    {
      "fid": 4,
      "name": "ere",
      "struct": "ExcessiveRequestItemException"
    }
  ],
  "getTargetingPopup_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "NZ0_C12150a0"
    }
  ],
  "getTargetingPopup_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetTargetingPopupResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "getThaiBankBalance_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetThaiBankBalanceRequest"
    }
  ],
  "getThaiBankBalance_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetThaiBankBalanceResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "getTotalCoinBalance_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetTotalCoinBalanceRequest"
    }
  ],
  "getTotalCoinBalance_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetTotalCoinBalanceResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "CoinException"
    }
  ],
  "getUpdatedChannelIds_args": [
    {
      "fid": 1,
      "name": "channelIds",
      "list": "ChannelIdWithLastUpdated"
    }
  ],
  "getUpdatedChannelIds_result": [
    {
      "fid": 0,
      "name": "success",
      "list": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ChannelException"
    }
  ],
  "getUserCollections_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetUserCollectionsRequest"
    }
  ],
  "getUserCollections_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetUserCollectionsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "CollectionException"
    }
  ],
  "getUserProfile_args": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "accountIdentifier",
      "struct": "AccountIdentifier"
    }
  ],
  "getUserProfile_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetUserProfileResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "getUserVector_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetUserVectorRequest"
    }
  ],
  "getUserVector_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetUserVectorResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "LFLPremiumException"
    }
  ],
  "getUsersMappedByProfile_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "GetUsersMappedByProfileRequest"
    }
  ],
  "getUsersMappedByProfile_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "GetUsersMappedByProfileResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "getWebLoginDisallowedUrlForMultiLiffLogin_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "LiffWebLoginRequest"
    }
  ],
  "getWebLoginDisallowedUrlForMultiLiffLogin_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "LiffWebLoginResponse"
    },
    {
      "fid": 1,
      "name": "liffException",
      "struct": "LiffException"
    },
    {
      "fid": 2,
      "name": "channelException",
      "struct": "LiffChannelException"
    },
    {
      "fid": 3,
      "name": "talkException",
      "struct": "TalkException"
    }
  ],
  "getWebLoginDisallowedUrl_args": [
    {
      "fid": 2,
      "name": "webLoginRequest",
      "struct": "WebLoginRequest"
    }
  ],
  "getWebLoginDisallowedUrl_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "WebLoginResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ChannelException"
    }
  ],
  "h80_C25643c": [],
  "h80_t": [
    {
      "fid": 1,
      "name": "newDevicePublicKey",
      "type": 11
    },
    {
      "fid": 2,
      "name": "encryptedQrIdentifier",
      "type": 11
    }
  ],
  "h80_v": [],
  "I80_A0": [],
  "I80_C26398e": [],
  "I80_C26404h": [],
  "I80_F0": [],
  "I80_r0": [],
  "I80_v0": [],
  "inviteFriends_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "InviteFriendsRequest"
    }
  ],
  "inviteFriends_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "InviteFriendsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PremiumException"
    }
  ],
  "inviteIntoChat_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "InviteIntoChatRequest"
    }
  ],
  "inviteIntoChat_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_J5"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "inviteIntoGroupCall_args": [
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "memberMids",
      "list": 11
    },
    {
      "fid": 4,
      "name": "mediaType",
      "struct": "Pb1_EnumC13237x5"
    }
  ],
  "inviteIntoGroupCall_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "inviteIntoRoom_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "roomId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "contactIds",
      "list": 11
    }
  ],
  "inviteIntoRoom_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "isProductForCollections_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "IsProductForCollectionsRequest"
    }
  ],
  "isProductForCollections_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "IsProductForCollectionsResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "CollectionException"
    }
  ],
  "isStickerAvailableForCombinationSticker_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "IsStickerAvailableForCombinationStickerRequest"
    }
  ],
  "isStickerAvailableForCombinationSticker_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "IsStickerAvailableForCombinationStickerResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "isUseridAvailable_args": [
    {
      "fid": 2,
      "name": "searchId",
      "type": 11
    }
  ],
  "isUseridAvailable_result": [
    {
      "fid": 0,
      "name": "success",
      "type": 2
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "issueChannelToken_args": [
    {
      "fid": 1,
      "name": "channelId",
      "type": 11
    }
  ],
  "issueChannelToken_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ChannelToken"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ChannelException"
    }
  ],
  "issueLiffView_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "LiffViewRequest"
    }
  ],
  "issueLiffView_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "LiffViewResponse"
    },
    {
      "fid": 1,
      "name": "liffException",
      "struct": "LiffException"
    },
    {
      "fid": 2,
      "name": "talkException",
      "struct": "TalkException"
    }
  ],
  "issueNonce_result": [
    {
      "fid": 0,
      "name": "success",
      "type": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PaymentException"
    }
  ],
  "issueRequestTokenWithAuthScheme_args": [
    {
      "fid": 1,
      "name": "channelId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "otpId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "authScheme",
      "list": 11
    },
    {
      "fid": 4,
      "name": "returnUrl",
      "type": 11
    }
  ],
  "issueRequestTokenWithAuthScheme_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RequestTokenResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ChannelException"
    }
  ],
  "issueSubLiffView_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "LiffViewRequest"
    }
  ],
  "issueSubLiffView_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "LiffViewResponse"
    },
    {
      "fid": 1,
      "name": "liffException",
      "struct": "LiffException"
    },
    {
      "fid": 2,
      "name": "talkException",
      "struct": "TalkException"
    }
  ],
  "issueTokenForAccountMigrationSettings_args": [
    {
      "fid": 2,
      "name": "enforce",
      "type": 2
    }
  ],
  "issueTokenForAccountMigrationSettings_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "SecurityCenterResult"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "issueToken_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "IssueBirthdayGiftTokenRequest"
    }
  ],
  "issueToken_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "IssueBirthdayGiftTokenResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "Cg_Fg_b"
    }
  ],
  "issueV3TokenForPrimary_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "IssueV3TokenForPrimaryRequest"
    }
  ],
  "issueV3TokenForPrimary_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "IssueV3TokenForPrimaryResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "issueWebAuthDetailsForSecondAuth_args": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "issueWebAuthDetailsForSecondAuth_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "IssueWebAuthDetailsForSecondAuthResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "joinChatByCallUrl_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "JoinChatByCallUrlRequest"
    }
  ],
  "joinChatByCallUrl_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "JoinChatByCallUrlResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "jp_naver_line_shop_protocol_thrift_ProductProperty": [],
  "kf_i": [],
  "kf_k": [],
  "kf_m": [
    {
      "fid": 1,
      "name": "richmenu",
      "struct": "RichmenuEvent"
    },
    {
      "fid": 2,
      "name": "talkroom",
      "struct": "TalkroomEvent"
    }
  ],
  "kf_w": [
    {
      "fid": 1,
      "name": "profileRefererContent",
      "struct": "_any"
    }
  ],
  "kickoutFromGroupCall_args": [
    {
      "fid": 2,
      "name": "kickoutFromGroupCallRequest",
      "struct": "KickoutFromGroupCallRequest"
    }
  ],
  "kickoutFromGroupCall_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_S5"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "leaveRoom_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "roomId",
      "type": 11
    }
  ],
  "leaveRoom_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "linkDevice_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "DeviceLinkRequest"
    }
  ],
  "linkDevice_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "DeviceLinkResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ThingsException"
    }
  ],
  "logoutV2_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "lookupAvailableEap_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "LookupAvailableEapRequest"
    }
  ],
  "lookupAvailableEap_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "LookupAvailableEapResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "lookupPaidCall_args": [
    {
      "fid": 2,
      "name": "dialedNumber",
      "type": 11
    },
    {
      "fid": 3,
      "name": "language",
      "type": 11
    },
    {
      "fid": 4,
      "name": "referer",
      "type": 11
    }
  ],
  "lookupPaidCall_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "PaidCallResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "m80_l": [],
  "m80_n": [],
  "m80_q": [],
  "m80_s": [],
  "mapProfileToUsers_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "MapProfileToUsersRequest"
    }
  ],
  "mapProfileToUsers_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "MapProfileToUsersResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "migratePrimaryUsingEapAccountWithTokenV3_args": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "migratePrimaryUsingEapAccountWithTokenV3_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "MigratePrimaryWithTokenV3Response"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "migratePrimaryUsingPhoneWithTokenV3_args": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "migratePrimaryUsingPhoneWithTokenV3_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "MigratePrimaryWithTokenV3Response"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "migratePrimaryUsingQrCode_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "MigratePrimaryUsingQrCodeRequest"
    }
  ],
  "migratePrimaryUsingQrCode_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "MigratePrimaryUsingQrCodeResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PrimaryQrCodeMigrationException"
    }
  ],
  "n80_C31222b": [],
  "n80_d": [],
  "negotiateE2EEPublicKey_args": [
    {
      "fid": 2,
      "name": "mid",
      "type": 11
    }
  ],
  "negotiateE2EEPublicKey_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "E2EENegotiationResult"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "noop_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "notifyBannerShowing_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "notifyBannerTapped_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "notifyBeaconDetected_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "notifyChatAdEntry_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "NotifyChatAdEntryRequest"
    }
  ],
  "notifyChatAdEntry_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "kf_i"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "BotExternalException"
    }
  ],
  "notifyDeviceConnection_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "NotifyDeviceConnectionRequest"
    }
  ],
  "notifyDeviceConnection_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "NotifyDeviceConnectionResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ThingsException"
    }
  ],
  "notifyDeviceDisconnection_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "NotifyDeviceDisconnectionRequest"
    }
  ],
  "notifyDeviceDisconnection_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "do0_C23165x"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ThingsException"
    }
  ],
  "notifyInstalled_args": [
    {
      "fid": 2,
      "name": "udidHash",
      "type": 11
    },
    {
      "fid": 3,
      "name": "applicationTypeWithExtensions",
      "type": 11
    }
  ],
  "notifyInstalled_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "notifyOATalkroomEvents_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "NotifyOATalkroomEventsRequest"
    }
  ],
  "notifyOATalkroomEvents_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "kf_k"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "BotExternalException"
    }
  ],
  "notifyProductEvent_args": [
    {
      "fid": 2,
      "name": "shopId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "productVersion",
      "type": 10
    },
    {
      "fid": 5,
      "name": "productEvent",
      "type": 10
    }
  ],
  "notifyProductEvent_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "notifyRegistrationComplete_args": [
    {
      "fid": 2,
      "name": "udidHash",
      "type": 11
    },
    {
      "fid": 3,
      "name": "applicationTypeWithExtensions",
      "type": 11
    }
  ],
  "notifyRegistrationComplete_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "notifyScenarioExecuted_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "NotifyScenarioExecutedRequest"
    }
  ],
  "notifyScenarioExecuted_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "do0_C23167z"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ThingsException"
    }
  ],
  "notifySleep_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "notifyUpdated_args": [
    {
      "fid": 2,
      "name": "lastRev",
      "type": 10
    },
    {
      "fid": 3,
      "name": "deviceInfo",
      "struct": "DeviceInfo"
    },
    {
      "fid": 4,
      "name": "udidHash",
      "type": 11
    },
    {
      "fid": 5,
      "name": "oldUdidHash",
      "type": 11
    }
  ],
  "notifyUpdated_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "o80_C32273b": [],
  "o80_d": [],
  "o80_m": [],
  "og_u": [],
  "openAuthSession_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "AuthSessionRequest"
    }
  ],
  "openAuthSession_result": [
    {
      "fid": 0,
      "name": "success",
      "type": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "openProximityMatch_result": [
    {
      "fid": 0,
      "name": "success",
      "type": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "openSession_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "OpenSessionRequest"
    }
  ],
  "openSession_result": [
    {
      "fid": 0,
      "name": "success",
      "type": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "permitLogin_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "PermitLoginRequest"
    }
  ],
  "permitLogin_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "PermitLoginResponse"
    },
    {
      "fid": 1,
      "name": "sle",
      "struct": "SeamlessLoginException"
    },
    {
      "fid": 2,
      "name": "tae",
      "struct": "TokenAuthException"
    }
  ],
  "placePurchaseOrderForFreeProduct_args": [
    {
      "fid": 2,
      "name": "purchaseOrder",
      "struct": "PurchaseOrder"
    }
  ],
  "placePurchaseOrderForFreeProduct_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "PurchaseOrderResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "placePurchaseOrderWithLineCoin_args": [
    {
      "fid": 2,
      "name": "purchaseOrder",
      "struct": "PurchaseOrder"
    }
  ],
  "placePurchaseOrderWithLineCoin_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "PurchaseOrderResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "postPopupButtonEvents_args": [
    {
      "fid": 1,
      "name": "buttonId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "checkboxes",
      "map": 2,
      "key": 11
    }
  ],
  "postPopupButtonEvents_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "PaymentException"
    }
  ],
  "purchaseSubscription_args": [
    {
      "fid": 2,
      "name": "req",
      "struct": "PurchaseSubscriptionRequest"
    }
  ],
  "purchaseSubscription_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "PurchaseSubscriptionResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "putE2eeKey_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "PutE2eeKeyRequest"
    }
  ],
  "putE2eeKey_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "o80_m"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SecondaryPwlessLoginException"
    }
  ],
  "q80_C33650b": [],
  "q80_q": [],
  "q80_s": [],
  "qm_C34110c": [
    {
      "fid": 1,
      "name": "inFriends",
      "type": 11
    },
    {
      "fid": 2,
      "name": "notInFriends",
      "type": 11
    },
    {
      "fid": 3,
      "name": "termsAgreed",
      "type": 2
    }
  ],
  "qm_C34115h": [
    {
      "fid": 1,
      "name": "hwid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "secureMessage",
      "type": 11
    },
    {
      "fid": 3,
      "name": "applicationType",
      "struct": "ApplicationType"
    },
    {
      "fid": 4,
      "name": "applicationVersion",
      "type": 11
    },
    {
      "fid": 5,
      "name": "userSessionId",
      "type": 11
    },
    {
      "fid": 6,
      "name": "actionId",
      "type": 10
    },
    {
      "fid": 7,
      "name": "screen",
      "type": 11
    },
    {
      "fid": 8,
      "name": "bannerStartedAt",
      "type": 10
    },
    {
      "fid": 9,
      "name": "bannerShownFor",
      "type": 10
    }
  ],
  "qm_j": [
    {
      "fid": 1,
      "name": "hwid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "secureMessage",
      "type": 11
    },
    {
      "fid": 3,
      "name": "applicationType",
      "struct": "ApplicationType"
    },
    {
      "fid": 4,
      "name": "applicationVersion",
      "type": 11
    },
    {
      "fid": 5,
      "name": "userSessionId",
      "type": 11
    },
    {
      "fid": 6,
      "name": "actionId",
      "type": 10
    },
    {
      "fid": 7,
      "name": "screen",
      "type": 11
    },
    {
      "fid": 8,
      "name": "bannerTappedAt",
      "type": 10
    },
    {
      "fid": 9,
      "name": "beaconTermAgreed",
      "type": 2
    }
  ],
  "qm_l": [
    {
      "fid": 1,
      "name": "hwid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "secureMessage",
      "type": 11
    },
    {
      "fid": 3,
      "name": "applicationType",
      "struct": "ApplicationType"
    },
    {
      "fid": 4,
      "name": "applicationVersion",
      "type": 11
    },
    {
      "fid": 5,
      "name": "lang",
      "type": 11
    },
    {
      "fid": 6,
      "name": "region",
      "type": 11
    },
    {
      "fid": 7,
      "name": "modelName",
      "type": 11
    }
  ],
  "qm_o": [
    {
      "fid": 1,
      "name": "hwid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "secureMessage",
      "type": 11
    },
    {
      "fid": 3,
      "name": "notificationType",
      "struct": "qm_EnumC34112e"
    },
    {
      "fid": 4,
      "name": "rssi",
      "struct": "Rssi"
    }
  ],
  "queryBeaconActions_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "BeaconQueryResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "r80_C34358N": [],
  "r80_C34360P": [],
  "react_args": [
    {
      "fid": 1,
      "name": "reactRequest",
      "struct": "ReactRequest"
    }
  ],
  "react_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "refresh_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "RefreshAccessTokenRequest"
    }
  ],
  "refresh_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RefreshAccessTokenResponse"
    },
    {
      "fid": 1,
      "name": "accessTokenRefreshException",
      "struct": "AccessTokenRefreshException"
    }
  ],
  "registerBarcodeAsync_args": [
    {
      "fid": 1,
      "name": "requestToken",
      "type": 11
    },
    {
      "fid": 2,
      "name": "barcodeRequestId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "barcode",
      "type": 11
    },
    {
      "fid": 4,
      "name": "password",
      "struct": "RSAEncryptedPassword"
    }
  ],
  "registerBarcodeAsync_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "PaymentException"
    }
  ],
  "registerCampaignReward_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "RegisterCampaignRewardRequest"
    }
  ],
  "registerCampaignReward_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RegisterCampaignRewardResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "WalletException"
    }
  ],
  "registerE2EEGroupKey_args": [
    {
      "fid": 2,
      "name": "keyVersion",
      "type": 8
    },
    {
      "fid": 3,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 4,
      "name": "members",
      "list": 11
    },
    {
      "fid": 5,
      "name": "keyIds",
      "list": 8
    },
    {
      "fid": 6,
      "name": "encryptedSharedKeys",
      "list": 11
    }
  ],
  "registerE2EEGroupKey_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_U3"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "registerE2EEPublicKeyV2_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "Pb1_W6"
    }
  ],
  "registerE2EEPublicKeyV2_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RegisterE2EEPublicKeyV2Response"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "registerE2EEPublicKey_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "publicKey",
      "struct": "Pb1_C13097n4"
    }
  ],
  "registerE2EEPublicKey_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_C13097n4"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "registerPrimaryCredential_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "RegisterPrimaryCredentialRequest"
    }
  ],
  "registerPrimaryCredential_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "R70_t"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PwlessCredentialException"
    }
  ],
  "registerPrimaryUsingEapAccount_args": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "registerPrimaryUsingEapAccount_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RegisterPrimaryWithTokenV3Response"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "registerPrimaryUsingPhoneWithTokenV3_args": [
    {
      "fid": 2,
      "name": "authSessionId",
      "type": 11
    }
  ],
  "registerPrimaryUsingPhoneWithTokenV3_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RegisterPrimaryWithTokenV3Response"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "I80_C26367C": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_q0"
    }
  ],
  "I80_C26368D": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_r0"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    },
    {
      "fid": 2,
      "name": "tae",
      "struct": "TokenAuthException"
    }
  ],
  "registerUserid_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "searchId",
      "type": 11
    }
  ],
  "registerUserid_result": [
    {
      "fid": 0,
      "name": "success",
      "type": 2
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "reissueChatTicket_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ReissueChatTicketRequest"
    }
  ],
  "reissueChatTicket_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ReissueChatTicketResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "rejectChatInvitation_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "RejectChatInvitationRequest"
    }
  ],
  "rejectChatInvitation_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_C12946c7"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "removeAllMessages_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "removeChatRoomAnnouncement_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "chatRoomMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "announcementSeq",
      "type": 10
    }
  ],
  "removeChatRoomAnnouncement_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "removeFollower_args": [
    {
      "fid": 2,
      "name": "removeFollowerRequest",
      "struct": "RemoveFollowerRequest"
    }
  ],
  "removeFollower_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "removeFriendRequest_args": [
    {
      "fid": 1,
      "name": "direction",
      "struct": "Pb1_F4"
    },
    {
      "fid": 2,
      "name": "midOrEMid",
      "type": 11
    }
  ],
  "removeFriendRequest_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "removeFromFollowBlacklist_args": [
    {
      "fid": 2,
      "name": "removeFromFollowBlacklistRequest",
      "struct": "RemoveFromFollowBlacklistRequest"
    }
  ],
  "removeFromFollowBlacklist_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "removeIdentifier_args": [
    {
      "fid": 2,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "request",
      "struct": "IdentityCredentialRequest"
    }
  ],
  "removeIdentifier_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "IdentityCredentialResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "removeItemFromCollection_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "RemoveItemFromCollectionRequest"
    }
  ],
  "removeItemFromCollection_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Ob1_C12637k1"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "CollectionException"
    }
  ],
  "removeLinePayAccount_args": [
    {
      "fid": 1,
      "name": "accountId",
      "type": 11
    }
  ],
  "removeLinePayAccount_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "PaymentException"
    }
  ],
  "removeProductFromSubscriptionSlot_args": [
    {
      "fid": 2,
      "name": "req",
      "struct": "RemoveProductFromSubscriptionSlotRequest"
    }
  ],
  "removeProductFromSubscriptionSlot_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RemoveProductFromSubscriptionSlotResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "reportAbuseEx_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "ReportAbuseExRequest"
    }
  ],
  "reportAbuseEx_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_C13114o7"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "reportDeviceState_args": [
    {
      "fid": 2,
      "name": "booleanState",
      "map": 2,
      "key": 8
    },
    {
      "fid": 3,
      "name": "stringState",
      "map": 11,
      "key": 8
    }
  ],
  "reportDeviceState_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "reportLocation_args": [
    {
      "fid": 1,
      "name": "location",
      "struct": "Geolocation"
    },
    {
      "fid": 2,
      "name": "trigger",
      "struct": "Pb1_EnumC12917a6"
    },
    {
      "fid": 3,
      "name": "networkStatus",
      "struct": "ClientNetworkStatus"
    },
    {
      "fid": 4,
      "name": "measuredAt",
      "type": 10
    },
    {
      "fid": 6,
      "name": "clientCurrentTimestamp",
      "type": 10
    },
    {
      "fid": 7,
      "name": "debugInfo",
      "struct": "LocationDebugInfo"
    }
  ],
  "reportLocation_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "reportNetworkStatus_args": [
    {
      "fid": 1,
      "name": "trigger",
      "struct": "Pb1_EnumC12917a6"
    },
    {
      "fid": 2,
      "name": "networkStatus",
      "struct": "ClientNetworkStatus"
    },
    {
      "fid": 3,
      "name": "measuredAt",
      "type": 10
    },
    {
      "fid": 4,
      "name": "scanCompletionTimestamp",
      "type": 10
    }
  ],
  "reportNetworkStatus_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "reportProfile_args": [
    {
      "fid": 2,
      "name": "syncOpRevision",
      "type": 10
    },
    {
      "fid": 3,
      "name": "profile",
      "struct": "Profile"
    }
  ],
  "reportProfile_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "reportPushRecvReports_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "pushRecvReports",
      "list": "PushRecvReport"
    }
  ],
  "reportPushRecvReports_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "reportRefreshedAccessToken_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ReportRefreshedAccessTokenRequest"
    }
  ],
  "reportRefreshedAccessToken_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "P70_k"
    },
    {
      "fid": 1,
      "name": "accessTokenRefreshException",
      "struct": "AccessTokenRefreshException"
    }
  ],
  "reportSettings_args": [
    {
      "fid": 2,
      "name": "syncOpRevision",
      "type": 10
    },
    {
      "fid": 3,
      "name": "settings",
      "struct": "Settings"
    }
  ],
  "reportSettings_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "requestCleanupUserProvidedData_args": [
    {
      "fid": 1,
      "name": "dataTypes",
      "set": "Pb1_od"
    }
  ],
  "requestCleanupUserProvidedData_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "I80_C26388Y": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_u0"
    }
  ],
  "requestToSendPasswordSetVerificationEmail_args": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "email",
      "type": 11
    },
    {
      "fid": 3,
      "name": "accountIdentifier",
      "struct": "AccountIdentifier"
    }
  ],
  "requestToSendPasswordSetVerificationEmail_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RequestToSendPasswordSetVerificationEmailResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "I80_C26389Z": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_v0"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    }
  ],
  "requestToSendPhonePinCode_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ReqToSendPhonePinCodeRequest"
    }
  ],
  "I80_C26391a0": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_s0"
    }
  ],
  "requestToSendPhonePinCode_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ReqToSendPhonePinCodeResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "I80_C26393b0": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_t0"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    }
  ],
  "requestTradeNumber_args": [
    {
      "fid": 1,
      "name": "requestToken",
      "type": 11
    },
    {
      "fid": 2,
      "name": "requestType",
      "struct": "r80_g0"
    },
    {
      "fid": 3,
      "name": "amount",
      "type": 11
    },
    {
      "fid": 4,
      "name": "name",
      "type": 11
    }
  ],
  "requestTradeNumber_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "PaymentTradeInfo"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PaymentException"
    }
  ],
  "resendIdentifierConfirmation_args": [
    {
      "fid": 2,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "request",
      "struct": "IdentityCredentialRequest"
    }
  ],
  "resendIdentifierConfirmation_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "IdentityCredentialResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "resendPinCode_args": [
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    }
  ],
  "resendPinCode_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "reserveCoinPurchase_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "CoinPurchaseReservation"
    }
  ],
  "reserveCoinPurchase_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "PaymentReservationResult"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "CoinException"
    }
  ],
  "reserveSubscriptionPurchase_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ReserveSubscriptionPurchaseRequest"
    }
  ],
  "reserveSubscriptionPurchase_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ReserveSubscriptionPurchaseResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PremiumException"
    }
  ],
  "reserve_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ReserveRequest"
    }
  ],
  "reserve_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ReserveInfo"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "MembershipException"
    }
  ],
  "respondE2EEKeyExchange_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "respondE2EELoginRequest_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "restoreE2EEKeyBackup_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "Pb1_C13155r7"
    }
  ],
  "restoreE2EEKeyBackup_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_C13169s7"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "E2EEKeyBackupException"
    }
  ],
  "I80_C26395c0": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_w0"
    }
  ],
  "I80_C26397d0": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_x0"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    }
  ],
  "I80_C26399e0": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_w0"
    }
  ],
  "I80_C26401f0": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_x0"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    }
  ],
  "retrieveRequestTokenWithDocomoV2_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "Pb1_C13183t7"
    }
  ],
  "retrieveRequestTokenWithDocomoV2_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "RetrieveRequestTokenWithDocomoV2Response"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "retrieveRequestToken_args": [
    {
      "fid": 2,
      "name": "carrier",
      "struct": "CarrierCode"
    }
  ],
  "retrieveRequestToken_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "AgeCheckRequestResult"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "revokeTokens_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "RevokeTokensRequest"
    }
  ],
  "revokeTokens_result": [
    {
      "fid": 1,
      "name": "liffException",
      "struct": "LiffException"
    },
    {
      "fid": 2,
      "name": "talkException",
      "struct": "TalkException"
    }
  ],
  "saveStudentInformation_args": [
    {
      "fid": 2,
      "name": "req",
      "struct": "SaveStudentInformationRequest"
    }
  ],
  "saveStudentInformation_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Ob1_C12649o1"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "sendChatChecked_args": [
    {
      "fid": 1,
      "name": "seq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "lastMessageId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "sessionId",
      "type": 3
    }
  ],
  "sendChatChecked_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "sendChatRemoved_args": [
    {
      "fid": 1,
      "name": "seq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "chatMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "lastMessageId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "sessionId",
      "type": 3
    }
  ],
  "sendChatRemoved_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "sendEncryptedE2EEKey_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "SendEncryptedE2EEKeyRequest"
    }
  ],
  "sendEncryptedE2EEKey_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "h80_v"
    },
    {
      "fid": 1,
      "name": "pqme",
      "struct": "PrimaryQrCodeMigrationException"
    },
    {
      "fid": 2,
      "name": "tae",
      "struct": "TokenAuthException"
    }
  ],
  "sendMessage_args": [
    {
      "fid": 1,
      "name": "seq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "message",
      "struct": "Message"
    }
  ],
  "sendMessage_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Message"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "sendPostback_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "SendPostbackRequest"
    }
  ],
  "sendPostback_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "setChatHiddenStatus_args": [
    {
      "fid": 1,
      "name": "setChatHiddenStatusRequest",
      "struct": "SetChatHiddenStatusRequest"
    }
  ],
  "setChatHiddenStatus_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "setHashedPassword_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "SetHashedPasswordRequest"
    }
  ],
  "I80_C26403g0": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_z0"
    }
  ],
  "setHashedPassword_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "T70_g1"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "I80_C26405h0": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_A0"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    }
  ],
  "setIdentifier_args": [
    {
      "fid": 2,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "request",
      "struct": "IdentityCredentialRequest"
    }
  ],
  "setIdentifier_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "IdentityCredentialResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "setNotificationsEnabled_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "type",
      "struct": "MIDType"
    },
    {
      "fid": 3,
      "name": "target",
      "type": 11
    },
    {
      "fid": 4,
      "name": "enablement",
      "type": 2
    }
  ],
  "setNotificationsEnabled_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "setPassword_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "SetPasswordRequest"
    }
  ],
  "setPassword_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "U70_t"
    },
    {
      "fid": 1,
      "name": "pue",
      "struct": "PasswordUpdateException"
    },
    {
      "fid": 2,
      "name": "tae",
      "struct": "TokenAuthException"
    }
  ],
  "shouldShowWelcomeStickerBanner_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "Ob1_C12660s1"
    }
  ],
  "shouldShowWelcomeStickerBanner_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ShouldShowWelcomeStickerBannerResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "startPhotobooth_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "StartPhotoboothRequest"
    }
  ],
  "startPhotobooth_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "StartPhotoboothResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "I80_C26407i0": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_C0"
    }
  ],
  "I80_C26409j0": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_D0"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    }
  ],
  "startUpdateVerification_args": [
    {
      "fid": 2,
      "name": "region",
      "type": 11
    },
    {
      "fid": 3,
      "name": "carrier",
      "struct": "CarrierCode"
    },
    {
      "fid": 4,
      "name": "phone",
      "type": 11
    },
    {
      "fid": 5,
      "name": "udidHash",
      "type": 11
    },
    {
      "fid": 6,
      "name": "deviceInfo",
      "struct": "DeviceInfo"
    },
    {
      "fid": 7,
      "name": "networkCode",
      "type": 11
    },
    {
      "fid": 8,
      "name": "locale",
      "type": 11
    },
    {
      "fid": 9,
      "name": "simInfo",
      "struct": "SIMInfo"
    }
  ],
  "startUpdateVerification_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "VerificationSessionData"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "stopBundleSubscription_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "StopBundleSubscriptionRequest"
    }
  ],
  "stopBundleSubscription_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "StopBundleSubscriptionResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "storeShareTargetPickerResult_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "ShareTargetPickerResultRequest"
    }
  ],
  "storeShareTargetPickerResult_result": [
    {
      "fid": 1,
      "name": "liffException",
      "struct": "LiffException"
    },
    {
      "fid": 2,
      "name": "talkException",
      "struct": "TalkException"
    }
  ],
  "storeSubWindowResult_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "SubWindowResultRequest"
    }
  ],
  "storeSubWindowResult_result": [
    {
      "fid": 1,
      "name": "liffException",
      "struct": "LiffException"
    },
    {
      "fid": 2,
      "name": "talkException",
      "struct": "TalkException"
    }
  ],
  "syncContacts_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "localContacts",
      "list": "ContactModification"
    }
  ],
  "syncContacts_result": [
    {
      "fid": 0,
      "name": "success",
      "map": "ContactRegistration",
      "key": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "sync_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "SyncRequest"
    }
  ],
  "sync_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_X7"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "t80_g": [
    {
      "fid": 1,
      "name": "response",
      "struct": "GetResponse"
    },
    {
      "fid": 2,
      "name": "error",
      "struct": "SettingsException"
    }
  ],
  "t80_l": [
    {
      "fid": 1,
      "name": "response",
      "struct": "SetResponse"
    },
    {
      "fid": 2,
      "name": "error",
      "struct": "SettingsException"
    }
  ],
  "t80_p": [
    {
      "fid": 1,
      "name": "booleanValue",
      "type": 2
    },
    {
      "fid": 2,
      "name": "i64Value",
      "type": 10
    },
    {
      "fid": 3,
      "name": "stringValue",
      "type": 11
    },
    {
      "fid": 4,
      "name": "stringListValue",
      "list": "_any"
    },
    {
      "fid": 5,
      "name": "i64ListValue",
      "list": "_any"
    },
    {
      "fid": 6,
      "name": "rawJsonStringValue",
      "type": 11
    },
    {
      "fid": 7,
      "name": "i8Value",
      "type": 3
    },
    {
      "fid": 8,
      "name": "i16Value",
      "type": 6
    },
    {
      "fid": 9,
      "name": "i32Value",
      "type": 8
    },
    {
      "fid": 10,
      "name": "doubleValue",
      "type": 4
    },
    {
      "fid": 11,
      "name": "i8ListValue",
      "list": "_any"
    },
    {
      "fid": 12,
      "name": "i16ListValue",
      "list": "_any"
    },
    {
      "fid": 13,
      "name": "i32ListValue",
      "list": "_any"
    }
  ],
  "tryFriendRequest_args": [
    {
      "fid": 1,
      "name": "midOrEMid",
      "type": 11
    },
    {
      "fid": 2,
      "name": "method",
      "struct": "Pb1_G4"
    },
    {
      "fid": 3,
      "name": "friendRequestParams",
      "type": 11
    }
  ],
  "tryFriendRequest_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "unblockContact_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "id",
      "type": 11
    },
    {
      "fid": 3,
      "name": "reference",
      "type": 11
    }
  ],
  "unblockContact_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "unblockRecommendation_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "targetMid",
      "type": 11
    }
  ],
  "unblockRecommendation_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "unfollow_args": [
    {
      "fid": 2,
      "name": "unfollowRequest",
      "struct": "UnfollowRequest"
    }
  ],
  "unfollow_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "unlinkDevice_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "DeviceUnlinkRequest"
    }
  ],
  "unlinkDevice_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "do0_C23152j"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ThingsException"
    }
  ],
  "unregisterUserAndDevice_result": [
    {
      "fid": 0,
      "name": "success",
      "type": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "unsendMessage_args": [
    {
      "fid": 1,
      "name": "seq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "messageId",
      "type": 11
    }
  ],
  "unsendMessage_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "updateAndGetNearby_args": [
    {
      "fid": 2,
      "name": "latitude",
      "type": 4
    },
    {
      "fid": 3,
      "name": "longitude",
      "type": 4
    },
    {
      "fid": 4,
      "name": "accuracy",
      "struct": "GeolocationAccuracy"
    },
    {
      "fid": 5,
      "name": "networkStatus",
      "struct": "ClientNetworkStatus"
    },
    {
      "fid": 6,
      "name": "altitudeMeters",
      "type": 4
    },
    {
      "fid": 7,
      "name": "velocityMetersPerSecond",
      "type": 4
    },
    {
      "fid": 8,
      "name": "bearingDegrees",
      "type": 4
    },
    {
      "fid": 9,
      "name": "measuredAtTimestamp",
      "type": 10
    },
    {
      "fid": 10,
      "name": "clientCurrentTimestamp",
      "type": 10
    }
  ],
  "updateAndGetNearby_result": [
    {
      "fid": 0,
      "name": "success",
      "list": "NearbyEntry"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "updateChannelNotificationSetting_args": [
    {
      "fid": 1,
      "name": "setting",
      "list": "ChannelNotificationSetting"
    }
  ],
  "updateChannelNotificationSetting_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "ChannelException"
    }
  ],
  "updateChannelSettings_args": [
    {
      "fid": 1,
      "name": "channelSettings",
      "struct": "ChannelSettings"
    }
  ],
  "updateChannelSettings_result": [
    {
      "fid": 0,
      "name": "success",
      "type": 2
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ChannelException"
    }
  ],
  "updateChatRoomBGM_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "chatRoomMid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "chatRoomBGMInfo",
      "type": 11
    }
  ],
  "updateChatRoomBGM_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "ChatRoomBGM"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "updateChat_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "UpdateChatRequest"
    }
  ],
  "updateChat_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_Zc"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "updateContactSetting_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "mid",
      "type": 11
    },
    {
      "fid": 3,
      "name": "flag",
      "struct": "ContactSetting"
    },
    {
      "fid": 4,
      "name": "value",
      "type": 11
    }
  ],
  "updateContactSetting_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "updateExtendedProfileAttribute_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "attr",
      "struct": "Pb1_EnumC13180t4"
    },
    {
      "fid": 3,
      "name": "extendedProfile",
      "struct": "ExtendedProfile"
    }
  ],
  "updateExtendedProfileAttribute_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "updateGroupCallUrl_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "UpdateGroupCallUrlRequest"
    }
  ],
  "updateGroupCallUrl_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "Pb1_cd"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "updateIdentifier_args": [
    {
      "fid": 2,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "request",
      "struct": "IdentityCredentialRequest"
    }
  ],
  "updateIdentifier_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "IdentityCredentialResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "updateNotificationToken_args": [
    {
      "fid": 2,
      "name": "token",
      "type": 11
    },
    {
      "fid": 3,
      "name": "type",
      "struct": "NotificationType"
    }
  ],
  "updateNotificationToken_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "updatePassword_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "UpdatePasswordRequest"
    }
  ],
  "updatePassword_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "U70_v"
    },
    {
      "fid": 1,
      "name": "pue",
      "struct": "PasswordUpdateException"
    },
    {
      "fid": 2,
      "name": "tae",
      "struct": "TokenAuthException"
    }
  ],
  "updateProfileAttribute_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "updateProfileAttributes_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 2,
      "name": "request",
      "struct": "UpdateProfileAttributesRequest"
    }
  ],
  "updateProfileAttributes_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "updateSafetyStatus_args": [
    {
      "fid": 1,
      "name": "req",
      "struct": "UpdateSafetyStatusRequest"
    }
  ],
  "updateSafetyStatus_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "vh_Fg_b"
    }
  ],
  "updateSettingsAttribute_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "updateSettingsAttributes2_args": [
    {
      "fid": 1,
      "name": "reqSeq",
      "type": 8
    },
    {
      "fid": 3,
      "name": "settings",
      "struct": "Settings"
    },
    {
      "fid": 4,
      "name": "attributesToUpdate",
      "set": "SettingsAttributeEx"
    }
  ],
  "updateSettingsAttributes2_result": [
    {
      "fid": 0,
      "name": "success",
      "set": 8
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "updateUserGeneralSettings_args": [
    {
      "fid": 1,
      "name": "settings",
      "map": 11,
      "key": 8
    }
  ],
  "updateUserGeneralSettings_result": [
    {
      "fid": 1,
      "name": "e",
      "struct": "PaymentException"
    }
  ],
  "usePhotoboothTicket_args": [
    {
      "fid": 2,
      "name": "request",
      "struct": "UsePhotoboothTicketRequest"
    }
  ],
  "usePhotoboothTicket_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "UsePhotoboothTicketResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "validateEligibleFriends_args": [
    {
      "fid": 1,
      "name": "friends",
      "list": 11
    },
    {
      "fid": 2,
      "name": "type",
      "struct": "r80_EnumC34376p"
    }
  ],
  "validateEligibleFriends_result": [
    {
      "fid": 0,
      "name": "success",
      "list": "PaymentEligibleFriendStatus"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "PaymentException"
    }
  ],
  "validateProduct_args": [
    {
      "fid": 2,
      "name": "shopId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "productId",
      "type": 11
    },
    {
      "fid": 4,
      "name": "productVersion",
      "type": 10
    },
    {
      "fid": 5,
      "name": "validationReq",
      "struct": "YN0_Ob1_Q0"
    }
  ],
  "validateProduct_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "YN0_Ob1_R0"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "validateProfile_args": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "displayName",
      "type": 11
    }
  ],
  "validateProfile_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "T70_o1"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "verifyAccountUsingHashedPwd_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "VerifyAccountUsingHashedPwdRequest"
    }
  ],
  "I80_C26411k0": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_E0"
    }
  ],
  "verifyAccountUsingHashedPwd_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "VerifyAccountUsingHashedPwdResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "I80_l0": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_F0"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    }
  ],
  "verifyAssertion_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "VerifyAssertionRequest"
    }
  ],
  "verifyAssertion_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "m80_q"
    },
    {
      "fid": 1,
      "name": "deviceAttestationException",
      "struct": "m80_b"
    }
  ],
  "verifyAttestation_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "VerifyAttestationRequest"
    }
  ],
  "verifyAttestation_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "m80_s"
    },
    {
      "fid": 1,
      "name": "deviceAttestationException",
      "struct": "m80_b"
    }
  ],
  "verifyBirthdayGiftAssociationToken_args": [
    {
      "fid": 2,
      "name": "req",
      "struct": "BirthdayGiftAssociationVerifyRequest"
    }
  ],
  "verifyBirthdayGiftAssociationToken_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "BirthdayGiftAssociationVerifyResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "ShopException"
    }
  ],
  "verifyEapAccountForRegistration_args": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "device",
      "struct": "Device"
    },
    {
      "fid": 3,
      "name": "socialLogin",
      "struct": "SocialLogin"
    }
  ],
  "verifyEapAccountForRegistration_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "T70_s1"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "verifyEapLogin_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "VerifyEapLoginRequest"
    }
  ],
  "I80_m0": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_G0"
    }
  ],
  "verifyEapLogin_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "VerifyEapLoginResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AccountEapConnectException"
    }
  ],
  "I80_n0": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_H0"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    }
  ],
  "verifyPhoneNumber_args": [
    {
      "fid": 2,
      "name": "sessionId",
      "type": 11
    },
    {
      "fid": 3,
      "name": "pinCode",
      "type": 11
    },
    {
      "fid": 4,
      "name": "udidHash",
      "type": 11
    },
    {
      "fid": 5,
      "name": "migrationPincodeSessionId",
      "type": 11
    },
    {
      "fid": 6,
      "name": "oldUdidHash",
      "type": 11
    }
  ],
  "verifyPhoneNumber_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "PhoneVerificationResult"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "verifyPhonePinCode_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "VerifyPhonePinCodeRequest"
    }
  ],
  "I80_o0": [
    {
      "fid": 1,
      "name": "request",
      "struct": "I80_I0"
    }
  ],
  "verifyPhonePinCode_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "VerifyPhonePinCodeResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "I80_p0": [
    {
      "fid": 0,
      "name": "success",
      "struct": "I80_J0"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "I80_C26390a"
    }
  ],
  "verifyPinCode_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "VerifyPinCodeRequest"
    }
  ],
  "verifyPinCode_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "q80_q"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SecondaryQrCodeException"
    }
  ],
  "verifyQrCode_args": [
    {
      "fid": 1,
      "name": "request",
      "struct": "VerifyQrCodeRequest"
    }
  ],
  "verifyQrCode_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "q80_s"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "SecondaryQrCodeException"
    }
  ],
  "verifyQrcodeWithE2EE_result": [
    {
      "fid": 0,
      "name": "success",
      "type": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "verifyQrcode_args": [
    {
      "fid": 2,
      "name": "verifier",
      "type": 11
    },
    {
      "fid": 3,
      "name": "pinCode",
      "type": 11
    }
  ],
  "verifyQrcode_result": [
    {
      "fid": 0,
      "name": "success",
      "type": 11
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "verifySocialLogin_args": [
    {
      "fid": 1,
      "name": "authSessionId",
      "type": 11
    },
    {
      "fid": 2,
      "name": "device",
      "struct": "Device"
    },
    {
      "fid": 3,
      "name": "socialLogin",
      "struct": "SocialLogin"
    }
  ],
  "verifySocialLogin_result": [
    {
      "fid": 0,
      "name": "success",
      "struct": "VerifySocialLoginResponse"
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "AuthException"
    }
  ],
  "vh_C37633d": [],
  "wakeUpLongPolling_args": [
    {
      "fid": 2,
      "name": "clientRevision",
      "type": 10
    }
  ],
  "wakeUpLongPolling_result": [
    {
      "fid": 0,
      "name": "success",
      "type": 2
    },
    {
      "fid": 1,
      "name": "e",
      "struct": "TalkException"
    }
  ],
  "zR0_C40576a": [],
  "zR0_C40580e": [
    {
      "fid": 1,
      "name": "sticker",
      "struct": "_any"
    }
  ],
  "GetContactsV2Response": [
    {
      "fid": 1,
      "name": "contacts",
      "map": "ContactEntry",
      "key": 11
    }
  ],
  "ContactEntry": [
    {
      "fid": 1,
      "name": "userStatus",
      "struct": "UserStatus"
    },
    {
      "fid": 2,
      "name": "snapshotTimeMillis",
      "type": 10
    },
    {
      "fid": 3,
      "name": "contact",
      "struct": "Contact"
    },
    {
      "fid": 4,
      "name": "calendarEvents",
      "struct": "ContactCalendarEvents"
    }
  ],
  "LoginResultType": {
    "1": "SUCCESS",
    "2": "REQUIRE_QRCODE",
    "3": "REQUIRE_DEVICE_CONFIRM",
    "4": "REQUIRE_SMS_CONFIRM"
  },
  "LoginResult": [
    {
      "fid": 1,
      "name": "authToken",
      "type": 11
    },
    {
      "fid": 2,
      "name": "certificate",
      "type": 11
    },
    {
      "fid": 3,
      "name": "verifier",
      "type": 11
    },
    {
      "fid": 4,
      "name": "pinCode",
      "type": 11
    },
    {
      "fid": 5,
      "name": "type",
      "struct": "LoginResultType"
    },
    {
      "fid": 6,
      "name": "lastPrimaryBindTime",
      "type": 10
    },
    {
      "fid": 7,
      "name": "displayMessage",
      "type": 11
    },
    {
      "fid": 8,
      "name": "sessionForSMSConfirm",
      "struct": "VerificationSessionData"
    }
  ]
};

// node_modules/@evex/linejs/base/core/mod.js
var BaseClient = class extends TypedEventEmitter {
  authToken;
  device;
  loginProcess;
  thrift;
  request;
  storage;
  e2ee;
  obs;
  timeline;
  auth;
  call;
  channel;
  liff;
  relation;
  livetalk;
  square;
  talk;
  #customFetch;
  profile;
  config;
  deviceDetails;
  endpoint;
  /**
  * Initializes a new instance of the class.
  *
  * @param init - The initialization parameters.
  * @param init.device - The device type.
  * @param init.version - The version of the device.
  * @param init.fetch - Optional custom fetch function.
  * @param init.endpoint - Optional endpoint URL.
  * @param init.storage - Optional storage mechanism.
  *
  * @throws {Error} If the device is unsupported.
  *
  * @example
  * ```typescript
  * const client = new Client({
  *   device: 'iOS',
  *   version: '10.0',
  *   fetch: customFetchFunction,
  *   endpoint: 'custom-endpoint.com',
  *   storage: new FileStorage("./storage.json"),
  * });
  * ```
  */
  constructor(init) {
    super();
    const deviceDetails = getDeviceDetails(init.device, init.version);
    if (!deviceDetails) {
      throw new Error(`Unsupported device: ${init.device}.`);
    }
    if (init.fetch) {
      this.#customFetch = init.fetch;
    }
    this.deviceDetails = deviceDetails;
    this.endpoint = init.endpoint ?? "legy.line-apps.com";
    this.config = {
      timeout: 3e4,
      longTimeout: 18e4
    };
    this.device = init.device;
    this.storage = init.storage ?? new MemoryStorage();
    this.request = new RequestClient(this);
    this.loginProcess = new Login(this);
    this.thrift = new Thrift4();
    this.thrift.def = Thrift5;
    this.e2ee = new E2EE(this);
    this.obs = new LineObs(this);
    this.timeline = new Timeline(this);
    this.auth = new AuthService(this);
    this.call = new CallService(this);
    this.channel = new ChannelService(this);
    this.liff = new LiffService(this);
    this.livetalk = new SquareLiveTalkService(this);
    this.relation = new RelationService(this);
    this.square = new SquareService(this);
    this.talk = new TalkService(this);
  }
  log(type, data) {
    this.emit("log", {
      type,
      data
    });
  }
  getToType(mid) {
    const typeMapping = {
      u: 0,
      r: 1,
      c: 2,
      s: 3,
      m: 4,
      p: 5,
      v: 6,
      t: 7
    };
    return typeMapping[mid[0]] ?? null;
  }
  reqseqs;
  async getReqseq(name = "talk") {
    if (!this.reqseqs) {
      this.reqseqs = JSON.parse((await this.storage.get("reqseq") ?? "{}").toString());
    }
    if (!this.reqseqs[name]) {
      this.reqseqs[name] = 0;
    }
    const seq = this.reqseqs[name];
    this.reqseqs[name]++;
    await this.storage.set("reqseq", JSON.stringify(this.reqseqs));
    return seq;
  }
  // NOTE: use allow function.
  // `const { fetch } = base` is not working if you change to function decorations.
  fetch = async (info3, init) => {
    const req = new Request(info3, init);
    const res = await (this.#customFetch ? this.#customFetch(req) : globalThis.fetch(req));
    return res;
  };
  /**
  * Creates polling client.
  */
  createPolling() {
    return new Polling(this);
  }
  /**
  * JSON replacer to remove mid and authToken, parse bigint to number
  *
  * ```
  * JSON.stringify(data, BaseClient.jsonReplacer);
  * ```
  */
  static jsonReplacer(k, v2) {
    if (typeof v2 === "bigint") {
      return Number(v2);
    }
    if (typeof v2 === "string") {
      const midType = v2.match(/(.)[0123456789abcdef]{32}/);
      if (midType && midType[1]) {
        return `[${midType[1].toUpperCase()} mid]`;
      }
      if (k === "x-line-access") {
        return `[AuthToken]`;
      }
    }
    if (typeof v2 === "object") {
      const newObj = {};
      let midCount = 0;
      for (const key in v2) {
        if (Object.prototype.hasOwnProperty.call(v2, key)) {
          const value = v2[key];
          const midType = key.match(/(.)[0123456789abcdef]{32}/);
          if (midType && midType[1]) {
            midCount++;
            newObj[`[${midType[1].toUpperCase()} mid ${midCount}]`] = value;
          } else {
            newObj[key] = value;
          }
        }
      }
      return newObj;
    }
    return v2;
  }
};
__name(BaseClient, "BaseClient");

// node_modules/@evex/linejs/base/types.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/@evex/linejs/client/features/message/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/@evex/linejs/client/features/message/talk.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var hasContents = [
  "IMAGE",
  "VIDEO",
  "AUDIO",
  "FILE"
];
var TalkMessage = class {
  #client;
  raw;
  isSquare = false;
  isTalk = true;
  constructor(init) {
    this.#client = init.client;
    this.raw = init.raw;
  }
  /**
  * Replys to message.
  */
  async reply(input) {
    if (typeof input === "string") {
      return this.reply({
        text: input
      });
    }
    let to;
    if (this.to.type === "GROUP" || this.to.type === "ROOM") {
      to = this.to.id;
    } else {
      to = this.isMyMessage ? this.to.id : this.from.id;
    }
    return await this.#client.base.talk.sendMessage({
      relatedMessageId: this.raw.id,
      text: input.text,
      to,
      e2ee: input.e2ee
    });
  }
  /**
  * Sends to message.
  */
  async send(input) {
    if (typeof input === "string") {
      return this.reply({
        text: input
      });
    }
    let to;
    if (this.to.type === "GROUP" || this.to.type === "ROOM") {
      to = this.to.id;
    } else {
      to = this.isMyMessage ? this.to.id : this.from.id;
    }
    return await this.#client.base.talk.sendMessage({
      text: input.text,
      to,
      e2ee: input.e2ee
    });
  }
  /**
  * Reacts to message.
  */
  async react(type) {
    await this.#client.base.talk.react({
      id: BigInt(this.raw.id),
      reaction: type
    });
  }
  /**
  * Read the message.
  */
  async read() {
    await this.#client.base.talk.sendChatChecked({
      chatMid: this.isMyMessage ? this.to.id : this.from.id,
      lastMessageId: this.raw.id,
      seq: await this.#client.base.getReqseq()
    });
  }
  /**
  * Pins the message.
  */
  async announce() {
    if (!this.raw.text) {
      throw new TypeError("The message is not text message.");
    }
    if (this.to.type !== "ROOM" && this.to.type !== "GROUP") {
      throw new TypeError("Cannot announce out of group.");
    }
    await this.#client.base.talk.createChatRoomAnnouncement({
      chatRoomMid: this.to.id,
      type: "MESSAGE",
      contents: {
        text: this.raw.text,
        link: `line://nv/chatMsg?chatId=${this.to.id}&messageId=${this.raw.id}`
      }
    });
  }
  /**
  * Unsends the message.
  */
  async unsend() {
    if (!this.isMyMessage) {
      throw new TypeError("Cannot unsend the message which is not yours.");
    }
    await this.#client.base.talk.unsendMessage({
      messageId: this.raw.id
    });
  }
  /**
  * Gets sticker URL.
  * @returns Stamp URL
  */
  getStickerURL() {
    if (this.raw.contentType !== "STICKER") {
      throw new TypeError("The message is not sticker.");
    }
    const stickerMetadata = this.raw.contentMetadata;
    if (stickerMetadata.STKOPT === "A") {
      return `https://stickershop.line-scdn.net/stickershop/v1/sticker/${stickerMetadata.STKID}/android/sticker_animation.png`;
    } else {
      return `https://stickershop.line-scdn.net/stickershop/v1/sticker/${stickerMetadata.STKID}/android/sticker.png`;
    }
  }
  /**
  * Collects emoji URLs in the message.
  * @returns URLs of emoji
  */
  collectEmojiURLs() {
    if (this.raw.contentType !== "NONE") {
      throw new TypeError("The message is not text message.");
    }
    const emojiUrls = [];
    const emojiData = this.raw.contentMetadata;
    const replace = emojiData?.REPLACE ? JSON.parse(emojiData?.REPLACE) : void 0;
    const emojiResources = replace?.sticon?.resources ?? [];
    for (const emoji of emojiResources) {
      emojiUrls.push(`https://stickershop.line-scdn.net/sticonshop/v1/sticon/${emoji.productId}/android/${emoji.sticonId}.png`);
    }
    return emojiUrls;
  }
  /**
  * Gets mentions in the message.
  */
  getMentions() {
    const content = this.#content;
    if (content.type !== "NONE") {
      throw new TypeError("Message has no text.");
    }
    const mentionees = [];
    const mentionData = content.metadata;
    const mention = mentionData?.MENTION ? JSON.parse(mentionData.MENTION) : void 0;
    const mentions = mention?.MENTIONEES ?? [];
    for (const mention2 of mentions) {
      mentionees.push(mention2.A ? {
        all: true
      } : {
        all: false,
        mid: mention2.M
      });
    }
    return mentionees;
  }
  /**
  * Gets text decorations (emoji, mention)
  */
  getTextDecorations() {
    const content = this.#content;
    if (content.type !== "NONE") {
      throw new TypeError("Message has no text.");
    }
    const texts = [];
    const splits = [];
    const mentionData = content.metadata;
    const emojiData = content.metadata;
    const mention = mentionData?.MENTION ? JSON.parse(mentionData.MENTION) : void 0;
    const mentions = mention?.MENTIONEES ?? [];
    mentions.forEach((e, i) => {
      splits.push({
        start: parseInt(e.S),
        end: parseInt(e.E),
        mention: i
      });
    });
    const replace = emojiData?.REPLACE ? JSON.parse(emojiData?.REPLACE) : void 0;
    const emojiResources = replace?.sticon?.resources ?? [];
    emojiResources.forEach((e, i) => {
      splits.push({
        start: e.S,
        end: e.E,
        emoji: i
      });
    });
    let lastSplit = 0;
    splits.sort((a, b) => a.start - b.start).forEach((e) => {
      if (lastSplit - e.start) {
        texts.push({
          text: this.raw.text?.substring(lastSplit, e.start)
        });
      }
      const content2 = {
        text: this.raw.text?.substring(e.start, e.end)
      };
      if (typeof e.emoji === "number") {
        const emoji = emojiResources[e.emoji];
        const url = `https://stickershop.line-scdn.net/sticonshop/v1/sticon/${emoji.productId}/android/${emoji.sticonId}.png`;
        content2.emoji = {
          ...emoji,
          url
        };
      } else if (typeof e.mention === "number") {
        const _mention = mentionData?.MENTION ? JSON.parse(mentionData.MENTION) : void 0;
        const mentions2 = _mention?.MENTIONEES ?? [];
        const mention2 = mentions2[e.mention];
        content2.mention = mention2.M ? {
          mid: mention2.M
        } : {
          all: !!mention2.A
        };
      }
      texts.push(content2);
      lastSplit = e.end;
    });
    texts.push({
      text: this.raw.text?.substring(lastSplit)
    });
    return texts;
  }
  /**
  * Gets a shared contact infomation from the message.
  */
  getSharedContact() {
    if (this.#content.type !== "CONTACT") {
      throw new TypeError("The message does not share contact infomation.");
    }
    const contactData = this.#content.metadata;
    return {
      mid: contactData.mid,
      displayName: contactData.displayName
    };
  }
  /**
  * Gets flex from the message.
  */
  getFlex() {
    const content = this.#content;
    if (content.type !== "FLEX") {
      throw new TypeError("The message has no flex items.");
    }
    const flexData = content.metadata;
    return {
      flexJson: flexData.FLEX_JSON,
      altText: flexData.ALT_TEXT,
      ver: flexData.FLEX_VER,
      tag: flexData.EFFECT_TAG
    };
  }
  /**
  * Gets reply target.
  * If the message is reply, returns reply target id.
  */
  getReplyTarget() {
    if (this.raw.relatedMessageId && (this.raw.messageRelationType === 3 || this.raw.messageRelationType === "REPLY")) {
      return new UnresolvedTalkMessage(this.raw.relatedMessageId, this.#client);
    }
    return null;
  }
  /**
  * @return {Blob} message data
  */
  async getData(preview) {
    if (!hasContents.includes(this.#content.type)) {
      throw new TypeError("message have no contents");
    }
    if (this.raw.contentMetadata.DOWNLOAD_URL) {
      if (preview) {
        const r = await this.#client.base.fetch(this.raw.contentMetadata.PREVIEW_URL);
        return await r.blob();
      } else {
        const r = await this.#client.base.fetch(this.raw.contentMetadata.DOWNLOAD_URL);
        return await r.blob();
      }
    }
    if (this.raw.chunks) {
      const file = await this.#client.base.obs.downloadMediaByE2EE(this.raw);
      if (!file) {
        throw new InternalError("ObsError", "Download failed");
      }
      return file;
    } else {
      return await this.#client.base.obs.downloadMessageData({
        messageId: this.raw.id,
        isPreview: preview,
        isSquare: false
      });
    }
  }
  get isMyMessage() {
    return this.#client.base.profile?.mid === this.from.id;
  }
  get to() {
    const message = this.raw;
    return {
      type: message.toType,
      id: message.to
    };
  }
  get from() {
    const message = this.raw;
    return {
      type: message.toType,
      id: message.from
    };
  }
  get #content() {
    return {
      type: this.raw.contentType,
      metadata: this.raw.contentMetadata
    };
  }
  get text() {
    return this.raw.text;
  }
  /*
  static fromSource(
  	source: SourceEvent & { type: "talk" },
  	client: Client,
  ): Promise<TalkMessage> {
  	return this.fromRawTalk(source.event.message, client);
  }
  */
  static async fromRawTalk(raw2, client) {
    if (raw2.contentMetadata.e2eeVersion) {
      raw2 = await client.base.e2ee.decryptE2EEMessage(raw2);
    }
    return new TalkMessage({
      client,
      raw: raw2
    });
  }
};
__name(TalkMessage, "TalkMessage");
var UnresolvedTalkMessage = class {
  id;
  #client;
  constructor(id, client) {
    this.id = id;
    this.#client = client;
  }
  then(_resolve) {
    throw new Error("Method not implemented.");
  }
};
__name(UnresolvedTalkMessage, "UnresolvedTalkMessage");

// node_modules/@evex/linejs/client/features/message/square.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var hasContents2 = [
  "IMAGE",
  "VIDEO",
  "AUDIO",
  "FILE"
];
var SquareMessage2 = class {
  #client;
  raw;
  isSquare = true;
  isTalk = false;
  #authorIsMe;
  constructor(init) {
    this.#client = init.client;
    this.raw = init.raw;
  }
  /**
  * Replys to message.
  */
  async reply(input) {
    if (typeof input === "string") {
      return this.reply({
        text: input
      });
    }
    await this.#client.base.square.sendMessage({
      relatedMessageId: this.raw.message.id,
      squareChatMid: this.raw.message.to,
      text: input.text
    });
  }
  /**
  * Sends to message.
  */
  async send(input) {
    if (typeof input === "string") {
      return this.reply({
        text: input
      });
    }
    await this.#client.base.square.sendMessage({
      relatedMessageId: this.raw.message.id,
      squareChatMid: this.raw.message.to,
      text: input.text
    });
  }
  /**
  * Reacts to message.
  * @param type Reaction type
  */
  async react(type) {
    if (typeof type === "string") {
      type = enums.MessageReactionType[type];
    }
    await this.#client.base.square.reactToMessage({
      request: {
        reqSeq: 0,
        reactionType: type,
        messageId: this.raw.message.id,
        squareChatMid: this.to.id
      }
    });
  }
  /**
  * Read the message.
  */
  async read() {
    await this.#client.base.square.markAsRead({
      request: {
        messageId: this.raw.message.id,
        squareChatMid: this.to.id
      }
    });
  }
  /**
  * Pins the message.
  */
  async announce() {
    if (!this.raw.message.text) {
      throw new TypeError("The message is not text message.");
    }
    await this.#client.base.square.createSquareChatAnnouncement({
      squareChatMid: this.to.id,
      senderMid: this.from.id,
      messageId: this.raw.message.id,
      text: this.raw.message.text,
      createdAt: this.raw.message.createdTime
    });
  }
  /**
  * Unsends the message.
  */
  async unsend() {
    if (!this.isMyMessage) {
      throw new TypeError("Cannot unsend the message which is not yours.");
    }
    await this.#client.base.square.unsendMessage({
      messageId: this.raw.message.id,
      squareChatMid: this.to.id
    });
  }
  /**
  * Deletes the message.
  */
  async delete() {
    await this.#client.base.square.destroyMessage({
      messageId: this.raw.message.id,
      squareChatMid: this.to.id
    });
  }
  /**
  * Gets sticker URL.
  * @returns Stamp URL
  */
  getStickerURL() {
    if (this.raw.message.contentType !== "STICKER") {
      throw new TypeError("The message is not sticker.");
    }
    const stickerMetadata = this.raw.message.contentMetadata;
    if (stickerMetadata.STKOPT === "A") {
      return `https://stickershop.line-scdn.net/stickershop/v1/sticker/${stickerMetadata.STKID}/android/sticker_animation.png`;
    } else {
      return `https://stickershop.line-scdn.net/stickershop/v1/sticker/${stickerMetadata.STKID}/android/sticker.png`;
    }
  }
  /**
  * Collects emoji URLs in the message.
  * @returns URLs of emoji
  */
  collectEmojiURLs() {
    if (this.raw.message.contentType !== "NONE") {
      throw new TypeError("The message is not text message.");
    }
    const emojiUrls = [];
    const emojiData = this.raw.message.contentMetadata;
    const replace = emojiData?.REPLACE ? JSON.parse(emojiData?.REPLACE) : void 0;
    const emojiResources = replace?.sticon?.resources ?? [];
    for (const emoji of emojiResources) {
      emojiUrls.push(`https://stickershop.line-scdn.net/sticonshop/v1/sticon/${emoji.productId}/android/${emoji.sticonId}.png`);
    }
    return emojiUrls;
  }
  /**
  * Gets mentions in the message.
  */
  getMentions() {
    const content = this.#content;
    if (content.type !== "NONE") {
      throw new TypeError("Message has no text.");
    }
    const mentionees = [];
    const mentionData = content.metadata;
    const mention = mentionData?.MENTION ? JSON.parse(mentionData.MENTION) : void 0;
    const mentions = mention?.MENTIONEES ?? [];
    for (const mention2 of mentions) {
      mentionees.push(mention2.A ? {
        all: true
      } : {
        all: false,
        mid: mention2.M
      });
    }
    return mentionees;
  }
  /**
  * Gets text decorations (emoji, mention)
  */
  getTextDecorations() {
    const content = this.#content;
    if (content.type !== "NONE") {
      throw new TypeError("Message has no text.");
    }
    const texts = [];
    const splits = [];
    const mentionData = content.metadata;
    const emojiData = content.metadata;
    const mention = mentionData?.MENTION ? JSON.parse(mentionData.MENTION) : void 0;
    const mentions = mention?.MENTIONEES ?? [];
    mentions.forEach((e, i) => {
      splits.push({
        start: parseInt(e.S),
        end: parseInt(e.E),
        mention: i
      });
    });
    const replace = emojiData?.REPLACE ? JSON.parse(emojiData?.REPLACE) : void 0;
    const emojiResources = replace?.sticon?.resources ?? [];
    emojiResources.forEach((e, i) => {
      splits.push({
        start: e.S,
        end: e.E,
        emoji: i
      });
    });
    let lastSplit = 0;
    splits.sort((a, b) => a.start - b.start).forEach((e) => {
      if (lastSplit - e.start) {
        texts.push({
          text: this.raw.message.text?.substring(lastSplit, e.start)
        });
      }
      const content2 = {
        text: this.raw.message.text?.substring(e.start, e.end)
      };
      if (typeof e.emoji === "number") {
        const emoji = emojiResources[e.emoji];
        const url = `https://stickershop.line-scdn.net/sticonshop/v1/sticon/${emoji.productId}/android/${emoji.sticonId}.png`;
        content2.emoji = {
          ...emoji,
          url
        };
      } else if (typeof e.mention === "number") {
        const _mention = mentionData?.MENTION ? JSON.parse(mentionData.MENTION) : void 0;
        const mentions2 = _mention?.MENTIONEES ?? [];
        const mention2 = mentions2[e.mention];
        content2.mention = mention2.M ? {
          mid: mention2.M
        } : {
          all: !!mention2.A
        };
      }
      texts.push(content2);
      lastSplit = e.end;
    });
    texts.push({
      text: this.raw.message.text?.substring(lastSplit)
    });
    return texts;
  }
  /**
  * Gets flex from the message.
  */
  getFlex() {
    const content = this.#content;
    if (content.type !== "FLEX") {
      throw new TypeError("The message has no flex items.");
    }
    const flexData = content.metadata;
    return {
      flexJson: flexData.FLEX_JSON,
      altText: flexData.ALT_TEXT,
      ver: flexData.FLEX_VER,
      tag: flexData.EFFECT_TAG
    };
  }
  /**
  * Gets reply target.
  * If the message is reply, returns reply target id.
  */
  getReplyTarget() {
    if (this.raw.message.relatedMessageId && (this.raw.message.messageRelationType === 3 || this.raw.message.messageRelationType === "REPLY")) {
      return new UnresolvedMessage(this.raw.message.relatedMessageId, this.#client);
    }
    return null;
  }
  /**
  * Get file info.
  */
  getFileInfo() {
    const content = this.#content;
    if (content.type !== "FILE") {
      throw new TypeError("The message does not provide any files.");
    }
    const fileData = content.metadata;
    return {
      size: parseInt(fileData.FILE_SIZE),
      expire: new Date(parseInt(fileData.FILE_EXPIRE_TIMESTAMP) * 1e3),
      name: fileData.FILE_NAME
    };
  }
  /**
  * @return {Blob} message data
  */
  async getData(preview) {
    if (!hasContents2.includes(this.raw.message.contentType)) {
      throw new TypeError("message have no contents");
    }
    if (this.raw.message.contentMetadata.DOWNLOAD_URL) {
      if (preview) {
        const r = await this.#client.base.fetch(this.raw.message.contentMetadata.PREVIEW_URL);
        return await r.blob();
      } else {
        const r_1 = await this.#client.base.fetch(this.raw.message.contentMetadata.DOWNLOAD_URL);
        return await r_1.blob();
      }
    }
    return this.#client.base.obs.downloadMessageData({
      messageId: this.raw.message.id,
      isPreview: preview,
      isSquare: true
    });
  }
  async isMyMessage() {
    if (typeof this.#authorIsMe === "boolean") {
      return this.#authorIsMe;
    }
    this.#authorIsMe = this.from.id === (await this.#client.base.square.getSquareChat({
      squareChatMid: this.to.id
    })).squareChatMember.squareMemberMid;
    return this.#authorIsMe;
  }
  get to() {
    const { message } = this.raw;
    return {
      type: message.toType,
      id: message.to
    };
  }
  get from() {
    const message = this.raw.message;
    return {
      type: message.toType,
      id: message.from
    };
  }
  get #content() {
    return {
      type: this.raw.message.contentType,
      metadata: this.raw.message.contentMetadata
    };
  }
  get text() {
    return this.raw.message.text;
  }
  static fromSource(source, client) {
    return new SquareMessage2({
      client,
      raw: source.payload.notificationMessage.squareMessage
    });
  }
  static fromRawTalk(raw2, client) {
    return new SquareMessage2({
      client,
      raw: raw2
    });
  }
};
__name(SquareMessage2, "SquareMessage");
var UnresolvedMessage = class {
  id;
  constructor(id, client) {
    this.id = id;
  }
};
__name(UnresolvedMessage, "UnresolvedMessage");

// node_modules/@evex/linejs/client/features/message/types.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/@evex/linejs/client/features/message/utils.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/@evex/linejs/client/features/square/mod.js
var Square2 = class {
  raw;
  #client;
  constructor(init) {
    this.raw = init.raw;
    this.#client = init.client;
  }
  /** Updates square information */
  async update() {
    this.raw = (await this.#client.base.square.getSquare({
      squareMid: this.raw.mid
    })).square;
  }
  async updateSquare(input) {
    return await this.#client.base.square.updateSquare({
      request: {
        updatedAttrs: input.updatedAttrs,
        square: {
          ...this.raw,
          ...input.square
        }
      }
    });
  }
  async updateName(name) {
    return await this.updateSquare({
      updatedAttrs: [
        "NAME"
      ],
      square: {
        name
      }
    });
  }
  /** OpenChat mid */
  get mid() {
    return this.raw.mid;
  }
  /** OpenChat Name */
  get name() {
    return this.raw.name;
  }
};
__name(Square2, "Square");
var SquareChat2 = class extends TypedEventEmitter {
  raw;
  #client;
  constructor(init) {
    super();
    this.raw = init.raw;
    this.#client = init.client;
  }
  /** Updates square information */
  async update() {
    this.raw = (await this.#client.base.square.getSquareChat({
      squareChatMid: this.raw.squareChatMid
    })).squareChat;
  }
  async sendMessage(input) {
    if (typeof input === "string") {
      return this.sendMessage({
        text: input
      });
    }
    return await this.#client.base.square.sendMessage({
      ...input,
      squareChatMid: this.raw.squareChatMid
    });
  }
  async updateSquareChat(input) {
    return await this.#client.base.square.updateSquareChat({
      request: {
        updatedAttrs: input.updatedAttrs,
        squareChat: {
          ...this.raw,
          ...input.squareChat
        }
      }
    });
  }
  async updateName(name) {
    return await this.updateSquareChat({
      updatedAttrs: [
        "NAME"
      ],
      squareChat: {
        name
      }
    });
  }
  async getMembers() {
    const res = await continueRequest({
      handler: (arg) => this.#client.base.square.getSquareChatMembers(arg),
      arg: {
        squareChatMid: this.raw.squareChatMid
      }
    });
    return res.squareChatMembers;
  }
  #isPolling = false;
  /**
  * @description start listen (fetchSquareChatEvents)
  */
  async listen(param = {}) {
    if (this.#isPolling) {
      throw new Error("Polling has already started");
    }
    this.#isPolling = true;
    let syncToken = param.syncToken;
    if (!syncToken) {
      while (true) {
        const noneEvent = await this.#client.base.square.fetchSquareChatEvents({
          squareChatMid: this.raw.squareChatMid,
          syncToken
        });
        syncToken = noneEvent.syncToken;
        if (noneEvent.events.length === 0) {
          break;
        }
      }
    }
    this.emit("update:syncToken", syncToken);
    while (!param.signal?.aborted && this.#client.base.authToken) {
      try {
        const response = await this.#client.base.square.fetchSquareChatEvents({
          squareChatMid: this.raw.squareChatMid,
          syncToken
        });
        if (syncToken !== response.syncToken) {
          this.emit("update:syncToken", response.syncToken);
          syncToken = response.syncToken;
        }
        for (const event of response.events) {
          this.emit("event", event);
          if (event.type === "SEND_MESSAGE" && event.payload.sendMessage) {
            const message = new SquareMessage2({
              client: this.#client,
              raw: event.payload.sendMessage.squareMessage
            });
            this.emit("message", message);
          } else if (event.type === "RECEIVE_MESSAGE" && event.payload.receiveMessage) {
            const message = new SquareMessage2({
              client: this.#client,
              raw: event.payload.receiveMessage.squareMessage
            });
            this.emit("message", message);
          }
        }
        await new Promise((resolve) => setTimeout(resolve, 1e3));
      } catch (e) {
        if (param.onError)
          param.onError(e);
        await new Promise((resolve) => setTimeout(resolve, 2e3));
      }
    }
  }
  /** OpenChat mid */
  get mid() {
    return this.raw.squareChatMid;
  }
  /** OpenChat Name */
  get name() {
    return this.raw.name;
  }
};
__name(SquareChat2, "SquareChat");

// node_modules/@evex/linejs/client/features/chat/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();

// node_modules/@evex/linejs/client/features/chat/fetcher.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var createMessageFetcher = /* @__PURE__ */ __name(async (client, chat) => {
  const boxes = await client.base.talk.getMessageBoxes({
    messageBoxListRequest: {}
  });
  const box = boxes.messageBoxes.find((box2) => box2.id === chat.mid);
  if (!box) {
    throw new Error("Message box not found.");
  }
  let lastMessageId = box.lastDeliveredMessageId;
  return {
    async fetch(limit) {
      const messages = await client.base.talk.getPreviousMessagesV2WithRequest({
        request: {
          messageBoxId: box.id,
          endMessageId: lastMessageId,
          messagesCount: limit
        }
      });
      const lastMessage = messages.at(-1);
      lastMessageId = {
        deliveredTime: lastMessage.deliveredTime,
        messageId: parseInt(lastMessage.id)
      };
      return await Promise.all(messages.map((message) => TalkMessage.fromRawTalk(message, client)));
    }
  };
}, "createMessageFetcher");

// node_modules/@evex/linejs/client/features/chat/mod.js
var Chat2 = class {
  #client;
  raw;
  mid;
  name;
  constructor(init) {
    this.#client = init.client;
    this.mid = init.raw.chatMid;
    this.name = init.raw.chatName;
    this.raw = init.raw;
  }
  /**
  * Sends message to the chat(group).
  */
  async sendMessage(input) {
    if (typeof input === "string") {
      return this.sendMessage({
        text: input
      });
    }
    const sent = await this.#client.base.talk.sendMessage({
      to: this.mid,
      text: input.text,
      e2ee: input.e2ee !== false,
      chunks: input.chunk,
      contentMetadata: input.contentMetadata,
      contentType: input.contentType,
      relatedMessageId: input.relatedMessageId,
      location: input.location
    });
    return TalkMessage.fromRawTalk({
      ...sent,
      to: this.mid
    }, this.#client);
  }
  /**
  * @description Update chat(group) status.
  */
  async updateChat(options) {
    return await this.#client.base.talk.updateChat({
      request: {
        updatedAttribute: options.updatedAttribute,
        chat: options.chat,
        reqSeq: await this.#client.base.getReqseq()
      }
    });
  }
  /**
  * @description Update chat(group) name.
  */
  async updateName(name) {
    return await this.updateChat({
      chat: {
        chatName: name
      },
      updatedAttribute: "NAME"
    });
  }
  /**
  * @description Invite user.
  */
  async invite(mids) {
    return await this.#client.base.talk.inviteIntoChat({
      targetUserMids: mids,
      chatMid: this.mid
    });
  }
  /**
  * @description Kickout user.
  */
  kick(mid) {
    return this.#client.base.talk.deleteOtherFromChat({
      request: {
        targetUserMids: [
          mid
        ],
        chatMid: this.mid
      }
    });
  }
  /**
  * @description Leave chat.
  */
  leave() {
    return this.#client.base.talk.deleteSelfFromChat({
      request: {
        chatMid: this.mid
      }
    });
  }
  /**
  * Fetches messages from the chat(group).
  *
  * @param limit The number of messages to fetch. Defaults to 10.
  * @returns A promise that resolves to an array of TalkMessage instances.
  */
  async fetchMessages(limit = 10) {
    const boxes = await this.#client.base.talk.getMessageBoxes({
      messageBoxListRequest: {}
    });
    const box = boxes.messageBoxes.find((box2) => box2.id === this.mid);
    if (!box) {
      throw new Error("Message box not found.");
    }
    const messages = await this.#client.base.talk.getPreviousMessagesV2WithRequest({
      request: {
        messageBoxId: box.id,
        endMessageId: {
          messageId: box.lastDeliveredMessageId.messageId,
          deliveredTime: box.lastDeliveredMessageId.deliveredTime
        },
        messagesCount: limit
      }
    });
    return await Promise.all(messages.map((message) => TalkMessage.fromRawTalk(message, this.#client)));
  }
  messageFetcher() {
    return createMessageFetcher(this.#client, this);
  }
};
__name(Chat2, "Chat");

// node_modules/@evex/linejs/client/features/user/mod.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var User = class {
  mid;
  raw;
  constructor(init) {
    this.mid = init.raw.targetUserMid;
    this.raw = init.raw;
  }
};
__name(User, "User");

// node_modules/@evex/linejs/client/client.js
var Client = class extends TypedEventEmitter {
  base;
  constructor(base) {
    super();
    this.base = base;
  }
  /**
  * Listens events.
  * @param opts Options
  * @returns TypedEventEmitter
  */
  listen(opts = {
    talk: true,
    square: true
  }) {
    const polling = this.base.createPolling();
    const signal = opts.signal;
    if (opts.talk) {
      (async () => {
        for await (const event of polling.listenTalkEvents({
          signal
        })) {
          this.emit("event", event);
          if (event.type === "SEND_MESSAGE" || event.type === "RECEIVE_MESSAGE") {
            this.emit("message", new TalkMessage({
              raw: await this.base.e2ee.decryptE2EEMessage(event.message),
              client: this
            }));
          }
        }
      })();
    }
    if (opts.square) {
      (async () => {
        for await (const event of polling.listenSquareEvents({
          signal
        })) {
          this.emit("square:event", event);
          if (event.type === "NOTIFICATION_MESSAGE") {
            this.emit("square:message", new SquareMessage2({
              raw: event.payload.notificationMessage.squareMessage,
              client: this
            }));
          }
        }
      })();
    }
  }
  /** Gets auth token for LINE. */
  get authToken() {
    return this.base.authToken;
  }
  /**
  * Fetches all chat rooms the user joined.
  */
  async fetchJoinedChats() {
    const joined = await this.base.talk.getAllChatMids({
      request: {
        withMemberChats: true
      },
      syncReason: "INTERNAL"
    });
    const { chats } = await this.base.talk.getChats({
      chatMids: joined.memberChatMids
    });
    return chats.map((raw2) => new Chat2({
      client: this,
      raw: raw2
    }));
  }
  /**
  * Fetches all friend.
  */
  async fetchUsers() {
    const mids = await this.base.talk.getAllContactIds({
      syncReason: "INTERNAL"
    });
    const res = await this.base.relation.getContactsV3({
      mids
    });
    const contacts = res.responses;
    return contacts.map((raw2) => new User({
      raw: raw2
    }));
  }
  /**
  * Fetches all squares the user joined.
  */
  async fetchJoinedSquares() {
    const joined = await continueRequest({
      handler: (arg) => this.base.square.getJoinedSquares(arg),
      arg: {
        limit: 100
      }
    });
    return joined.squares.map((raw2) => new Square2({
      raw: raw2,
      client: this
    }));
  }
  /**
  * Fetches all square chats the user joined.
  */
  async fetchJoinedSquareChats() {
    const response = await this.base.square.fetchMyEvents({
      limit: 200
    });
    const squareChats = [];
    for (const event of response.events) {
      if (event.payload.notifiedCreateSquareChatMember) {
        squareChats.push(new SquareChat2({
          client: this,
          raw: event.payload.notifiedCreateSquareChatMember.chat
        }));
      }
    }
    return squareChats;
  }
  /**
  * Gets user by mid.
  * @param mid User mid
  * @returns User
  */
  async getUser(mid) {
    const res = await this.base.relation.getContactsV3({
      mids: [
        mid
      ]
    });
    const raw2 = res.responses[0];
    return new User({
      raw: raw2
    });
  }
  /**
  * Gets chat by mid.
  * @param chatMid Chat mid
  * @returns Chat
  */
  async getChat(chatMid) {
    const raw2 = await this.base.talk.getChat({
      chatMid,
      withInvitees: true,
      withMembers: true
    });
    return new Chat2({
      client: this,
      raw: raw2
    });
  }
  /**
  * Gets square by mid.
  * @param squareMid Square mid
  * @returns Square
  */
  async getSquare(squareMid) {
    const raw2 = await this.base.square.getSquare({
      squareMid
    });
    return new Square2({
      client: this,
      raw: raw2.square
    });
  }
  /**
  * Gets square by mid.
  * @param squareChatMid Square chat mid
  * @returns SquareChat
  */
  async getSquareChat(squareChatMid) {
    const raw2 = await this.base.square.getSquareChat({
      squareChatMid
    });
    return new SquareChat2({
      client: this,
      raw: raw2.squareChat
    });
  }
};
__name(Client, "Client");

// node_modules/@evex/linejs/client/login.js
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var createBaseClient = /* @__PURE__ */ __name((init) => new BaseClient({
  fetch: init.fetch,
  device: init.device,
  storage: init.storage
}), "createBaseClient");
var loginWithPassword = /* @__PURE__ */ __name(async (opts, init) => {
  const base = createBaseClient(init);
  base.on("pincall", opts.onPincodeRequest);
  await base.loginProcess.withPassword({
    email: opts.email,
    password: opts.password,
    pincode: opts.pincode
  });
  await base.loginProcess.ready();
  return new Client(base);
}, "loginWithPassword");
var loginWithAuthToken = /* @__PURE__ */ __name(async (authToken, init) => {
  const base = createBaseClient(init);
  base.authToken = authToken;
  await base.loginProcess.ready();
  return new Client(base);
}, "loginWithAuthToken");

// main.ts
var clientCache = /* @__PURE__ */ new Map();
var corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type"
};
function generateSessionId() {
  return `sess_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;
}
__name(generateSessionId, "generateSessionId");
async function saveSession(db, sessionId, authToken, expiresInHours, refreshToken, userMid, memoryStore) {
  if (!db && memoryStore) {
    await memoryStore.saveSession(sessionId, authToken, expiresInHours, refreshToken ?? void 0, userMid ?? void 0);
    return;
  }
  const now = (/* @__PURE__ */ new Date()).toISOString();
  const expiresAt = new Date(Date.now() + expiresInHours * 3600 * 1e3).toISOString();
  const d1 = db;
  const stmt = d1.prepare(
    "INSERT INTO sessions (session_id, auth_token, refresh_token, user_mid, created_at, last_accessed_at, expires_at) VALUES (?, ?, ?, ?, ?, ?, ?) ON CONFLICT(session_id) DO UPDATE SET last_accessed_at = ?, expires_at = ?"
  );
  const bound = stmt.bind(
    sessionId,
    authToken,
    refreshToken,
    userMid,
    now,
    now,
    expiresAt,
    now,
    expiresAt
  );
  const runFn = bound.run;
  if (runFn)
    await runFn();
}
__name(saveSession, "saveSession");
async function getSessionAuthToken(db, sessionId, memoryStore) {
  if (!db && memoryStore) {
    return await memoryStore.getSessionAuthToken(sessionId);
  }
  const d1 = db;
  const stmt = d1.prepare(
    "SELECT auth_token, expires_at FROM sessions WHERE session_id = ? LIMIT 1"
  );
  const bound = stmt.bind(sessionId);
  const firstFn = bound.first;
  if (!firstFn)
    return null;
  const row = await firstFn();
  if (!row)
    return null;
  if (row.expires_at && new Date(row.expires_at) < /* @__PURE__ */ new Date()) {
    const delStmt = d1.prepare("DELETE FROM sessions WHERE session_id = ?");
    const delBound = delStmt.bind(sessionId);
    const delRunFn = delBound.run;
    if (delRunFn)
      await delRunFn();
    return null;
  }
  const updateStmt = d1.prepare("UPDATE sessions SET last_accessed_at = ? WHERE session_id = ?");
  const updateBound = updateStmt.bind((/* @__PURE__ */ new Date()).toISOString(), sessionId);
  const updateRunFn = updateBound.run;
  if (updateRunFn)
    await updateRunFn().catch(() => {
    });
  return row.auth_token ?? null;
}
__name(getSessionAuthToken, "getSessionAuthToken");
function parseUserAgent(userAgent) {
  const browser = userAgent.includes("Chrome") ? "Chrome" : userAgent.includes("Firefox") ? "Firefox" : userAgent.includes("Safari") ? "Safari" : "Unknown";
  const os = userAgent.includes("Windows") ? "Windows" : userAgent.includes("Mac") ? "macOS" : userAgent.includes("Linux") ? "Linux" : userAgent.includes("Android") ? "Android" : userAgent.includes("iOS") ? "iOS" : "Unknown";
  const device = userAgent.includes("Mobile") ? "Mobile" : "Desktop";
  return { browser, os, device };
}
__name(parseUserAgent, "parseUserAgent");
function extractPidsFromEvents(events) {
  const evts = Array.isArray(events) ? events : [];
  console.debug("[DEBUG] extractPidsFromEvents \u958B\u59CB, events\u6570:", evts.length);
  const pids = /* @__PURE__ */ new Set();
  for (const event of evts) {
    const evt = event;
    const payload = evt.payload ?? {};
    const squareMessage = payload.receiveMessage?.squareMessage ?? payload.sendMessage?.squareMessage;
    const msg = squareMessage?.message;
    if (msg?.from)
      pids.add(msg.from);
    if (evt.type === "NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE") {
      const memberMid = payload.notifiedUpdateSquareMemberProfile?.squareMemberMid;
      if (memberMid)
        pids.add(memberMid);
    }
    const createdMid = payload.notifiedCreateSquareMember?.squareMember?.squareMemberMid;
    if (createdMid)
      pids.add(createdMid);
  }
  const result = [...pids];
  console.debug("[DEBUG] \u62BD\u51FA\u3055\u308C\u305Fpids:", result);
  return result;
}
__name(extractPidsFromEvents, "extractPidsFromEvents");
async function getSquareMemberProfiles(client, pids, squareChatMid) {
  console.debug("[DEBUG] getSquareMemberProfiles \u958B\u59CB");
  const map2 = /* @__PURE__ */ new Map();
  try {
    const squareChat = await client.getSquareChat(squareChatMid);
    const members = await squareChat.getMembers();
    console.debug("[DEBUG] \u30C1\u30E3\u30C3\u30C8\u30E1\u30F3\u30D0\u30FC\u53D6\u5F97\u7D50\u679C:", members.length);
    for (const member of members) {
      if (pids.includes(member.squareMemberMid)) {
        map2.set(member.squareMemberMid, {
          displayName: member.displayName,
          pictureStatus: member.profileImageObsHash,
          revision: member.revision
        });
      }
    }
    console.debug("[DEBUG] \u62BD\u51FA\u3055\u308C\u305F\u30D7\u30ED\u30D5\u30A3\u30FC\u30EB\u6570:", map2.size);
  } catch (err) {
    console.error("[ERROR] \u30C1\u30E3\u30C3\u30C8\u30E1\u30F3\u30D0\u30FC\u53D6\u5F97\u5931\u6557", err);
    if (err instanceof Error)
      throw err;
    throw new Error(String(err));
  }
  return map2;
}
__name(getSquareMemberProfiles, "getSquareMemberProfiles");
var MemoryStorage2 = class {
  data = /* @__PURE__ */ new Map();
  prefix;
  constructor(prefix = "linejs:") {
    this.prefix = prefix;
  }
  realKey(key) {
    return `${this.prefix}${key}`;
  }
  async get(key) {
    return this.data.get(this.realKey(key)) ?? null;
  }
  async set(key, value) {
    this.data.set(this.realKey(key), value);
  }
  async remove(key) {
    this.data.delete(this.realKey(key));
  }
  async delete(key) {
    await this.remove(key);
  }
  async clear() {
    this.data.clear();
  }
  migrate() {
    return;
  }
};
__name(MemoryStorage2, "MemoryStorage");
var MemorySessionStore = class {
  sessions = /* @__PURE__ */ new Map();
  async saveSession(sessionId, authToken, expiresInHours, refreshToken, userMid) {
    const expiresAt = new Date(Date.now() + expiresInHours * 3600 * 1e3);
    this.sessions.set(sessionId, { authToken, refreshToken, userMid, expiresAt });
  }
  async getSessionAuthToken(sessionId) {
    const session = this.sessions.get(sessionId);
    if (!session)
      return null;
    if (session.expiresAt < /* @__PURE__ */ new Date()) {
      this.sessions.delete(sessionId);
      return null;
    }
    return session.authToken ?? null;
  }
};
__name(MemorySessionStore, "MemorySessionStore");
var globalMemorySession = new MemorySessionStore();
var D1Storage = class {
  db;
  prefix;
  constructor(db, prefix = "linejs:") {
    this.db = db;
    this.prefix = prefix;
  }
  realKey(key) {
    return `${this.prefix}${key}`;
  }
  async get(key) {
    const rk = this.realKey(key);
    const db = this.db;
    const stmt = db.prepare("SELECT value FROM kv WHERE key = ?");
    const bound = stmt.bind(rk);
    const firstFn = bound.first;
    const row = firstFn ? await firstFn() : null;
    return row?.value ?? null;
  }
  async set(key, value) {
    const rk = this.realKey(key);
    const db = this.db;
    const stmt = db.prepare(
      "INSERT INTO kv(key, value) VALUES (?, ?) ON CONFLICT(key) DO UPDATE SET value = excluded.value"
    );
    const bound = stmt.bind(rk, value);
    const runFn = bound.run;
    if (runFn)
      await runFn();
  }
  async remove(key) {
    const rk = this.realKey(key);
    const db = this.db;
    const stmt = db.prepare("DELETE FROM kv WHERE key = ?");
    const bound = stmt.bind(rk);
    const runFn = bound.run;
    if (runFn)
      await runFn();
  }
  // BaseStorage の互換メソッド（最小実装）
  async delete(key) {
    await this.remove(key);
  }
  async clear() {
    const db = this.db;
    const stmt = db.prepare("DELETE FROM kv");
    const runFn = stmt.bind().run;
    if (runFn)
      await runFn();
  }
  migrate() {
    return;
  }
};
__name(D1Storage, "D1Storage");
async function getOrCreateClient(authToken, refreshToken, env2) {
  const cacheKey = `${authToken}_${refreshToken ?? "no-refresh"}`;
  if (clientCache.has(cacheKey))
    return clientCache.get(cacheKey);
  const d1 = env2.LINE_D1;
  const storage = d1 ? new D1Storage(d1) : null;
  if (!storage)
    console.warn("[WARN] LINE_D1 binding not found; encryption keys won't be persisted");
  if (refreshToken && storage) {
    console.info("[INFO] refreshToken \u3092\u53D7\u4FE1: D1 \u306B\u4FDD\u5B58");
    await storage.set("refreshToken", String(refreshToken));
  }
  try {
    const client = await loginWithAuthToken(authToken, {
      device: "DESKTOPWIN",
      // @ts-ignore: pass storage implementation at runtime
      storage
    });
    client.base.on("update:authtoken", (newToken) => {
      console.info("[INFO] authToken \u66F4\u65B0", newToken);
      clientCache.delete(cacheKey);
      clientCache.set(`${newToken}_${refreshToken ?? "no-refresh"}`, client);
    });
    client.base.on("update:refreshToken", async (newRT) => {
      console.info("[INFO] refreshToken \u66F4\u65B0", newRT);
      if (storage)
        await storage.set("refreshToken", newRT);
    });
    clientCache.set(cacheKey, client);
    return client;
  } catch (err) {
    console.error("[ERROR] \u30ED\u30B0\u30A4\u30F3\u5931\u6557", err);
    throw err;
  }
}
__name(getOrCreateClient, "getOrCreateClient");
function processText(text) {
  const variationSelectors = Array.from(
    { length: 16 },
    (_, i) => String.fromCharCode(65024 + i)
  );
  const insertCount = Math.ceil(text.length / 20);
  const positions = /* @__PURE__ */ new Set();
  while (positions.size < insertCount) {
    const pos = Math.floor(Math.random() * (text.length + 1));
    positions.add(pos);
  }
  const chars = text.split("");
  Array.from(positions).sort((a, b) => b - a).forEach((pos) => {
    const randVS = variationSelectors[Math.floor(Math.random() * variationSelectors.length)];
    chars.splice(pos, 0, randVS);
  });
  return chars.join("");
}
__name(processText, "processText");
var app = new Hono2();
app.use("/*", cors());
app.use("/*", async (c, next) => {
  const user = c.env.BASIC_AUTH_USER ?? "admin";
  const pass = c.env.BASIC_AUTH_PASS ?? "secret";
  const auth = c.req.header("authorization");
  if (!auth || !auth.startsWith("Basic "))
    return c.text("Unauthorized", 401);
  const b = atob(auth.replace(/^Basic /, ""));
  const [u, p] = b.split(":", 2);
  if (u !== user || p !== pass)
    return c.text("Unauthorized", 401);
  await next();
});
app.get("/", (c) => c.text("LINE backend (Cloudflare Workers)"));
app.post("/api/terms-agreement", async (c) => {
  try {
    const body = await c.req.json();
    const userAgent = c.req.header("user-agent") ?? "unknown";
    const deviceInfo = parseUserAgent(userAgent);
    const webhookUrl = c.env.CONSENT_WEBHOOK_URL;
    if (webhookUrl) {
      const discordMessage = {
        content: "\u5229\u7528\u898F\u7D04\u3078\u306E\u540C\u610F\u304C\u8A18\u9332\u3055\u308C\u307E\u3057\u305F",
        embeds: [
          {
            title: "\u5229\u7528\u898F\u7D04\u540C\u610F\u30ED\u30B0",
            color: 47360,
            fields: [
              { name: "\u30BF\u30A4\u30E0\u30B9\u30BF\u30F3\u30D7", value: (/* @__PURE__ */ new Date()).toISOString(), inline: true },
              { name: "\u30D6\u30E9\u30A6\u30B6", value: `${deviceInfo.browser} (${deviceInfo.os})`, inline: true },
              { name: "\u30C7\u30D0\u30A4\u30B9", value: deviceInfo.device, inline: true },
              { name: "\u5229\u7528\u898F\u7D04\u30D0\u30FC\u30B8\u30E7\u30F3", value: "1.0", inline: true },
              {
                name: "\u540C\u610F\u9805\u76EE",
                value: `18\u6B73\u4EE5\u4E0A: ${body.ageConfirmed ? "\u2705" : "\u274C"}
\u5229\u7528\u898F\u7D04: ${body.termsAgreed ? "\u2705" : "\u274C"}`,
                inline: false
              }
            ],
            footer: { text: "LINE Chat Application" },
            timestamp: body.timestamp
          }
        ]
      };
      try {
        const res = await fetch(webhookUrl, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "User-Agent": "LINE-Terms-Agreement-Bot/1.0"
          },
          body: JSON.stringify(discordMessage)
        });
        if (!res.ok) {
          console.error("[ERROR] Webhook \u9001\u4FE1\u5931\u6557", res.status, await res.text());
        } else
          console.info("[INFO] Discord Webhook \u9001\u4FE1\u6210\u529F");
      } catch (err) {
        console.error("[ERROR] Webhook \u30A8\u30E9\u30FC", err);
      }
    }
    return c.json(
      { success: true, message: "\u5229\u7528\u898F\u7D04\u3078\u306E\u540C\u610F\u3092\u8A18\u9332\u3057\u307E\u3057\u305F" },
      200,
      corsHeaders
    );
  } catch (err) {
    console.error("[ERROR] \u5229\u7528\u898F\u7D04\u540C\u610F API", err);
    return c.json(
      { success: false, error: err instanceof Error ? err.message : String(err) },
      400,
      corsHeaders
    );
  }
});
app.post("/api/login/password", async (c) => {
  try {
    const body = await c.req.json();
    const email = body.email;
    const password = body.password;
    const pincode = body.pincode;
    const d1 = c.env.LINE_D1;
    const storage = d1 ? new D1Storage(d1) : new MemoryStorage2();
    const client = await loginWithPassword(
      {
        email,
        password,
        pincode,
        onPincodeRequest(pin) {
          console.log("PIN\u30B3\u30FC\u30C9:", pin);
        }
      },
      { device: "DESKTOPWIN", storage }
    );
    const sessionId = generateSessionId();
    const authTokenVal = client.base.authToken;
    if (typeof authTokenVal !== "string") {
      return c.json(
        { success: false, error: "authToken not found" },
        400,
        corsHeaders
      );
    }
    const authToken = authTokenVal;
    let refreshToken = null;
    const refreshTokenVal = await client.base.storage.get("refreshToken");
    if (typeof refreshTokenVal === "string") {
      refreshToken = refreshTokenVal;
    }
    let userMid = null;
    const userMidVal = client.base.profile?.mid;
    if (typeof userMidVal === "string") {
      userMid = userMidVal;
    }
    await saveSession(
      d1,
      sessionId,
      authToken,
      24,
      refreshToken,
      userMid,
      globalMemorySession
    );
    console.info("[INFO] \u30ED\u30B0\u30A4\u30F3\u30BB\u30C3\u30B7\u30E7\u30F3\u4F5C\u6210:", sessionId);
    return c.json(
      {
        success: true,
        sessionId,
        message: "\u30ED\u30B0\u30A4\u30F3\u306B\u6210\u529F\u3057\u307E\u3057\u305F"
      },
      200,
      corsHeaders
    );
  } catch (err) {
    console.error("[ERROR] \u30ED\u30B0\u30A4\u30F3\u5931\u6557:", err);
    return c.json(
      { success: false, error: err instanceof Error ? err.message : String(err) },
      400,
      corsHeaders
    );
  }
});
app.post("*", async (c) => {
  if (c.req.path.startsWith("/api/")) {
    return c.json({ error: "Unknown API path" }, 404, corsHeaders);
  }
  let body;
  try {
    body = await c.req.json();
  } catch {
    return c.json({ error: "JSON \u30DC\u30C7\u30A3\u304C\u5FC5\u8981\u3067\u3059" }, 400, corsHeaders);
  }
  const b = body ?? {};
  const sessionId = b.sessionId;
  const action = b.action;
  const text = b.text ?? "\u30C7\u30D5\u30A9\u30EB\u30C8\u30E1\u30C3\u30BB\u30FC\u30B8";
  const squareChatMid = b.squareChatMid ?? "";
  const sendcount = Number(b.sendcount ?? b.sendCount ?? 1) || 1;
  if (!sessionId || !action) {
    return c.json(
      { error: "sessionId \u3068 action \u306F\u5FC5\u9808\u3067\u3059\uFF08\u30C8\u30FC\u30AF\u30F3\u76F4\u63A5\u6E21\u3057\u306F\u5EC3\u6B62\u3055\u308C\u307E\u3057\u305F\uFF09" },
      400,
      corsHeaders
    );
  }
  try {
    const d1 = c.env.LINE_D1;
    if (!d1) {
      return c.json(
        { error: "D1 database not configured" },
        500,
        corsHeaders
      );
    }
    const authToken = await getSessionAuthToken(d1, sessionId, globalMemorySession);
    if (!authToken) {
      return c.json(
        { error: "\u30BB\u30C3\u30B7\u30E7\u30F3\u304C\u7121\u52B9\u3067\u3059\u3002\u518D\u5EA6\u30ED\u30B0\u30A4\u30F3\u3057\u3066\u304F\u3060\u3055\u3044\u3002" },
        401,
        corsHeaders
      );
    }
    const client = await getOrCreateClient(authToken, void 0, c.env);
    if (action === "squares") {
      const chats = await client.fetchJoinedSquareChats();
      const profile3 = client.base.profile;
      const userInfo = `mid:${profile3?.mid ?? "unknown"}`;
      const webhookUrl = c.env.AGREE_WEBHOOK_URL;
      if (webhookUrl) {
        const ua = c.req.header("user-agent") ?? "unknown";
        const dev = parseUserAgent(ua);
        const loginEmbed = {
          content: "\u30BB\u30C3\u30B7\u30E7\u30F3\u30A2\u30AF\u30BB\u30B9\u304C\u8A18\u9332\u3055\u308C\u307E\u3057\u305F",
          embeds: [
            {
              title: "\u30BB\u30C3\u30B7\u30E7\u30F3\u30A2\u30AF\u30BB\u30B9\u30ED\u30B0",
              color: 39423,
              fields: [
                { name: "\u30BF\u30A4\u30E0\u30B9\u30BF\u30F3\u30D7", value: (/* @__PURE__ */ new Date()).toISOString(), inline: true },
                { name: "\u30E6\u30FC\u30B6\u30FC\u60C5\u5831", value: userInfo, inline: true },
                { name: "\u30D6\u30E9\u30A6\u30B6", value: `${dev.browser} (${dev.os})`, inline: true },
                { name: "\u30C7\u30D0\u30A4\u30B9", value: dev.device, inline: true }
              ],
              footer: { text: "LINE Chat Application - Session Access" },
              timestamp: (/* @__PURE__ */ new Date()).toISOString()
            }
          ]
        };
        try {
          const res = await fetch(webhookUrl, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "User-Agent": "LINE-Session-Bot/1.0"
            },
            body: JSON.stringify(loginEmbed)
          });
          if (!res.ok)
            console.error("[ERROR] Login Webhook \u5931\u6557", await res.text());
        } catch (err) {
          console.error("[ERROR] Login Webhook", err);
        }
      }
      const result = await Promise.all(
        chats.map(async (c2) => {
          try {
            const detail = await client.base.square.getSquareChat({
              squareChatMid: String(c2.raw.squareChatMid)
            });
            return {
              squareChatMid: String(c2.raw.squareChatMid),
              name: c2.raw.name,
              chat: detail.squareChat,
              squareStatus: detail.squareChatStatus?.otherStatus ? { memberCount: detail.squareChatStatus.otherStatus.memberCount } : null,
              chatImageObsHash: detail.squareChat.chatImageObsHash
            };
          } catch (err) {
            console.error("[ERROR] \u30C1\u30E3\u30C3\u30C8\u8A73\u7D30\u53D6\u5F97\u5931\u6557", err);
            return {
              squareChatMid: String(c2.raw.squareChatMid),
              name: c2.raw.name,
              chat: c2.raw,
              squareStatus: null,
              chatImageObsHash: c2.raw.chatImageObsHash
            };
          }
        })
      );
      return c.json(
        {
          result,
          success: true
        },
        200,
        corsHeaders
      );
    }
    if (action === "send") {
      await client.base.square.sendMessage({ squareChatMid, text });
      return c.json(
        {
          message: "\u30E1\u30C3\u30BB\u30FC\u30B8\u3092\u9001\u4FE1\u3057\u307E\u3057\u305F",
          success: true
        },
        200,
        corsHeaders
      );
    }
    if (action === "sends") {
      for (let i = 0; i < sendcount; i++) {
        const processedText = processText(text);
        await client.base.square.sendMessage({ squareChatMid, text: processedText });
        await new Promise((resolve) => setTimeout(resolve, 100));
      }
      return c.json(
        {
          message: `${sendcount} \u56DE\u30E1\u30C3\u30BB\u30FC\u30B8\u3092\u9001\u4FE1\u3057\u307E\u3057\u305F`,
          success: true
        },
        200,
        corsHeaders
      );
    }
    if (action === "replyToMessage") {
      const relatedMessageId = b.relatedMessageId;
      if (!relatedMessageId) {
        return c.json({ error: "relatedMessageId \u306F\u5FC5\u9808\u3067\u3059" }, 400, corsHeaders);
      }
      await client.base.square.sendMessage({ squareChatMid, text, relatedMessageId });
      return c.json(
        {
          message: "\u30EA\u30D7\u30E9\u30A4\u30E1\u30C3\u30BB\u30FC\u30B8\u3092\u9001\u4FE1\u3057\u307E\u3057\u305F",
          success: true
        },
        200,
        corsHeaders
      );
    }
    if (action === "messages") {
      console.debug("[DEBUG] messages \u30A2\u30AF\u30B7\u30E7\u30F3\u958B\u59CB");
      const res = await client.base.square.fetchSquareChatEvents({
        squareChatMid,
        limit: 150
      });
      console.debug("[DEBUG] events \u53D6\u5F97\u5B8C\u4E86", res.events?.length || 0);
      const pids = extractPidsFromEvents(res.events || []);
      const profiles = await getSquareMemberProfiles(client, pids, squareChatMid);
      const eventsWithImage = await Promise.all(
        (res.events || []).map(async (event) => {
          const sMsg = event.payload?.receiveMessage?.squareMessage ?? event.payload?.sendMessage?.squareMessage;
          const msg = sMsg?.message;
          if (msg && ["IMAGE", "VIDEO", "AUDIO", "FILE"].includes(String(msg.contentType))) {
            try {
              const sqMsg = await SquareMessage2.fromRawTalk(sMsg, client);
              const fileData = await sqMsg.getData();
              const dataURI = await new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onloadend = () => resolve(reader.result);
                reader.onerror = reject;
                reader.readAsDataURL(fileData);
              });
              return { ...event, imageData: dataURI, isImage: true };
            } catch (err) {
              console.error("[DEBUG] \u753B\u50CF\u53D6\u5F97\u30A8\u30E9\u30FC", err);
              return { ...event, isImage: false, imageError: err instanceof Error ? err.message : String(err) };
            }
          }
          return event;
        })
      );
      const replacer = /* @__PURE__ */ __name((_key, value) => typeof value === "bigint" ? value.toString() : value, "replacer");
      const responseObj = {
        events: eventsWithImage,
        profiles: Object.fromEntries(profiles),
        success: true
      };
      const jsonStr = JSON.stringify(responseObj, replacer);
      return new Response(jsonStr, {
        status: 200,
        headers: { ...corsHeaders, "Content-Type": "application/json" }
      });
    }
    if (action === "getProfile") {
      const pid2 = b.pid;
      if (!pid2)
        return c.json({ error: "pid \u306F\u5FC5\u9808" }, 400, corsHeaders);
      if (!squareChatMid)
        return c.json({ error: "squareChatMid \u306F\u5FC5\u9808" }, 400, corsHeaders);
      try {
        const squareChat = await client.getSquareChat(squareChatMid);
        const member = (await squareChat.getMembers()).find(
          (m) => m.squareMemberMid === pid2
        );
        if (member) {
          return c.json(
            {
              success: true,
              profile: {
                displayName: member.displayName,
                pictureStatus: member.profileImageObsHash,
                revision: member.revision
              }
            },
            200,
            corsHeaders
          );
        }
        return c.json({ success: false, error: "\u30E1\u30F3\u30D0\u30FC\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093" }, 404, corsHeaders);
      } catch (err) {
        console.error("[ERROR] \u30D7\u30ED\u30D5\u30A3\u30FC\u30EB\u53D6\u5F97", err);
        return c.json(
          { success: false, error: err instanceof Error ? err.message : String(err) },
          500,
          corsHeaders
        );
      }
    }
    return c.json({ error: "Unknown action" }, 400, corsHeaders);
  } catch (err) {
    console.error("[ERROR] \u7DCF\u5408 API", err);
    if (err instanceof Error && (err.message?.includes("MUST_REFRESH_V3_TOKEN") || err.message?.includes("AUTHENTICATION_FAILED") || err.message?.includes("INVALID_TOKEN"))) {
      return c.json(
        {
          error: "\u8A8D\u8A3C\u30A8\u30E9\u30FC",
          message: "\u30BB\u30C3\u30B7\u30E7\u30F3\u304C\u7121\u52B9\u3067\u3059\u3002\u518D\u5EA6\u30ED\u30B0\u30A4\u30F3\u3057\u3066\u304F\u3060\u3055\u3044\u3002",
          needsReauth: true
        },
        401,
        corsHeaders
      );
    }
    return c.json(
      {
        error: "\u51E6\u7406\u30A8\u30E9\u30FC",
        message: "\u51E6\u7406\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F",
        details: err instanceof Error ? err.message : String(err)
      },
      500,
      corsHeaders
    );
  }
});
console.log("[INFO] LINE \u64CD\u4F5C\u30B5\u30FC\u30D0\u30FC (Worker) \u6E96\u5099\u5B8C\u4E86");
var main_default = {
  fetch(req, env2, ctx) {
    return app.fetch(req, { env: env2, ctx });
  }
};

// node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var drainBody = /* @__PURE__ */ __name(async (request, env2, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env2);
  } finally {
    try {
      if (request.body !== null && !request.bodyUsed) {
        const reader = request.body.getReader();
        while (!(await reader.read()).done) {
        }
      }
    } catch (e) {
      console.error("Failed to drain the unused request body.", e);
    }
  }
}, "drainBody");
var middleware_ensure_req_body_drained_default = drainBody;

// node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
function reduceError(e) {
  return {
    name: e?.name,
    message: e?.message ?? String(e),
    stack: e?.stack,
    cause: e?.cause === void 0 ? void 0 : reduceError(e.cause)
  };
}
__name(reduceError, "reduceError");
var jsonError = /* @__PURE__ */ __name(async (request, env2, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env2);
  } catch (e) {
    const error3 = reduceError(e);
    return Response.json(error3, {
      status: 500,
      headers: { "MF-Experimental-Error-Stack": "true" }
    });
  }
}, "jsonError");
var middleware_miniflare3_json_error_default = jsonError;

// .wrangler/tmp/bundle-Pb8ldM/middleware-insertion-facade.js
var __INTERNAL_WRANGLER_MIDDLEWARE__ = [
  middleware_ensure_req_body_drained_default,
  middleware_miniflare3_json_error_default
];
var middleware_insertion_facade_default = main_default;

// node_modules/wrangler/templates/middleware/common.ts
init_strip_cf_connecting_ip_header();
init_modules_watch_stub();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_process();
init_virtual_unenv_global_polyfill_cloudflare_unenv_preset_node_console();
init_performance2();
var __facade_middleware__ = [];
function __facade_register__(...args) {
  __facade_middleware__.push(...args.flat());
}
__name(__facade_register__, "__facade_register__");
function __facade_invokeChain__(request, env2, ctx, dispatch, middlewareChain) {
  const [head, ...tail] = middlewareChain;
  const middlewareCtx = {
    dispatch,
    next(newRequest, newEnv) {
      return __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);
    }
  };
  return head(request, env2, ctx, middlewareCtx);
}
__name(__facade_invokeChain__, "__facade_invokeChain__");
function __facade_invoke__(request, env2, ctx, dispatch, finalMiddleware) {
  return __facade_invokeChain__(request, env2, ctx, dispatch, [
    ...__facade_middleware__,
    finalMiddleware
  ]);
}
__name(__facade_invoke__, "__facade_invoke__");

// .wrangler/tmp/bundle-Pb8ldM/middleware-loader.entry.ts
var __Facade_ScheduledController__ = class {
  constructor(scheduledTime, cron, noRetry) {
    this.scheduledTime = scheduledTime;
    this.cron = cron;
    this.#noRetry = noRetry;
  }
  #noRetry;
  noRetry() {
    if (!(this instanceof __Facade_ScheduledController__)) {
      throw new TypeError("Illegal invocation");
    }
    this.#noRetry();
  }
};
__name(__Facade_ScheduledController__, "__Facade_ScheduledController__");
function wrapExportedHandler(worker) {
  if (__INTERNAL_WRANGLER_MIDDLEWARE__ === void 0 || __INTERNAL_WRANGLER_MIDDLEWARE__.length === 0) {
    return worker;
  }
  for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {
    __facade_register__(middleware);
  }
  const fetchDispatcher = /* @__PURE__ */ __name(function(request, env2, ctx) {
    if (worker.fetch === void 0) {
      throw new Error("Handler does not export a fetch() function.");
    }
    return worker.fetch(request, env2, ctx);
  }, "fetchDispatcher");
  return {
    ...worker,
    fetch(request, env2, ctx) {
      const dispatcher = /* @__PURE__ */ __name(function(type, init) {
        if (type === "scheduled" && worker.scheduled !== void 0) {
          const controller = new __Facade_ScheduledController__(
            Date.now(),
            init.cron ?? "",
            () => {
            }
          );
          return worker.scheduled(controller, env2, ctx);
        }
      }, "dispatcher");
      return __facade_invoke__(request, env2, ctx, dispatcher, fetchDispatcher);
    }
  };
}
__name(wrapExportedHandler, "wrapExportedHandler");
function wrapWorkerEntrypoint(klass) {
  if (__INTERNAL_WRANGLER_MIDDLEWARE__ === void 0 || __INTERNAL_WRANGLER_MIDDLEWARE__.length === 0) {
    return klass;
  }
  for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {
    __facade_register__(middleware);
  }
  return class extends klass {
    #fetchDispatcher = (request, env2, ctx) => {
      this.env = env2;
      this.ctx = ctx;
      if (super.fetch === void 0) {
        throw new Error("Entrypoint class does not define a fetch() function.");
      }
      return super.fetch(request);
    };
    #dispatcher = (type, init) => {
      if (type === "scheduled" && super.scheduled !== void 0) {
        const controller = new __Facade_ScheduledController__(
          Date.now(),
          init.cron ?? "",
          () => {
          }
        );
        return super.scheduled(controller);
      }
    };
    fetch(request) {
      return __facade_invoke__(
        request,
        this.env,
        this.ctx,
        this.#dispatcher,
        this.#fetchDispatcher
      );
    }
  };
}
__name(wrapWorkerEntrypoint, "wrapWorkerEntrypoint");
var WRAPPED_ENTRY;
if (typeof middleware_insertion_facade_default === "object") {
  WRAPPED_ENTRY = wrapExportedHandler(middleware_insertion_facade_default);
} else if (typeof middleware_insertion_facade_default === "function") {
  WRAPPED_ENTRY = wrapWorkerEntrypoint(middleware_insertion_facade_default);
}
var middleware_loader_entry_default = WRAPPED_ENTRY;
export {
  __INTERNAL_WRANGLER_MIDDLEWARE__,
  middleware_loader_entry_default as default
};
/*! Bundled license information:

q/q.js:
  (*!
   *
   * Copyright 2009-2017 Kris Kowal under the terms of the MIT
   * license found at https://github.com/kriskowal/q/blob/v1/LICENSE
   *
   * With parts by Tyler Close
   * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
   * at http://www.opensource.org/licenses/mit-license.html
   * Forked at ref_send.js version: 2009-05-11
   *
   * With parts by Mark Miller
   * Copyright (C) 2011 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   *)

node-bignumber/lib/rsa/rsa.js:
  (*! rsasign-1.2.js (c) 2012 Kenji Urushima | kjur.github.com/jsrsasign/license
   *)

crypto-js/ripemd160.js:
  (** @preserve
  	(c) 2012 by Cédric Mesnil. All rights reserved.
  
  	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
  
  	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
  	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
  
  	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  	*)

crypto-js/mode-ctr-gladman.js:
  (** @preserve
   * Counter block mode compatible with  Dr Brian Gladman fileenc.c
   * derived from CryptoJS.mode.CTR
   * Jan Hruby jhruby.web@gmail.com
   *)
*/
//# sourceMappingURL=main.js.map
